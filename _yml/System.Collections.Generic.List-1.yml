### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.List`1
  id: List`1
  children:
  - System.Collections.Generic.List`1.#ctor
  - System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable`1)
  - System.Collections.Generic.List`1.#ctor(System.Int32)
  - System.Collections.Generic.List`1.Add(`0)
  - System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable`1)
  - System.Collections.Generic.List`1.AsReadOnly
  - System.Collections.Generic.List`1.BinarySearch(`0)
  - System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer`1)
  - System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer`1)
  - System.Collections.Generic.List`1.Capacity
  - System.Collections.Generic.List`1.Clear
  - System.Collections.Generic.List`1.Contains(`0)
  - System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,`0Output})
  - System.Collections.Generic.List`1.CopyTo(`0[])
  - System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Count
  - System.Collections.Generic.List`1.Exists(System.Predicate`1)
  - System.Collections.Generic.List`1.Find(System.Predicate`1)
  - System.Collections.Generic.List`1.FindAll(System.Predicate`1)
  - System.Collections.Generic.List`1.FindIndex(System.Predicate`1)
  - System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate`1)
  - System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate`1)
  - System.Collections.Generic.List`1.FindLast(System.Predicate`1)
  - System.Collections.Generic.List`1.FindLastIndex(System.Predicate`1)
  - System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate`1)
  - System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate`1)
  - System.Collections.Generic.List`1.ForEach(System.Action`1)
  - System.Collections.Generic.List`1.GetEnumerator
  - System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  - System.Collections.Generic.List`1.IndexOf(`0)
  - System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  - System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Insert(System.Int32,`0)
  - System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable`1)
  - System.Collections.Generic.List`1.Item(System.Int32)
  - System.Collections.Generic.List`1.LastIndexOf(`0)
  - System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  - System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Remove(`0)
  - System.Collections.Generic.List`1.RemoveAll(System.Predicate`1)
  - System.Collections.Generic.List`1.RemoveAt(System.Int32)
  - System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Reverse
  - System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Sort
  - System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer`1)
  - System.Collections.Generic.List`1.Sort(System.Comparison`1)
  - System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer`1)
  - System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  - System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  - System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  - System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  - System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  - System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  - System.Collections.Generic.List`1.ToArray
  - System.Collections.Generic.List`1.TrimExcess
  - System.Collections.Generic.List`1.TrueForAll(System.Predicate`1)
  langs:
  - csharp
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  type: Class
  summary: To be added.
  remarks: To be added.
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_CollectionDebugView`1))]

      public class List<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IList<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IReadOnlyList<T>, System.Collections.IList
    typeParameters:
    - id: T
      description: To be added.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection<T>
  - System.Collections.Generic.IEnumerable<T>
  - System.Collections.Generic.IList<T>
  - System.Collections.Generic.IReadOnlyCollection<T>
  - System.Collections.Generic.IReadOnlyList<T>
  - System.Collections.IList
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: List()
  nameWithType: List<T>.List()
  fullName: System.Collections.Generic.List<T>.List()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public List ();
    parameters: []
  overload: System.Collections.Generic.List`1.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable`1)
  id: '#ctor(System.Collections.Generic.IEnumerable`1)'
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: List(IEnumerable<T>)
  nameWithType: List<T>.List(IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.List(IEnumerable<T>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public List (System.Collections.Generic.IEnumerable<T> collection);
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: System.Collections.Generic.List`1.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: List(Int32)
  nameWithType: List<T>.List(Int32)
  fullName: System.Collections.Generic.List<T>.List(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public List (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Add(T)
  nameWithType: List<T>.Add(T)
  fullName: System.Collections.Generic.List<T>.Add(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Add (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
  overload: System.Collections.Generic.List`1.Add*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable`1)
  id: AddRange(System.Collections.Generic.IEnumerable`1)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: AddRange(IEnumerable<T>)
  nameWithType: List<T>.AddRange(IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.AddRange(IEnumerable<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void AddRange (System.Collections.Generic.IEnumerable<T> collection);
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: System.Collections.Generic.List`1.AddRange*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.AsReadOnly
  id: AsReadOnly
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: AsReadOnly()
  nameWithType: List<T>.AsReadOnly()
  fullName: System.Collections.Generic.List<T>.AsReadOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<T> AsReadOnly ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection`1
      description: To be added.
  overload: System.Collections.Generic.List`1.AsReadOnly*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.BinarySearch(`0)
  id: BinarySearch(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: BinarySearch(T)
  nameWithType: List<T>.BinarySearch(T)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int BinarySearch (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.BinarySearch*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer`1)
  id: BinarySearch(`0,System.Collections.Generic.IComparer`1)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: BinarySearch(T,IComparer<T>)
  nameWithType: List<T>.BinarySearch(T,IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T,IComparer<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int BinarySearch (T item, System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: item
      type: T
      description: To be added.
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.BinarySearch*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer`1)
  id: BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer`1)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: BinarySearch(Int32,Int32,T,IComparer<T>)
  nameWithType: List<T>.BinarySearch(Int32,Int32,T,IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(Int32,Int32,T,IComparer<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int BinarySearch (int index, int count, T item, System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
    - id: item
      type: T
      description: To be added.
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.BinarySearch*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.Capacity
  id: Capacity
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Capacity
  nameWithType: List<T>.Capacity
  fullName: System.Collections.Generic.List<T>.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int Capacity { get; set; }
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.Capacity*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.Clear
  id: Clear
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Clear()
  nameWithType: List<T>.Clear()
  fullName: System.Collections.Generic.List<T>.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.Generic.List`1.Clear*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Contains(T)
  nameWithType: List<T>.Contains(T)
  fullName: System.Collections.Generic.List<T>.Contains(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool Contains (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.List`1.Contains*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,`0Output})
  id: ConvertAll``1(System.Converter{`0,`0Output})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: ConvertAll(Converter<T,TOutput>)
  nameWithType: List<T>.ConvertAll(Converter<T,TOutput>)
  fullName: System.Collections.Generic.List<T>.ConvertAll(Converter<T,TOutput>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Collections.Generic.List<TOutput> ConvertAll<TOutput> (Converter<T,TOutput> converter);
    parameters:
    - id: converter
      type: System.Converter{T,TOutput}
      description: To be added.
    return:
      type: System.Collections.Generic.List{TOutput}
      description: To be added.
  overload: System.Collections.Generic.List`1.ConvertAll<TOutput>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.CopyTo(`0[])
  id: CopyTo(`0[])
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: CopyTo(T[])
  nameWithType: List<T>.CopyTo(T[])
  fullName: System.Collections.Generic.List<T>.CopyTo(T[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void CopyTo (T[] array);
    parameters:
    - id: array
      type: T[]
      description: To be added.
  overload: System.Collections.Generic.List`1.CopyTo*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: CopyTo(T[],Int32)
  nameWithType: List<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(T[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void CopyTo (T[] array, int arrayIndex);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: arrayIndex
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.CopyTo*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  id: CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: CopyTo(Int32,T[],Int32,Int32)
  nameWithType: List<T>.CopyTo(Int32,T[],Int32,Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(Int32,T[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void CopyTo (int index, T[] array, int arrayIndex, int count);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    - id: arrayIndex
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.CopyTo*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.Count
  id: Count
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Count
  nameWithType: List<T>.Count
  fullName: System.Collections.Generic.List<T>.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.Count*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.Exists(System.Predicate`1)
  id: Exists(System.Predicate`1)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Exists(Predicate<T>)
  nameWithType: List<T>.Exists(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Exists(Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool Exists (Predicate<T> match);
    parameters:
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.List`1.Exists*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.Find(System.Predicate`1)
  id: Find(System.Predicate`1)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Find(Predicate<T>)
  nameWithType: List<T>.Find(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Find(Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public T Find (Predicate<T> match);
    parameters:
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: System.Collections.Generic.List`1.Find*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.FindAll(System.Predicate`1)
  id: FindAll(System.Predicate`1)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: FindAll(Predicate<T>)
  nameWithType: List<T>.FindAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindAll(Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Collections.Generic.List<T> FindAll (Predicate<T> match);
    parameters:
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: System.Collections.Generic.List`1
      description: To be added.
  overload: System.Collections.Generic.List`1.FindAll*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.FindIndex(System.Predicate`1)
  id: FindIndex(System.Predicate`1)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: FindIndex(Predicate<T>)
  nameWithType: List<T>.FindIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int FindIndex (Predicate<T> match);
    parameters:
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.FindIndex*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate`1)
  id: FindIndex(System.Int32,System.Predicate`1)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: FindIndex(Int32,Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32,Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(Int32,Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int FindIndex (int startIndex, Predicate<T> match);
    parameters:
    - id: startIndex
      type: System.Int32
      description: To be added.
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.FindIndex*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate`1)
  id: FindIndex(System.Int32,System.Int32,System.Predicate`1)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: FindIndex(Int32,Int32,Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32,Int32,Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(Int32,Int32,Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int FindIndex (int startIndex, int count, Predicate<T> match);
    parameters:
    - id: startIndex
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.FindIndex*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.FindLast(System.Predicate`1)
  id: FindLast(System.Predicate`1)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: FindLast(Predicate<T>)
  nameWithType: List<T>.FindLast(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLast(Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public T FindLast (Predicate<T> match);
    parameters:
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: System.Collections.Generic.List`1.FindLast*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate`1)
  id: FindLastIndex(System.Predicate`1)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: FindLastIndex(Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int FindLastIndex (Predicate<T> match);
    parameters:
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.FindLastIndex*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate`1)
  id: FindLastIndex(System.Int32,System.Predicate`1)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: FindLastIndex(Int32,Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32,Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(Int32,Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int FindLastIndex (int startIndex, Predicate<T> match);
    parameters:
    - id: startIndex
      type: System.Int32
      description: To be added.
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.FindLastIndex*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate`1)
  id: FindLastIndex(System.Int32,System.Int32,System.Predicate`1)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: FindLastIndex(Int32,Int32,Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32,Int32,Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(Int32,Int32,Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int FindLastIndex (int startIndex, int count, Predicate<T> match);
    parameters:
    - id: startIndex
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.FindLastIndex*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.ForEach(System.Action`1)
  id: ForEach(System.Action`1)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: ForEach(Action<T>)
  nameWithType: List<T>.ForEach(Action<T>)
  fullName: System.Collections.Generic.List<T>.ForEach(Action<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void ForEach (Action<T> action);
    parameters:
    - id: action
      type: System.Action`1
      description: To be added.
  overload: System.Collections.Generic.List`1.ForEach*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: List<T>.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Collections.Generic.List<T>.Enumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.List`1.Enumerator
      description: To be added.
  overload: System.Collections.Generic.List`1.GetEnumerator*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  id: GetRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: GetRange(Int32,Int32)
  nameWithType: List<T>.GetRange(Int32,Int32)
  fullName: System.Collections.Generic.List<T>.GetRange(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Collections.Generic.List<T> GetRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
    return:
      type: System.Collections.Generic.List`1
      description: To be added.
  overload: System.Collections.Generic.List`1.GetRange*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: IndexOf(T)
  nameWithType: List<T>.IndexOf(T)
  fullName: System.Collections.Generic.List<T>.IndexOf(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int IndexOf (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.IndexOf*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  id: IndexOf(`0,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: IndexOf(T,Int32)
  nameWithType: List<T>.IndexOf(T,Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int IndexOf (T item, int index);
    parameters:
    - id: item
      type: T
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.IndexOf*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  id: IndexOf(`0,System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: IndexOf(T,Int32,Int32)
  nameWithType: List<T>.IndexOf(T,Int32,Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int IndexOf (T item, int index, int count);
    parameters:
    - id: item
      type: T
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.IndexOf*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Insert(Int32,T)
  nameWithType: List<T>.Insert(Int32,T)
  fullName: System.Collections.Generic.List<T>.Insert(Int32,T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Insert (int index, T item);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: item
      type: T
      description: To be added.
  overload: System.Collections.Generic.List`1.Insert*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable`1)
  id: InsertRange(System.Int32,System.Collections.Generic.IEnumerable`1)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: InsertRange(Int32,IEnumerable<T>)
  nameWithType: List<T>.InsertRange(Int32,IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.InsertRange(Int32,IEnumerable<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void InsertRange (int index, System.Collections.Generic.IEnumerable<T> collection);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: collection
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: System.Collections.Generic.List`1.InsertRange*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: List<T>.Item(Int32)
  fullName: System.Collections.Generic.List<T>.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public T this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: System.Collections.Generic.List`1.Item*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.LastIndexOf(`0)
  id: LastIndexOf(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: LastIndexOf(T)
  nameWithType: List<T>.LastIndexOf(T)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int LastIndexOf (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.LastIndexOf*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  id: LastIndexOf(`0,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: LastIndexOf(T,Int32)
  nameWithType: List<T>.LastIndexOf(T,Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int LastIndexOf (T item, int index);
    parameters:
    - id: item
      type: T
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.LastIndexOf*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  id: LastIndexOf(`0,System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: LastIndexOf(T,Int32,Int32)
  nameWithType: List<T>.LastIndexOf(T,Int32,Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int LastIndexOf (T item, int index, int count);
    parameters:
    - id: item
      type: T
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.LastIndexOf*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Remove(T)
  nameWithType: List<T>.Remove(T)
  fullName: System.Collections.Generic.List<T>.Remove(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool Remove (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.List`1.Remove*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate`1)
  id: RemoveAll(System.Predicate`1)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: RemoveAll(Predicate<T>)
  nameWithType: List<T>.RemoveAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.RemoveAll(Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int RemoveAll (Predicate<T> match);
    parameters:
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.RemoveAll*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: List<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.List<T>.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.RemoveAt*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  id: RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: RemoveRange(Int32,Int32)
  nameWithType: List<T>.RemoveRange(Int32,Int32)
  fullName: System.Collections.Generic.List<T>.RemoveRange(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void RemoveRange (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.RemoveRange*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.Reverse
  id: Reverse
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Reverse()
  nameWithType: List<T>.Reverse()
  fullName: System.Collections.Generic.List<T>.Reverse()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Reverse ();
    parameters: []
  overload: System.Collections.Generic.List`1.Reverse*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  id: Reverse(System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Reverse(Int32,Int32)
  nameWithType: List<T>.Reverse(Int32,Int32)
  fullName: System.Collections.Generic.List<T>.Reverse(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Reverse (int index, int count);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.Reverse*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.Sort
  id: Sort
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Sort()
  nameWithType: List<T>.Sort()
  fullName: System.Collections.Generic.List<T>.Sort()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Sort ();
    parameters: []
  overload: System.Collections.Generic.List`1.Sort*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer`1)
  id: Sort(System.Collections.Generic.IComparer`1)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Sort(IComparer<T>)
  nameWithType: List<T>.Sort(IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(IComparer<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Sort (System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: To be added.
  overload: System.Collections.Generic.List`1.Sort*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.Sort(System.Comparison`1)
  id: Sort(System.Comparison`1)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Sort(Comparison<T>)
  nameWithType: List<T>.Sort(Comparison<T>)
  fullName: System.Collections.Generic.List<T>.Sort(Comparison<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Sort (Comparison<T> comparison);
    parameters:
    - id: comparison
      type: System.Comparison`1
      description: To be added.
  overload: System.Collections.Generic.List`1.Sort*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer`1)
  id: Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer`1)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: Sort(Int32,Int32,IComparer<T>)
  nameWithType: List<T>.Sort(Int32,Int32,IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(Int32,Int32,IComparer<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Sort (int index, int count, System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: To be added.
  overload: System.Collections.Generic.List`1.Sort*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: System.Collections.Generic.ICollection
  nameWithType: List<T>.System.Collections.Generic.ICollection
  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.ICollection
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: bool System.Collections.Generic.ICollection<T>.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.List`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: System.Collections.Generic.IEnumerable()
  nameWithType: List<T>.System.Collections.Generic.IEnumerable()
  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: System.Collections.Generic.IEnumerator<T> IEnumerable<T>.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator`1
      description: To be added.
  overload: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: List<T>.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: void ICollection.CopyTo (Array array, int arrayIndex);
    parameters:
    - id: array
      type: System.Array
      description: To be added.
    - id: arrayIndex
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: List<T>.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: List<T>.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: To be added.
  overload: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: List<T>.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: To be added.
  overload: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: System.Collections.IList.Add(Object)
  nameWithType: List<T>.System.Collections.IList.Add(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Add(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: int IList.Add (object item);
    parameters:
    - id: item
      type: System.Object
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.System#Collections#IList#Add*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: System.Collections.IList.Contains(Object)
  nameWithType: List<T>.System.Collections.IList.Contains(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: bool IList.Contains (object item);
    parameters:
    - id: item
      type: System.Object
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.List`1.System#Collections#IList#Contains*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: List<T>.System.Collections.IList.IndexOf(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: int IList.IndexOf (object item);
    parameters:
    - id: item
      type: System.Object
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.List`1.System#Collections#IList#IndexOf*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: List<T>.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Insert(Int32,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: void IList.Insert (int index, object item);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: item
      type: System.Object
      description: To be added.
  overload: System.Collections.Generic.List`1.System#Collections#IList#Insert*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: System.Collections.IList.IsFixedSize
  nameWithType: List<T>.System.Collections.IList.IsFixedSize
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: bool System.Collections.IList.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: System.Collections.IList.IsReadOnly
  nameWithType: List<T>.System.Collections.IList.IsReadOnly
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: bool System.Collections.IList.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: System.Collections.IList.Item(Int32)
  nameWithType: List<T>.System.Collections.IList.Item(Int32)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: object System.Collections.IList.Item[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    return:
      type: System.Object
      description: To be added.
  overload: System.Collections.Generic.List`1.System#Collections#IList#Item*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: System.Collections.IList.Remove(Object)
  nameWithType: List<T>.System.Collections.IList.Remove(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: void IList.Remove (object item);
    parameters:
    - id: item
      type: System.Object
      description: To be added.
  overload: System.Collections.Generic.List`1.System#Collections#IList#Remove*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.ToArray
  id: ToArray
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: ToArray()
  nameWithType: List<T>.ToArray()
  fullName: System.Collections.Generic.List<T>.ToArray()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public T[] ToArray ();
    parameters: []
    return:
      type: T[]
      description: To be added.
  overload: System.Collections.Generic.List`1.ToArray*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.TrimExcess
  id: TrimExcess
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: TrimExcess()
  nameWithType: List<T>.TrimExcess()
  fullName: System.Collections.Generic.List<T>.TrimExcess()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void TrimExcess ();
    parameters: []
  overload: System.Collections.Generic.List`1.TrimExcess*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate`1)
  id: TrueForAll(System.Predicate`1)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  name: TrueForAll(Predicate<T>)
  nameWithType: List<T>.TrueForAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.TrueForAll(Predicate<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool TrueForAll (Predicate<T> match);
    parameters:
    - id: match
      type: System.Predicate`1
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.List`1.TrueForAll*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Collections.Generic.List`1.#ctor
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: List()
  nameWithType: List<T>.List()
  fullName: System.Collections.Generic.List<T>.List()
- uid: System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable`1)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: List(IEnumerable<T>)
  nameWithType: List<T>.List(IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.List(IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Generic.List`1.#ctor(System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: List(Int32)
  nameWithType: List<T>.List(Int32)
  fullName: System.Collections.Generic.List<T>.List(Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.List`1.Add(`0)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Add(T)
  nameWithType: List<T>.Add(T)
  fullName: System.Collections.Generic.List<T>.Add(T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable`1)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: AddRange(IEnumerable<T>)
  nameWithType: List<T>.AddRange(IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.AddRange(IEnumerable<T>)
- uid: System.Collections.Generic.List`1.AsReadOnly
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: AsReadOnly()
  nameWithType: List<T>.AsReadOnly()
  fullName: System.Collections.Generic.List<T>.AsReadOnly()
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  parent: System.Collections.ObjectModel
  isExternal: false
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
- uid: System.Collections.Generic.List`1.BinarySearch(`0)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: BinarySearch(T)
  nameWithType: List<T>.BinarySearch(T)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T)
- uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer`1)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: BinarySearch(T,IComparer<T>)
  nameWithType: List<T>.BinarySearch(T,IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T,IComparer<T>)
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
- uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer`1)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: BinarySearch(Int32,Int32,T,IComparer<T>)
  nameWithType: List<T>.BinarySearch(Int32,Int32,T,IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(Int32,Int32,T,IComparer<T>)
- uid: System.Collections.Generic.List`1.Capacity
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Capacity
  nameWithType: List<T>.Capacity
  fullName: System.Collections.Generic.List<T>.Capacity
- uid: System.Collections.Generic.List`1.Clear
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Clear()
  nameWithType: List<T>.Clear()
  fullName: System.Collections.Generic.List<T>.Clear()
- uid: System.Collections.Generic.List`1.Contains(`0)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Contains(T)
  nameWithType: List<T>.Contains(T)
  fullName: System.Collections.Generic.List<T>.Contains(T)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,`0Output})
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: ConvertAll(Converter<T,TOutput>)
  nameWithType: List<T>.ConvertAll(Converter<T,TOutput>)
  fullName: System.Collections.Generic.List<T>.ConvertAll(Converter<T,TOutput>)
- uid: System.Collections.Generic.List{TOutput}
  parent: System.Collections.Generic
  isExternal: false
  name: List<TOutput>
  nameWithType: List<TOutput>
  fullName: System.Collections.Generic.List<TOutput>
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: List<TOutput>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TOutput
    name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Converter{T,TOutput}
  parent: System
  isExternal: false
  name: Converter<T,TOutput>
  nameWithType: Converter<T,TOutput>
  fullName: System.Converter<T,TOutput>
  spec.csharp:
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: Converter<T,TOutput>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TOutput
    name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.List`1.CopyTo(`0[])
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: CopyTo(T[])
  nameWithType: List<T>.CopyTo(T[])
  fullName: System.Collections.Generic.List<T>.CopyTo(T[])
- uid: T[]
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: CopyTo(T[],Int32)
  nameWithType: List<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(T[],Int32)
- uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: CopyTo(Int32,T[],Int32,Int32)
  nameWithType: List<T>.CopyTo(Int32,T[],Int32,Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(Int32,T[],Int32,Int32)
- uid: System.Collections.Generic.List`1.Count
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Count
  nameWithType: List<T>.Count
  fullName: System.Collections.Generic.List<T>.Count
- uid: System.Collections.Generic.List`1.Exists(System.Predicate`1)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Exists(Predicate<T>)
  nameWithType: List<T>.Exists(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Exists(Predicate<T>)
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
- uid: System.Collections.Generic.List`1.Find(System.Predicate`1)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Find(Predicate<T>)
  nameWithType: List<T>.Find(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Find(Predicate<T>)
- uid: System.Collections.Generic.List`1.FindAll(System.Predicate`1)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindAll(Predicate<T>)
  nameWithType: List<T>.FindAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindAll(Predicate<T>)
- uid: System.Collections.Generic.List`1
  parent: System.Collections.Generic
  isExternal: false
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
- uid: System.Collections.Generic.List`1.FindIndex(System.Predicate`1)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindIndex(Predicate<T>)
  nameWithType: List<T>.FindIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(Predicate<T>)
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate`1)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindIndex(Int32,Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32,Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(Int32,Predicate<T>)
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate`1)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindIndex(Int32,Int32,Predicate<T>)
  nameWithType: List<T>.FindIndex(Int32,Int32,Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(Int32,Int32,Predicate<T>)
- uid: System.Collections.Generic.List`1.FindLast(System.Predicate`1)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindLast(Predicate<T>)
  nameWithType: List<T>.FindLast(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLast(Predicate<T>)
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate`1)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindLastIndex(Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(Predicate<T>)
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate`1)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindLastIndex(Int32,Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32,Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(Int32,Predicate<T>)
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate`1)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindLastIndex(Int32,Int32,Predicate<T>)
  nameWithType: List<T>.FindLastIndex(Int32,Int32,Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(Int32,Int32,Predicate<T>)
- uid: System.Collections.Generic.List`1.ForEach(System.Action`1)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: ForEach(Action<T>)
  nameWithType: List<T>.ForEach(Action<T>)
  fullName: System.Collections.Generic.List<T>.ForEach(Action<T>)
- uid: System.Action`1
  parent: System
  isExternal: false
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
- uid: System.Collections.Generic.List`1.GetEnumerator
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: GetEnumerator()
  nameWithType: List<T>.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.GetEnumerator()
- uid: System.Collections.Generic.List`1.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: List<T>+Enumerator
  nameWithType: List<T>+Enumerator
  fullName: System.Collections.Generic.List<T>+Enumerator
- uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: GetRange(Int32,Int32)
  nameWithType: List<T>.GetRange(Int32,Int32)
  fullName: System.Collections.Generic.List<T>.GetRange(Int32,Int32)
- uid: System.Collections.Generic.List`1.IndexOf(`0)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: IndexOf(T)
  nameWithType: List<T>.IndexOf(T)
  fullName: System.Collections.Generic.List<T>.IndexOf(T)
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: IndexOf(T,Int32)
  nameWithType: List<T>.IndexOf(T,Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T,Int32)
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: IndexOf(T,Int32,Int32)
  nameWithType: List<T>.IndexOf(T,Int32,Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T,Int32,Int32)
- uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Insert(Int32,T)
  nameWithType: List<T>.Insert(Int32,T)
  fullName: System.Collections.Generic.List<T>.Insert(Int32,T)
- uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable`1)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: InsertRange(Int32,IEnumerable<T>)
  nameWithType: List<T>.InsertRange(Int32,IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.InsertRange(Int32,IEnumerable<T>)
- uid: System.Collections.Generic.List`1.Item(System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Item(Int32)
  nameWithType: List<T>.Item(Int32)
  fullName: System.Collections.Generic.List<T>.Item(Int32)
- uid: System.Collections.Generic.List`1.LastIndexOf(`0)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: LastIndexOf(T)
  nameWithType: List<T>.LastIndexOf(T)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T)
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: LastIndexOf(T,Int32)
  nameWithType: List<T>.LastIndexOf(T,Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T,Int32)
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: LastIndexOf(T,Int32,Int32)
  nameWithType: List<T>.LastIndexOf(T,Int32,Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T,Int32,Int32)
- uid: System.Collections.Generic.List`1.Remove(`0)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Remove(T)
  nameWithType: List<T>.Remove(T)
  fullName: System.Collections.Generic.List<T>.Remove(T)
- uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate`1)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: RemoveAll(Predicate<T>)
  nameWithType: List<T>.RemoveAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.RemoveAll(Predicate<T>)
- uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: List<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.List<T>.RemoveAt(Int32)
- uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: RemoveRange(Int32,Int32)
  nameWithType: List<T>.RemoveRange(Int32,Int32)
  fullName: System.Collections.Generic.List<T>.RemoveRange(Int32,Int32)
- uid: System.Collections.Generic.List`1.Reverse
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Reverse()
  nameWithType: List<T>.Reverse()
  fullName: System.Collections.Generic.List<T>.Reverse()
- uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Reverse(Int32,Int32)
  nameWithType: List<T>.Reverse(Int32,Int32)
  fullName: System.Collections.Generic.List<T>.Reverse(Int32,Int32)
- uid: System.Collections.Generic.List`1.Sort
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Sort()
  nameWithType: List<T>.Sort()
  fullName: System.Collections.Generic.List<T>.Sort()
- uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer`1)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Sort(IComparer<T>)
  nameWithType: List<T>.Sort(IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(IComparer<T>)
- uid: System.Collections.Generic.List`1.Sort(System.Comparison`1)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Sort(Comparison<T>)
  nameWithType: List<T>.Sort(Comparison<T>)
  fullName: System.Collections.Generic.List<T>.Sort(Comparison<T>)
- uid: System.Comparison`1
  parent: System
  isExternal: false
  name: Comparison<T>
  nameWithType: Comparison<T>
  fullName: System.Comparison<T>
- uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer`1)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Sort(Int32,Int32,IComparer<T>)
  nameWithType: List<T>.Sort(Int32,Int32,IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(Int32,Int32,IComparer<T>)
- uid: System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.Generic.ICollection
  nameWithType: List<T>.System.Collections.Generic.ICollection
  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.ICollection
- uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.Generic.IEnumerable()
  nameWithType: List<T>.System.Collections.Generic.IEnumerable()
  fullName: System.Collections.Generic.List<T>.System.Collections.Generic.IEnumerable()
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: List<T>.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: List<T>.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: List<T>.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Generic.List<T>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: List<T>.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.List<T>.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.Add(Object)
  nameWithType: List<T>.System.Collections.IList.Add(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Add(Object)
- uid: System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.Contains(Object)
  nameWithType: List<T>.System.Collections.IList.Contains(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Contains(Object)
- uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.IndexOf(Object)
  nameWithType: List<T>.System.Collections.IList.IndexOf(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IndexOf(Object)
- uid: System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.Insert(Int32,Object)
  nameWithType: List<T>.System.Collections.IList.Insert(Int32,Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Insert(Int32,Object)
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: List<T>.System.Collections.IList.IsFixedSize
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: List<T>.System.Collections.IList.IsReadOnly
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.Item(Int32)
  nameWithType: List<T>.System.Collections.IList.Item(Int32)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Item(Int32)
- uid: System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.Remove(Object)
  nameWithType: List<T>.System.Collections.IList.Remove(Object)
  fullName: System.Collections.Generic.List<T>.System.Collections.IList.Remove(Object)
- uid: System.Collections.Generic.List`1.ToArray
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: ToArray()
  nameWithType: List<T>.ToArray()
  fullName: System.Collections.Generic.List<T>.ToArray()
- uid: System.Collections.Generic.List`1.TrimExcess
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: TrimExcess()
  nameWithType: List<T>.TrimExcess()
  fullName: System.Collections.Generic.List<T>.TrimExcess()
- uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate`1)
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: TrueForAll(Predicate<T>)
  nameWithType: List<T>.TrueForAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.TrueForAll(Predicate<T>)
- uid: System.Collections.Generic.List`1.#ctor*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: List<T>
  nameWithType: List<T>.List<T>
- uid: System.Collections.Generic.List`1.Add*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Add
  nameWithType: List<T>.Add
- uid: System.Collections.Generic.List`1.AddRange*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: AddRange
  nameWithType: List<T>.AddRange
- uid: System.Collections.Generic.List`1.AsReadOnly*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: AsReadOnly
  nameWithType: List<T>.AsReadOnly
- uid: System.Collections.Generic.List`1.BinarySearch*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: BinarySearch
  nameWithType: List<T>.BinarySearch
- uid: System.Collections.Generic.List`1.Capacity*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Capacity
  nameWithType: List<T>.Capacity
- uid: System.Collections.Generic.List`1.Clear*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Clear
  nameWithType: List<T>.Clear
- uid: System.Collections.Generic.List`1.Contains*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Contains
  nameWithType: List<T>.Contains
- uid: System.Collections.Generic.List`1.ConvertAll<TOutput>*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: ConvertAll<TOutput>
  nameWithType: List<T>.ConvertAll<TOutput>
- uid: System.Collections.Generic.List`1.CopyTo*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: CopyTo
  nameWithType: List<T>.CopyTo
- uid: System.Collections.Generic.List`1.Count*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Count
  nameWithType: List<T>.Count
- uid: System.Collections.Generic.List`1.Exists*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Exists
  nameWithType: List<T>.Exists
- uid: System.Collections.Generic.List`1.Find*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Find
  nameWithType: List<T>.Find
- uid: System.Collections.Generic.List`1.FindAll*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindAll
  nameWithType: List<T>.FindAll
- uid: System.Collections.Generic.List`1.FindIndex*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindIndex
  nameWithType: List<T>.FindIndex
- uid: System.Collections.Generic.List`1.FindLast*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindLast
  nameWithType: List<T>.FindLast
- uid: System.Collections.Generic.List`1.FindLastIndex*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: FindLastIndex
  nameWithType: List<T>.FindLastIndex
- uid: System.Collections.Generic.List`1.ForEach*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: ForEach
  nameWithType: List<T>.ForEach
- uid: System.Collections.Generic.List`1.GetEnumerator*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: GetEnumerator
  nameWithType: List<T>.GetEnumerator
- uid: System.Collections.Generic.List`1.GetRange*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: GetRange
  nameWithType: List<T>.GetRange
- uid: System.Collections.Generic.List`1.IndexOf*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: IndexOf
  nameWithType: List<T>.IndexOf
- uid: System.Collections.Generic.List`1.Insert*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Insert
  nameWithType: List<T>.Insert
- uid: System.Collections.Generic.List`1.InsertRange*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: InsertRange
  nameWithType: List<T>.InsertRange
- uid: System.Collections.Generic.List`1.Item*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Item
  nameWithType: List<T>.Item
- uid: System.Collections.Generic.List`1.LastIndexOf*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: LastIndexOf
  nameWithType: List<T>.LastIndexOf
- uid: System.Collections.Generic.List`1.Remove*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Remove
  nameWithType: List<T>.Remove
- uid: System.Collections.Generic.List`1.RemoveAll*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: RemoveAll
  nameWithType: List<T>.RemoveAll
- uid: System.Collections.Generic.List`1.RemoveAt*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: RemoveAt
  nameWithType: List<T>.RemoveAt
- uid: System.Collections.Generic.List`1.RemoveRange*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: RemoveRange
  nameWithType: List<T>.RemoveRange
- uid: System.Collections.Generic.List`1.Reverse*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Reverse
  nameWithType: List<T>.Reverse
- uid: System.Collections.Generic.List`1.Sort*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: Sort
  nameWithType: List<T>.Sort
- uid: System.Collections.Generic.List`1.System#Collections#Generic#ICollection<T>#IsReadOnly*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType: List<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable<T>#GetEnumerator*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  nameWithType: List<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: List<T>.System.Collections.ICollection.CopyTo
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: List<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: List<T>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: List<T>.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Generic.List`1.System#Collections#IList#Add*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.Add
  nameWithType: List<T>.System.Collections.IList.Add
- uid: System.Collections.Generic.List`1.System#Collections#IList#Contains*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.Contains
  nameWithType: List<T>.System.Collections.IList.Contains
- uid: System.Collections.Generic.List`1.System#Collections#IList#IndexOf*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.IndexOf
  nameWithType: List<T>.System.Collections.IList.IndexOf
- uid: System.Collections.Generic.List`1.System#Collections#IList#Insert*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.Insert
  nameWithType: List<T>.System.Collections.IList.Insert
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.IsFixedSize
  nameWithType: List<T>.System.Collections.IList.IsFixedSize
- uid: System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.IsReadOnly
  nameWithType: List<T>.System.Collections.IList.IsReadOnly
- uid: System.Collections.Generic.List`1.System#Collections#IList#Item*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.Item
  nameWithType: List<T>.System.Collections.IList.Item
- uid: System.Collections.Generic.List`1.System#Collections#IList#Remove*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: System.Collections.IList.Remove
  nameWithType: List<T>.System.Collections.IList.Remove
- uid: System.Collections.Generic.List`1.ToArray*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: ToArray
  nameWithType: List<T>.ToArray
- uid: System.Collections.Generic.List`1.TrimExcess*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: TrimExcess
  nameWithType: List<T>.TrimExcess
- uid: System.Collections.Generic.List`1.TrueForAll*
  parent: System.Collections.Generic.List`1
  isExternal: false
  name: TrueForAll
  nameWithType: List<T>.TrueForAll
