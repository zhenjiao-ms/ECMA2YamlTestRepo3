### YamlMime:ManagedReference
items:
- uid: System.Threading.EventWaitHandle
  id: EventWaitHandle
  children:
  - System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)
  - System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)
  - System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)
  - System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)
  - System.Threading.EventWaitHandle.GetAccessControl
  - System.Threading.EventWaitHandle.OpenExisting(System.String)
  - System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)
  - System.Threading.EventWaitHandle.Reset
  - System.Threading.EventWaitHandle.Set
  - System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)
  - System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)
  - System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)
  langs:
  - csharp
  name: EventWaitHandle
  nameWithType: EventWaitHandle
  fullName: System.Threading.EventWaitHandle
  type: Class
  summary: To be added.
  remarks: To be added.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class EventWaitHandle : System.Threading.WaitHandle
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Threading.WaitHandle
  implements: []
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Threading.WaitHandle.Close
  - System.Threading.WaitHandle.Dispose
  - System.Threading.WaitHandle.Dispose(System.Boolean)
  - System.Threading.WaitHandle.Handle
  - System.Threading.WaitHandle.InvalidHandle
  - System.Threading.WaitHandle.SafeWaitHandle
  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)
  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)
  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitOne
  - System.Threading.WaitHandle.WaitOne(System.Int32)
  - System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)
  - System.Threading.WaitHandle.WaitOne(System.TimeSpan)
  - System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitTimeout
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)
  id: '#ctor(System.Boolean,System.Threading.EventResetMode)'
  parent: System.Threading.EventWaitHandle
  langs:
  - csharp
  name: EventWaitHandle(Boolean,EventResetMode)
  nameWithType: EventWaitHandle.EventWaitHandle(Boolean,EventResetMode)
  fullName: System.Threading.EventWaitHandle.EventWaitHandle(Boolean,EventResetMode)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public EventWaitHandle (bool initialState, System.Threading.EventResetMode mode);
    parameters:
    - id: initialState
      type: System.Boolean
      description: To be added.
    - id: mode
      type: System.Threading.EventResetMode
      description: To be added.
  overload: System.Threading.EventWaitHandle.#ctor*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)
  id: '#ctor(System.Boolean,System.Threading.EventResetMode,System.String)'
  parent: System.Threading.EventWaitHandle
  langs:
  - csharp
  name: EventWaitHandle(Boolean,EventResetMode,String)
  nameWithType: EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String)
  fullName: System.Threading.EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public EventWaitHandle (bool initialState, System.Threading.EventResetMode mode, string name);
    parameters:
    - id: initialState
      type: System.Boolean
      description: To be added.
    - id: mode
      type: System.Threading.EventResetMode
      description: To be added.
    - id: name
      type: System.String
      description: To be added.
  overload: System.Threading.EventWaitHandle.#ctor*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)
  id: '#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)'
  parent: System.Threading.EventWaitHandle
  langs:
  - csharp
  name: EventWaitHandle(Boolean,EventResetMode,String,Boolean)
  nameWithType: EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String,Boolean)
  fullName: System.Threading.EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public EventWaitHandle (bool initialState, System.Threading.EventResetMode mode, string name, out bool createdNew);
    parameters:
    - id: initialState
      type: System.Boolean
      description: To be added.
    - id: mode
      type: System.Threading.EventResetMode
      description: To be added.
    - id: name
      type: System.String
      description: To be added.
    - id: createdNew
      type: System.Boolean
      description: To be added.
  overload: System.Threading.EventWaitHandle.#ctor*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)
  id: '#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)'
  parent: System.Threading.EventWaitHandle
  langs:
  - csharp
  name: EventWaitHandle(Boolean,EventResetMode,String,Boolean,EventWaitHandleSecurity)
  nameWithType: EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String,Boolean,EventWaitHandleSecurity)
  fullName: System.Threading.EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String,Boolean,EventWaitHandleSecurity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public EventWaitHandle (bool initialState, System.Threading.EventResetMode mode, string name, out bool createdNew, System.Security.AccessControl.EventWaitHandleSecurity eventSecurity);
    parameters:
    - id: initialState
      type: System.Boolean
      description: To be added.
    - id: mode
      type: System.Threading.EventResetMode
      description: To be added.
    - id: name
      type: System.String
      description: To be added.
    - id: createdNew
      type: System.Boolean
      description: To be added.
    - id: eventSecurity
      type: System.Security.AccessControl.EventWaitHandleSecurity
      description: To be added.
  overload: System.Threading.EventWaitHandle.#ctor*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.EventWaitHandle.GetAccessControl
  id: GetAccessControl
  parent: System.Threading.EventWaitHandle
  langs:
  - csharp
  name: GetAccessControl()
  nameWithType: EventWaitHandle.GetAccessControl()
  fullName: System.Threading.EventWaitHandle.GetAccessControl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Security.AccessControl.EventWaitHandleSecurity GetAccessControl ();
    parameters: []
    return:
      type: System.Security.AccessControl.EventWaitHandleSecurity
      description: To be added.
  overload: System.Threading.EventWaitHandle.GetAccessControl*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.EventWaitHandle.OpenExisting(System.String)
  id: OpenExisting(System.String)
  parent: System.Threading.EventWaitHandle
  langs:
  - csharp
  name: OpenExisting(String)
  nameWithType: EventWaitHandle.OpenExisting(String)
  fullName: System.Threading.EventWaitHandle.OpenExisting(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.EventWaitHandle OpenExisting (string name);
    parameters:
    - id: name
      type: System.String
      description: To be added.
    return:
      type: System.Threading.EventWaitHandle
      description: To be added.
  overload: System.Threading.EventWaitHandle.OpenExisting*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)
  id: OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)
  parent: System.Threading.EventWaitHandle
  langs:
  - csharp
  name: OpenExisting(String,EventWaitHandleRights)
  nameWithType: EventWaitHandle.OpenExisting(String,EventWaitHandleRights)
  fullName: System.Threading.EventWaitHandle.OpenExisting(String,EventWaitHandleRights)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.EventWaitHandle OpenExisting (string name, System.Security.AccessControl.EventWaitHandleRights rights);
    parameters:
    - id: name
      type: System.String
      description: To be added.
    - id: rights
      type: System.Security.AccessControl.EventWaitHandleRights
      description: To be added.
    return:
      type: System.Threading.EventWaitHandle
      description: To be added.
  overload: System.Threading.EventWaitHandle.OpenExisting*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.EventWaitHandle.Reset
  id: Reset
  parent: System.Threading.EventWaitHandle
  langs:
  - csharp
  name: Reset()
  nameWithType: EventWaitHandle.Reset()
  fullName: System.Threading.EventWaitHandle.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool Reset ();
    parameters: []
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Threading.EventWaitHandle.Reset*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.EventWaitHandle.Set
  id: Set
  parent: System.Threading.EventWaitHandle
  langs:
  - csharp
  name: Set()
  nameWithType: EventWaitHandle.Set()
  fullName: System.Threading.EventWaitHandle.Set()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool Set ();
    parameters: []
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Threading.EventWaitHandle.Set*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)
  id: SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)
  parent: System.Threading.EventWaitHandle
  langs:
  - csharp
  name: SetAccessControl(EventWaitHandleSecurity)
  nameWithType: EventWaitHandle.SetAccessControl(EventWaitHandleSecurity)
  fullName: System.Threading.EventWaitHandle.SetAccessControl(EventWaitHandleSecurity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void SetAccessControl (System.Security.AccessControl.EventWaitHandleSecurity eventSecurity);
    parameters:
    - id: eventSecurity
      type: System.Security.AccessControl.EventWaitHandleSecurity
      description: To be added.
  overload: System.Threading.EventWaitHandle.SetAccessControl*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)
  id: TryOpenExisting(System.String,System.Threading.EventWaitHandle@)
  parent: System.Threading.EventWaitHandle
  langs:
  - csharp
  name: TryOpenExisting(String,EventWaitHandle)
  nameWithType: EventWaitHandle.TryOpenExisting(String,EventWaitHandle)
  fullName: System.Threading.EventWaitHandle.TryOpenExisting(String,EventWaitHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static bool TryOpenExisting (string name, out System.Threading.EventWaitHandle result);
    parameters:
    - id: name
      type: System.String
      description: To be added.
    - id: result
      type: System.Threading.EventWaitHandle
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Threading.EventWaitHandle.TryOpenExisting*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)
  id: TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)
  parent: System.Threading.EventWaitHandle
  langs:
  - csharp
  name: TryOpenExisting(String,EventWaitHandleRights,EventWaitHandle)
  nameWithType: EventWaitHandle.TryOpenExisting(String,EventWaitHandleRights,EventWaitHandle)
  fullName: System.Threading.EventWaitHandle.TryOpenExisting(String,EventWaitHandleRights,EventWaitHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static bool TryOpenExisting (string name, System.Security.AccessControl.EventWaitHandleRights rights, out System.Threading.EventWaitHandle result);
    parameters:
    - id: name
      type: System.String
      description: To be added.
    - id: rights
      type: System.Security.AccessControl.EventWaitHandleRights
      description: To be added.
    - id: result
      type: System.Threading.EventWaitHandle
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Threading.EventWaitHandle.TryOpenExisting*
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Threading.WaitHandle
  isExternal: false
  name: System.Threading.WaitHandle
- uid: System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode)
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: EventWaitHandle(Boolean,EventResetMode)
  nameWithType: EventWaitHandle.EventWaitHandle(Boolean,EventResetMode)
  fullName: System.Threading.EventWaitHandle.EventWaitHandle(Boolean,EventResetMode)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.EventResetMode
  parent: System.Threading
  isExternal: false
  name: EventResetMode
  nameWithType: EventResetMode
  fullName: System.Threading.EventResetMode
- uid: System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String)
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: EventWaitHandle(Boolean,EventResetMode,String)
  nameWithType: EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String)
  fullName: System.Threading.EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.EventResetMode
  parent: System.Threading
  isExternal: false
  name: EventResetMode
  nameWithType: EventResetMode
  fullName: System.Threading.EventResetMode
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@)
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: EventWaitHandle(Boolean,EventResetMode,String,Boolean)
  nameWithType: EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String,Boolean)
  fullName: System.Threading.EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.EventResetMode
  parent: System.Threading
  isExternal: false
  name: EventResetMode
  nameWithType: EventResetMode
  fullName: System.Threading.EventResetMode
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.EventWaitHandle.#ctor(System.Boolean,System.Threading.EventResetMode,System.String,System.Boolean@,System.Security.AccessControl.EventWaitHandleSecurity)
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: EventWaitHandle(Boolean,EventResetMode,String,Boolean,EventWaitHandleSecurity)
  nameWithType: EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String,Boolean,EventWaitHandleSecurity)
  fullName: System.Threading.EventWaitHandle.EventWaitHandle(Boolean,EventResetMode,String,Boolean,EventWaitHandleSecurity)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.EventResetMode
  parent: System.Threading
  isExternal: false
  name: EventResetMode
  nameWithType: EventResetMode
  fullName: System.Threading.EventResetMode
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.EventWaitHandleSecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: EventWaitHandleSecurity
  nameWithType: EventWaitHandleSecurity
  fullName: System.Security.AccessControl.EventWaitHandleSecurity
- uid: System.Threading.EventWaitHandle.GetAccessControl
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: GetAccessControl()
  nameWithType: EventWaitHandle.GetAccessControl()
  fullName: System.Threading.EventWaitHandle.GetAccessControl()
- uid: System.Security.AccessControl.EventWaitHandleSecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: EventWaitHandleSecurity
  nameWithType: EventWaitHandleSecurity
  fullName: System.Security.AccessControl.EventWaitHandleSecurity
- uid: System.Threading.EventWaitHandle.OpenExisting(System.String)
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: OpenExisting(String)
  nameWithType: EventWaitHandle.OpenExisting(String)
  fullName: System.Threading.EventWaitHandle.OpenExisting(String)
- uid: System.Threading.EventWaitHandle
  parent: System.Threading
  isExternal: false
  name: EventWaitHandle
  nameWithType: EventWaitHandle
  fullName: System.Threading.EventWaitHandle
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: OpenExisting(String,EventWaitHandleRights)
  nameWithType: EventWaitHandle.OpenExisting(String,EventWaitHandleRights)
  fullName: System.Threading.EventWaitHandle.OpenExisting(String,EventWaitHandleRights)
- uid: System.Threading.EventWaitHandle
  parent: System.Threading
  isExternal: false
  name: EventWaitHandle
  nameWithType: EventWaitHandle
  fullName: System.Threading.EventWaitHandle
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.EventWaitHandleRights
  parent: System.Security.AccessControl
  isExternal: false
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleRights
  fullName: System.Security.AccessControl.EventWaitHandleRights
- uid: System.Threading.EventWaitHandle.Reset
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: Reset()
  nameWithType: EventWaitHandle.Reset()
  fullName: System.Threading.EventWaitHandle.Reset()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.EventWaitHandle.Set
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: Set()
  nameWithType: EventWaitHandle.Set()
  fullName: System.Threading.EventWaitHandle.Set()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: SetAccessControl(EventWaitHandleSecurity)
  nameWithType: EventWaitHandle.SetAccessControl(EventWaitHandleSecurity)
  fullName: System.Threading.EventWaitHandle.SetAccessControl(EventWaitHandleSecurity)
- uid: System.Security.AccessControl.EventWaitHandleSecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: EventWaitHandleSecurity
  nameWithType: EventWaitHandleSecurity
  fullName: System.Security.AccessControl.EventWaitHandleSecurity
- uid: System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: TryOpenExisting(String,EventWaitHandle)
  nameWithType: EventWaitHandle.TryOpenExisting(String,EventWaitHandle)
  fullName: System.Threading.EventWaitHandle.TryOpenExisting(String,EventWaitHandle)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.EventWaitHandle
  parent: System.Threading
  isExternal: false
  name: EventWaitHandle
  nameWithType: EventWaitHandle
  fullName: System.Threading.EventWaitHandle
- uid: System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: TryOpenExisting(String,EventWaitHandleRights,EventWaitHandle)
  nameWithType: EventWaitHandle.TryOpenExisting(String,EventWaitHandleRights,EventWaitHandle)
  fullName: System.Threading.EventWaitHandle.TryOpenExisting(String,EventWaitHandleRights,EventWaitHandle)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.EventWaitHandleRights
  parent: System.Security.AccessControl
  isExternal: false
  name: EventWaitHandleRights
  nameWithType: EventWaitHandleRights
  fullName: System.Security.AccessControl.EventWaitHandleRights
- uid: System.Threading.EventWaitHandle
  parent: System.Threading
  isExternal: false
  name: EventWaitHandle
  nameWithType: EventWaitHandle
  fullName: System.Threading.EventWaitHandle
- uid: System.Threading.EventWaitHandle.#ctor*
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: EventWaitHandle
  nameWithType: EventWaitHandle.EventWaitHandle
- uid: System.Threading.EventWaitHandle.GetAccessControl*
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: GetAccessControl
  nameWithType: EventWaitHandle.GetAccessControl
- uid: System.Threading.EventWaitHandle.OpenExisting*
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: OpenExisting
  nameWithType: EventWaitHandle.OpenExisting
- uid: System.Threading.EventWaitHandle.Reset*
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: Reset
  nameWithType: EventWaitHandle.Reset
- uid: System.Threading.EventWaitHandle.Set*
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: Set
  nameWithType: EventWaitHandle.Set
- uid: System.Threading.EventWaitHandle.SetAccessControl*
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: SetAccessControl
  nameWithType: EventWaitHandle.SetAccessControl
- uid: System.Threading.EventWaitHandle.TryOpenExisting*
  parent: System.Threading.EventWaitHandle
  isExternal: false
  name: TryOpenExisting
  nameWithType: EventWaitHandle.TryOpenExisting
