### YamlMime:ManagedReference
items:
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1
  id: IProducerConsumerCollection`1
  children:
  - System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)
  - System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray
  - System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)
  - System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)
  langs:
  - csharp
  name: IProducerConsumerCollection<T>
  nameWithType: IProducerConsumerCollection<T>
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>
  type: Interface
  summary: To be added.
  remarks: To be added.
  syntax:
    content: 'public interface IProducerConsumerCollection<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.ICollection'
    typeParameters:
    - id: T
      description: To be added.
  implements:
  - System.Collections.Generic.IEnumerable<T>
  - System.Collections.ICollection
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  langs:
  - csharp
  name: CopyTo(T[],Int32)
  nameWithType: IProducerConsumerCollection<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.CopyTo(T[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void CopyTo (T[] array, int index);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray
  id: ToArray
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  langs:
  - csharp
  name: ToArray()
  nameWithType: IProducerConsumerCollection<T>.ToArray()
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.ToArray()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public T[] ToArray ();
    parameters: []
    return:
      type: T[]
      description: To be added.
  overload: System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)
  id: TryAdd(`0)
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  langs:
  - csharp
  name: TryAdd(T)
  nameWithType: IProducerConsumerCollection<T>.TryAdd(T)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool TryAdd (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)
  id: TryTake(`0@)
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  langs:
  - csharp
  name: TryTake(T)
  nameWithType: IProducerConsumerCollection<T>.TryTake(T)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool TryTake (out T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  isExternal: false
  name: CopyTo(T[],Int32)
  nameWithType: IProducerConsumerCollection<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.CopyTo(T[],Int32)
- uid: T[]
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  isExternal: false
  name: ToArray()
  nameWithType: IProducerConsumerCollection<T>.ToArray()
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.ToArray()
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  isExternal: false
  name: TryAdd(T)
  nameWithType: IProducerConsumerCollection<T>.TryAdd(T)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  isExternal: false
  name: TryTake(T)
  nameWithType: IProducerConsumerCollection<T>.TryTake(T)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(T)
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo*
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  isExternal: false
  name: CopyTo
  nameWithType: IProducerConsumerCollection<T>.CopyTo
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray*
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  isExternal: false
  name: ToArray
  nameWithType: IProducerConsumerCollection<T>.ToArray
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd*
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  isExternal: false
  name: TryAdd
  nameWithType: IProducerConsumerCollection<T>.TryAdd
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake*
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  isExternal: false
  name: TryTake
  nameWithType: IProducerConsumerCollection<T>.TryTake
