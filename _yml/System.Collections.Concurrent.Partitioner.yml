### YamlMime:ManagedReference
items:
- uid: System.Collections.Concurrent.Partitioner
  id: Partitioner
  children:
  - System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)
  - System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)
  - System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)
  - System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)
  - System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)
  - System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)
  - System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)
  langs:
  - csharp
  name: Partitioner
  nameWithType: Partitioner
  fullName: System.Collections.Concurrent.Partitioner
  type: Class
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static class Partitioner
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)
  id: Create(System.Int32,System.Int32)
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  name: Create(Int32,Int32)
  nameWithType: Partitioner.Create(Int32,Int32)
  fullName: System.Collections.Concurrent.Partitioner.Create(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Collections.Concurrent.OrderablePartitioner<Tuple<int,int>> Create (int fromInclusive, int toExclusive);
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: To be added.
    - id: toExclusive
      type: System.Int32
      description: To be added.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int32,System.Int32}}
      description: To be added.
  overload: System.Collections.Concurrent.Partitioner.Create*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)
  id: Create(System.Int64,System.Int64)
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  name: Create(Int64,Int64)
  nameWithType: Partitioner.Create(Int64,Int64)
  fullName: System.Collections.Concurrent.Partitioner.Create(Int64,Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Collections.Concurrent.OrderablePartitioner<Tuple<long,long>> Create (long fromInclusive, long toExclusive);
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: To be added.
    - id: toExclusive
      type: System.Int64
      description: To be added.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int64,System.Int64}}
      description: To be added.
  overload: System.Collections.Concurrent.Partitioner.Create*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)
  id: Create(System.Int32,System.Int32,System.Int32)
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  name: Create(Int32,Int32,Int32)
  nameWithType: Partitioner.Create(Int32,Int32,Int32)
  fullName: System.Collections.Concurrent.Partitioner.Create(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Collections.Concurrent.OrderablePartitioner<Tuple<int,int>> Create (int fromInclusive, int toExclusive, int rangeSize);
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: To be added.
    - id: toExclusive
      type: System.Int32
      description: To be added.
    - id: rangeSize
      type: System.Int32
      description: To be added.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int32,System.Int32}}
      description: To be added.
  overload: System.Collections.Concurrent.Partitioner.Create*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)
  id: Create(System.Int64,System.Int64,System.Int64)
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  name: Create(Int64,Int64,Int64)
  nameWithType: Partitioner.Create(Int64,Int64,Int64)
  fullName: System.Collections.Concurrent.Partitioner.Create(Int64,Int64,Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Collections.Concurrent.OrderablePartitioner<Tuple<long,long>> Create (long fromInclusive, long toExclusive, long rangeSize);
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: To be added.
    - id: toExclusive
      type: System.Int64
      description: To be added.
    - id: rangeSize
      type: System.Int64
      description: To be added.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int64,System.Int64}}
      description: To be added.
  overload: System.Collections.Concurrent.Partitioner.Create*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})
  id: Create``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  name: Create(IEnumerable<TSource>)
  nameWithType: Partitioner.Create(IEnumerable<TSource>)
  fullName: System.Collections.Concurrent.Partitioner.Create(IEnumerable<TSource>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource> (System.Collections.Generic.IEnumerable<TSource> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: To be added.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner`1
      description: To be added.
  overload: System.Collections.Concurrent.Partitioner.Create<TSource>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)
  id: Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  name: Create(IEnumerable<TSource>,EnumerablePartitionerOptions)
  nameWithType: Partitioner.Create(IEnumerable<TSource>,EnumerablePartitionerOptions)
  fullName: System.Collections.Concurrent.Partitioner.Create(IEnumerable<TSource>,EnumerablePartitionerOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource> (System.Collections.Generic.IEnumerable<TSource> source, System.Collections.Concurrent.EnumerablePartitionerOptions partitionerOptions);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: To be added.
    - id: partitionerOptions
      type: System.Collections.Concurrent.EnumerablePartitionerOptions
      description: To be added.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner`1
      description: To be added.
  overload: System.Collections.Concurrent.Partitioner.Create<TSource>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)
  id: Create``1(System.Collections.Generic.IList{``0},System.Boolean)
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  name: Create(IList<TSource>,Boolean)
  nameWithType: Partitioner.Create(IList<TSource>,Boolean)
  fullName: System.Collections.Concurrent.Partitioner.Create(IList<TSource>,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource> (System.Collections.Generic.IList<TSource> list, bool loadBalance);
    parameters:
    - id: list
      type: System.Collections.Generic.IList{TSource}
      description: To be added.
    - id: loadBalance
      type: System.Boolean
      description: To be added.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner`1
      description: To be added.
  overload: System.Collections.Concurrent.Partitioner.Create<TSource>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)
  id: Create``1(``0[],System.Boolean)
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  name: Create(TSource[],Boolean)
  nameWithType: Partitioner.Create(TSource[],Boolean)
  fullName: System.Collections.Concurrent.Partitioner.Create(TSource[],Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Collections.Concurrent.OrderablePartitioner<TSource> Create<TSource> (TSource[] array, bool loadBalance);
    parameters:
    - id: array
      type: TSource[]
      description: To be added.
    - id: loadBalance
      type: System.Boolean
      description: To be added.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner`1
      description: To be added.
  overload: System.Collections.Concurrent.Partitioner.Create<TSource>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)
  parent: System.Collections.Concurrent.Partitioner
  isExternal: false
  name: Create(Int32,Int32)
  nameWithType: Partitioner.Create(Int32,Int32)
  fullName: System.Collections.Concurrent.Partitioner.Create(Int32,Int32)
- uid: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int32,System.Int32}}
  parent: System.Collections.Concurrent
  isExternal: false
  name: OrderablePartitioner<Tuple<Int32,Int32>>
  nameWithType: OrderablePartitioner<Tuple<Int32,Int32>>
  fullName: System.Collections.Concurrent.OrderablePartitioner<System.Tuple<System.Int32,System.Int32>>
  spec.csharp:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    nameWithType: OrderablePartitioner
    fullName: OrderablePartitioner<System.Tuple<System.Int32,System.Int32>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple<System.Int32,System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)
  parent: System.Collections.Concurrent.Partitioner
  isExternal: false
  name: Create(Int64,Int64)
  nameWithType: Partitioner.Create(Int64,Int64)
  fullName: System.Collections.Concurrent.Partitioner.Create(Int64,Int64)
- uid: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int64,System.Int64}}
  parent: System.Collections.Concurrent
  isExternal: false
  name: OrderablePartitioner<Tuple<Int64,Int64>>
  nameWithType: OrderablePartitioner<Tuple<Int64,Int64>>
  fullName: System.Collections.Concurrent.OrderablePartitioner<System.Tuple<System.Int64,System.Int64>>
  spec.csharp:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    nameWithType: OrderablePartitioner
    fullName: OrderablePartitioner<System.Tuple<System.Int64,System.Int64>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: Tuple<System.Int64,System.Int64>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: Int64
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: Int64
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)
  parent: System.Collections.Concurrent.Partitioner
  isExternal: false
  name: Create(Int32,Int32,Int32)
  nameWithType: Partitioner.Create(Int32,Int32,Int32)
  fullName: System.Collections.Concurrent.Partitioner.Create(Int32,Int32,Int32)
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)
  parent: System.Collections.Concurrent.Partitioner
  isExternal: false
  name: Create(Int64,Int64,Int64)
  nameWithType: Partitioner.Create(Int64,Int64,Int64)
  fullName: System.Collections.Concurrent.Partitioner.Create(Int64,Int64,Int64)
- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Concurrent.Partitioner
  isExternal: false
  name: Create(IEnumerable<TSource>)
  nameWithType: Partitioner.Create(IEnumerable<TSource>)
  fullName: System.Collections.Concurrent.Partitioner.Create(IEnumerable<TSource>)
- uid: System.Collections.Concurrent.OrderablePartitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: OrderablePartitioner<TSource>
  nameWithType: OrderablePartitioner<TSource>
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>
- uid: System.Collections.Generic.IEnumerable{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TSource>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)
  parent: System.Collections.Concurrent.Partitioner
  isExternal: false
  name: Create(IEnumerable<TSource>,EnumerablePartitionerOptions)
  nameWithType: Partitioner.Create(IEnumerable<TSource>,EnumerablePartitionerOptions)
  fullName: System.Collections.Concurrent.Partitioner.Create(IEnumerable<TSource>,EnumerablePartitionerOptions)
- uid: System.Collections.Concurrent.EnumerablePartitionerOptions
  parent: System.Collections.Concurrent
  isExternal: false
  name: EnumerablePartitionerOptions
  nameWithType: EnumerablePartitionerOptions
  fullName: System.Collections.Concurrent.EnumerablePartitionerOptions
- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)
  parent: System.Collections.Concurrent.Partitioner
  isExternal: false
  name: Create(IList<TSource>,Boolean)
  nameWithType: Partitioner.Create(IList<TSource>,Boolean)
  fullName: System.Collections.Concurrent.Partitioner.Create(IList<TSource>,Boolean)
- uid: System.Collections.Generic.IList{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<TSource>
  nameWithType: IList<TSource>
  fullName: System.Collections.Generic.IList<TSource>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<TSource>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)
  parent: System.Collections.Concurrent.Partitioner
  isExternal: false
  name: Create(TSource[],Boolean)
  nameWithType: Partitioner.Create(TSource[],Boolean)
  fullName: System.Collections.Concurrent.Partitioner.Create(TSource[],Boolean)
- uid: TSource[]
  isExternal: true
  name: TSource
  nameWithType: TSource
  fullName: TSource[]
  spec.csharp:
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Concurrent.Partitioner.Create*
  parent: System.Collections.Concurrent.Partitioner
  isExternal: false
  name: Create
  nameWithType: Partitioner.Create
- uid: System.Collections.Concurrent.Partitioner.Create<TSource>*
  parent: System.Collections.Concurrent.Partitioner
  isExternal: false
  name: Create<TSource>
  nameWithType: Partitioner.Create<TSource>
