### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.IDictionary`2
  id: IDictionary`2
  children:
  - System.Collections.Generic.IDictionary`2.Add(`0,`1)
  - System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  - System.Collections.Generic.IDictionary`2.Item(`0)
  - System.Collections.Generic.IDictionary`2.Keys
  - System.Collections.Generic.IDictionary`2.Remove(`0)
  - System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  - System.Collections.Generic.IDictionary`2.Values
  langs:
  - csharp
  name: IDictionary<TKey,TValue>
  nameWithType: IDictionary<TKey,TValue>
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>
  type: Interface
  summary: To be added.
  remarks: To be added.
  syntax:
    content: 'public interface IDictionary<TKey,TValue> : System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>'
    typeParameters:
    - id: TKey
      description: To be added.
    - id: TValue
      description: To be added.
  implements:
  - System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>
  - System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: System.Collections.Generic.IDictionary`2
  langs:
  - csharp
  name: Add(TKey,TValue)
  nameWithType: IDictionary<TKey,TValue>.Add(TKey,TValue)
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey,TValue)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Add (TKey key, TValue value);
    parameters:
    - id: key
      type: TKey
      description: To be added.
    - id: value
      type: TValue
      description: To be added.
  overload: System.Collections.Generic.IDictionary`2.Add*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: System.Collections.Generic.IDictionary`2
  langs:
  - csharp
  name: ContainsKey(TKey)
  nameWithType: IDictionary<TKey,TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.ContainsKey(TKey)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool ContainsKey (TKey key);
    parameters:
    - id: key
      type: TKey
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.IDictionary`2.ContainsKey*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.IDictionary`2.Item(`0)
  id: Item(`0)
  parent: System.Collections.Generic.IDictionary`2
  langs:
  - csharp
  name: Item(TKey)
  nameWithType: IDictionary<TKey,TValue>.Item(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.Item(TKey)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public TValue this[TKey key] { get; set; }
    parameters:
    - id: key
      type: TKey
      description: To be added.
    return:
      type: TValue
      description: To be added.
  overload: System.Collections.Generic.IDictionary`2.Item*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.IDictionary`2.Keys
  id: Keys
  parent: System.Collections.Generic.IDictionary`2
  langs:
  - csharp
  name: Keys
  nameWithType: IDictionary<TKey,TValue>.Keys
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Collections.Generic.ICollection<TKey> Keys { get; }
    return:
      type: System.Collections.Generic.ICollection{TKey}
      description: To be added.
  overload: System.Collections.Generic.IDictionary`2.Keys*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.IDictionary`2.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.IDictionary`2
  langs:
  - csharp
  name: Remove(TKey)
  nameWithType: IDictionary<TKey,TValue>.Remove(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool Remove (TKey key);
    parameters:
    - id: key
      type: TKey
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.IDictionary`2.Remove*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: System.Collections.Generic.IDictionary`2
  langs:
  - csharp
  name: TryGetValue(TKey,TValue)
  nameWithType: IDictionary<TKey,TValue>.TryGetValue(TKey,TValue)
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.TryGetValue(TKey,TValue)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool TryGetValue (TKey key, out TValue value);
    parameters:
    - id: key
      type: TKey
      description: To be added.
    - id: value
      type: TValue
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Generic.IDictionary`2.TryGetValue*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.IDictionary`2.Values
  id: Values
  parent: System.Collections.Generic.IDictionary`2
  langs:
  - csharp
  name: Values
  nameWithType: IDictionary<TKey,TValue>.Values
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Collections.Generic.ICollection<TValue> Values { get; }
    return:
      type: System.Collections.Generic.ICollection{TValue}
      description: To be added.
  overload: System.Collections.Generic.IDictionary`2.Values*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  parent: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Add(TKey,TValue)
  nameWithType: IDictionary<TKey,TValue>.Add(TKey,TValue)
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey,TValue)
- uid: TKey
  isExternal: true
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  isExternal: true
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  parent: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: ContainsKey(TKey)
  nameWithType: IDictionary<TKey,TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.ContainsKey(TKey)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IDictionary`2.Item(`0)
  parent: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Item(TKey)
  nameWithType: IDictionary<TKey,TValue>.Item(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.Item(TKey)
- uid: System.Collections.Generic.IDictionary`2.Keys
  parent: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Keys
  nameWithType: IDictionary<TKey,TValue>.Keys
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.Keys
- uid: System.Collections.Generic.ICollection{TKey}
  parent: System.Collections.Generic
  isExternal: false
  name: ICollection<TKey>
  nameWithType: ICollection<TKey>
  fullName: System.Collections.Generic.ICollection<TKey>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<TKey>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.IDictionary`2.Remove(`0)
  parent: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Remove(TKey)
  nameWithType: IDictionary<TKey,TValue>.Remove(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey)
- uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  parent: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: TryGetValue(TKey,TValue)
  nameWithType: IDictionary<TKey,TValue>.TryGetValue(TKey,TValue)
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.TryGetValue(TKey,TValue)
- uid: System.Collections.Generic.IDictionary`2.Values
  parent: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Values
  nameWithType: IDictionary<TKey,TValue>.Values
  fullName: System.Collections.Generic.IDictionary<TKey,TValue>.Values
- uid: System.Collections.Generic.ICollection{TValue}
  parent: System.Collections.Generic
  isExternal: false
  name: ICollection<TValue>
  nameWithType: ICollection<TValue>
  fullName: System.Collections.Generic.ICollection<TValue>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<TValue>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.IDictionary`2.Add*
  parent: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Add
  nameWithType: IDictionary<TKey,TValue>.Add
- uid: System.Collections.Generic.IDictionary`2.ContainsKey*
  parent: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: ContainsKey
  nameWithType: IDictionary<TKey,TValue>.ContainsKey
- uid: System.Collections.Generic.IDictionary`2.Item*
  parent: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Item
  nameWithType: IDictionary<TKey,TValue>.Item
- uid: System.Collections.Generic.IDictionary`2.Keys*
  parent: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Keys
  nameWithType: IDictionary<TKey,TValue>.Keys
- uid: System.Collections.Generic.IDictionary`2.Remove*
  parent: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Remove
  nameWithType: IDictionary<TKey,TValue>.Remove
- uid: System.Collections.Generic.IDictionary`2.TryGetValue*
  parent: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: TryGetValue
  nameWithType: IDictionary<TKey,TValue>.TryGetValue
- uid: System.Collections.Generic.IDictionary`2.Values*
  parent: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Values
  nameWithType: IDictionary<TKey,TValue>.Values
