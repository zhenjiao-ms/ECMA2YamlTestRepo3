### YamlMime:ManagedReference
items:
- uid: System.Runtime.InteropServices.SafeBuffer
  id: SafeBuffer
  children:
  - System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)
  - System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)
  - System.Runtime.InteropServices.SafeBuffer.ByteLength
  - System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)
  - System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)
  - System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)
  - System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)
  - System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.SafeBuffer.ReleasePointer
  - System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
  - System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  langs:
  - csharp
  name: SafeBuffer
  nameWithType: SafeBuffer
  fullName: System.Runtime.InteropServices.SafeBuffer
  type: Class
  summary: To be added.
  remarks: To be added.
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public abstract class SafeBuffer : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  inheritance:
  - System.Object
  - System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  - System.Runtime.InteropServices.SafeHandle
  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  implements: []
  inheritedMembers:
  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Runtime.InteropServices.SafeHandle.Close
  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - System.Runtime.InteropServices.SafeHandle.Dispose
  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  - System.Runtime.InteropServices.SafeHandle.handle
  - System.Runtime.InteropServices.SafeHandle.IsClosed
  - System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: SafeBuffer(Boolean)
  nameWithType: SafeBuffer.SafeBuffer(Boolean)
  fullName: System.Runtime.InteropServices.SafeBuffer.SafeBuffer(Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected SafeBuffer (bool ownsHandle);
    parameters:
    - id: ownsHandle
      type: System.Boolean
      description: To be added.
  overload: System.Runtime.InteropServices.SafeBuffer.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)
  id: AcquirePointer(System.Byte*@)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: AcquirePointer(Byte*)
  nameWithType: SafeBuffer.AcquirePointer(Byte*)
  fullName: System.Runtime.InteropServices.SafeBuffer.AcquirePointer(Byte*)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void AcquirePointer (ref byte* pointer);
    parameters:
    - id: pointer
      type: System.Byte*
      description: To be added.
  overload: System.Runtime.InteropServices.SafeBuffer.AcquirePointer*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeBuffer.ByteLength
  id: ByteLength
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: ByteLength
  nameWithType: SafeBuffer.ByteLength
  fullName: System.Runtime.InteropServices.SafeBuffer.ByteLength
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public ulong ByteLength { get; }
    return:
      type: System.UInt64
      description: To be added.
  overload: System.Runtime.InteropServices.SafeBuffer.ByteLength*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)
  id: Initialize(System.UInt64)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: Initialize(UInt64)
  nameWithType: SafeBuffer.Initialize(UInt64)
  fullName: System.Runtime.InteropServices.SafeBuffer.Initialize(UInt64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Initialize (ulong numBytes);
    parameters:
    - id: numBytes
      type: System.UInt64
      description: To be added.
  overload: System.Runtime.InteropServices.SafeBuffer.Initialize*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)
  id: Initialize(System.UInt32,System.UInt32)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: Initialize(UInt32,UInt32)
  nameWithType: SafeBuffer.Initialize(UInt32,UInt32)
  fullName: System.Runtime.InteropServices.SafeBuffer.Initialize(UInt32,UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Initialize (uint numElements, uint sizeOfEachElement);
    parameters:
    - id: numElements
      type: System.UInt32
      description: To be added.
    - id: sizeOfEachElement
      type: System.UInt32
      description: To be added.
  overload: System.Runtime.InteropServices.SafeBuffer.Initialize*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)
  id: Initialize``1(System.UInt32)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: Initialize(UInt32)
  nameWithType: SafeBuffer.Initialize(UInt32)
  fullName: System.Runtime.InteropServices.SafeBuffer.Initialize(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: 'public void Initialize<T> (uint numElements) where T : struct;'
    parameters:
    - id: numElements
      type: System.UInt32
      description: To be added.
  overload: System.Runtime.InteropServices.SafeBuffer.Initialize<T>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)
  id: Read``1(System.UInt64)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: Read(UInt64)
  nameWithType: SafeBuffer.Read(UInt64)
  fullName: System.Runtime.InteropServices.SafeBuffer.Read(UInt64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: 'public T Read<T> (ulong byteOffset) where T : struct;'
    parameters:
    - id: byteOffset
      type: System.UInt64
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: System.Runtime.InteropServices.SafeBuffer.Read<T>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  id: ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: ReadArray(UInt64,T[],Int32,Int32)
  nameWithType: SafeBuffer.ReadArray(UInt64,T[],Int32,Int32)
  fullName: System.Runtime.InteropServices.SafeBuffer.ReadArray(UInt64,T[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: 'public void ReadArray<T> (ulong byteOffset, T[] array, int index, int count) where T : struct;'
    parameters:
    - id: byteOffset
      type: System.UInt64
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
  overload: System.Runtime.InteropServices.SafeBuffer.ReadArray<T>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeBuffer.ReleasePointer
  id: ReleasePointer
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: ReleasePointer()
  nameWithType: SafeBuffer.ReleasePointer()
  fullName: System.Runtime.InteropServices.SafeBuffer.ReleasePointer()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void ReleasePointer ();
    parameters: []
  overload: System.Runtime.InteropServices.SafeBuffer.ReleasePointer*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
  id: Write``1(System.UInt64,``0)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: Write(UInt64,T)
  nameWithType: SafeBuffer.Write(UInt64,T)
  fullName: System.Runtime.InteropServices.SafeBuffer.Write(UInt64,T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: 'public void Write<T> (ulong byteOffset, T value) where T : struct;'
    parameters:
    - id: byteOffset
      type: System.UInt64
      description: To be added.
    - id: value
      type: T
      description: To be added.
  overload: System.Runtime.InteropServices.SafeBuffer.Write<T>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  id: WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  name: WriteArray(UInt64,T[],Int32,Int32)
  nameWithType: SafeBuffer.WriteArray(UInt64,T[],Int32,Int32)
  fullName: System.Runtime.InteropServices.SafeBuffer.WriteArray(UInt64,T[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: 'public void WriteArray<T> (ulong byteOffset, T[] array, int index, int count) where T : struct;'
    parameters:
    - id: byteOffset
      type: System.UInt64
      description: To be added.
    - id: array
      type: T[]
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
    - id: count
      type: System.Int32
      description: To be added.
  overload: System.Runtime.InteropServices.SafeBuffer.WriteArray<T>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  isExternal: false
  name: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
- uid: System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: SafeBuffer(Boolean)
  nameWithType: SafeBuffer.SafeBuffer(Boolean)
  fullName: System.Runtime.InteropServices.SafeBuffer.SafeBuffer(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: AcquirePointer(Byte*)
  nameWithType: SafeBuffer.AcquirePointer(Byte*)
  fullName: System.Runtime.InteropServices.SafeBuffer.AcquirePointer(Byte*)
- uid: System.Runtime.InteropServices.SafeBuffer.ByteLength
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: ByteLength
  nameWithType: SafeBuffer.ByteLength
  fullName: System.Runtime.InteropServices.SafeBuffer.ByteLength
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: Initialize(UInt64)
  nameWithType: SafeBuffer.Initialize(UInt64)
  fullName: System.Runtime.InteropServices.SafeBuffer.Initialize(UInt64)
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: Initialize(UInt32,UInt32)
  nameWithType: SafeBuffer.Initialize(UInt32,UInt32)
  fullName: System.Runtime.InteropServices.SafeBuffer.Initialize(UInt32,UInt32)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: Initialize(UInt32)
  nameWithType: SafeBuffer.Initialize(UInt32)
  fullName: System.Runtime.InteropServices.SafeBuffer.Initialize(UInt32)
- uid: System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: Read(UInt64)
  nameWithType: SafeBuffer.Read(UInt64)
  fullName: System.Runtime.InteropServices.SafeBuffer.Read(UInt64)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: ReadArray(UInt64,T[],Int32,Int32)
  nameWithType: SafeBuffer.ReadArray(UInt64,T[],Int32,Int32)
  fullName: System.Runtime.InteropServices.SafeBuffer.ReadArray(UInt64,T[],Int32,Int32)
- uid: T[]
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.InteropServices.SafeBuffer.ReleasePointer
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: ReleasePointer()
  nameWithType: SafeBuffer.ReleasePointer()
  fullName: System.Runtime.InteropServices.SafeBuffer.ReleasePointer()
- uid: System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: Write(UInt64,T)
  nameWithType: SafeBuffer.Write(UInt64,T)
  fullName: System.Runtime.InteropServices.SafeBuffer.Write(UInt64,T)
- uid: System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: WriteArray(UInt64,T[],Int32,Int32)
  nameWithType: SafeBuffer.WriteArray(UInt64,T[],Int32,Int32)
  fullName: System.Runtime.InteropServices.SafeBuffer.WriteArray(UInt64,T[],Int32,Int32)
- uid: System.Runtime.InteropServices.SafeBuffer.#ctor*
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: SafeBuffer
  nameWithType: SafeBuffer.SafeBuffer
- uid: System.Runtime.InteropServices.SafeBuffer.AcquirePointer*
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: AcquirePointer
  nameWithType: SafeBuffer.AcquirePointer
- uid: System.Runtime.InteropServices.SafeBuffer.ByteLength*
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: ByteLength
  nameWithType: SafeBuffer.ByteLength
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize*
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: Initialize
  nameWithType: SafeBuffer.Initialize
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize<T>*
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: Initialize<T>
  nameWithType: SafeBuffer.Initialize<T>
- uid: System.Runtime.InteropServices.SafeBuffer.Read<T>*
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: Read<T>
  nameWithType: SafeBuffer.Read<T>
- uid: System.Runtime.InteropServices.SafeBuffer.ReadArray<T>*
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: ReadArray<T>
  nameWithType: SafeBuffer.ReadArray<T>
- uid: System.Runtime.InteropServices.SafeBuffer.ReleasePointer*
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: ReleasePointer
  nameWithType: SafeBuffer.ReleasePointer
- uid: System.Runtime.InteropServices.SafeBuffer.Write<T>*
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: Write<T>
  nameWithType: SafeBuffer.Write<T>
- uid: System.Runtime.InteropServices.SafeBuffer.WriteArray<T>*
  parent: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: WriteArray<T>
  nameWithType: SafeBuffer.WriteArray<T>
