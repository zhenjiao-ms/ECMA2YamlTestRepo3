### YamlMime:ManagedReference
items:
- uid: System.Collections.Concurrent.ConcurrentQueue`1
  id: ConcurrentQueue`1
  children:
  - System.Collections.Concurrent.ConcurrentQueue`1.#ctor
  - System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable`1)
  - System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)
  - System.Collections.Concurrent.ConcurrentQueue`1.Count
  - System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)
  - System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator
  - System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty
  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)
  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Concurrent.ConcurrentQueue`1.ToArray
  - System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)
  - System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)
  langs:
  - csharp
  name: ConcurrentQueue<T>
  nameWithType: ConcurrentQueue<T>
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>
  type: Class
  summary: To be added.
  remarks: To be added.
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Count = {Count}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Concurrent.SystemCollectionsConcurrent_ProducerConsumerCollectionDebugView`1))]

      [System.Runtime.InteropServices.ComVisible(false)]

      public class ConcurrentQueue<T> : System.Collections.Concurrent.IProducerConsumerCollection<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>
    typeParameters:
    - id: T
      description: To be added.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Concurrent.IProducerConsumerCollection<T>
  - System.Collections.Generic.IEnumerable<T>
  - System.Collections.Generic.IReadOnlyCollection<T>
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.ConcurrentQueue`1.#ctor
  id: '#ctor'
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  langs:
  - csharp
  name: ConcurrentQueue()
  nameWithType: ConcurrentQueue<T>.ConcurrentQueue()
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.ConcurrentQueue()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public ConcurrentQueue ();
    parameters: []
  overload: System.Collections.Concurrent.ConcurrentQueue`1.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable`1)
  id: '#ctor(System.Collections.Generic.IEnumerable`1)'
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  langs:
  - csharp
  name: ConcurrentQueue(IEnumerable<T>)
  nameWithType: ConcurrentQueue<T>.ConcurrentQueue(IEnumerable<T>)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.ConcurrentQueue(IEnumerable<T>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public ConcurrentQueue (System.Collections.Generic.IEnumerable<T> collection);
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable`1
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentQueue`1.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  langs:
  - csharp
  name: CopyTo(T[],Int32)
  nameWithType: ConcurrentQueue<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.CopyTo(T[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void CopyTo (T[] array, int index);
    parameters:
    - id: array
      type: T[]
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentQueue`1.CopyTo*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.ConcurrentQueue`1.Count
  id: Count
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  langs:
  - csharp
  name: Count
  nameWithType: ConcurrentQueue<T>.Count
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentQueue`1.Count*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)
  id: Enqueue(`0)
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  langs:
  - csharp
  name: Enqueue(T)
  nameWithType: ConcurrentQueue<T>.Enqueue(T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.Enqueue(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Enqueue (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentQueue`1.Enqueue*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ConcurrentQueue<T>.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Collections.Generic.IEnumerator<T> GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerator`1
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty
  id: IsEmpty
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  langs:
  - csharp
  name: IsEmpty
  nameWithType: ConcurrentQueue<T>.IsEmpty
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.IsEmpty
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsEmpty { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  id: System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  langs:
  - csharp
  name: System.Collections.Concurrent.IProducerConsumerCollection(T)
  nameWithType: ConcurrentQueue<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: bool IProducerConsumerCollection<T>.TryAdd (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection<T>#TryAdd*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)
  id: System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  langs:
  - csharp
  name: System.Collections.Concurrent.IProducerConsumerCollection(T)
  nameWithType: ConcurrentQueue<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: bool IProducerConsumerCollection<T>.TryTake (out T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection<T>#TryTake*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: ConcurrentQueue<T>.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: To be added.
    - id: index
      type: System.Int32
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: ConcurrentQueue<T>.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: ConcurrentQueue<T>.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ConcurrentQueue<T>.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.ConcurrentQueue`1.ToArray
  id: ToArray
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  langs:
  - csharp
  name: ToArray()
  nameWithType: ConcurrentQueue<T>.ToArray()
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.ToArray()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public T[] ToArray ();
    parameters: []
    return:
      type: T[]
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentQueue`1.ToArray*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)
  id: TryDequeue(`0@)
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  langs:
  - csharp
  name: TryDequeue(T)
  nameWithType: ConcurrentQueue<T>.TryDequeue(T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.TryDequeue(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool TryDequeue (out T result);
    parameters:
    - id: result
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)
  id: TryPeek(`0@)
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  langs:
  - csharp
  name: TryPeek(T)
  nameWithType: ConcurrentQueue<T>.TryPeek(T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.TryPeek(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool TryPeek (out T result);
    parameters:
    - id: result
      type: T
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.ConcurrentQueue`1.TryPeek*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Collections.Concurrent.ConcurrentQueue`1.#ctor
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: ConcurrentQueue()
  nameWithType: ConcurrentQueue<T>.ConcurrentQueue()
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.ConcurrentQueue()
- uid: System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable`1)
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: ConcurrentQueue(IEnumerable<T>)
  nameWithType: ConcurrentQueue<T>.ConcurrentQueue(IEnumerable<T>)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.ConcurrentQueue(IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: CopyTo(T[],Int32)
  nameWithType: ConcurrentQueue<T>.CopyTo(T[],Int32)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.CopyTo(T[],Int32)
- uid: T[]
  isExternal: true
  name: T
  nameWithType: T
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Concurrent.ConcurrentQueue`1.Count
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: Count
  nameWithType: ConcurrentQueue<T>.Count
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.Count
- uid: System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: Enqueue(T)
  nameWithType: ConcurrentQueue<T>.Enqueue(T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.Enqueue(T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: GetEnumerator()
  nameWithType: ConcurrentQueue<T>.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.GetEnumerator()
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
- uid: System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: IsEmpty
  nameWithType: ConcurrentQueue<T>.IsEmpty
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.IsEmpty
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: System.Collections.Concurrent.IProducerConsumerCollection(T)
  nameWithType: ConcurrentQueue<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: System.Collections.Concurrent.IProducerConsumerCollection(T)
  nameWithType: ConcurrentQueue<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.Concurrent.IProducerConsumerCollection(T)
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: ConcurrentQueue<T>.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: ConcurrentQueue<T>.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: ConcurrentQueue<T>.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ConcurrentQueue<T>.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Concurrent.ConcurrentQueue`1.ToArray
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: ToArray()
  nameWithType: ConcurrentQueue<T>.ToArray()
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.ToArray()
- uid: System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: TryDequeue(T)
  nameWithType: ConcurrentQueue<T>.TryDequeue(T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.TryDequeue(T)
- uid: System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: TryPeek(T)
  nameWithType: ConcurrentQueue<T>.TryPeek(T)
  fullName: System.Collections.Concurrent.ConcurrentQueue<T>.TryPeek(T)
- uid: System.Collections.Concurrent.ConcurrentQueue`1.#ctor*
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: ConcurrentQueue<T>
  nameWithType: ConcurrentQueue<T>.ConcurrentQueue<T>
- uid: System.Collections.Concurrent.ConcurrentQueue`1.CopyTo*
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: CopyTo
  nameWithType: ConcurrentQueue<T>.CopyTo
- uid: System.Collections.Concurrent.ConcurrentQueue`1.Count*
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: Count
  nameWithType: ConcurrentQueue<T>.Count
- uid: System.Collections.Concurrent.ConcurrentQueue`1.Enqueue*
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: Enqueue
  nameWithType: ConcurrentQueue<T>.Enqueue
- uid: System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator*
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: GetEnumerator
  nameWithType: ConcurrentQueue<T>.GetEnumerator
- uid: System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty*
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: IsEmpty
  nameWithType: ConcurrentQueue<T>.IsEmpty
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection<T>#TryAdd*
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd
  nameWithType: ConcurrentQueue<T>.System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection<T>#TryTake*
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake
  nameWithType: ConcurrentQueue<T>.System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: ConcurrentQueue<T>.System.Collections.ICollection.CopyTo
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: ConcurrentQueue<T>.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: ConcurrentQueue<T>.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ConcurrentQueue<T>.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Concurrent.ConcurrentQueue`1.ToArray*
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: ToArray
  nameWithType: ConcurrentQueue<T>.ToArray
- uid: System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue*
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: TryDequeue
  nameWithType: ConcurrentQueue<T>.TryDequeue
- uid: System.Collections.Concurrent.ConcurrentQueue`1.TryPeek*
  parent: System.Collections.Concurrent.ConcurrentQueue`1
  isExternal: false
  name: TryPeek
  nameWithType: ConcurrentQueue<T>.TryPeek
