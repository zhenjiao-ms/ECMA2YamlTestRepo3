### YamlMime:ManagedReference
items:
- uid: System.Threading.Tasks.Task
  id: Task
  children:
  - System.Threading.Tasks.Task.#ctor(System.Action)
  - System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)
  - System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task.AsyncState
  - System.Threading.Tasks.Task.CompletedTask
  - System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.CreationOptions
  - System.Threading.Tasks.Task.CurrentId
  - System.Threading.Tasks.Task.Delay(System.Int32)
  - System.Threading.Tasks.Task.Delay(System.TimeSpan)
  - System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Dispose
  - System.Threading.Tasks.Task.Dispose(System.Boolean)
  - System.Threading.Tasks.Task.Exception
  - System.Threading.Tasks.Task.Factory
  - System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.FromException(System.Exception)
  - System.Threading.Tasks.Task.FromException``1(System.Exception)
  - System.Threading.Tasks.Task.FromResult``1(``0)
  - System.Threading.Tasks.Task.GetAwaiter
  - System.Threading.Tasks.Task.Id
  - System.Threading.Tasks.Task.IsCanceled
  - System.Threading.Tasks.Task.IsCompleted
  - System.Threading.Tasks.Task.IsFaulted
  - System.Threading.Tasks.Task.Run(System.Action)
  - System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.Task.Run``1(System.Func`1)
  - System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Run``1(System.Func`1,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.RunSynchronously
  - System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.Start
  - System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.Status
  - System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle
  - System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously
  - System.Threading.Tasks.Task.Wait
  - System.Threading.Tasks.Task.Wait(System.Int32)
  - System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Wait(System.TimeSpan)
  - System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])
  - System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])
  - System.Threading.Tasks.Task.Yield
  langs:
  - csharp
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
  type: Class
  summary: To be added.
  remarks: To be added.
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Id = {Id}, Status = {Status}, Method = {DebuggerDisplayMethodDescription}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.Tasks.SystemThreadingTasks_TaskDebugView))]

      public class Task : IAsyncResult, IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IAsyncResult
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.#ctor(System.Action)
  id: '#ctor(System.Action)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Task(Action)
  nameWithType: Task.Task(Action)
  fullName: System.Threading.Tasks.Task.Task(Action)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Task (Action action);
    parameters:
    - id: action
      type: System.Action
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)
  id: '#ctor(System.Action,System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Task(Action,CancellationToken)
  nameWithType: Task.Task(Action,CancellationToken)
  fullName: System.Threading.Tasks.Task.Task(Action,CancellationToken)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Task (Action action, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: action
      type: System.Action
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Task(Action,TaskCreationOptions)
  nameWithType: Task.Task(Action,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(Action,TaskCreationOptions)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Task (Action action, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: action
      type: System.Action
      description: To be added.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)
  id: '#ctor(System.Action{System.Object},System.Object)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Task(Action<Object>,Object)
  nameWithType: Task.Task(Action<Object>,Object)
  fullName: System.Threading.Tasks.Task.Task(Action<Object>,Object)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Task (Action<object> action, object state);
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Task(Action,CancellationToken,TaskCreationOptions)
  nameWithType: Task.Task(Action,CancellationToken,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(Action,CancellationToken,TaskCreationOptions)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Task (Action action, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: action
      type: System.Action
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  id: '#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Task(Action<Object>,Object,CancellationToken)
  nameWithType: Task.Task(Action<Object>,Object,CancellationToken)
  fullName: System.Threading.Tasks.Task.Task(Action<Object>,Object,CancellationToken)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Task (Action<object> action, object state, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Task(Action<Object>,Object,TaskCreationOptions)
  nameWithType: Task.Task(Action<Object>,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(Action<Object>,Object,TaskCreationOptions)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Task (Action<object> action, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Task(Action<Object>,Object,CancellationToken,TaskCreationOptions)
  nameWithType: Task.Task(Action<Object>,Object,CancellationToken,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(Action<Object>,Object,CancellationToken,TaskCreationOptions)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Task (Action<object> action, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.AsyncState
  id: AsyncState
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: AsyncState
  nameWithType: Task.AsyncState
  fullName: System.Threading.Tasks.Task.AsyncState
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public object AsyncState { get; }
    return:
      type: System.Object
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.CompletedTask
  id: CompletedTask
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: CompletedTask
  nameWithType: Task.CompletedTask
  fullName: System.Threading.Tasks.Task.CompletedTask
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task CompletedTask { get; }
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)
  id: ConfigureAwait(System.Boolean)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ConfigureAwait(Boolean)
  nameWithType: Task.ConfigureAwait(Boolean)
  fullName: System.Threading.Tasks.Task.ConfigureAwait(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait (bool continueOnCapturedContext);
    parameters:
    - id: continueOnCapturedContext
      type: System.Boolean
      description: To be added.
    return:
      type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})
  id: ContinueWith(System.Action{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Action<Task>)
  nameWithType: Task.ContinueWith(Action<Task>)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task> continuationAction);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Action<Task,Object>,Object)
  nameWithType: Task.ContinueWith(Action<Task,Object>,Object)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task,Object>,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task,object> continuationAction, object state);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Action<Task>,CancellationToken)
  nameWithType: Task.ContinueWith(Action<Task>,CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task>,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Action<Task>,TaskContinuationOptions)
  nameWithType: Task.ContinueWith(Action<Task>,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task>,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Action<Task>,TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task>,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task>,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Action<Task,Object>,Object,CancellationToken)
  nameWithType: Task.ContinueWith(Action<Task,Object>,Object,CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task,Object>,Object,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task,object> continuationAction, object state, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Action<Task,Object>,Object,TaskContinuationOptions)
  nameWithType: Task.ContinueWith(Action<Task,Object>,Object,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task,Object>,Object,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task,object> continuationAction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Action<Task,Object>,Object,TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task,Object>,Object,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task,Object>,Object,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task,object> continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Action<Task>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Action<Task,Object>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task,Object>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task,Object>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task,object> continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Func<Task,TResult>)
  nameWithType: Task.ContinueWith(Func<Task,TResult>)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,TResult>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,TResult> continuationFunction);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Func<Task,Object,TResult>,Object)
  nameWithType: Task.ContinueWith(Func<Task,Object,TResult>,Object)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,Object,TResult>,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,object,TResult> continuationFunction, object state);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,TResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Func<Task,TResult>,CancellationToken)
  nameWithType: Task.ContinueWith(Func<Task,TResult>,CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,TResult>,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Func<Task,TResult>,TaskContinuationOptions)
  nameWithType: Task.ContinueWith(Func<Task,TResult>,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,TResult>,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Func<Task,TResult>,TaskScheduler)
  nameWithType: Task.ContinueWith(Func<Task,TResult>,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,TResult>,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken)
  nameWithType: Task.ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,object,TResult> continuationFunction, object state, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,TResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Func<Task,Object,TResult>,Object,TaskContinuationOptions)
  nameWithType: Task.ContinueWith(Func<Task,Object,TResult>,Object,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,Object,TResult>,Object,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,object,TResult> continuationFunction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,TResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Func<Task,Object,TResult>,Object,TaskScheduler)
  nameWithType: Task.ContinueWith(Func<Task,Object,TResult>,Object,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,Object,TResult>,Object,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,object,TResult> continuationFunction, object state, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,TResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task.ContinueWith(Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task.ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWith<TResult> (Func<System.Threading.Tasks.Task,object,TResult> continuationFunction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,TResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.ContinueWith<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.CreationOptions
  id: CreationOptions
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: CreationOptions
  nameWithType: Task.CreationOptions
  fullName: System.Threading.Tasks.Task.CreationOptions
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }
    return:
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.CurrentId
  id: CurrentId
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: CurrentId
  nameWithType: Task.CurrentId
  fullName: System.Threading.Tasks.Task.CurrentId
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static Nullable<int> CurrentId { get; }
    return:
      type: System.Nullable{System.Int32}
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Delay(System.Int32)
  id: Delay(System.Int32)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Delay(Int32)
  nameWithType: Task.Delay(Int32)
  fullName: System.Threading.Tasks.Task.Delay(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task Delay (int millisecondsDelay);
    parameters:
    - id: millisecondsDelay
      type: System.Int32
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task.Delay*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan)
  id: Delay(System.TimeSpan)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Delay(TimeSpan)
  nameWithType: Task.Delay(TimeSpan)
  fullName: System.Threading.Tasks.Task.Delay(TimeSpan)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task Delay (TimeSpan delay);
    parameters:
    - id: delay
      type: System.TimeSpan
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task.Delay*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)
  id: Delay(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Delay(Int32,CancellationToken)
  nameWithType: Task.Delay(Int32,CancellationToken)
  fullName: System.Threading.Tasks.Task.Delay(Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task Delay (int millisecondsDelay, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: millisecondsDelay
      type: System.Int32
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task.Delay*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)
  id: Delay(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Delay(TimeSpan,CancellationToken)
  nameWithType: Task.Delay(TimeSpan,CancellationToken)
  fullName: System.Threading.Tasks.Task.Delay(TimeSpan,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task Delay (TimeSpan delay, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: delay
      type: System.TimeSpan
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task.Delay*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Dispose
  id: Dispose
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Dispose()
  nameWithType: Task.Dispose()
  fullName: System.Threading.Tasks.Task.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Threading.Tasks.Task.Dispose*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Task.Dispose(Boolean)
  fullName: System.Threading.Tasks.Task.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: To be added.
  overload: System.Threading.Tasks.Task.Dispose*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Exception
  id: Exception
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Exception
  nameWithType: Task.Exception
  fullName: System.Threading.Tasks.Task.Exception
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public AggregateException Exception { get; }
    return:
      type: System.AggregateException
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Factory
  id: Factory
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Factory
  nameWithType: Task.Factory
  fullName: System.Threading.Tasks.Task.Factory
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.TaskFactory Factory { get; }
    return:
      type: System.Threading.Tasks.TaskFactory
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)
  id: FromCanceled(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: FromCanceled(CancellationToken)
  nameWithType: Task.FromCanceled(CancellationToken)
  fullName: System.Threading.Tasks.Task.FromCanceled(CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task FromCanceled (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)
  id: FromCanceled``1(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: FromCanceled(CancellationToken)
  nameWithType: Task.FromCanceled(CancellationToken)
  fullName: System.Threading.Tasks.Task.FromCanceled(CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<TResult> FromCanceled<TResult> (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.FromException(System.Exception)
  id: FromException(System.Exception)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: FromException(Exception)
  nameWithType: Task.FromException(Exception)
  fullName: System.Threading.Tasks.Task.FromException(Exception)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task FromException (Exception exception);
    parameters:
    - id: exception
      type: System.Exception
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.FromException``1(System.Exception)
  id: FromException``1(System.Exception)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: FromException(Exception)
  nameWithType: Task.FromException(Exception)
  fullName: System.Threading.Tasks.Task.FromException(Exception)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<TResult> FromException<TResult> (Exception exception);
    parameters:
    - id: exception
      type: System.Exception
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.FromResult``1(``0)
  id: FromResult``1(``0)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: FromResult(TResult)
  nameWithType: Task.FromResult(TResult)
  fullName: System.Threading.Tasks.Task.FromResult(TResult)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<TResult> FromResult<TResult> (TResult result);
    parameters:
    - id: result
      type: TResult
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.GetAwaiter
  id: GetAwaiter
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: GetAwaiter()
  nameWithType: Task.GetAwaiter()
  fullName: System.Threading.Tasks.Task.GetAwaiter()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Runtime.CompilerServices.TaskAwaiter GetAwaiter ();
    parameters: []
    return:
      type: System.Runtime.CompilerServices.TaskAwaiter
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Id
  id: Id
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Id
  nameWithType: Task.Id
  fullName: System.Threading.Tasks.Task.Id
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int Id { get; }
    return:
      type: System.Int32
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.IsCanceled
  id: IsCanceled
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: IsCanceled
  nameWithType: Task.IsCanceled
  fullName: System.Threading.Tasks.Task.IsCanceled
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsCanceled { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.IsCompleted
  id: IsCompleted
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: IsCompleted
  nameWithType: Task.IsCompleted
  fullName: System.Threading.Tasks.Task.IsCompleted
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsCompleted { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.IsFaulted
  id: IsFaulted
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: IsFaulted
  nameWithType: Task.IsFaulted
  fullName: System.Threading.Tasks.Task.IsFaulted
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsFaulted { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Run(System.Action)
  id: Run(System.Action)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Run(Action)
  nameWithType: Task.Run(Action)
  fullName: System.Threading.Tasks.Task.Run(Action)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task Run (Action action);
    parameters:
    - id: action
      type: System.Action
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task.Run*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})
  id: Run(System.Func{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Run(Func<Task>)
  nameWithType: Task.Run(Func<Task>)
  fullName: System.Threading.Tasks.Task.Run(Func<Task>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task Run (Func<System.Threading.Tasks.Task> function);
    parameters:
    - id: function
      type: System.Func{System.Threading.Tasks.Task}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task.Run*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)
  id: Run(System.Action,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Run(Action,CancellationToken)
  nameWithType: Task.Run(Action,CancellationToken)
  fullName: System.Threading.Tasks.Task.Run(Action,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task Run (Action action, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: action
      type: System.Action
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task.Run*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Run(Func<Task>,CancellationToken)
  nameWithType: Task.Run(Func<Task>,CancellationToken)
  fullName: System.Threading.Tasks.Task.Run(Func<Task>,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task Run (Func<System.Threading.Tasks.Task> function, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: function
      type: System.Func{System.Threading.Tasks.Task}
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task.Run*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})
  id: Run``1(System.Func{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Run(Func<Task<TResult>>)
  nameWithType: Task.Run(Func<Task<TResult>>)
  fullName: System.Threading.Tasks.Task.Run(Func<Task<TResult>>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<TResult> Run<TResult> (Func<System.Threading.Tasks.Task<TResult>> function);
    parameters:
    - id: function
      type: System.Func{System.Threading.Tasks.Task{TResult}}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.Run<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Run``1(System.Func`1)
  id: Run``1(System.Func`1)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Run(Func<TResult>)
  nameWithType: Task.Run(Func<TResult>)
  fullName: System.Threading.Tasks.Task.Run(Func<TResult>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<TResult> Run<TResult> (Func<TResult> function);
    parameters:
    - id: function
      type: System.Func`1
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.Run<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  id: Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Run(Func<Task<TResult>>,CancellationToken)
  nameWithType: Task.Run(Func<Task<TResult>>,CancellationToken)
  fullName: System.Threading.Tasks.Task.Run(Func<Task<TResult>>,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<TResult> Run<TResult> (Func<System.Threading.Tasks.Task<TResult>> function, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: function
      type: System.Func{System.Threading.Tasks.Task{TResult}}
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.Run<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Run``1(System.Func`1,System.Threading.CancellationToken)
  id: Run``1(System.Func`1,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Run(Func<TResult>,CancellationToken)
  nameWithType: Task.Run(Func<TResult>,CancellationToken)
  fullName: System.Threading.Tasks.Task.Run(Func<TResult>,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<TResult> Run<TResult> (Func<TResult> function, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: function
      type: System.Func`1
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.Task.Run<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.RunSynchronously
  id: RunSynchronously
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: RunSynchronously()
  nameWithType: Task.RunSynchronously()
  fullName: System.Threading.Tasks.Task.RunSynchronously()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void RunSynchronously ();
    parameters: []
  overload: System.Threading.Tasks.Task.RunSynchronously*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)
  id: RunSynchronously(System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: RunSynchronously(TaskScheduler)
  nameWithType: Task.RunSynchronously(TaskScheduler)
  fullName: System.Threading.Tasks.Task.RunSynchronously(TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void RunSynchronously (System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
  overload: System.Threading.Tasks.Task.RunSynchronously*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Start
  id: Start
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Start()
  nameWithType: Task.Start()
  fullName: System.Threading.Tasks.Task.Start()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Start ();
    parameters: []
  overload: System.Threading.Tasks.Task.Start*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)
  id: Start(System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Start(TaskScheduler)
  nameWithType: Task.Start(TaskScheduler)
  fullName: System.Threading.Tasks.Task.Start(TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Start (System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
  overload: System.Threading.Tasks.Task.Start*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Status
  id: Status
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Status
  nameWithType: Task.Status
  fullName: System.Threading.Tasks.Task.Status
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.TaskStatus Status { get; }
    return:
      type: System.Threading.Tasks.TaskStatus
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle
  id: System#IAsyncResult#AsyncWaitHandle
  isEii: true
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: Task.System.IAsyncResult.AsyncWaitHandle
  fullName: System.Threading.Tasks.Task.System.IAsyncResult.AsyncWaitHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }
    return:
      type: System.Threading.WaitHandle
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously
  id: System#IAsyncResult#CompletedSynchronously
  isEii: true
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: Task.System.IAsyncResult.CompletedSynchronously
  fullName: System.Threading.Tasks.Task.System.IAsyncResult.CompletedSynchronously
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: bool System.IAsyncResult.CompletedSynchronously { get; }
    return:
      type: System.Boolean
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Wait
  id: Wait
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Wait()
  nameWithType: Task.Wait()
  fullName: System.Threading.Tasks.Task.Wait()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Wait ();
    parameters: []
  overload: System.Threading.Tasks.Task.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Wait(System.Int32)
  id: Wait(System.Int32)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Wait(Int32)
  nameWithType: Task.Wait(Int32)
  fullName: System.Threading.Tasks.Task.Wait(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool Wait (int millisecondsTimeout);
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Threading.Tasks.Task.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)
  id: Wait(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Wait(CancellationToken)
  nameWithType: Task.Wait(CancellationToken)
  fullName: System.Threading.Tasks.Task.Wait(CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Wait (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
  overload: System.Threading.Tasks.Task.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Wait(System.TimeSpan)
  id: Wait(System.TimeSpan)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Wait(TimeSpan)
  nameWithType: Task.Wait(TimeSpan)
  fullName: System.Threading.Tasks.Task.Wait(TimeSpan)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool Wait (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Threading.Tasks.Task.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)
  id: Wait(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Wait(Int32,CancellationToken)
  nameWithType: Task.Wait(Int32,CancellationToken)
  fullName: System.Threading.Tasks.Task.Wait(Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool Wait (int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Threading.Tasks.Task.Wait*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])
  id: WaitAll(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WaitAll(Task[])
  nameWithType: Task.WaitAll(Task[])
  fullName: System.Threading.Tasks.Task.WaitAll(Task[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static void WaitAll (System.Threading.Tasks.Task[] tasks);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: To be added.
  overload: System.Threading.Tasks.Task.WaitAll*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)
  id: WaitAll(System.Threading.Tasks.Task[],System.Int32)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WaitAll(Task[],Int32)
  nameWithType: Task.WaitAll(Task[],Int32)
  fullName: System.Threading.Tasks.Task.WaitAll(Task[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static bool WaitAll (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: To be added.
    - id: millisecondsTimeout
      type: System.Int32
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Threading.Tasks.Task.WaitAll*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  id: WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WaitAll(Task[],CancellationToken)
  nameWithType: Task.WaitAll(Task[],CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAll(Task[],CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static void WaitAll (System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
  overload: System.Threading.Tasks.Task.WaitAll*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)
  id: WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WaitAll(Task[],TimeSpan)
  nameWithType: Task.WaitAll(Task[],TimeSpan)
  fullName: System.Threading.Tasks.Task.WaitAll(Task[],TimeSpan)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static bool WaitAll (System.Threading.Tasks.Task[] tasks, TimeSpan timeout);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: To be added.
    - id: timeout
      type: System.TimeSpan
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Threading.Tasks.Task.WaitAll*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  id: WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WaitAll(Task[],Int32,CancellationToken)
  nameWithType: Task.WaitAll(Task[],Int32,CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAll(Task[],Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static bool WaitAll (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: To be added.
    - id: millisecondsTimeout
      type: System.Int32
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Threading.Tasks.Task.WaitAll*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])
  id: WaitAny(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WaitAny(Task[])
  nameWithType: Task.WaitAny(Task[])
  fullName: System.Threading.Tasks.Task.WaitAny(Task[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static int WaitAny (System.Threading.Tasks.Task[] tasks);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Threading.Tasks.Task.WaitAny*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)
  id: WaitAny(System.Threading.Tasks.Task[],System.Int32)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WaitAny(Task[],Int32)
  nameWithType: Task.WaitAny(Task[],Int32)
  fullName: System.Threading.Tasks.Task.WaitAny(Task[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static int WaitAny (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: To be added.
    - id: millisecondsTimeout
      type: System.Int32
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Threading.Tasks.Task.WaitAny*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  id: WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WaitAny(Task[],CancellationToken)
  nameWithType: Task.WaitAny(Task[],CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAny(Task[],CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static int WaitAny (System.Threading.Tasks.Task[] tasks, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Threading.Tasks.Task.WaitAny*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)
  id: WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WaitAny(Task[],TimeSpan)
  nameWithType: Task.WaitAny(Task[],TimeSpan)
  fullName: System.Threading.Tasks.Task.WaitAny(Task[],TimeSpan)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static int WaitAny (System.Threading.Tasks.Task[] tasks, TimeSpan timeout);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: To be added.
    - id: timeout
      type: System.TimeSpan
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Threading.Tasks.Task.WaitAny*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  id: WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WaitAny(Task[],Int32,CancellationToken)
  nameWithType: Task.WaitAny(Task[],Int32,CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAny(Task[],Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static int WaitAny (System.Threading.Tasks.Task[] tasks, int millisecondsTimeout, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: To be added.
    - id: millisecondsTimeout
      type: System.Int32
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Threading.Tasks.Task.WaitAny*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  id: WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WhenAll(IEnumerable<Task>)
  nameWithType: Task.WhenAll(IEnumerable<Task>)
  fullName: System.Threading.Tasks.Task.WhenAll(IEnumerable<Task>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task WhenAll (System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task> tasks);
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task.WhenAll*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])
  id: WhenAll(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WhenAll(Task[])
  nameWithType: Task.WhenAll(Task[])
  fullName: System.Threading.Tasks.Task.WhenAll(Task[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task WhenAll (System.Threading.Tasks.Task[] tasks);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task.WhenAll*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  id: WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WhenAll(IEnumerable<Task<TResult>>)
  nameWithType: Task.WhenAll(IEnumerable<Task<TResult>>)
  fullName: System.Threading.Tasks.Task.WhenAll(IEnumerable<Task<TResult>>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<TResult[]> WhenAll<TResult> (System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>> tasks);
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{TResult}}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: To be added.
  overload: System.Threading.Tasks.Task.WhenAll<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])
  id: WhenAll``1(System.Threading.Tasks.Task{``0}[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WhenAll(Task<TResult>)
  nameWithType: Task.WhenAll(Task<TResult>)
  fullName: System.Threading.Tasks.Task.WhenAll(Task<TResult>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<TResult[]> WhenAll<TResult> (System.Threading.Tasks.Task<TResult>[] tasks);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TResult}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task{TResult}
      description: To be added.
  overload: System.Threading.Tasks.Task.WhenAll<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  id: WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WhenAny(IEnumerable<Task>)
  nameWithType: Task.WhenAny(IEnumerable<Task>)
  fullName: System.Threading.Tasks.Task.WhenAny(IEnumerable<Task>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<System.Threading.Tasks.Task> WhenAny (System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task> tasks);
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task}
      description: To be added.
  overload: System.Threading.Tasks.Task.WhenAny*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])
  id: WhenAny(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WhenAny(Task[])
  nameWithType: Task.WhenAny(Task[])
  fullName: System.Threading.Tasks.Task.WhenAny(Task[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<System.Threading.Tasks.Task> WhenAny (System.Threading.Tasks.Task[] tasks);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: To be added.
    return:
      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task}
      description: To be added.
  overload: System.Threading.Tasks.Task.WhenAny*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  id: WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WhenAny(IEnumerable<Task<TResult>>)
  nameWithType: Task.WhenAny(IEnumerable<Task<TResult>>)
  fullName: System.Threading.Tasks.Task.WhenAny(IEnumerable<Task<TResult>>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>> WhenAny<TResult> (System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>> tasks);
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{TResult}}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task{TResult}}
      description: To be added.
  overload: System.Threading.Tasks.Task.WhenAny<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])
  id: WhenAny``1(System.Threading.Tasks.Task{``0}[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: WhenAny(Task<TResult>)
  nameWithType: Task.WhenAny(Task<TResult>)
  fullName: System.Threading.Tasks.Task.WhenAny(Task<TResult>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>> WhenAny<TResult> (System.Threading.Tasks.Task<TResult>[] tasks);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TResult}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task{TResult}}
      description: To be added.
  overload: System.Threading.Tasks.Task.WhenAny<TResult>*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task.Yield
  id: Yield
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  name: Yield()
  nameWithType: Task.Yield()
  fullName: System.Threading.Tasks.Task.Yield()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Runtime.CompilerServices.YieldAwaitable Yield ();
    parameters: []
    return:
      type: System.Runtime.CompilerServices.YieldAwaitable
      description: To be added.
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Threading.Tasks.Task.#ctor(System.Action)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Task(Action)
  nameWithType: Task.Task(Action)
  fullName: System.Threading.Tasks.Task.Task(Action)
- uid: System.Action
  parent: System
  isExternal: false
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Task(Action,CancellationToken)
  nameWithType: Task.Task(Action,CancellationToken)
  fullName: System.Threading.Tasks.Task.Task(Action,CancellationToken)
- uid: System.Action
  parent: System
  isExternal: false
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Task(Action,TaskCreationOptions)
  nameWithType: Task.Task(Action,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(Action,TaskCreationOptions)
- uid: System.Action
  parent: System
  isExternal: false
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Task(Action<Object>,Object)
  nameWithType: Task.Task(Action<Object>,Object)
  fullName: System.Threading.Tasks.Task.Task(Action<Object>,Object)
- uid: System.Action{System.Object}
  parent: System
  isExternal: false
  name: Action<Object>
  nameWithType: Action<Object>
  fullName: System.Action<System.Object>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Task(Action,CancellationToken,TaskCreationOptions)
  nameWithType: Task.Task(Action,CancellationToken,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(Action,CancellationToken,TaskCreationOptions)
- uid: System.Action
  parent: System
  isExternal: false
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Task(Action<Object>,Object,CancellationToken)
  nameWithType: Task.Task(Action<Object>,Object,CancellationToken)
  fullName: System.Threading.Tasks.Task.Task(Action<Object>,Object,CancellationToken)
- uid: System.Action{System.Object}
  parent: System
  isExternal: false
  name: Action<Object>
  nameWithType: Action<Object>
  fullName: System.Action<System.Object>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Task(Action<Object>,Object,TaskCreationOptions)
  nameWithType: Task.Task(Action<Object>,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(Action<Object>,Object,TaskCreationOptions)
- uid: System.Action{System.Object}
  parent: System
  isExternal: false
  name: Action<Object>
  nameWithType: Action<Object>
  fullName: System.Action<System.Object>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Task(Action<Object>,Object,CancellationToken,TaskCreationOptions)
  nameWithType: Task.Task(Action<Object>,Object,CancellationToken,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(Action<Object>,Object,CancellationToken,TaskCreationOptions)
- uid: System.Action{System.Object}
  parent: System
  isExternal: false
  name: Action<Object>
  nameWithType: Action<Object>
  fullName: System.Action<System.Object>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.Task.AsyncState
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: AsyncState
  nameWithType: Task.AsyncState
  fullName: System.Threading.Tasks.Task.AsyncState
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.Task.CompletedTask
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: CompletedTask
  nameWithType: Task.CompletedTask
  fullName: System.Threading.Tasks.Task.CompletedTask
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ConfigureAwait(Boolean)
  nameWithType: Task.ConfigureAwait(Boolean)
  fullName: System.Threading.Tasks.Task.ConfigureAwait(Boolean)
- uid: System.Runtime.CompilerServices.ConfiguredTaskAwaitable
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: ConfiguredTaskAwaitable
  nameWithType: ConfiguredTaskAwaitable
  fullName: System.Runtime.CompilerServices.ConfiguredTaskAwaitable
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task>)
  nameWithType: Task.ContinueWith(Action<Task>)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task>)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action{System.Threading.Tasks.Task}
  parent: System
  isExternal: false
  name: Action<Task>
  nameWithType: Action<Task>
  fullName: System.Action<System.Threading.Tasks.Task>
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task,Object>,Object)
  nameWithType: Task.ContinueWith(Action<Task,Object>,Object)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task,Object>,Object)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action{System.Threading.Tasks.Task,System.Object}
  parent: System
  isExternal: false
  name: Action<Task,Object>
  nameWithType: Action<Task,Object>
  fullName: System.Action<System.Threading.Tasks.Task,System.Object>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task>,CancellationToken)
  nameWithType: Task.ContinueWith(Action<Task>,CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task>,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action{System.Threading.Tasks.Task}
  parent: System
  isExternal: false
  name: Action<Task>
  nameWithType: Action<Task>
  fullName: System.Action<System.Threading.Tasks.Task>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task>,TaskContinuationOptions)
  nameWithType: Task.ContinueWith(Action<Task>,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task>,TaskContinuationOptions)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action{System.Threading.Tasks.Task}
  parent: System
  isExternal: false
  name: Action<Task>
  nameWithType: Action<Task>
  fullName: System.Action<System.Threading.Tasks.Task>
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task>,TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task>,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task>,TaskScheduler)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action{System.Threading.Tasks.Task}
  parent: System
  isExternal: false
  name: Action<Task>
  nameWithType: Action<Task>
  fullName: System.Action<System.Threading.Tasks.Task>
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task,Object>,Object,CancellationToken)
  nameWithType: Task.ContinueWith(Action<Task,Object>,Object,CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task,Object>,Object,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action{System.Threading.Tasks.Task,System.Object}
  parent: System
  isExternal: false
  name: Action<Task,Object>
  nameWithType: Action<Task,Object>
  fullName: System.Action<System.Threading.Tasks.Task,System.Object>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task,Object>,Object,TaskContinuationOptions)
  nameWithType: Task.ContinueWith(Action<Task,Object>,Object,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task,Object>,Object,TaskContinuationOptions)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action{System.Threading.Tasks.Task,System.Object}
  parent: System
  isExternal: false
  name: Action<Task,Object>
  nameWithType: Action<Task,Object>
  fullName: System.Action<System.Threading.Tasks.Task,System.Object>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task,Object>,Object,TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task,Object>,Object,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task,Object>,Object,TaskScheduler)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action{System.Threading.Tasks.Task,System.Object}
  parent: System
  isExternal: false
  name: Action<Task,Object>
  nameWithType: Action<Task,Object>
  fullName: System.Action<System.Threading.Tasks.Task,System.Object>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task>,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action{System.Threading.Tasks.Task}
  parent: System
  isExternal: false
  name: Action<Task>
  nameWithType: Action<Task>
  fullName: System.Action<System.Threading.Tasks.Task>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Action<Task,Object>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task.ContinueWith(Action<Task,Object>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Action<Task,Object>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action{System.Threading.Tasks.Task,System.Object}
  parent: System
  isExternal: false
  name: Action<Task,Object>
  nameWithType: Action<Task,Object>
  fullName: System.Action<System.Threading.Tasks.Task,System.Object>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Func<Task,TResult>)
  nameWithType: Task.ContinueWith(Func<Task,TResult>)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,TResult>)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task,TResult}
  parent: System
  isExternal: false
  name: Func<Task,TResult>
  nameWithType: Func<Task,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,TResult>
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Func<Task,Object,TResult>,Object)
  nameWithType: Task.ContinueWith(Func<Task,Object,TResult>,Object)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,Object,TResult>,Object)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task,System.Object,TResult}
  parent: System
  isExternal: false
  name: Func<Task,Object,TResult>
  nameWithType: Func<Task,Object,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,System.Object,TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Func<Task,TResult>,CancellationToken)
  nameWithType: Task.ContinueWith(Func<Task,TResult>,CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,TResult>,CancellationToken)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task,TResult}
  parent: System
  isExternal: false
  name: Func<Task,TResult>
  nameWithType: Func<Task,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Func<Task,TResult>,TaskContinuationOptions)
  nameWithType: Task.ContinueWith(Func<Task,TResult>,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,TResult>,TaskContinuationOptions)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task,TResult}
  parent: System
  isExternal: false
  name: Func<Task,TResult>
  nameWithType: Func<Task,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,TResult>
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Func<Task,TResult>,TaskScheduler)
  nameWithType: Task.ContinueWith(Func<Task,TResult>,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,TResult>,TaskScheduler)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task,TResult}
  parent: System
  isExternal: false
  name: Func<Task,TResult>
  nameWithType: Func<Task,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,TResult>
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken)
  nameWithType: Task.ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task,System.Object,TResult}
  parent: System
  isExternal: false
  name: Func<Task,Object,TResult>
  nameWithType: Func<Task,Object,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,System.Object,TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Func<Task,Object,TResult>,Object,TaskContinuationOptions)
  nameWithType: Task.ContinueWith(Func<Task,Object,TResult>,Object,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,Object,TResult>,Object,TaskContinuationOptions)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task,System.Object,TResult}
  parent: System
  isExternal: false
  name: Func<Task,Object,TResult>
  nameWithType: Func<Task,Object,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,System.Object,TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Func<Task,Object,TResult>,Object,TaskScheduler)
  nameWithType: Task.ContinueWith(Func<Task,Object,TResult>,Object,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,Object,TResult>,Object,TaskScheduler)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task,System.Object,TResult}
  parent: System
  isExternal: false
  name: Func<Task,Object,TResult>
  nameWithType: Func<Task,Object,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,System.Object,TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task.ContinueWith(Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task,TResult}
  parent: System
  isExternal: false
  name: Func<Task,TResult>
  nameWithType: Func<Task,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task.ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(Func<Task,Object,TResult>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task,System.Object,TResult}
  parent: System
  isExternal: false
  name: Func<Task,Object,TResult>
  nameWithType: Func<Task,Object,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,System.Object,TResult>
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task.CreationOptions
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: CreationOptions
  nameWithType: Task.CreationOptions
  fullName: System.Threading.Tasks.Task.CreationOptions
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.Task.CurrentId
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: CurrentId
  nameWithType: Task.CurrentId
  fullName: System.Threading.Tasks.Task.CurrentId
- uid: System.Nullable{System.Int32}
  parent: System
  isExternal: false
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
- uid: System.Threading.Tasks.Task.Delay(System.Int32)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Delay(Int32)
  nameWithType: Task.Delay(Int32)
  fullName: System.Threading.Tasks.Task.Delay(Int32)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Delay(TimeSpan)
  nameWithType: Task.Delay(TimeSpan)
  fullName: System.Threading.Tasks.Task.Delay(TimeSpan)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Delay(Int32,CancellationToken)
  nameWithType: Task.Delay(Int32,CancellationToken)
  fullName: System.Threading.Tasks.Task.Delay(Int32,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Delay(TimeSpan,CancellationToken)
  nameWithType: Task.Delay(TimeSpan,CancellationToken)
  fullName: System.Threading.Tasks.Task.Delay(TimeSpan,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.Dispose
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Dispose()
  nameWithType: Task.Dispose()
  fullName: System.Threading.Tasks.Task.Dispose()
- uid: System.Threading.Tasks.Task.Dispose(System.Boolean)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Task.Dispose(Boolean)
  fullName: System.Threading.Tasks.Task.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task.Exception
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Exception
  nameWithType: Task.Exception
  fullName: System.Threading.Tasks.Task.Exception
- uid: System.AggregateException
  parent: System
  isExternal: false
  name: AggregateException
  nameWithType: AggregateException
  fullName: System.AggregateException
- uid: System.Threading.Tasks.Task.Factory
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Factory
  nameWithType: Task.Factory
  fullName: System.Threading.Tasks.Task.Factory
- uid: System.Threading.Tasks.TaskFactory
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskFactory
  nameWithType: TaskFactory
  fullName: System.Threading.Tasks.TaskFactory
- uid: System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: FromCanceled(CancellationToken)
  nameWithType: Task.FromCanceled(CancellationToken)
  fullName: System.Threading.Tasks.Task.FromCanceled(CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: FromCanceled(CancellationToken)
  nameWithType: Task.FromCanceled(CancellationToken)
  fullName: System.Threading.Tasks.Task.FromCanceled(CancellationToken)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.FromException(System.Exception)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: FromException(Exception)
  nameWithType: Task.FromException(Exception)
  fullName: System.Threading.Tasks.Task.FromException(Exception)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Threading.Tasks.Task.FromException``1(System.Exception)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: FromException(Exception)
  nameWithType: Task.FromException(Exception)
  fullName: System.Threading.Tasks.Task.FromException(Exception)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Threading.Tasks.Task.FromResult``1(``0)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: FromResult(TResult)
  nameWithType: Task.FromResult(TResult)
  fullName: System.Threading.Tasks.Task.FromResult(TResult)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: TResult
  parent: ''
  isExternal: true
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Threading.Tasks.Task.GetAwaiter
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: GetAwaiter()
  nameWithType: Task.GetAwaiter()
  fullName: System.Threading.Tasks.Task.GetAwaiter()
- uid: System.Runtime.CompilerServices.TaskAwaiter
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: TaskAwaiter
  nameWithType: TaskAwaiter
  fullName: System.Runtime.CompilerServices.TaskAwaiter
- uid: System.Threading.Tasks.Task.Id
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Id
  nameWithType: Task.Id
  fullName: System.Threading.Tasks.Task.Id
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task.IsCanceled
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: IsCanceled
  nameWithType: Task.IsCanceled
  fullName: System.Threading.Tasks.Task.IsCanceled
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task.IsCompleted
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: IsCompleted
  nameWithType: Task.IsCompleted
  fullName: System.Threading.Tasks.Task.IsCompleted
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task.IsFaulted
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: IsFaulted
  nameWithType: Task.IsFaulted
  fullName: System.Threading.Tasks.Task.IsFaulted
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task.Run(System.Action)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run(Action)
  nameWithType: Task.Run(Action)
  fullName: System.Threading.Tasks.Task.Run(Action)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action
  parent: System
  isExternal: false
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run(Func<Task>)
  nameWithType: Task.Run(Func<Task>)
  fullName: System.Threading.Tasks.Task.Run(Func<Task>)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Func{System.Threading.Tasks.Task}
  parent: System
  isExternal: false
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: System.Func<System.Threading.Tasks.Task>
- uid: System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run(Action,CancellationToken)
  nameWithType: Task.Run(Action,CancellationToken)
  fullName: System.Threading.Tasks.Task.Run(Action,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action
  parent: System
  isExternal: false
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run(Func<Task>,CancellationToken)
  nameWithType: Task.Run(Func<Task>,CancellationToken)
  fullName: System.Threading.Tasks.Task.Run(Func<Task>,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Func{System.Threading.Tasks.Task}
  parent: System
  isExternal: false
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: System.Func<System.Threading.Tasks.Task>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run(Func<Task<TResult>>)
  nameWithType: Task.Run(Func<Task<TResult>>)
  fullName: System.Threading.Tasks.Task.Run(Func<Task<TResult>>)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task{TResult}}
  parent: System
  isExternal: false
  name: Func<Task<TResult>>
  nameWithType: Func<Task<TResult>>
  fullName: System.Func<System.Threading.Tasks.Task<TResult>>
- uid: System.Threading.Tasks.Task.Run``1(System.Func`1)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run(Func<TResult>)
  nameWithType: Task.Run(Func<TResult>)
  fullName: System.Threading.Tasks.Task.Run(Func<TResult>)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func`1
  parent: System
  isExternal: false
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run(Func<Task<TResult>>,CancellationToken)
  nameWithType: Task.Run(Func<Task<TResult>>,CancellationToken)
  fullName: System.Threading.Tasks.Task.Run(Func<Task<TResult>>,CancellationToken)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func{System.Threading.Tasks.Task{TResult}}
  parent: System
  isExternal: false
  name: Func<Task<TResult>>
  nameWithType: Func<Task<TResult>>
  fullName: System.Func<System.Threading.Tasks.Task<TResult>>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.Run``1(System.Func`1,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run(Func<TResult>,CancellationToken)
  nameWithType: Task.Run(Func<TResult>,CancellationToken)
  fullName: System.Threading.Tasks.Task.Run(Func<TResult>,CancellationToken)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Func`1
  parent: System
  isExternal: false
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.RunSynchronously
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: RunSynchronously()
  nameWithType: Task.RunSynchronously()
  fullName: System.Threading.Tasks.Task.RunSynchronously()
- uid: System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: RunSynchronously(TaskScheduler)
  nameWithType: Task.RunSynchronously(TaskScheduler)
  fullName: System.Threading.Tasks.Task.RunSynchronously(TaskScheduler)
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task.Start
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Start()
  nameWithType: Task.Start()
  fullName: System.Threading.Tasks.Task.Start()
- uid: System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Start(TaskScheduler)
  nameWithType: Task.Start(TaskScheduler)
  fullName: System.Threading.Tasks.Task.Start(TaskScheduler)
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task.Status
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Status
  nameWithType: Task.Status
  fullName: System.Threading.Tasks.Task.Status
- uid: System.Threading.Tasks.TaskStatus
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskStatus
  nameWithType: TaskStatus
  fullName: System.Threading.Tasks.TaskStatus
- uid: System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: Task.System.IAsyncResult.AsyncWaitHandle
  fullName: System.Threading.Tasks.Task.System.IAsyncResult.AsyncWaitHandle
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: Task.System.IAsyncResult.CompletedSynchronously
  fullName: System.Threading.Tasks.Task.System.IAsyncResult.CompletedSynchronously
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task.Wait
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Wait()
  nameWithType: Task.Wait()
  fullName: System.Threading.Tasks.Task.Wait()
- uid: System.Threading.Tasks.Task.Wait(System.Int32)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Wait(Int32)
  nameWithType: Task.Wait(Int32)
  fullName: System.Threading.Tasks.Task.Wait(Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Wait(CancellationToken)
  nameWithType: Task.Wait(CancellationToken)
  fullName: System.Threading.Tasks.Task.Wait(CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.Wait(System.TimeSpan)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Wait(TimeSpan)
  nameWithType: Task.Wait(TimeSpan)
  fullName: System.Threading.Tasks.Task.Wait(TimeSpan)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Wait(Int32,CancellationToken)
  nameWithType: Task.Wait(Int32,CancellationToken)
  fullName: System.Threading.Tasks.Task.Wait(Int32,CancellationToken)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAll(Task[])
  nameWithType: Task.WaitAll(Task[])
  fullName: System.Threading.Tasks.Task.WaitAll(Task[])
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAll(Task[],Int32)
  nameWithType: Task.WaitAll(Task[],Int32)
  fullName: System.Threading.Tasks.Task.WaitAll(Task[],Int32)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAll(Task[],CancellationToken)
  nameWithType: Task.WaitAll(Task[],CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAll(Task[],CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAll(Task[],TimeSpan)
  nameWithType: Task.WaitAll(Task[],TimeSpan)
  fullName: System.Threading.Tasks.Task.WaitAll(Task[],TimeSpan)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAll(Task[],Int32,CancellationToken)
  nameWithType: Task.WaitAll(Task[],Int32,CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAll(Task[],Int32,CancellationToken)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAny(Task[])
  nameWithType: Task.WaitAny(Task[])
  fullName: System.Threading.Tasks.Task.WaitAny(Task[])
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAny(Task[],Int32)
  nameWithType: Task.WaitAny(Task[],Int32)
  fullName: System.Threading.Tasks.Task.WaitAny(Task[],Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAny(Task[],CancellationToken)
  nameWithType: Task.WaitAny(Task[],CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAny(Task[],CancellationToken)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAny(Task[],TimeSpan)
  nameWithType: Task.WaitAny(Task[],TimeSpan)
  fullName: System.Threading.Tasks.Task.WaitAny(Task[],TimeSpan)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAny(Task[],Int32,CancellationToken)
  nameWithType: Task.WaitAny(Task[],Int32,CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAny(Task[],Int32,CancellationToken)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAll(IEnumerable<Task>)
  nameWithType: Task.WhenAll(IEnumerable<Task>)
  fullName: System.Threading.Tasks.Task.WhenAll(IEnumerable<Task>)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Task>
  nameWithType: IEnumerable<Task>
  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>
- uid: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAll(Task[])
  nameWithType: Task.WhenAll(Task[])
  fullName: System.Threading.Tasks.Task.WhenAll(Task[])
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAll(IEnumerable<Task<TResult>>)
  nameWithType: Task.WhenAll(IEnumerable<Task<TResult>>)
  fullName: System.Threading.Tasks.Task.WhenAll(IEnumerable<Task<TResult>>)
- uid: System.Threading.Tasks.Task{TResult}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult[]>
- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{TResult}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Task<TResult>>
  nameWithType: IEnumerable<Task<TResult>>
  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>
- uid: System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAll(Task<TResult>)
  nameWithType: Task.WhenAll(Task<TResult>)
  fullName: System.Threading.Tasks.Task.WhenAll(Task<TResult>)
- uid: System.Threading.Tasks.Task{TResult}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult[]>
- uid: System.Threading.Tasks.Task{TResult}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>[]
- uid: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAny(IEnumerable<Task>)
  nameWithType: Task.WhenAny(IEnumerable<Task>)
  fullName: System.Threading.Tasks.Task.WhenAny(IEnumerable<Task>)
- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<Task>
  nameWithType: Task<Task>
  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task>
- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Task>
  nameWithType: IEnumerable<Task>
  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>
- uid: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAny(Task[])
  nameWithType: Task.WhenAny(Task[])
  fullName: System.Threading.Tasks.Task.WhenAny(Task[])
- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<Task>
  nameWithType: Task<Task>
  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task>
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
- uid: System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAny(IEnumerable<Task<TResult>>)
  nameWithType: Task.WhenAny(IEnumerable<Task<TResult>>)
  fullName: System.Threading.Tasks.Task.WhenAny(IEnumerable<Task<TResult>>)
- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task{TResult}}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<Task<TResult>>
  nameWithType: Task<Task<TResult>>
  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>>
- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{TResult}}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<Task<TResult>>
  nameWithType: IEnumerable<Task<TResult>>
  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>
- uid: System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAny(Task<TResult>)
  nameWithType: Task.WhenAny(Task<TResult>)
  fullName: System.Threading.Tasks.Task.WhenAny(Task<TResult>)
- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task{TResult}}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<Task<TResult>>
  nameWithType: Task<Task<TResult>>
  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>>
- uid: System.Threading.Tasks.Task{TResult}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>[]
- uid: System.Threading.Tasks.Task.Yield
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Yield()
  nameWithType: Task.Yield()
  fullName: System.Threading.Tasks.Task.Yield()
- uid: System.Runtime.CompilerServices.YieldAwaitable
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: YieldAwaitable
  nameWithType: YieldAwaitable
  fullName: System.Runtime.CompilerServices.YieldAwaitable
- uid: System.Threading.Tasks.Task.ContinueWith*
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith
  nameWithType: Task.ContinueWith
- uid: System.Threading.Tasks.Task.ContinueWith<TResult>*
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: ContinueWith<TResult>
  nameWithType: Task.ContinueWith<TResult>
- uid: System.Threading.Tasks.Task.Delay*
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Delay
  nameWithType: Task.Delay
- uid: System.Threading.Tasks.Task.Dispose*
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Dispose
  nameWithType: Task.Dispose
- uid: System.Threading.Tasks.Task.Run*
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run
  nameWithType: Task.Run
- uid: System.Threading.Tasks.Task.Run<TResult>*
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Run<TResult>
  nameWithType: Task.Run<TResult>
- uid: System.Threading.Tasks.Task.RunSynchronously*
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: RunSynchronously
  nameWithType: Task.RunSynchronously
- uid: System.Threading.Tasks.Task.Start*
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Start
  nameWithType: Task.Start
- uid: System.Threading.Tasks.Task.Wait*
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: Wait
  nameWithType: Task.Wait
- uid: System.Threading.Tasks.Task.WaitAll*
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAll
  nameWithType: Task.WaitAll
- uid: System.Threading.Tasks.Task.WaitAny*
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WaitAny
  nameWithType: Task.WaitAny
- uid: System.Threading.Tasks.Task.WhenAll*
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAll
  nameWithType: Task.WhenAll
- uid: System.Threading.Tasks.Task.WhenAll<TResult>*
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAll<TResult>
  nameWithType: Task.WhenAll<TResult>
- uid: System.Threading.Tasks.Task.WhenAny*
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAny
  nameWithType: Task.WhenAny
- uid: System.Threading.Tasks.Task.WhenAny<TResult>*
  parent: System.Threading.Tasks.Task
  isExternal: false
  name: WhenAny<TResult>
  nameWithType: Task.WhenAny<TResult>
