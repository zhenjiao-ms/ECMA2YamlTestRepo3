### YamlMime:ManagedReference
items:
- uid: System.Collections.Concurrent.Partitioner`1
  id: Partitioner`1
  children:
  - System.Collections.Concurrent.Partitioner`1.#ctor
  - System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
  - System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
  - System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  langs:
  - csharp
  name: Partitioner<TSource>
  nameWithType: Partitioner<TSource>
  fullName: System.Collections.Concurrent.Partitioner<TSource>
  type: Class
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public abstract class Partitioner<TSource>
    typeParameters:
    - id: TSource
      description: To be added.
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.Partitioner`1.#ctor
  id: '#ctor'
  parent: System.Collections.Concurrent.Partitioner`1
  langs:
  - csharp
  name: Partitioner()
  nameWithType: Partitioner<TSource>.Partitioner()
  fullName: System.Collections.Concurrent.Partitioner<TSource>.Partitioner()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected Partitioner ();
    parameters: []
  overload: System.Collections.Concurrent.Partitioner`1.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
  id: GetDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner`1
  langs:
  - csharp
  name: GetDynamicPartitions()
  nameWithType: Partitioner<TSource>.GetDynamicPartitions()
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetDynamicPartitions()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<TSource> GetDynamicPartitions ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{TSource}
      description: To be added.
  overload: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
  id: GetPartitions(System.Int32)
  parent: System.Collections.Concurrent.Partitioner`1
  langs:
  - csharp
  name: GetPartitions(Int32)
  nameWithType: Partitioner<TSource>.GetPartitions(Int32)
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetPartitions(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public abstract System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>> GetPartitions (int partitionCount);
    parameters:
    - id: partitionCount
      type: System.Int32
      description: To be added.
    return:
      type: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{TSource}}
      description: To be added.
  overload: System.Collections.Concurrent.Partitioner`1.GetPartitions*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  id: SupportsDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner`1
  langs:
  - csharp
  name: SupportsDynamicPartitions
  nameWithType: Partitioner<TSource>.SupportsDynamicPartitions
  fullName: System.Collections.Concurrent.Partitioner<TSource>.SupportsDynamicPartitions
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Concurrent
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual bool SupportsDynamicPartitions { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Collections.Concurrent.Partitioner`1.#ctor
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: Partitioner()
  nameWithType: Partitioner<TSource>.Partitioner()
  fullName: System.Collections.Concurrent.Partitioner<TSource>.Partitioner()
- uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: GetDynamicPartitions()
  nameWithType: Partitioner<TSource>.GetDynamicPartitions()
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetDynamicPartitions()
- uid: System.Collections.Generic.IEnumerable{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<TSource>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: GetPartitions(Int32)
  nameWithType: Partitioner<TSource>.GetPartitions(Int32)
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetPartitions(Int32)
- uid: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{TSource}}
  parent: System.Collections.Generic
  isExternal: false
  name: IList<IEnumerator<TSource>>
  nameWithType: IList<IEnumerator<TSource>>
  fullName: System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Collections.Generic.IEnumerator<TSource>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator<TSource>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: SupportsDynamicPartitions
  nameWithType: Partitioner<TSource>.SupportsDynamicPartitions
  fullName: System.Collections.Concurrent.Partitioner<TSource>.SupportsDynamicPartitions
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Concurrent.Partitioner`1.#ctor*
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: Partitioner<TSource>
  nameWithType: Partitioner<TSource>.Partitioner<TSource>
- uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions*
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: GetDynamicPartitions
  nameWithType: Partitioner<TSource>.GetDynamicPartitions
- uid: System.Collections.Concurrent.Partitioner`1.GetPartitions*
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: GetPartitions
  nameWithType: Partitioner<TSource>.GetPartitions
- uid: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions*
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: SupportsDynamicPartitions
  nameWithType: Partitioner<TSource>.SupportsDynamicPartitions
