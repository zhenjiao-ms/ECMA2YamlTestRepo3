### YamlMime:ManagedReference
items:
- uid: System.Threading.ManualResetEvent
  id: ManualResetEvent
  children:
  - System.Threading.ManualResetEvent.#ctor(System.Boolean)
  langs:
  - csharp
  name: ManualResetEvent
  nameWithType: ManualResetEvent
  fullName: System.Threading.ManualResetEvent
  type: Class
  summary: To be added.
  remarks: To be added.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ManualResetEvent : System.Threading.EventWaitHandle
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Threading.WaitHandle
  - System.Threading.EventWaitHandle
  implements: []
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Threading.EventWaitHandle.GetAccessControl
  - System.Threading.EventWaitHandle.OpenExisting(System.String)
  - System.Threading.EventWaitHandle.OpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights)
  - System.Threading.EventWaitHandle.Reset
  - System.Threading.EventWaitHandle.Set
  - System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity)
  - System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Threading.EventWaitHandle@)
  - System.Threading.EventWaitHandle.TryOpenExisting(System.String,System.Threading.EventWaitHandle@)
  - System.Threading.WaitHandle.Close
  - System.Threading.WaitHandle.Dispose
  - System.Threading.WaitHandle.Dispose(System.Boolean)
  - System.Threading.WaitHandle.Handle
  - System.Threading.WaitHandle.InvalidHandle
  - System.Threading.WaitHandle.SafeWaitHandle
  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)
  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)
  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitOne
  - System.Threading.WaitHandle.WaitOne(System.Int32)
  - System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)
  - System.Threading.WaitHandle.WaitOne(System.TimeSpan)
  - System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitTimeout
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.ManualResetEvent.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Threading.ManualResetEvent
  langs:
  - csharp
  name: ManualResetEvent(Boolean)
  nameWithType: ManualResetEvent.ManualResetEvent(Boolean)
  fullName: System.Threading.ManualResetEvent.ManualResetEvent(Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public ManualResetEvent (bool initialState);
    parameters:
    - id: initialState
      type: System.Boolean
      description: To be added.
  overload: System.Threading.ManualResetEvent.#ctor*
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Threading.EventWaitHandle
  isExternal: false
  name: System.Threading.EventWaitHandle
- uid: System.Threading.ManualResetEvent.#ctor(System.Boolean)
  parent: System.Threading.ManualResetEvent
  isExternal: false
  name: ManualResetEvent(Boolean)
  nameWithType: ManualResetEvent.ManualResetEvent(Boolean)
  fullName: System.Threading.ManualResetEvent.ManualResetEvent(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.ManualResetEvent.#ctor*
  parent: System.Threading.ManualResetEvent
  isExternal: false
  name: ManualResetEvent
  nameWithType: ManualResetEvent.ManualResetEvent
