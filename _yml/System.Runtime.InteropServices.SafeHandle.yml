### YamlMime:ManagedReference
items:
- uid: System.Runtime.InteropServices.SafeHandle
  id: SafeHandle
  children:
  - System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)
  - System.Runtime.InteropServices.SafeHandle.Close
  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - System.Runtime.InteropServices.SafeHandle.Dispose
  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  - System.Runtime.InteropServices.SafeHandle.Finalize
  - System.Runtime.InteropServices.SafeHandle.handle
  - System.Runtime.InteropServices.SafeHandle.IsClosed
  - System.Runtime.InteropServices.SafeHandle.IsInvalid
  - System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  langs:
  - csharp
  name: SafeHandle
  nameWithType: SafeHandle
  fullName: System.Runtime.InteropServices.SafeHandle
  type: Class
  summary: To be added.
  remarks: To be added.
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      public abstract class SafeHandle : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable
  inheritance:
  - System.Object
  - System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)
  id: '#ctor(System.IntPtr,System.Boolean)'
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: SafeHandle(IntPtr,Boolean)
  nameWithType: SafeHandle.SafeHandle(IntPtr,Boolean)
  fullName: System.Runtime.InteropServices.SafeHandle.SafeHandle(IntPtr,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected SafeHandle (IntPtr invalidHandleValue, bool ownsHandle);
    parameters:
    - id: invalidHandleValue
      type: System.IntPtr
      description: To be added.
    - id: ownsHandle
      type: System.Boolean
      description: To be added.
  overload: System.Runtime.InteropServices.SafeHandle.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeHandle.Close
  id: Close
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: Close()
  nameWithType: SafeHandle.Close()
  fullName: System.Runtime.InteropServices.SafeHandle.Close()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Runtime.InteropServices.SafeHandle.Close*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  id: DangerousAddRef(System.Boolean@)
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: DangerousAddRef(Boolean)
  nameWithType: SafeHandle.DangerousAddRef(Boolean)
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void DangerousAddRef (ref bool success);
    parameters:
    - id: success
      type: System.Boolean
      description: To be added.
  overload: System.Runtime.InteropServices.SafeHandle.DangerousAddRef*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  id: DangerousGetHandle
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: DangerousGetHandle()
  nameWithType: SafeHandle.DangerousGetHandle()
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public IntPtr DangerousGetHandle ();
    parameters: []
    return:
      type: System.IntPtr
      description: To be added.
  overload: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  id: DangerousRelease
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: DangerousRelease()
  nameWithType: SafeHandle.DangerousRelease()
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void DangerousRelease ();
    parameters: []
  overload: System.Runtime.InteropServices.SafeHandle.DangerousRelease*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeHandle.Dispose
  id: Dispose
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: Dispose()
  nameWithType: SafeHandle.Dispose()
  fullName: System.Runtime.InteropServices.SafeHandle.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Runtime.InteropServices.SafeHandle.Dispose*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SafeHandle.Dispose(Boolean)
  fullName: System.Runtime.InteropServices.SafeHandle.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: To be added.
  overload: System.Runtime.InteropServices.SafeHandle.Dispose*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeHandle.Finalize
  id: Finalize
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: Finalize()
  nameWithType: SafeHandle.Finalize()
  fullName: System.Runtime.InteropServices.SafeHandle.Finalize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: ~SafeHandle ();
    parameters: []
  overload: System.Runtime.InteropServices.SafeHandle.Finalize*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeHandle.handle
  id: handle
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: handle
  nameWithType: SafeHandle.handle
  fullName: System.Runtime.InteropServices.SafeHandle.handle
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected IntPtr handle;
    return:
      type: System.IntPtr
      description: To be added.
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeHandle.IsClosed
  id: IsClosed
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: IsClosed
  nameWithType: SafeHandle.IsClosed
  fullName: System.Runtime.InteropServices.SafeHandle.IsClosed
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsClosed { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Runtime.InteropServices.SafeHandle.IsClosed*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeHandle.IsInvalid
  id: IsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: IsInvalid
  nameWithType: SafeHandle.IsInvalid
  fullName: System.Runtime.InteropServices.SafeHandle.IsInvalid
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public abstract bool IsInvalid { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Runtime.InteropServices.SafeHandle.IsInvalid*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  id: ReleaseHandle
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: ReleaseHandle()
  nameWithType: SafeHandle.ReleaseHandle()
  fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected abstract bool ReleaseHandle ();
    parameters: []
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Runtime.InteropServices.SafeHandle.ReleaseHandle*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  id: SetHandle(System.IntPtr)
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: SetHandle(IntPtr)
  nameWithType: SafeHandle.SetHandle(IntPtr)
  fullName: System.Runtime.InteropServices.SafeHandle.SetHandle(IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: protected void SetHandle (IntPtr handle);
    parameters:
    - id: handle
      type: System.IntPtr
      description: To be added.
  overload: System.Runtime.InteropServices.SafeHandle.SetHandle*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  id: SetHandleAsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  langs:
  - csharp
  name: SetHandleAsInvalid()
  nameWithType: SafeHandle.SetHandleAsInvalid()
  fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void SetHandleAsInvalid ();
    parameters: []
  overload: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  isExternal: false
  name: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
- uid: System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: SafeHandle(IntPtr,Boolean)
  nameWithType: SafeHandle.SafeHandle(IntPtr,Boolean)
  fullName: System.Runtime.InteropServices.SafeHandle.SafeHandle(IntPtr,Boolean)
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.InteropServices.SafeHandle.Close
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Close()
  nameWithType: SafeHandle.Close()
  fullName: System.Runtime.InteropServices.SafeHandle.Close()
- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousAddRef(Boolean)
  nameWithType: SafeHandle.DangerousAddRef(Boolean)
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(Boolean)
- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousGetHandle()
  nameWithType: SafeHandle.DangerousGetHandle()
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle()
- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousRelease()
  nameWithType: SafeHandle.DangerousRelease()
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease()
- uid: System.Runtime.InteropServices.SafeHandle.Dispose
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Dispose()
  nameWithType: SafeHandle.Dispose()
  fullName: System.Runtime.InteropServices.SafeHandle.Dispose()
- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SafeHandle.Dispose(Boolean)
  fullName: System.Runtime.InteropServices.SafeHandle.Dispose(Boolean)
- uid: System.Runtime.InteropServices.SafeHandle.Finalize
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Finalize()
  nameWithType: SafeHandle.Finalize()
  fullName: System.Runtime.InteropServices.SafeHandle.Finalize()
- uid: System.Runtime.InteropServices.SafeHandle.handle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: handle
  nameWithType: SafeHandle.handle
  fullName: System.Runtime.InteropServices.SafeHandle.handle
- uid: System.Runtime.InteropServices.SafeHandle.IsClosed
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: IsClosed
  nameWithType: SafeHandle.IsClosed
  fullName: System.Runtime.InteropServices.SafeHandle.IsClosed
- uid: System.Runtime.InteropServices.SafeHandle.IsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: IsInvalid
  nameWithType: SafeHandle.IsInvalid
  fullName: System.Runtime.InteropServices.SafeHandle.IsInvalid
- uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: ReleaseHandle()
  nameWithType: SafeHandle.ReleaseHandle()
  fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle()
- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: SetHandle(IntPtr)
  nameWithType: SafeHandle.SetHandle(IntPtr)
  fullName: System.Runtime.InteropServices.SafeHandle.SetHandle(IntPtr)
- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: SetHandleAsInvalid()
  nameWithType: SafeHandle.SetHandleAsInvalid()
  fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid()
- uid: System.Runtime.InteropServices.SafeHandle.#ctor*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: SafeHandle
  nameWithType: SafeHandle.SafeHandle
- uid: System.Runtime.InteropServices.SafeHandle.Close*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Close
  nameWithType: SafeHandle.Close
- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousAddRef
  nameWithType: SafeHandle.DangerousAddRef
- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousGetHandle
  nameWithType: SafeHandle.DangerousGetHandle
- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousRelease
  nameWithType: SafeHandle.DangerousRelease
- uid: System.Runtime.InteropServices.SafeHandle.Dispose*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Dispose
  nameWithType: SafeHandle.Dispose
- uid: System.Runtime.InteropServices.SafeHandle.Finalize*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Finalize
  nameWithType: SafeHandle.Finalize
- uid: System.Runtime.InteropServices.SafeHandle.IsClosed*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: IsClosed
  nameWithType: SafeHandle.IsClosed
- uid: System.Runtime.InteropServices.SafeHandle.IsInvalid*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: IsInvalid
  nameWithType: SafeHandle.IsInvalid
- uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: ReleaseHandle
  nameWithType: SafeHandle.ReleaseHandle
- uid: System.Runtime.InteropServices.SafeHandle.SetHandle*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: SetHandle
  nameWithType: SafeHandle.SetHandle
- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid*
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: SetHandleAsInvalid
  nameWithType: SafeHandle.SetHandleAsInvalid
