### YamlMime:ManagedReference
items:
- uid: System.Threading.Tasks.ParallelLoopState
  id: ParallelLoopState
  children:
  - System.Threading.Tasks.ParallelLoopState.Break
  - System.Threading.Tasks.ParallelLoopState.IsExceptional
  - System.Threading.Tasks.ParallelLoopState.IsStopped
  - System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
  - System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
  - System.Threading.Tasks.ParallelLoopState.Stop
  langs:
  - csharp
  name: ParallelLoopState
  nameWithType: ParallelLoopState
  fullName: System.Threading.Tasks.ParallelLoopState
  type: Class
  summary: To be added.
  remarks: To be added.
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")]

      public class ParallelLoopState
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.ParallelLoopState.Break
  id: Break
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  name: Break()
  nameWithType: ParallelLoopState.Break()
  fullName: System.Threading.Tasks.ParallelLoopState.Break()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Break ();
    parameters: []
  overload: System.Threading.Tasks.ParallelLoopState.Break*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.ParallelLoopState.IsExceptional
  id: IsExceptional
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  name: IsExceptional
  nameWithType: ParallelLoopState.IsExceptional
  fullName: System.Threading.Tasks.ParallelLoopState.IsExceptional
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsExceptional { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Threading.Tasks.ParallelLoopState.IsExceptional*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.ParallelLoopState.IsStopped
  id: IsStopped
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  name: IsStopped
  nameWithType: ParallelLoopState.IsStopped
  fullName: System.Threading.Tasks.ParallelLoopState.IsStopped
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool IsStopped { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Threading.Tasks.ParallelLoopState.IsStopped*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
  id: LowestBreakIteration
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  name: LowestBreakIteration
  nameWithType: ParallelLoopState.LowestBreakIteration
  fullName: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Nullable<long> LowestBreakIteration { get; }
    return:
      type: System.Nullable{System.Int64}
      description: To be added.
  overload: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
  id: ShouldExitCurrentIteration
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  name: ShouldExitCurrentIteration
  nameWithType: ParallelLoopState.ShouldExitCurrentIteration
  fullName: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public bool ShouldExitCurrentIteration { get; }
    return:
      type: System.Boolean
      description: To be added.
  overload: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.ParallelLoopState.Stop
  id: Stop
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  name: Stop()
  nameWithType: ParallelLoopState.Stop()
  fullName: System.Threading.Tasks.ParallelLoopState.Stop()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Stop ();
    parameters: []
  overload: System.Threading.Tasks.ParallelLoopState.Stop*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Threading.Tasks.ParallelLoopState.Break
  parent: System.Threading.Tasks.ParallelLoopState
  isExternal: false
  name: Break()
  nameWithType: ParallelLoopState.Break()
  fullName: System.Threading.Tasks.ParallelLoopState.Break()
- uid: System.Threading.Tasks.ParallelLoopState.IsExceptional
  parent: System.Threading.Tasks.ParallelLoopState
  isExternal: false
  name: IsExceptional
  nameWithType: ParallelLoopState.IsExceptional
  fullName: System.Threading.Tasks.ParallelLoopState.IsExceptional
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.ParallelLoopState.IsStopped
  parent: System.Threading.Tasks.ParallelLoopState
  isExternal: false
  name: IsStopped
  nameWithType: ParallelLoopState.IsStopped
  fullName: System.Threading.Tasks.ParallelLoopState.IsStopped
- uid: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
  parent: System.Threading.Tasks.ParallelLoopState
  isExternal: false
  name: LowestBreakIteration
  nameWithType: ParallelLoopState.LowestBreakIteration
  fullName: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
- uid: System.Nullable{System.Int64}
  parent: System
  isExternal: false
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Int64>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: Int64
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
  parent: System.Threading.Tasks.ParallelLoopState
  isExternal: false
  name: ShouldExitCurrentIteration
  nameWithType: ParallelLoopState.ShouldExitCurrentIteration
  fullName: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
- uid: System.Threading.Tasks.ParallelLoopState.Stop
  parent: System.Threading.Tasks.ParallelLoopState
  isExternal: false
  name: Stop()
  nameWithType: ParallelLoopState.Stop()
  fullName: System.Threading.Tasks.ParallelLoopState.Stop()
- uid: System.Threading.Tasks.ParallelLoopState.Break*
  parent: System.Threading.Tasks.ParallelLoopState
  isExternal: false
  name: Break
  nameWithType: ParallelLoopState.Break
- uid: System.Threading.Tasks.ParallelLoopState.IsExceptional*
  parent: System.Threading.Tasks.ParallelLoopState
  isExternal: false
  name: IsExceptional
  nameWithType: ParallelLoopState.IsExceptional
- uid: System.Threading.Tasks.ParallelLoopState.IsStopped*
  parent: System.Threading.Tasks.ParallelLoopState
  isExternal: false
  name: IsStopped
  nameWithType: ParallelLoopState.IsStopped
- uid: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration*
  parent: System.Threading.Tasks.ParallelLoopState
  isExternal: false
  name: LowestBreakIteration
  nameWithType: ParallelLoopState.LowestBreakIteration
- uid: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration*
  parent: System.Threading.Tasks.ParallelLoopState
  isExternal: false
  name: ShouldExitCurrentIteration
  nameWithType: ParallelLoopState.ShouldExitCurrentIteration
- uid: System.Threading.Tasks.ParallelLoopState.Stop*
  parent: System.Threading.Tasks.ParallelLoopState
  isExternal: false
  name: Stop
  nameWithType: ParallelLoopState.Stop
