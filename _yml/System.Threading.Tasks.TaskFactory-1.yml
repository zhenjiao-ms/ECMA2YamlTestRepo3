### YamlMime:ManagedReference
items:
- uid: System.Threading.Tasks.TaskFactory`1
  id: TaskFactory`1
  children:
  - System.Threading.Tasks.TaskFactory`1.#ctor
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.CancellationToken
  - System.Threading.Tasks.TaskFactory`1.ContinuationOptions
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.CreationOptions
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  - System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.Scheduler
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func`1)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func`1,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func`1,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func`1,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  langs:
  - csharp
  name: TaskFactory<TResult>
  nameWithType: TaskFactory<TResult>
  fullName: System.Threading.Tasks.TaskFactory<TResult>
  type: Class
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public class TaskFactory<TResult>
    typeParameters:
    - id: TResult
      description: To be added.
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.#ctor
  id: '#ctor'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: TaskFactory()
  nameWithType: TaskFactory<TResult>.TaskFactory()
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public TaskFactory ();
    parameters: []
  overload: System.Threading.Tasks.TaskFactory`1.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)
  id: '#ctor(System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: TaskFactory(CancellationToken)
  nameWithType: TaskFactory<TResult>.TaskFactory(CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(CancellationToken)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public TaskFactory (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: TaskFactory(TaskScheduler)
  nameWithType: TaskFactory<TResult>.TaskFactory(TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(TaskScheduler)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public TaskFactory (System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  id: '#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: TaskFactory(TaskCreationOptions,TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.TaskFactory(TaskCreationOptions,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(TaskCreationOptions,TaskContinuationOptions)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public TaskFactory (System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: TaskFactory(CancellationToken,TaskCreationOptions,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory<TResult>.TaskFactory(CancellationToken,TaskCreationOptions,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(CancellationToken,TaskCreationOptions,TaskContinuationOptions,TaskScheduler)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public TaskFactory (System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.CancellationToken
  id: CancellationToken
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: CancellationToken
  nameWithType: TaskFactory<TResult>.CancellationToken
  fullName: System.Threading.Tasks.TaskFactory<TResult>.CancellationToken
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.CancellationToken CancellationToken { get; }
    return:
      type: System.Threading.CancellationToken
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.CancellationToken*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.ContinuationOptions
  id: ContinuationOptions
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinuationOptions
  nameWithType: TaskFactory<TResult>.ContinuationOptions
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinuationOptions
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.TaskContinuationOptions ContinuationOptions { get; }
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.ContinuationOptions*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAll(Task[],Func<Task,TResult>)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[],Func<Task,TResult>)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(Task[],Func<Task,TResult>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: To be added.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],TResult}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAll(Task[],Func<Task,TResult>,CancellationToken)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[],Func<Task,TResult>,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(Task[],Func<Task,TResult>,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: To be added.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],TResult}
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAll(Task[],Func<Task,TResult>,TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[],Func<Task,TResult>,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(Task[],Func<Task,TResult>,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: To be added.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],TResult}
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAll(Task[],Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[],Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(Task[],Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: To be added.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],TResult}
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: To be added.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll<TAntecedentResult>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: To be added.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll<TAntecedentResult>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: To be added.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll<TAntecedentResult>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAll<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: To be added.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll<TAntecedentResult>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAny(Task[],Func<Task,TResult>)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[],Func<Task,TResult>)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(Task[],Func<Task,TResult>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: To be added.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAny(Task[],Func<Task,TResult>,CancellationToken)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[],Func<Task,TResult>,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(Task[],Func<Task,TResult>,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: To be added.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAny(Task[],Func<Task,TResult>,TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[],Func<Task,TResult>,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(Task[],Func<Task,TResult>,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: To be added.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAny(Task[],Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[],Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(Task[],Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny (System.Threading.Tasks.Task[] tasks, Func<System.Threading.Tasks.Task,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: To be added.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,TResult}
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: To be added.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny<TAntecedentResult>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: To be added.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny<TAntecedentResult>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: To be added.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny<TAntecedentResult>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> ContinueWhenAny<TAntecedentResult> (System.Threading.Tasks.Task<TAntecedentResult>[] tasks, Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{TAntecedentResult}[]
      description: To be added.
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny<TAntecedentResult>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.CreationOptions
  id: CreationOptions
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: CreationOptions
  nameWithType: TaskFactory<TResult>.CreationOptions
  fullName: System.Threading.Tasks.TaskFactory<TResult>.CreationOptions
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.TaskCreationOptions CreationOptions { get; }
    return:
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.CreationOptions*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: FromAsync(IAsyncResult,Func<IAsyncResult,TResult>)
  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult,Func<IAsyncResult,TResult>)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(IAsyncResult,Func<IAsyncResult,TResult>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: To be added.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: FromAsync(Func<AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,Object)
  nameWithType: TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync (Func<AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, object state);
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: To be added.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: FromAsync(IAsyncResult,Func<IAsyncResult,TResult>,TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult,Func<IAsyncResult,TResult>,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(IAsyncResult,Func<IAsyncResult,TResult>,TaskCreationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: To be added.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: To be added.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: FromAsync(Func<AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,Object,TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,Object,TaskCreationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync (Func<AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: To be added.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: FromAsync(IAsyncResult,Func<IAsyncResult,TResult>,TaskCreationOptions,TaskScheduler)
  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult,Func<IAsyncResult,TResult>,TaskCreationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(IAsyncResult,Func<IAsyncResult,TResult>,TaskCreationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync (IAsyncResult asyncResult, Func<IAsyncResult,TResult> endMethod, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: To be added.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: To be added.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: FromAsync(Func<TArg1,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,Object)
  nameWithType: TaskFactory<TResult>.FromAsync(Func<TArg1,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(Func<TArg1,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, object state);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: To be added.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: To be added.
    - id: arg1
      type: TArg1
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync<TArg1>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: FromAsync(Func<TArg1,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,Object,TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync(Func<TArg1,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(Func<TArg1,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,Object,TaskCreationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1> (Func<TArg1,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: To be added.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: To be added.
    - id: arg1
      type: TArg1
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync<TArg1>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: FromAsync(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,Object)
  nameWithType: TaskFactory<TResult>.FromAsync(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, object state);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: To be added.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: To be added.
    - id: arg1
      type: TArg1
      description: To be added.
    - id: arg2
      type: TArg2
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync<TArg1,TArg2>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: FromAsync(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,Object,TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,Object,TaskCreationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2> (Func<TArg1,TArg2,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: To be added.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: To be added.
    - id: arg1
      type: TArg1
      description: To be added.
    - id: arg2
      type: TArg2
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync<TArg1,TArg2>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: FromAsync(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,TArg3,Object)
  nameWithType: TaskFactory<TResult>.FromAsync(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,TArg3,Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,TArg3,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TArg3> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: To be added.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: To be added.
    - id: arg1
      type: TArg1
      description: To be added.
    - id: arg2
      type: TArg2
      description: To be added.
    - id: arg3
      type: TArg3
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync<TArg1,TArg2,TArg3>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: FromAsync(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,TArg3,Object,TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,TArg3,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,TArg3,Object,TaskCreationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> FromAsync<TArg1,TArg2,TArg3> (Func<TArg1,TArg2,TArg3,AsyncCallback,object,IAsyncResult> beginMethod, Func<IAsyncResult,TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: beginMethod
      type: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}
      description: To be added.
    - id: endMethod
      type: System.Func{System.IAsyncResult,TResult}
      description: To be added.
    - id: arg1
      type: TArg1
      description: To be added.
    - id: arg2
      type: TArg2
      description: To be added.
    - id: arg3
      type: TArg3
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.FromAsync<TArg1,TArg2,TArg3>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.Scheduler
  id: Scheduler
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: Scheduler
  nameWithType: TaskFactory<TResult>.Scheduler
  fullName: System.Threading.Tasks.TaskFactory<TResult>.Scheduler
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.TaskScheduler Scheduler { get; }
    return:
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.Scheduler*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func`1)
  id: StartNew(System.Func`1)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: StartNew(Func<TResult>)
  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(Func<TResult>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<TResult> function);
    parameters:
    - id: function
      type: System.Func`1
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)
  id: StartNew(System.Func{System.Object,`0},System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: StartNew(Func<Object,TResult>,Object)
  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>,Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(Func<Object,TResult>,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<object,TResult> function, object state);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func`1,System.Threading.CancellationToken)
  id: StartNew(System.Func`1,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: StartNew(Func<TResult>,CancellationToken)
  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(Func<TResult>,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<TResult> function, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: function
      type: System.Func`1
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func`1,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Func`1,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: StartNew(Func<TResult>,TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(Func<TResult>,TaskCreationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<TResult> function, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: function
      type: System.Func`1
      description: To be added.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: StartNew(Func<Object,TResult>,Object,CancellationToken)
  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>,Object,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(Func<Object,TResult>,Object,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<object,TResult> function, object state, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: StartNew(Func<Object,TResult>,Object,TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(Func<Object,TResult>,Object,TaskCreationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<object,TResult> function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func`1,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Func`1,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: StartNew(Func<TResult>,CancellationToken,TaskCreationOptions,TaskScheduler)
  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>,CancellationToken,TaskCreationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(Func<TResult>,CancellationToken,TaskCreationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: function
      type: System.Func`1
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  langs:
  - csharp
  name: StartNew(Func<Object,TResult>,Object,CancellationToken,TaskCreationOptions,TaskScheduler)
  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>,Object,CancellationToken,TaskCreationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(Func<Object,TResult>,Object,CancellationToken,TaskCreationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TResult> StartNew (Func<object,TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task`1
      description: To be added.
  overload: System.Threading.Tasks.TaskFactory`1.StartNew*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Threading.Tasks.TaskFactory`1.#ctor
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: TaskFactory()
  nameWithType: TaskFactory<TResult>.TaskFactory()
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory()
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: TaskFactory(CancellationToken)
  nameWithType: TaskFactory<TResult>.TaskFactory(CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: TaskFactory(TaskScheduler)
  nameWithType: TaskFactory<TResult>.TaskFactory(TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(TaskScheduler)
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: TaskFactory(TaskCreationOptions,TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.TaskFactory(TaskCreationOptions,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(TaskCreationOptions,TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskFactory`1.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: TaskFactory(CancellationToken,TaskCreationOptions,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory<TResult>.TaskFactory(CancellationToken,TaskCreationOptions,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.TaskFactory(CancellationToken,TaskCreationOptions,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.CancellationToken
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: CancellationToken
  nameWithType: TaskFactory<TResult>.CancellationToken
  fullName: System.Threading.Tasks.TaskFactory<TResult>.CancellationToken
- uid: System.Threading.Tasks.TaskFactory`1.ContinuationOptions
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinuationOptions
  nameWithType: TaskFactory<TResult>.ContinuationOptions
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinuationOptions
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0})
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll(Task[],Func<Task,TResult>)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[],Func<Task,TResult>)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(Task[],Func<Task,TResult>)
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Threading.Tasks.Task[]
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task[]
  spec.csharp:
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: Task[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Func{System.Threading.Tasks.Task[],TResult}
  parent: System
  isExternal: false
  name: Func<Task,TResult>
  nameWithType: Func<Task,TResult>
  fullName: System.Func<System.Threading.Tasks.Task[],TResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Threading.Tasks.Task[],TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: Task[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll(Task[],Func<Task,TResult>,CancellationToken)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[],Func<Task,TResult>,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(Task[],Func<Task,TResult>,CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll(Task[],Func<Task,TResult>,TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[],Func<Task,TResult>,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(Task[],Func<Task,TResult>,TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll(Task[],Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task[],Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(Task[],Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0})
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>)
- uid: System.Threading.Tasks.Task{TAntecedentResult}[]
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TAntecedentResult>
  nameWithType: Task<TAntecedentResult>
  fullName: System.Threading.Tasks.Task<TAntecedentResult>[]
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<TAntecedentResult>[]
  - name: <
    nameWithType: <
    fullName: <
  - uid: TAntecedentResult
    name: TAntecedentResult
    nameWithType: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Func{System.Threading.Tasks.Task{TAntecedentResult}[],TResult}
  parent: System
  isExternal: false
  name: Func<Task<TAntecedentResult>,TResult>
  nameWithType: Func<Task<TAntecedentResult>,TResult>
  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Threading.Tasks.Task<TAntecedentResult>[],TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<TAntecedentResult>[]
  - name: <
    nameWithType: <
    fullName: <
  - uid: TAntecedentResult
    name: TAntecedentResult
    nameWithType: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory<TResult>.ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAll(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0})
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny(Task[],Func<Task,TResult>)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[],Func<Task,TResult>)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(Task[],Func<Task,TResult>)
- uid: System.Func{System.Threading.Tasks.Task,TResult}
  parent: System
  isExternal: false
  name: Func<Task,TResult>
  nameWithType: Func<Task,TResult>
  fullName: System.Func<System.Threading.Tasks.Task,TResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Threading.Tasks.Task,TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: Task
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny(Task[],Func<Task,TResult>,CancellationToken)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[],Func<Task,TResult>,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(Task[],Func<Task,TResult>,CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny(Task[],Func<Task,TResult>,TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[],Func<Task,TResult>,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(Task[],Func<Task,TResult>,TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny(Task[],Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task[],Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(Task[],Func<Task,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0})
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>)
- uid: System.Func{System.Threading.Tasks.Task{TAntecedentResult},TResult}
  parent: System
  isExternal: false
  name: Func<Task<TAntecedentResult>,TResult>
  nameWithType: Func<Task<TAntecedentResult>,TResult>
  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Threading.Tasks.Task<TAntecedentResult>,TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<TAntecedentResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TAntecedentResult
    name: TAntecedentResult
    nameWithType: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,TaskContinuationOptions)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: TaskFactory<TResult>.ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.ContinueWhenAny(Task<TAntecedentResult>,Func<Task<TAntecedentResult>,TResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.CreationOptions
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: CreationOptions
  nameWithType: TaskFactory<TResult>.CreationOptions
  fullName: System.Threading.Tasks.TaskFactory<TResult>.CreationOptions
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0})
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync(IAsyncResult,Func<IAsyncResult,TResult>)
  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult,Func<IAsyncResult,TResult>)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(IAsyncResult,Func<IAsyncResult,TResult>)
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Func{System.IAsyncResult,TResult}
  parent: System
  isExternal: false
  name: Func<IAsyncResult,TResult>
  nameWithType: Func<IAsyncResult,TResult>
  fullName: System.Func<System.IAsyncResult,TResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.IAsyncResult,TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: IAsyncResult
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync(Func<AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,Object)
  nameWithType: TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,Object)
- uid: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  isExternal: false
  name: Func<AsyncCallback,Object,IAsyncResult>
  nameWithType: Func<AsyncCallback,Object,IAsyncResult>
  fullName: System.Func<System.AsyncCallback,System.Object,System.IAsyncResult>
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: Func<System.AsyncCallback,System.Object,System.IAsyncResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: AsyncCallback
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: IAsyncResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync(IAsyncResult,Func<IAsyncResult,TResult>,TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult,Func<IAsyncResult,TResult>,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(IAsyncResult,Func<IAsyncResult,TResult>,TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync(Func<AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,Object,TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(Func<AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,Object,TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync(System.IAsyncResult,System.Func{System.IAsyncResult,`0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync(IAsyncResult,Func<IAsyncResult,TResult>,TaskCreationOptions,TaskScheduler)
  nameWithType: TaskFactory<TResult>.FromAsync(IAsyncResult,Func<IAsyncResult,TResult>,TaskCreationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(IAsyncResult,Func<IAsyncResult,TResult>,TaskCreationOptions,TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync(Func<TArg1,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,Object)
  nameWithType: TaskFactory<TResult>.FromAsync(Func<TArg1,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(Func<TArg1,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,Object)
- uid: System.Func{TArg1,System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  isExternal: false
  name: Func<TArg1,AsyncCallback,Object,IAsyncResult>
  nameWithType: Func<TArg1,AsyncCallback,Object,IAsyncResult>
  fullName: System.Func<TArg1,System.AsyncCallback,System.Object,System.IAsyncResult>
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: Func<TArg1,System.AsyncCallback,System.Object,System.IAsyncResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TArg1
    name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: AsyncCallback
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: IAsyncResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TArg1
  isExternal: true
  name: TArg1
  nameWithType: TArg1
  fullName: TArg1
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync(Func<TArg1,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,Object,TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync(Func<TArg1,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(Func<TArg1,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,Object,TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,Object)
  nameWithType: TaskFactory<TResult>.FromAsync(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,Object)
- uid: System.Func{TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  isExternal: false
  name: Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>
  nameWithType: Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>
  fullName: System.Func<TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult>
  spec.csharp:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: Func<TArg1,TArg2,System.AsyncCallback,System.Object,System.IAsyncResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TArg1
    name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TArg2
    name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: AsyncCallback
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: IAsyncResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TArg2
  isExternal: true
  name: TArg2
  nameWithType: TArg2
  fullName: TArg2
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,Object,TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(Func<TArg1,TArg2,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,Object,TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,TArg3,Object)
  nameWithType: TaskFactory<TResult>.FromAsync(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,TArg3,Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,TArg3,Object)
- uid: System.Func{TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  isExternal: false
  name: Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>
  nameWithType: Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>
  fullName: System.Func<TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult>
  spec.csharp:
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: Func<TArg1,TArg2,TArg3,System.AsyncCallback,System.Object,System.IAsyncResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TArg1
    name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TArg2
    name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TArg3
    name: TArg3
    nameWithType: TArg3
    fullName: TArg3
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: AsyncCallback
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: IAsyncResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TArg3
  isExternal: true
  name: TArg3
  nameWithType: TArg3
  fullName: TArg3
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,`0},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,TArg3,Object,TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.FromAsync(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,TArg3,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.FromAsync(Func<TArg1,TArg2,TArg3,AsyncCallback,Object,IAsyncResult>,Func<IAsyncResult,TResult>,TArg1,TArg2,TArg3,Object,TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.Scheduler
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: Scheduler
  nameWithType: TaskFactory<TResult>.Scheduler
  fullName: System.Threading.Tasks.TaskFactory<TResult>.Scheduler
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func`1)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew(Func<TResult>)
  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(Func<TResult>)
- uid: System.Func`1
  parent: System
  isExternal: false
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew(Func<Object,TResult>,Object)
  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>,Object)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(Func<Object,TResult>,Object)
- uid: System.Func{System.Object,TResult}
  parent: System
  isExternal: false
  name: Func<Object,TResult>
  nameWithType: Func<Object,TResult>
  fullName: System.Func<System.Object,TResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Object,TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func`1,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew(Func<TResult>,CancellationToken)
  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(Func<TResult>,CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func`1,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew(Func<TResult>,TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(Func<TResult>,TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew(Func<Object,TResult>,Object,CancellationToken)
  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>,Object,CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(Func<Object,TResult>,Object,CancellationToken)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew(Func<Object,TResult>,Object,TaskCreationOptions)
  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(Func<Object,TResult>,Object,TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func`1,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew(Func<TResult>,CancellationToken,TaskCreationOptions,TaskScheduler)
  nameWithType: TaskFactory<TResult>.StartNew(Func<TResult>,CancellationToken,TaskCreationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(Func<TResult>,CancellationToken,TaskCreationOptions,TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.StartNew(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew(Func<Object,TResult>,Object,CancellationToken,TaskCreationOptions,TaskScheduler)
  nameWithType: TaskFactory<TResult>.StartNew(Func<Object,TResult>,Object,CancellationToken,TaskCreationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory<TResult>.StartNew(Func<Object,TResult>,Object,CancellationToken,TaskCreationOptions,TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory`1.#ctor*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: TaskFactory<TResult>
  nameWithType: TaskFactory<TResult>.TaskFactory<TResult>
- uid: System.Threading.Tasks.TaskFactory`1.CancellationToken*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: CancellationToken
  nameWithType: TaskFactory<TResult>.CancellationToken
- uid: System.Threading.Tasks.TaskFactory`1.ContinuationOptions*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinuationOptions
  nameWithType: TaskFactory<TResult>.ContinuationOptions
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll
  nameWithType: TaskFactory<TResult>.ContinueWhenAll
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAll<TAntecedentResult>*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAll<TAntecedentResult>
  nameWithType: TaskFactory<TResult>.ContinueWhenAll<TAntecedentResult>
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny
  nameWithType: TaskFactory<TResult>.ContinueWhenAny
- uid: System.Threading.Tasks.TaskFactory`1.ContinueWhenAny<TAntecedentResult>*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: ContinueWhenAny<TAntecedentResult>
  nameWithType: TaskFactory<TResult>.ContinueWhenAny<TAntecedentResult>
- uid: System.Threading.Tasks.TaskFactory`1.CreationOptions*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: CreationOptions
  nameWithType: TaskFactory<TResult>.CreationOptions
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync
  nameWithType: TaskFactory<TResult>.FromAsync
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync<TArg1>*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync<TArg1>
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1>
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync<TArg1,TArg2>*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync<TArg1,TArg2>
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2>
- uid: System.Threading.Tasks.TaskFactory`1.FromAsync<TArg1,TArg2,TArg3>*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: FromAsync<TArg1,TArg2,TArg3>
  nameWithType: TaskFactory<TResult>.FromAsync<TArg1,TArg2,TArg3>
- uid: System.Threading.Tasks.TaskFactory`1.Scheduler*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: Scheduler
  nameWithType: TaskFactory<TResult>.Scheduler
- uid: System.Threading.Tasks.TaskFactory`1.StartNew*
  parent: System.Threading.Tasks.TaskFactory`1
  isExternal: false
  name: StartNew
  nameWithType: TaskFactory<TResult>.StartNew
