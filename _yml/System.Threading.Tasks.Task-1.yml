### YamlMime:ManagedReference
items:
- uid: System.Threading.Tasks.Task`1
  id: Task`1
  children:
  - System.Threading.Tasks.Task`1.#ctor(System.Func`1)
  - System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)
  - System.Threading.Tasks.Task`1.#ctor(System.Func`1,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task`1.#ctor(System.Func`1,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task`1.#ctor(System.Func`1,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)
  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})
  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)
  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})
  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)
  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task`1.Factory
  - System.Threading.Tasks.Task`1.GetAwaiter
  - System.Threading.Tasks.Task`1.Result
  langs:
  - csharp
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  type: Class
  summary: To be added.
  remarks: To be added.
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Id = {Id}, Status = {Status}, Method = {DebuggerDisplayMethodDescription}, Result = {DebuggerDisplayResultDescription}")]

      [System.Diagnostics.DebuggerTypeProxy(typeof(System.Threading.Tasks.SystemThreadingTasks_FutureDebugView`1))]

      public class Task<TResult> : System.Threading.Tasks.Task
    typeParameters:
    - id: TResult
      description: To be added.
  inheritance:
  - System.Object
  - System.Threading.Tasks.Task
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  - System.Threading.Tasks.Task.AsyncState
  - System.Threading.Tasks.Task.CompletedTask
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.CreationOptions
  - System.Threading.Tasks.Task.CurrentId
  - System.Threading.Tasks.Task.Delay(System.Int32)
  - System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Delay(System.TimeSpan)
  - System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Dispose
  - System.Threading.Tasks.Task.Dispose(System.Boolean)
  - System.Threading.Tasks.Task.Exception
  - System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.FromException(System.Exception)
  - System.Threading.Tasks.Task.FromException``1(System.Exception)
  - System.Threading.Tasks.Task.FromResult``1(``0)
  - System.Threading.Tasks.Task.Id
  - System.Threading.Tasks.Task.IsCanceled
  - System.Threading.Tasks.Task.IsCompleted
  - System.Threading.Tasks.Task.IsFaulted
  - System.Threading.Tasks.Task.Run(System.Action)
  - System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Run``1(System.Func`1)
  - System.Threading.Tasks.Task.Run``1(System.Func`1,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.RunSynchronously
  - System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.Start
  - System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.Status
  - System.Threading.Tasks.Task.System#IAsyncResult#AsyncWaitHandle
  - System.Threading.Tasks.Task.System#IAsyncResult#CompletedSynchronously
  - System.Threading.Tasks.Task.Wait
  - System.Threading.Tasks.Task.Wait(System.Int32)
  - System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Wait(System.TimeSpan)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)
  - System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])
  - System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])
  - System.Threading.Tasks.Task.Yield
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func`1)
  id: '#ctor(System.Func`1)'
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: Task(Func<TResult>)
  nameWithType: Task<TResult>.Task(Func<TResult>)
  fullName: System.Threading.Tasks.Task<TResult>.Task(Func<TResult>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Task (Func<TResult> function);
    parameters:
    - id: function
      type: System.Func`1
      description: To be added.
  overload: System.Threading.Tasks.Task`1.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)
  id: '#ctor(System.Func{System.Object,`0},System.Object)'
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: Task(Func<Object,TResult>,Object)
  nameWithType: Task<TResult>.Task(Func<Object,TResult>,Object)
  fullName: System.Threading.Tasks.Task<TResult>.Task(Func<Object,TResult>,Object)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Task (Func<object,TResult> function, object state);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
  overload: System.Threading.Tasks.Task`1.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func`1,System.Threading.CancellationToken)
  id: '#ctor(System.Func`1,System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: Task(Func<TResult>,CancellationToken)
  nameWithType: Task<TResult>.Task(Func<TResult>,CancellationToken)
  fullName: System.Threading.Tasks.Task<TResult>.Task(Func<TResult>,CancellationToken)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Task (Func<TResult> function, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: function
      type: System.Func`1
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
  overload: System.Threading.Tasks.Task`1.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func`1,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Func`1,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: Task(Func<TResult>,TaskCreationOptions)
  nameWithType: Task<TResult>.Task(Func<TResult>,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task<TResult>.Task(Func<TResult>,TaskCreationOptions)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Task (Func<TResult> function, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: function
      type: System.Func`1
      description: To be added.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
  overload: System.Threading.Tasks.Task`1.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  id: '#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: Task(Func<Object,TResult>,Object,CancellationToken)
  nameWithType: Task<TResult>.Task(Func<Object,TResult>,Object,CancellationToken)
  fullName: System.Threading.Tasks.Task<TResult>.Task(Func<Object,TResult>,Object,CancellationToken)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Task (Func<object,TResult> function, object state, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
  overload: System.Threading.Tasks.Task`1.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: Task(Func<Object,TResult>,Object,TaskCreationOptions)
  nameWithType: Task<TResult>.Task(Func<Object,TResult>,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task<TResult>.Task(Func<Object,TResult>,Object,TaskCreationOptions)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Task (Func<object,TResult> function, object state, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
  overload: System.Threading.Tasks.Task`1.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func`1,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Func`1,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: Task(Func<TResult>,CancellationToken,TaskCreationOptions)
  nameWithType: Task<TResult>.Task(Func<TResult>,CancellationToken,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task<TResult>.Task(Func<TResult>,CancellationToken,TaskCreationOptions)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Task (Func<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: function
      type: System.Func`1
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
  overload: System.Threading.Tasks.Task`1.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: Task(Func<Object,TResult>,Object,CancellationToken,TaskCreationOptions)
  nameWithType: Task<TResult>.Task(Func<Object,TResult>,Object,CancellationToken,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task<TResult>.Task(Func<Object,TResult>,Object,CancellationToken,TaskCreationOptions)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public Task (Func<object,TResult> function, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions);
    parameters:
    - id: function
      type: System.Func{System.Object,TResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: To be added.
  overload: System.Threading.Tasks.Task`1.#ctor*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)
  id: ConfigureAwait(System.Boolean)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ConfigureAwait(Boolean)
  nameWithType: Task<TResult>.ConfigureAwait(Boolean)
  fullName: System.Threading.Tasks.Task<TResult>.ConfigureAwait(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Runtime.CompilerServices.ConfiguredTaskAwaitable<TResult> ConfigureAwait (bool continueOnCapturedContext);
    parameters:
    - id: continueOnCapturedContext
      type: System.Boolean
      description: To be added.
    return:
      type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1
      description: To be added.
  overload: System.Threading.Tasks.Task`1.ConfigureAwait*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})
  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Action<Task<TResult>>)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Action<Task<TResult>>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>> continuationAction);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TResult}}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task`1.ContinueWith*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Action<Task<TResult>,Object>,Object)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>,Object)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Action<Task<TResult>,Object>,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>,object> continuationAction, object state);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TResult},System.Object}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task`1.ContinueWith*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Action<Task<TResult>>,CancellationToken)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>,CancellationToken)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Action<Task<TResult>>,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TResult}}
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task`1.ContinueWith*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Action<Task<TResult>>,TaskContinuationOptions)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Action<Task<TResult>>,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TResult}}
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task`1.ContinueWith*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Action<Task<TResult>>,TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>,TaskScheduler)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Action<Task<TResult>>,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TResult}}
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task`1.ContinueWith*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Action<Task<TResult>,Object>,Object,CancellationToken)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>,Object,CancellationToken)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Action<Task<TResult>,Object>,Object,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>,object> continuationAction, object state, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TResult},System.Object}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task`1.ContinueWith*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Action<Task<TResult>,Object>,Object,TaskContinuationOptions)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>,Object,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Action<Task<TResult>,Object>,Object,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>,object> continuationAction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TResult},System.Object}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task`1.ContinueWith*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Action<Task<TResult>,Object>,Object,TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>,Object,TaskScheduler)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Action<Task<TResult>,Object>,Object,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>,object> continuationAction, object state, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TResult},System.Object}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task`1.ContinueWith*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Action<Task<TResult>>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Action<Task<TResult>>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>> continuationAction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TResult}}
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task`1.ContinueWith*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Action<Task<TResult>,Object>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Action<Task<TResult>,Object>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task ContinueWith (Action<System.Threading.Tasks.Task<TResult>,object> continuationAction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{TResult},System.Object}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task
      description: To be added.
  overload: System.Threading.Tasks.Task`1.ContinueWith*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Func<Task<TResult>,TNewResult>)
  nameWithType: Task<TResult>.ContinueWith(Func<Task<TResult>,TNewResult>)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Func<Task<TResult>,TNewResult>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,TNewResult> continuationFunction);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TResult},TNewResult}
      description: To be added.
    return:
      type: System.Threading.Tasks.Task{TNewResult}
      description: To be added.
  overload: System.Threading.Tasks.Task`1.ContinueWith<TNewResult>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object)
  nameWithType: Task<TResult>.ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,object,TNewResult> continuationFunction, object state);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TResult},System.Object,TNewResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    return:
      type: System.Threading.Tasks.Task{TNewResult}
      description: To be added.
  overload: System.Threading.Tasks.Task`1.ContinueWith<TNewResult>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Func<Task<TResult>,TNewResult>,CancellationToken)
  nameWithType: Task<TResult>.ContinueWith(Func<Task<TResult>,TNewResult>,CancellationToken)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Func<Task<TResult>,TNewResult>,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,TNewResult> continuationFunction, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TResult},TNewResult}
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task{TNewResult}
      description: To be added.
  overload: System.Threading.Tasks.Task`1.ContinueWith<TNewResult>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Func<Task<TResult>,TNewResult>,TaskContinuationOptions)
  nameWithType: Task<TResult>.ContinueWith(Func<Task<TResult>,TNewResult>,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Func<Task<TResult>,TNewResult>,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,TNewResult> continuationFunction, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TResult},TNewResult}
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    return:
      type: System.Threading.Tasks.Task{TNewResult}
      description: To be added.
  overload: System.Threading.Tasks.Task`1.ContinueWith<TNewResult>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Func<Task<TResult>,TNewResult>,TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Func<Task<TResult>,TNewResult>,TaskScheduler)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Func<Task<TResult>,TNewResult>,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,TNewResult> continuationFunction, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TResult},TNewResult}
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task{TNewResult}
      description: To be added.
  overload: System.Threading.Tasks.Task`1.ContinueWith<TNewResult>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,CancellationToken)
  nameWithType: Task<TResult>.ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,CancellationToken)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,object,TNewResult> continuationFunction, object state, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TResult},System.Object,TNewResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    return:
      type: System.Threading.Tasks.Task{TNewResult}
      description: To be added.
  overload: System.Threading.Tasks.Task`1.ContinueWith<TNewResult>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,TaskContinuationOptions)
  nameWithType: Task<TResult>.ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,TaskContinuationOptions)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,object,TNewResult> continuationFunction, object state, System.Threading.Tasks.TaskContinuationOptions continuationOptions);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TResult},System.Object,TNewResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    return:
      type: System.Threading.Tasks.Task{TNewResult}
      description: To be added.
  overload: System.Threading.Tasks.Task`1.ContinueWith<TNewResult>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,TaskScheduler)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,object,TNewResult> continuationFunction, object state, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TResult},System.Object,TNewResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task{TNewResult}
      description: To be added.
  overload: System.Threading.Tasks.Task`1.ContinueWith<TNewResult>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Func<Task<TResult>,TNewResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Func<Task<TResult>,TNewResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Func<Task<TResult>,TNewResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,TNewResult> continuationFunction, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TResult},TNewResult}
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task{TNewResult}
      description: To be added.
  overload: System.Threading.Tasks.Task`1.ContinueWith<TNewResult>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Threading.Tasks.Task<TNewResult> ContinueWith<TNewResult> (Func<System.Threading.Tasks.Task<TResult>,object,TNewResult> continuationFunction, object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler);
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{TResult},System.Object,TNewResult}
      description: To be added.
    - id: state
      type: System.Object
      description: To be added.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: To be added.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: To be added.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: To be added.
    return:
      type: System.Threading.Tasks.Task{TNewResult}
      description: To be added.
  overload: System.Threading.Tasks.Task`1.ContinueWith<TNewResult>*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.Factory
  id: Factory
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: Factory
  nameWithType: Task<TResult>.Factory
  fullName: System.Threading.Tasks.Task<TResult>.Factory
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public static System.Threading.Tasks.TaskFactory<TResult> Factory { get; }
    return:
      type: System.Threading.Tasks.TaskFactory`1
      description: To be added.
  overload: System.Threading.Tasks.Task`1.Factory*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.GetAwaiter
  id: GetAwaiter
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: GetAwaiter()
  nameWithType: Task<TResult>.GetAwaiter()
  fullName: System.Threading.Tasks.Task<TResult>.GetAwaiter()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Runtime.CompilerServices.TaskAwaiter<TResult> GetAwaiter ();
    parameters: []
    return:
      type: System.Runtime.CompilerServices.TaskAwaiter`1
      description: To be added.
  overload: System.Threading.Tasks.Task`1.GetAwaiter*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Threading.Tasks.Task`1.Result
  id: Result
  parent: System.Threading.Tasks.Task`1
  langs:
  - csharp
  name: Result
  nameWithType: Task<TResult>.Result
  fullName: System.Threading.Tasks.Task<TResult>.Result
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Threading.Tasks
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public TResult Result { get; }
    return:
      type: TResult
      description: To be added.
  overload: System.Threading.Tasks.Task`1.Result*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Threading.Tasks.Task
  isExternal: false
  name: System.Threading.Tasks.Task
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func`1)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Task(Func<TResult>)
  nameWithType: Task<TResult>.Task(Func<TResult>)
  fullName: System.Threading.Tasks.Task<TResult>.Task(Func<TResult>)
- uid: System.Func`1
  parent: System
  isExternal: false
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Task(Func<Object,TResult>,Object)
  nameWithType: Task<TResult>.Task(Func<Object,TResult>,Object)
  fullName: System.Threading.Tasks.Task<TResult>.Task(Func<Object,TResult>,Object)
- uid: System.Func{System.Object,TResult}
  parent: System
  isExternal: false
  name: Func<Object,TResult>
  nameWithType: Func<Object,TResult>
  fullName: System.Func<System.Object,TResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Object,TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func`1,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Task(Func<TResult>,CancellationToken)
  nameWithType: Task<TResult>.Task(Func<TResult>,CancellationToken)
  fullName: System.Threading.Tasks.Task<TResult>.Task(Func<TResult>,CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func`1,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Task(Func<TResult>,TaskCreationOptions)
  nameWithType: Task<TResult>.Task(Func<TResult>,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task<TResult>.Task(Func<TResult>,TaskCreationOptions)
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Task(Func<Object,TResult>,Object,CancellationToken)
  nameWithType: Task<TResult>.Task(Func<Object,TResult>,Object,CancellationToken)
  fullName: System.Threading.Tasks.Task<TResult>.Task(Func<Object,TResult>,Object,CancellationToken)
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Task(Func<Object,TResult>,Object,TaskCreationOptions)
  nameWithType: Task<TResult>.Task(Func<Object,TResult>,Object,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task<TResult>.Task(Func<Object,TResult>,Object,TaskCreationOptions)
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func`1,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Task(Func<TResult>,CancellationToken,TaskCreationOptions)
  nameWithType: Task<TResult>.Task(Func<TResult>,CancellationToken,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task<TResult>.Task(Func<TResult>,CancellationToken,TaskCreationOptions)
- uid: System.Threading.Tasks.Task`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Task(Func<Object,TResult>,Object,CancellationToken,TaskCreationOptions)
  nameWithType: Task<TResult>.Task(Func<Object,TResult>,Object,CancellationToken,TaskCreationOptions)
  fullName: System.Threading.Tasks.Task<TResult>.Task(Func<Object,TResult>,Object,CancellationToken,TaskCreationOptions)
- uid: System.Threading.Tasks.Task`1.ConfigureAwait(System.Boolean)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ConfigureAwait(Boolean)
  nameWithType: Task<TResult>.ConfigureAwait(Boolean)
  fullName: System.Threading.Tasks.Task<TResult>.ConfigureAwait(Boolean)
- uid: System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: ConfiguredTaskAwaitable<TResult>
  nameWithType: ConfiguredTaskAwaitable<TResult>
  fullName: System.Runtime.CompilerServices.ConfiguredTaskAwaitable<TResult>
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}})
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Action<Task<TResult>>)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Action<Task<TResult>>)
- uid: System.Action{System.Threading.Tasks.Task{TResult}}
  parent: System
  isExternal: false
  name: Action<Task<TResult>>
  nameWithType: Action<Task<TResult>>
  fullName: System.Action<System.Threading.Tasks.Task<TResult>>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: Action<System.Threading.Tasks.Task<TResult>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Action<Task<TResult>,Object>,Object)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>,Object)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Action<Task<TResult>,Object>,Object)
- uid: System.Action{System.Threading.Tasks.Task{TResult},System.Object}
  parent: System
  isExternal: false
  name: Action<Task<TResult>,Object>
  nameWithType: Action<Task<TResult>,Object>
  fullName: System.Action<System.Threading.Tasks.Task<TResult>,System.Object>
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: Action<System.Threading.Tasks.Task<TResult>,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Action<Task<TResult>>,CancellationToken)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>,CancellationToken)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Action<Task<TResult>>,CancellationToken)
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Action<Task<TResult>>,TaskContinuationOptions)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Action<Task<TResult>>,TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Action<Task<TResult>>,TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>,TaskScheduler)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Action<Task<TResult>>,TaskScheduler)
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Action<Task<TResult>,Object>,Object,CancellationToken)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>,Object,CancellationToken)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Action<Task<TResult>,Object>,Object,CancellationToken)
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Action<Task<TResult>,Object>,Object,TaskContinuationOptions)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>,Object,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Action<Task<TResult>,Object>,Object,TaskContinuationOptions)
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Action<Task<TResult>,Object>,Object,TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>,Object,TaskScheduler)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Action<Task<TResult>,Object>,Object,TaskScheduler)
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Action<Task<TResult>>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Action<Task<TResult>>,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task`1.ContinueWith(System.Action{System.Threading.Tasks.Task{`0},System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Action<Task<TResult>,Object>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Action<Task<TResult>,Object>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Action<Task<TResult>,Object>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0})
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Func<Task<TResult>,TNewResult>)
  nameWithType: Task<TResult>.ContinueWith(Func<Task<TResult>,TNewResult>)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Func<Task<TResult>,TNewResult>)
- uid: System.Threading.Tasks.Task{TNewResult}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TNewResult>
  nameWithType: Task<TNewResult>
  fullName: System.Threading.Tasks.Task<TNewResult>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<TNewResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TNewResult
    name: TNewResult
    nameWithType: TNewResult
    fullName: TNewResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Func{System.Threading.Tasks.Task{TResult},TNewResult}
  parent: System
  isExternal: false
  name: Func<Task<TResult>,TNewResult>
  nameWithType: Func<Task<TResult>,TNewResult>
  fullName: System.Func<System.Threading.Tasks.Task<TResult>,TNewResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Threading.Tasks.Task<TResult>,TNewResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TNewResult
    name: TNewResult
    nameWithType: TNewResult
    fullName: TNewResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object)
  nameWithType: Task<TResult>.ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object)
- uid: System.Func{System.Threading.Tasks.Task{TResult},System.Object,TNewResult}
  parent: System
  isExternal: false
  name: Func<Task<TResult>,Object,TNewResult>
  nameWithType: Func<Task<TResult>,Object,TNewResult>
  fullName: System.Func<System.Threading.Tasks.Task<TResult>,System.Object,TNewResult>
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: Func<System.Threading.Tasks.Task<TResult>,System.Object,TNewResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<TResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TNewResult
    name: TNewResult
    nameWithType: TNewResult
    fullName: TNewResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Func<Task<TResult>,TNewResult>,CancellationToken)
  nameWithType: Task<TResult>.ContinueWith(Func<Task<TResult>,TNewResult>,CancellationToken)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Func<Task<TResult>,TNewResult>,CancellationToken)
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Func<Task<TResult>,TNewResult>,TaskContinuationOptions)
  nameWithType: Task<TResult>.ContinueWith(Func<Task<TResult>,TNewResult>,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Func<Task<TResult>,TNewResult>,TaskContinuationOptions)
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Func<Task<TResult>,TNewResult>,TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Func<Task<TResult>,TNewResult>,TaskScheduler)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Func<Task<TResult>,TNewResult>,TaskScheduler)
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,CancellationToken)
  nameWithType: Task<TResult>.ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,CancellationToken)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,CancellationToken)
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,TaskContinuationOptions)
  nameWithType: Task<TResult>.ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,TaskContinuationOptions)
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,TaskScheduler)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,TaskScheduler)
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Func<Task<TResult>,TNewResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Func<Task<TResult>,TNewResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Func<Task<TResult>,TNewResult>,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task`1.ContinueWith``1(System.Func{System.Threading.Tasks.Task{`0},System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  nameWithType: Task<TResult>.ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
  fullName: System.Threading.Tasks.Task<TResult>.ContinueWith(Func<Task<TResult>,Object,TNewResult>,Object,CancellationToken,TaskContinuationOptions,TaskScheduler)
- uid: System.Threading.Tasks.Task`1.Factory
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Factory
  nameWithType: Task<TResult>.Factory
  fullName: System.Threading.Tasks.Task<TResult>.Factory
- uid: System.Threading.Tasks.TaskFactory`1
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskFactory<TResult>
  nameWithType: TaskFactory<TResult>
  fullName: System.Threading.Tasks.TaskFactory<TResult>
- uid: System.Threading.Tasks.Task`1.GetAwaiter
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: GetAwaiter()
  nameWithType: Task<TResult>.GetAwaiter()
  fullName: System.Threading.Tasks.Task<TResult>.GetAwaiter()
- uid: System.Runtime.CompilerServices.TaskAwaiter`1
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: TaskAwaiter<TResult>
  nameWithType: TaskAwaiter<TResult>
  fullName: System.Runtime.CompilerServices.TaskAwaiter<TResult>
- uid: System.Threading.Tasks.Task`1.Result
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Result
  nameWithType: Task<TResult>.Result
  fullName: System.Threading.Tasks.Task<TResult>.Result
- uid: TResult
  isExternal: true
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Threading.Tasks.Task`1.#ctor*
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>.Task<TResult>
- uid: System.Threading.Tasks.Task`1.ConfigureAwait*
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ConfigureAwait
  nameWithType: Task<TResult>.ConfigureAwait
- uid: System.Threading.Tasks.Task`1.ContinueWith*
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith
  nameWithType: Task<TResult>.ContinueWith
- uid: System.Threading.Tasks.Task`1.ContinueWith<TNewResult>*
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: ContinueWith<TNewResult>
  nameWithType: Task<TResult>.ContinueWith<TNewResult>
- uid: System.Threading.Tasks.Task`1.Factory*
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Factory
  nameWithType: Task<TResult>.Factory
- uid: System.Threading.Tasks.Task`1.GetAwaiter*
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: GetAwaiter
  nameWithType: Task<TResult>.GetAwaiter
- uid: System.Threading.Tasks.Task`1.Result*
  parent: System.Threading.Tasks.Task`1
  isExternal: false
  name: Result
  nameWithType: Task<TResult>.Result
