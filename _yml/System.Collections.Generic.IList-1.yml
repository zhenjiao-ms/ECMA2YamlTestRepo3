### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.IList`1
  id: IList`1
  children:
  - System.Collections.Generic.IList`1.IndexOf(`0)
  - System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  - System.Collections.Generic.IList`1.Item(System.Int32)
  - System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  langs:
  - csharp
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  type: Interface
  summary: To be added.
  remarks: To be added.
  syntax:
    content: 'public interface IList<T> : System.Collections.Generic.ICollection<T>, System.Collections.Generic.IEnumerable<T>'
    typeParameters:
    - id: T
      description: To be added.
  implements:
  - System.Collections.Generic.ICollection<T>
  - System.Collections.Generic.IEnumerable<T>
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: System.Collections.Generic.IList`1
  langs:
  - csharp
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int IndexOf (T item);
    parameters:
    - id: item
      type: T
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.IList`1.IndexOf*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: System.Collections.Generic.IList`1
  langs:
  - csharp
  name: Insert(Int32,T)
  nameWithType: IList<T>.Insert(Int32,T)
  fullName: System.Collections.Generic.IList<T>.Insert(Int32,T)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Insert (int index, T item);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    - id: item
      type: T
      description: To be added.
  overload: System.Collections.Generic.IList`1.Insert*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Generic.IList`1
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: IList<T>.Item(Int32)
  fullName: System.Collections.Generic.IList<T>.Item(Int32)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public T this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
    return:
      type: T
      description: To be added.
  overload: System.Collections.Generic.IList`1.Item*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList`1
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections.Generic
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: To be added.
  overload: System.Collections.Generic.IList`1.RemoveAt*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Collections.Generic.IList`1.IndexOf(`0)
  parent: System.Collections.Generic.IList`1
  isExternal: false
  name: IndexOf(T)
  nameWithType: IList<T>.IndexOf(T)
  fullName: System.Collections.Generic.IList<T>.IndexOf(T)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IList`1.Insert(System.Int32,`0)
  parent: System.Collections.Generic.IList`1
  isExternal: false
  name: Insert(Int32,T)
  nameWithType: IList<T>.Insert(Int32,T)
  fullName: System.Collections.Generic.IList<T>.Insert(Int32,T)
- uid: System.Collections.Generic.IList`1.Item(System.Int32)
  parent: System.Collections.Generic.IList`1
  isExternal: false
  name: Item(Int32)
  nameWithType: IList<T>.Item(Int32)
  fullName: System.Collections.Generic.IList<T>.Item(Int32)
- uid: System.Collections.Generic.IList`1.RemoveAt(System.Int32)
  parent: System.Collections.Generic.IList`1
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: IList<T>.RemoveAt(Int32)
  fullName: System.Collections.Generic.IList<T>.RemoveAt(Int32)
- uid: System.Collections.Generic.IList`1.IndexOf*
  parent: System.Collections.Generic.IList`1
  isExternal: false
  name: IndexOf
  nameWithType: IList<T>.IndexOf
- uid: System.Collections.Generic.IList`1.Insert*
  parent: System.Collections.Generic.IList`1
  isExternal: false
  name: Insert
  nameWithType: IList<T>.Insert
- uid: System.Collections.Generic.IList`1.Item*
  parent: System.Collections.Generic.IList`1
  isExternal: false
  name: Item
  nameWithType: IList<T>.Item
- uid: System.Collections.Generic.IList`1.RemoveAt*
  parent: System.Collections.Generic.IList`1
  isExternal: false
  name: RemoveAt
  nameWithType: IList<T>.RemoveAt
