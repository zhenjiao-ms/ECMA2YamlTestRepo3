### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.DynamicILInfo
  id: DynamicILInfo
  children:
  - System.Reflection.Emit.DynamicILInfo.DynamicMethod
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  langs:
  - csharp
  name: DynamicILInfo
  nameWithType: DynamicILInfo
  fullName: System.Reflection.Emit.DynamicILInfo
  type: Class
  summary: To be added.
  remarks: To be added.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class DynamicILInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  id: DynamicMethod
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
  fullName: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public System.Reflection.Emit.DynamicMethod DynamicMethod { get; }
    return:
      type: System.Reflection.Emit.DynamicMethod
      description: To be added.
  overload: System.Reflection.Emit.DynamicILInfo.DynamicMethod*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  id: GetTokenFor(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(Byte[])
  nameWithType: DynamicILInfo.GetTokenFor(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int GetTokenFor (byte[] signature);
    parameters:
    - id: signature
      type: System.Byte[]
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  id: GetTokenFor(System.Reflection.Emit.DynamicMethod)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(DynamicMethod)
  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(DynamicMethod)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int GetTokenFor (System.Reflection.Emit.DynamicMethod method);
    parameters:
    - id: method
      type: System.Reflection.Emit.DynamicMethod
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  id: GetTokenFor(System.RuntimeFieldHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeFieldHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int GetTokenFor (RuntimeFieldHandle field);
    parameters:
    - id: field
      type: System.RuntimeFieldHandle
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  id: GetTokenFor(System.RuntimeMethodHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeMethodHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int GetTokenFor (RuntimeMethodHandle method);
    parameters:
    - id: method
      type: System.RuntimeMethodHandle
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int GetTokenFor (RuntimeTypeHandle type);
    parameters:
    - id: type
      type: System.RuntimeTypeHandle
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  id: GetTokenFor(System.String)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(String)
  nameWithType: DynamicILInfo.GetTokenFor(String)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int GetTokenFor (string literal);
    parameters:
    - id: literal
      type: System.String
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int GetTokenFor (RuntimeFieldHandle field, RuntimeTypeHandle contextType);
    parameters:
    - id: field
      type: System.RuntimeFieldHandle
      description: To be added.
    - id: contextType
      type: System.RuntimeTypeHandle
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public int GetTokenFor (RuntimeMethodHandle method, RuntimeTypeHandle contextType);
    parameters:
    - id: method
      type: System.RuntimeMethodHandle
      description: To be added.
    - id: contextType
      type: System.RuntimeTypeHandle
      description: To be added.
    return:
      type: System.Int32
      description: To be added.
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  id: SetCode(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetCode(Byte[],Int32)
  nameWithType: DynamicILInfo.SetCode(Byte[],Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void SetCode (byte[] code, int maxStackSize);
    parameters:
    - id: code
      type: System.Byte[]
      description: To be added.
    - id: maxStackSize
      type: System.Int32
      description: To be added.
  overload: System.Reflection.Emit.DynamicILInfo.SetCode*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  id: SetCode(System.Byte*,System.Int32,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetCode(Byte*,Int32,Int32)
  nameWithType: DynamicILInfo.SetCode(Byte*,Int32,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte*,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void SetCode (byte* code, int codeSize, int maxStackSize);
    parameters:
    - id: code
      type: System.Byte*
      description: To be added.
    - id: codeSize
      type: System.Int32
      description: To be added.
    - id: maxStackSize
      type: System.Int32
      description: To be added.
  overload: System.Reflection.Emit.DynamicILInfo.SetCode*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  id: SetExceptions(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetExceptions(Byte[])
  nameWithType: DynamicILInfo.SetExceptions(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void SetExceptions (byte[] exceptions);
    parameters:
    - id: exceptions
      type: System.Byte[]
      description: To be added.
  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  id: SetExceptions(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetExceptions(Byte*,Int32)
  nameWithType: DynamicILInfo.SetExceptions(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void SetExceptions (byte* exceptions, int exceptionsSize);
    parameters:
    - id: exceptions
      type: System.Byte*
      description: To be added.
    - id: exceptionsSize
      type: System.Int32
      description: To be added.
  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  id: SetLocalSignature(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetLocalSignature(Byte[])
  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void SetLocalSignature (byte[] localSignature);
    parameters:
    - id: localSignature
      type: System.Byte[]
      description: To be added.
  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  id: SetLocalSignature(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetLocalSignature(Byte*,Int32)
  nameWithType: DynamicILInfo.SetLocalSignature(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void SetLocalSignature (byte* localSignature, int signatureSize);
    parameters:
    - id: localSignature
      type: System.Byte*
      description: To be added.
    - id: signatureSize
      type: System.Int32
      description: To be added.
  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
  fullName: System.Reflection.Emit.DynamicILInfo.DynamicMethod
- uid: System.Reflection.Emit.DynamicMethod
  parent: System.Reflection.Emit
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicMethod
  fullName: System.Reflection.Emit.DynamicMethod
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(Byte[])
  nameWithType: DynamicILInfo.GetTokenFor(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(Byte[])
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(DynamicMethod)
  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(DynamicMethod)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.DynamicMethod
  parent: System.Reflection.Emit
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicMethod
  fullName: System.Reflection.Emit.DynamicMethod
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeFieldHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.RuntimeFieldHandle
  parent: System
  isExternal: false
  name: RuntimeFieldHandle
  nameWithType: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeMethodHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.RuntimeMethodHandle
  parent: System
  isExternal: false
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(String)
  nameWithType: DynamicILInfo.GetTokenFor(String)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(String)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.RuntimeFieldHandle
  parent: System
  isExternal: false
  name: RuntimeFieldHandle
  nameWithType: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.RuntimeMethodHandle
  parent: System
  isExternal: false
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode(Byte[],Int32)
  nameWithType: DynamicILInfo.SetCode(Byte[],Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte[],Int32)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode(Byte*,Int32,Int32)
  nameWithType: DynamicILInfo.SetCode(Byte*,Int32,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte*,Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions(Byte[])
  nameWithType: DynamicILInfo.SetExceptions(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte[])
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions(Byte*,Int32)
  nameWithType: DynamicILInfo.SetExceptions(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte*,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature(Byte[])
  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte[])
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature(Byte*,Int32)
  nameWithType: DynamicILInfo.SetLocalSignature(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte*,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor
  nameWithType: DynamicILInfo.GetTokenFor
- uid: System.Reflection.Emit.DynamicILInfo.SetCode*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode
  nameWithType: DynamicILInfo.SetCode
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions
  nameWithType: DynamicILInfo.SetExceptions
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature
  nameWithType: DynamicILInfo.SetLocalSignature
