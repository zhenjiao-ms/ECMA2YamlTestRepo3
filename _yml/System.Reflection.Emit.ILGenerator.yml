### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.ILGenerator
  id: ILGenerator
  children:
  - System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)
  - System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock
  - System.Reflection.Emit.ILGenerator.BeginExceptionBlock
  - System.Reflection.Emit.ILGenerator.BeginFaultBlock
  - System.Reflection.Emit.ILGenerator.BeginFinallyBlock
  - System.Reflection.Emit.ILGenerator.BeginScope
  - System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
  - System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)
  - System.Reflection.Emit.ILGenerator.DefineLabel
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)
  - System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  - System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])
  - System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])
  - System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  - System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)
  - System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)
  - System.Reflection.Emit.ILGenerator.EndExceptionBlock
  - System.Reflection.Emit.ILGenerator.EndScope
  - System.Reflection.Emit.ILGenerator.ILOffset
  - System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
  - System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.Emit.ILGenerator.ThrowException(System.Type)
  - System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)
  langs:
  - csharp
  name: ILGenerator
  nameWithType: ILGenerator
  fullName: System.Reflection.Emit.ILGenerator
  type: Class
  summary: To be added.
  remarks: To be added.
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]

      [System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._ILGenerator))]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class ILGenerator : System.Runtime.InteropServices._ILGenerator
  inheritance:
  - System.Object
  implements:
  - System.Runtime.InteropServices._ILGenerator
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)
  id: BeginCatchBlock(System.Type)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: BeginCatchBlock(Type)
  nameWithType: ILGenerator.BeginCatchBlock(Type)
  fullName: System.Reflection.Emit.ILGenerator.BeginCatchBlock(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void BeginCatchBlock (Type exceptionType);
    parameters:
    - id: exceptionType
      type: System.Type
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.BeginCatchBlock*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock
  id: BeginExceptFilterBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: BeginExceptFilterBlock()
  nameWithType: ILGenerator.BeginExceptFilterBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void BeginExceptFilterBlock ();
    parameters: []
  overload: System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.BeginExceptionBlock
  id: BeginExceptionBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: BeginExceptionBlock()
  nameWithType: ILGenerator.BeginExceptionBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginExceptionBlock()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual System.Reflection.Emit.Label BeginExceptionBlock ();
    parameters: []
    return:
      type: System.Reflection.Emit.Label
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.BeginExceptionBlock*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.BeginFaultBlock
  id: BeginFaultBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: BeginFaultBlock()
  nameWithType: ILGenerator.BeginFaultBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginFaultBlock()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void BeginFaultBlock ();
    parameters: []
  overload: System.Reflection.Emit.ILGenerator.BeginFaultBlock*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.BeginFinallyBlock
  id: BeginFinallyBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: BeginFinallyBlock()
  nameWithType: ILGenerator.BeginFinallyBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginFinallyBlock()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void BeginFinallyBlock ();
    parameters: []
  overload: System.Reflection.Emit.ILGenerator.BeginFinallyBlock*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.BeginScope
  id: BeginScope
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: BeginScope()
  nameWithType: ILGenerator.BeginScope()
  fullName: System.Reflection.Emit.ILGenerator.BeginScope()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void BeginScope ();
    parameters: []
  overload: System.Reflection.Emit.ILGenerator.BeginScope*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
  id: DeclareLocal(System.Type)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: DeclareLocal(Type)
  nameWithType: ILGenerator.DeclareLocal(Type)
  fullName: System.Reflection.Emit.ILGenerator.DeclareLocal(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual System.Reflection.Emit.LocalBuilder DeclareLocal (Type localType);
    parameters:
    - id: localType
      type: System.Type
      description: To be added.
    return:
      type: System.Reflection.Emit.LocalBuilder
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.DeclareLocal*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)
  id: DeclareLocal(System.Type,System.Boolean)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: DeclareLocal(Type,Boolean)
  nameWithType: ILGenerator.DeclareLocal(Type,Boolean)
  fullName: System.Reflection.Emit.ILGenerator.DeclareLocal(Type,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual System.Reflection.Emit.LocalBuilder DeclareLocal (Type localType, bool pinned);
    parameters:
    - id: localType
      type: System.Type
      description: To be added.
    - id: pinned
      type: System.Boolean
      description: To be added.
    return:
      type: System.Reflection.Emit.LocalBuilder
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.DeclareLocal*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.DefineLabel
  id: DefineLabel
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: DefineLabel()
  nameWithType: ILGenerator.DefineLabel()
  fullName: System.Reflection.Emit.ILGenerator.DefineLabel()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual System.Reflection.Emit.Label DefineLabel ();
    parameters: []
    return:
      type: System.Reflection.Emit.Label
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.DefineLabel*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
  id: Emit(System.Reflection.Emit.OpCode)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode)
  nameWithType: ILGenerator.Emit(OpCode)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)
  id: Emit(System.Reflection.Emit.OpCode,System.Byte)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,Byte)
  nameWithType: ILGenerator.Emit(OpCode,Byte)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Byte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, byte arg);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: To be added.
    - id: arg
      type: System.Byte
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)
  id: Emit(System.Reflection.Emit.OpCode,System.Double)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,Double)
  nameWithType: ILGenerator.Emit(OpCode,Double)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, double arg);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: To be added.
    - id: arg
      type: System.Double
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)
  id: Emit(System.Reflection.Emit.OpCode,System.Int16)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,Int16)
  nameWithType: ILGenerator.Emit(OpCode,Int16)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Int16)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, short arg);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: To be added.
    - id: arg
      type: System.Int16
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)
  id: Emit(System.Reflection.Emit.OpCode,System.Int32)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,Int32)
  nameWithType: ILGenerator.Emit(OpCode,Int32)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, int arg);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: To be added.
    - id: arg
      type: System.Int32
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)
  id: Emit(System.Reflection.Emit.OpCode,System.Int64)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,Int64)
  nameWithType: ILGenerator.Emit(OpCode,Int64)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, long arg);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: To be added.
    - id: arg
      type: System.Int64
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,ConstructorInfo)
  nameWithType: ILGenerator.Emit(OpCode,ConstructorInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,ConstructorInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.ConstructorInfo con);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: To be added.
    - id: con
      type: System.Reflection.ConstructorInfo
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,Label)
  nameWithType: ILGenerator.Emit(OpCode,Label)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Label)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label label);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: To be added.
    - id: label
      type: System.Reflection.Emit.Label
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,Label[])
  nameWithType: ILGenerator.Emit(OpCode,Label[])
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Label[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label[] labels);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: To be added.
    - id: labels
      type: System.Reflection.Emit.Label[]
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,LocalBuilder)
  nameWithType: ILGenerator.Emit(OpCode,LocalBuilder)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,LocalBuilder)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.LocalBuilder local);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: To be added.
    - id: local
      type: System.Reflection.Emit.LocalBuilder
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,SignatureHelper)
  nameWithType: ILGenerator.Emit(OpCode,SignatureHelper)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,SignatureHelper)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.SignatureHelper signature);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: To be added.
    - id: signature
      type: System.Reflection.Emit.SignatureHelper
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,FieldInfo)
  nameWithType: ILGenerator.Emit(OpCode,FieldInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,FieldInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.FieldInfo field);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: To be added.
    - id: field
      type: System.Reflection.FieldInfo
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,MethodInfo)
  nameWithType: ILGenerator.Emit(OpCode,MethodInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,MethodInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.MethodInfo meth);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: To be added.
    - id: meth
      type: System.Reflection.MethodInfo
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)
  id: Emit(System.Reflection.Emit.OpCode,System.SByte)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,SByte)
  nameWithType: ILGenerator.Emit(OpCode,SByte)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,SByte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public void Emit (System.Reflection.Emit.OpCode opcode, sbyte arg);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: To be added.
    - id: arg
      type: System.SByte
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)
  id: Emit(System.Reflection.Emit.OpCode,System.Single)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,Single)
  nameWithType: ILGenerator.Emit(OpCode,Single)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Single)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, float arg);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: To be added.
    - id: arg
      type: System.Single
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)
  id: Emit(System.Reflection.Emit.OpCode,System.String)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,String)
  nameWithType: ILGenerator.Emit(OpCode,String)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, string str);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: To be added.
    - id: str
      type: System.String
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)
  id: Emit(System.Reflection.Emit.OpCode,System.Type)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: Emit(OpCode,Type)
  nameWithType: ILGenerator.Emit(OpCode,Type)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void Emit (System.Reflection.Emit.OpCode opcode, Type cls);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: To be added.
    - id: cls
      type: System.Type
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.Emit*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  id: EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: EmitCall(OpCode,MethodInfo,Type[])
  nameWithType: ILGenerator.EmitCall(OpCode,MethodInfo,Type[])
  fullName: System.Reflection.Emit.ILGenerator.EmitCall(OpCode,MethodInfo,Type[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void EmitCall (System.Reflection.Emit.OpCode opcode, System.Reflection.MethodInfo methodInfo, Type[] optionalParameterTypes);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: To be added.
    - id: methodInfo
      type: System.Reflection.MethodInfo
      description: To be added.
    - id: optionalParameterTypes
      type: System.Type[]
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.EmitCall*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])
  id: EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: EmitCalli(OpCode,CallingConvention,Type,Type[])
  nameWithType: ILGenerator.EmitCalli(OpCode,CallingConvention,Type,Type[])
  fullName: System.Reflection.Emit.ILGenerator.EmitCalli(OpCode,CallingConvention,Type,Type[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void EmitCalli (System.Reflection.Emit.OpCode opcode, System.Runtime.InteropServices.CallingConvention unmanagedCallConv, Type returnType, Type[] parameterTypes);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: To be added.
    - id: unmanagedCallConv
      type: System.Runtime.InteropServices.CallingConvention
      description: To be added.
    - id: returnType
      type: System.Type
      description: To be added.
    - id: parameterTypes
      type: System.Type[]
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.EmitCalli*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])
  id: EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: EmitCalli(OpCode,CallingConventions,Type,Type[],Type[])
  nameWithType: ILGenerator.EmitCalli(OpCode,CallingConventions,Type,Type[],Type[])
  fullName: System.Reflection.Emit.ILGenerator.EmitCalli(OpCode,CallingConventions,Type,Type[],Type[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void EmitCalli (System.Reflection.Emit.OpCode opcode, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes);
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: To be added.
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: To be added.
    - id: returnType
      type: System.Type
      description: To be added.
    - id: parameterTypes
      type: System.Type[]
      description: To be added.
    - id: optionalParameterTypes
      type: System.Type[]
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.EmitCalli*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  id: EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: EmitWriteLine(LocalBuilder)
  nameWithType: ILGenerator.EmitWriteLine(LocalBuilder)
  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(LocalBuilder)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void EmitWriteLine (System.Reflection.Emit.LocalBuilder localBuilder);
    parameters:
    - id: localBuilder
      type: System.Reflection.Emit.LocalBuilder
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.EmitWriteLine*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)
  id: EmitWriteLine(System.Reflection.FieldInfo)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: EmitWriteLine(FieldInfo)
  nameWithType: ILGenerator.EmitWriteLine(FieldInfo)
  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(FieldInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void EmitWriteLine (System.Reflection.FieldInfo fld);
    parameters:
    - id: fld
      type: System.Reflection.FieldInfo
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.EmitWriteLine*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)
  id: EmitWriteLine(System.String)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: EmitWriteLine(String)
  nameWithType: ILGenerator.EmitWriteLine(String)
  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void EmitWriteLine (string value);
    parameters:
    - id: value
      type: System.String
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.EmitWriteLine*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.EndExceptionBlock
  id: EndExceptionBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: EndExceptionBlock()
  nameWithType: ILGenerator.EndExceptionBlock()
  fullName: System.Reflection.Emit.ILGenerator.EndExceptionBlock()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void EndExceptionBlock ();
    parameters: []
  overload: System.Reflection.Emit.ILGenerator.EndExceptionBlock*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.EndScope
  id: EndScope
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: EndScope()
  nameWithType: ILGenerator.EndScope()
  fullName: System.Reflection.Emit.ILGenerator.EndScope()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void EndScope ();
    parameters: []
  overload: System.Reflection.Emit.ILGenerator.EndScope*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.ILOffset
  id: ILOffset
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: ILOffset
  nameWithType: ILGenerator.ILOffset
  fullName: System.Reflection.Emit.ILGenerator.ILOffset
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual int ILOffset { get; }
    return:
      type: System.Int32
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.ILOffset*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
  id: MarkLabel(System.Reflection.Emit.Label)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: MarkLabel(Label)
  nameWithType: ILGenerator.MarkLabel(Label)
  fullName: System.Reflection.Emit.ILGenerator.MarkLabel(Label)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void MarkLabel (System.Reflection.Emit.Label loc);
    parameters:
    - id: loc
      type: System.Reflection.Emit.Label
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.MarkLabel*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)
  id: MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: MarkSequencePoint(ISymbolDocumentWriter,Int32,Int32,Int32,Int32)
  nameWithType: ILGenerator.MarkSequencePoint(ISymbolDocumentWriter,Int32,Int32,Int32,Int32)
  fullName: System.Reflection.Emit.ILGenerator.MarkSequencePoint(ISymbolDocumentWriter,Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void MarkSequencePoint (System.Diagnostics.SymbolStore.ISymbolDocumentWriter document, int startLine, int startColumn, int endLine, int endColumn);
    parameters:
    - id: document
      type: System.Diagnostics.SymbolStore.ISymbolDocumentWriter
      description: To be added.
    - id: startLine
      type: System.Int32
      description: To be added.
    - id: startColumn
      type: System.Int32
      description: To be added.
    - id: endLine
      type: System.Int32
      description: To be added.
    - id: endColumn
      type: System.Int32
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.MarkSequencePoint*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: System.Runtime.InteropServices._ILGenerator.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.ILGenerator.System.Runtime.InteropServices._ILGenerator.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: void _ILGenerator.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);
    parameters:
    - id: riid
      type: System.Guid
      description: To be added.
    - id: rgszNames
      type: System.IntPtr
      description: To be added.
    - id: cNames
      type: System.UInt32
      description: To be added.
    - id: lcid
      type: System.UInt32
      description: To be added.
    - id: rgDispId
      type: System.IntPtr
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  id: System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: System.Runtime.InteropServices._ILGenerator.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfo(UInt32,UInt32,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: void _ILGenerator.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);
    parameters:
    - id: iTInfo
      type: System.UInt32
      description: To be added.
    - id: lcid
      type: System.UInt32
      description: To be added.
    - id: ppTInfo
      type: System.IntPtr
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)
  id: System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)
  isEii: true
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount(UInt32)
  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.Emit.ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: void _ILGenerator.GetTypeInfoCount (out uint pcTInfo);
    parameters:
    - id: pcTInfo
      type: System.UInt32
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  id: System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  isEii: true
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: System.Runtime.InteropServices._ILGenerator.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Reflection.Emit.ILGenerator.System.Runtime.InteropServices._ILGenerator.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: void _ILGenerator.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);
    parameters:
    - id: dispIdMember
      type: System.UInt32
      description: To be added.
    - id: riid
      type: System.Guid
      description: To be added.
    - id: lcid
      type: System.UInt32
      description: To be added.
    - id: wFlags
      type: System.Int16
      description: To be added.
    - id: pDispParams
      type: System.IntPtr
      description: To be added.
    - id: pVarResult
      type: System.IntPtr
      description: To be added.
    - id: pExcepInfo
      type: System.IntPtr
      description: To be added.
    - id: puArgErr
      type: System.IntPtr
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.ThrowException(System.Type)
  id: ThrowException(System.Type)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: ThrowException(Type)
  nameWithType: ILGenerator.ThrowException(Type)
  fullName: System.Reflection.Emit.ILGenerator.ThrowException(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void ThrowException (Type excType);
    parameters:
    - id: excType
      type: System.Type
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.ThrowException*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
- uid: System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)
  id: UsingNamespace(System.String)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  name: UsingNamespace(String)
  nameWithType: ILGenerator.UsingNamespace(String)
  fullName: System.Reflection.Emit.ILGenerator.UsingNamespace(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: To be added.
  remarks: To be added.
  syntax:
    content: public virtual void UsingNamespace (string usingNamespace);
    parameters:
    - id: usingNamespace
      type: System.String
      description: To be added.
  overload: System.Reflection.Emit.ILGenerator.UsingNamespace*
  exceptions: []
  platform:
  - net-11
  - net-20
  - netcore-10
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: BeginCatchBlock(Type)
  nameWithType: ILGenerator.BeginCatchBlock(Type)
  fullName: System.Reflection.Emit.ILGenerator.BeginCatchBlock(Type)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: BeginExceptFilterBlock()
  nameWithType: ILGenerator.BeginExceptFilterBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock()
- uid: System.Reflection.Emit.ILGenerator.BeginExceptionBlock
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: BeginExceptionBlock()
  nameWithType: ILGenerator.BeginExceptionBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginExceptionBlock()
- uid: System.Reflection.Emit.Label
  parent: System.Reflection.Emit
  isExternal: false
  name: Label
  nameWithType: Label
  fullName: System.Reflection.Emit.Label
- uid: System.Reflection.Emit.ILGenerator.BeginFaultBlock
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: BeginFaultBlock()
  nameWithType: ILGenerator.BeginFaultBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginFaultBlock()
- uid: System.Reflection.Emit.ILGenerator.BeginFinallyBlock
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: BeginFinallyBlock()
  nameWithType: ILGenerator.BeginFinallyBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginFinallyBlock()
- uid: System.Reflection.Emit.ILGenerator.BeginScope
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: BeginScope()
  nameWithType: ILGenerator.BeginScope()
  fullName: System.Reflection.Emit.ILGenerator.BeginScope()
- uid: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: DeclareLocal(Type)
  nameWithType: ILGenerator.DeclareLocal(Type)
  fullName: System.Reflection.Emit.ILGenerator.DeclareLocal(Type)
- uid: System.Reflection.Emit.LocalBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: LocalBuilder
  nameWithType: LocalBuilder
  fullName: System.Reflection.Emit.LocalBuilder
- uid: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: DeclareLocal(Type,Boolean)
  nameWithType: ILGenerator.DeclareLocal(Type,Boolean)
  fullName: System.Reflection.Emit.ILGenerator.DeclareLocal(Type,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.ILGenerator.DefineLabel
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: DefineLabel()
  nameWithType: ILGenerator.DefineLabel()
  fullName: System.Reflection.Emit.ILGenerator.DefineLabel()
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode)
  nameWithType: ILGenerator.Emit(OpCode)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode)
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  nameWithType: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,Byte)
  nameWithType: ILGenerator.Emit(OpCode,Byte)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Byte)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,Double)
  nameWithType: ILGenerator.Emit(OpCode,Double)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,Int16)
  nameWithType: ILGenerator.Emit(OpCode,Int16)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Int16)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,Int32)
  nameWithType: ILGenerator.Emit(OpCode,Int32)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,Int64)
  nameWithType: ILGenerator.Emit(OpCode,Int64)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Int64)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,ConstructorInfo)
  nameWithType: ILGenerator.Emit(OpCode,ConstructorInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,ConstructorInfo)
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,Label)
  nameWithType: ILGenerator.Emit(OpCode,Label)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Label)
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,Label[])
  nameWithType: ILGenerator.Emit(OpCode,Label[])
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Label[])
- uid: System.Reflection.Emit.Label[]
  parent: System.Reflection.Emit
  isExternal: false
  name: Label
  nameWithType: Label
  fullName: System.Reflection.Emit.Label[]
  spec.csharp:
  - uid: System.Reflection.Emit.Label
    name: Label
    nameWithType: Label
    fullName: Label[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,LocalBuilder)
  nameWithType: ILGenerator.Emit(OpCode,LocalBuilder)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,LocalBuilder)
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,SignatureHelper)
  nameWithType: ILGenerator.Emit(OpCode,SignatureHelper)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,SignatureHelper)
- uid: System.Reflection.Emit.SignatureHelper
  parent: System.Reflection.Emit
  isExternal: false
  name: SignatureHelper
  nameWithType: SignatureHelper
  fullName: System.Reflection.Emit.SignatureHelper
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,FieldInfo)
  nameWithType: ILGenerator.Emit(OpCode,FieldInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,FieldInfo)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,MethodInfo)
  nameWithType: ILGenerator.Emit(OpCode,MethodInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,MethodInfo)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,SByte)
  nameWithType: ILGenerator.Emit(OpCode,SByte)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,SByte)
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,Single)
  nameWithType: ILGenerator.Emit(OpCode,Single)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Single)
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,String)
  nameWithType: ILGenerator.Emit(OpCode,String)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,String)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit(OpCode,Type)
  nameWithType: ILGenerator.Emit(OpCode,Type)
  fullName: System.Reflection.Emit.ILGenerator.Emit(OpCode,Type)
- uid: System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: EmitCall(OpCode,MethodInfo,Type[])
  nameWithType: ILGenerator.EmitCall(OpCode,MethodInfo,Type[])
  fullName: System.Reflection.Emit.ILGenerator.EmitCall(OpCode,MethodInfo,Type[])
- uid: System.Type[]
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Runtime.InteropServices.CallingConvention,System.Type,System.Type[])
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: EmitCalli(OpCode,CallingConvention,Type,Type[])
  nameWithType: ILGenerator.EmitCalli(OpCode,CallingConvention,Type,Type[])
  fullName: System.Reflection.Emit.ILGenerator.EmitCalli(OpCode,CallingConvention,Type,Type[])
- uid: System.Runtime.InteropServices.CallingConvention
  parent: System.Runtime.InteropServices
  isExternal: false
  name: CallingConvention
  nameWithType: CallingConvention
  fullName: System.Runtime.InteropServices.CallingConvention
- uid: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: EmitCalli(OpCode,CallingConventions,Type,Type[],Type[])
  nameWithType: ILGenerator.EmitCalli(OpCode,CallingConventions,Type,Type[],Type[])
  fullName: System.Reflection.Emit.ILGenerator.EmitCalli(OpCode,CallingConventions,Type,Type[],Type[])
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: EmitWriteLine(LocalBuilder)
  nameWithType: ILGenerator.EmitWriteLine(LocalBuilder)
  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(LocalBuilder)
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: EmitWriteLine(FieldInfo)
  nameWithType: ILGenerator.EmitWriteLine(FieldInfo)
  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(FieldInfo)
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: EmitWriteLine(String)
  nameWithType: ILGenerator.EmitWriteLine(String)
  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(String)
- uid: System.Reflection.Emit.ILGenerator.EndExceptionBlock
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: EndExceptionBlock()
  nameWithType: ILGenerator.EndExceptionBlock()
  fullName: System.Reflection.Emit.ILGenerator.EndExceptionBlock()
- uid: System.Reflection.Emit.ILGenerator.EndScope
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: EndScope()
  nameWithType: ILGenerator.EndScope()
  fullName: System.Reflection.Emit.ILGenerator.EndScope()
- uid: System.Reflection.Emit.ILGenerator.ILOffset
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: ILOffset
  nameWithType: ILGenerator.ILOffset
  fullName: System.Reflection.Emit.ILGenerator.ILOffset
- uid: System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: MarkLabel(Label)
  nameWithType: ILGenerator.MarkLabel(Label)
  fullName: System.Reflection.Emit.ILGenerator.MarkLabel(Label)
- uid: System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: MarkSequencePoint(ISymbolDocumentWriter,Int32,Int32,Int32,Int32)
  nameWithType: ILGenerator.MarkSequencePoint(ISymbolDocumentWriter,Int32,Int32,Int32,Int32)
  fullName: System.Reflection.Emit.ILGenerator.MarkSequencePoint(ISymbolDocumentWriter,Int32,Int32,Int32,Int32)
- uid: System.Diagnostics.SymbolStore.ISymbolDocumentWriter
  parent: System.Diagnostics.SymbolStore
  isExternal: false
  name: ISymbolDocumentWriter
  nameWithType: ISymbolDocumentWriter
  fullName: System.Diagnostics.SymbolStore.ISymbolDocumentWriter
- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: System.Runtime.InteropServices._ILGenerator.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.ILGenerator.System.Runtime.InteropServices._ILGenerator.GetIDsOfNames(Guid,IntPtr,UInt32,UInt32,IntPtr)
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: System.Runtime.InteropServices._ILGenerator.GetTypeInfo(UInt32,UInt32,IntPtr)
  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfo(UInt32,UInt32,IntPtr)
  fullName: System.Reflection.Emit.ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfo(UInt32,UInt32,IntPtr)
- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount(UInt32)
  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.Emit.ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount(UInt32)
- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: System.Runtime.InteropServices._ILGenerator.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
  fullName: System.Reflection.Emit.ILGenerator.System.Runtime.InteropServices._ILGenerator.Invoke(UInt32,Guid,UInt32,Int16,IntPtr,IntPtr,IntPtr,IntPtr)
- uid: System.Reflection.Emit.ILGenerator.ThrowException(System.Type)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: ThrowException(Type)
  nameWithType: ILGenerator.ThrowException(Type)
  fullName: System.Reflection.Emit.ILGenerator.ThrowException(Type)
- uid: System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: UsingNamespace(String)
  nameWithType: ILGenerator.UsingNamespace(String)
  fullName: System.Reflection.Emit.ILGenerator.UsingNamespace(String)
- uid: System.Reflection.Emit.ILGenerator.BeginCatchBlock*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: BeginCatchBlock
  nameWithType: ILGenerator.BeginCatchBlock
- uid: System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: BeginExceptFilterBlock
  nameWithType: ILGenerator.BeginExceptFilterBlock
- uid: System.Reflection.Emit.ILGenerator.BeginExceptionBlock*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: BeginExceptionBlock
  nameWithType: ILGenerator.BeginExceptionBlock
- uid: System.Reflection.Emit.ILGenerator.BeginFaultBlock*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: BeginFaultBlock
  nameWithType: ILGenerator.BeginFaultBlock
- uid: System.Reflection.Emit.ILGenerator.BeginFinallyBlock*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: BeginFinallyBlock
  nameWithType: ILGenerator.BeginFinallyBlock
- uid: System.Reflection.Emit.ILGenerator.BeginScope*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: BeginScope
  nameWithType: ILGenerator.BeginScope
- uid: System.Reflection.Emit.ILGenerator.DeclareLocal*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: DeclareLocal
  nameWithType: ILGenerator.DeclareLocal
- uid: System.Reflection.Emit.ILGenerator.DefineLabel*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: DefineLabel
  nameWithType: ILGenerator.DefineLabel
- uid: System.Reflection.Emit.ILGenerator.Emit*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: Emit
  nameWithType: ILGenerator.Emit
- uid: System.Reflection.Emit.ILGenerator.EmitCall*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: EmitCall
  nameWithType: ILGenerator.EmitCall
- uid: System.Reflection.Emit.ILGenerator.EmitCalli*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: EmitCalli
  nameWithType: ILGenerator.EmitCalli
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: EmitWriteLine
  nameWithType: ILGenerator.EmitWriteLine
- uid: System.Reflection.Emit.ILGenerator.EndExceptionBlock*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: EndExceptionBlock
  nameWithType: ILGenerator.EndExceptionBlock
- uid: System.Reflection.Emit.ILGenerator.EndScope*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: EndScope
  nameWithType: ILGenerator.EndScope
- uid: System.Reflection.Emit.ILGenerator.ILOffset*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: ILOffset
  nameWithType: ILGenerator.ILOffset
- uid: System.Reflection.Emit.ILGenerator.MarkLabel*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: MarkLabel
  nameWithType: ILGenerator.MarkLabel
- uid: System.Reflection.Emit.ILGenerator.MarkSequencePoint*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: MarkSequencePoint
  nameWithType: ILGenerator.MarkSequencePoint
- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetIDsOfNames*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: System.Runtime.InteropServices._ILGenerator.GetIDsOfNames
  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.GetIDsOfNames
- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfo*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: System.Runtime.InteropServices._ILGenerator.GetTypeInfo
  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfo
- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#GetTypeInfoCount*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount
  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount
- uid: System.Reflection.Emit.ILGenerator.System#Runtime#InteropServices#_ILGenerator#Invoke*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: System.Runtime.InteropServices._ILGenerator.Invoke
  nameWithType: ILGenerator.System.Runtime.InteropServices._ILGenerator.Invoke
- uid: System.Reflection.Emit.ILGenerator.ThrowException*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: ThrowException
  nameWithType: ILGenerator.ThrowException
- uid: System.Reflection.Emit.ILGenerator.UsingNamespace*
  parent: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: UsingNamespace
  nameWithType: ILGenerator.UsingNamespace
