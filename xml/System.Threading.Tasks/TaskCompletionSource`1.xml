<Type Name="TaskCompletionSource&lt;TResult&gt;" FullName="System.Threading.Tasks.TaskCompletionSource&lt;TResult&gt;">
  <TypeSignature Language="C#" Value="public class TaskCompletionSource&lt;TResult&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TaskCompletionSource`1&lt;TResult&gt; extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TResult" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TResult">To be added.</typeparam>
    <summary>Represents the producer side of a <see cref="System.Threading.Tasks.Task%601" /> unbound to a delegate, providing access to the consumer side through the <see cref="System.Threading.Tasks.TaskCompletionSource%601.Task%2A" /> property.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In many scenarios, it is useful to enable a <xref:System.Threading.Tasks.Task%601> to represent an external asynchronous operation. TaskCompletionSource(TResult) is provided for this purpose. It enables the creation of a task that can be handed out to consumers, and those consumers can use the members of the task as they would any other. However, unlike most tasks, the state of a task created by a TaskCompletionSource is controlled explicitly by the methods on TaskCompletionSource. This enables the completion of the external asynchronous operation to be propagated to the underlying Task. The separation also ensures that consumers are not able to transition the state without access to the corresponding TaskCompletionSource. For more information, see the entry [The Nature of TaskCompletionSource\<TResult>](http://blogs.msdn.com/b/pfxteam/archive/2009/06/02/9685804.aspx) in the Parallel Programming with .NET blog.  
  
 The [Parallel Extensions samples](http://go.microsoft.com/fwlink/?LinkID=165717) also contain examples of how to use TaskCompletionSource(TResult).  
  
   
  
## Examples  
 The following example shows how to use a TaskCompletionSource(TResult):  
  
 [!code-vb[System.Threading.Tasks.TaskCompletionSource#01](~/add/codesnippet/visualbasic/t-system.threading.tasks_4_1.vb)]
 [!code-cs[System.Threading.Tasks.TaskCompletionSource#01](~/add/codesnippet/csharp/t-system.threading.tasks_4_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe>All members of TaskCompletionSource(TResult) are thread-safe and may be used from multiple threads concurrently.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskCompletionSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a <see cref="System.Threading.Tasks.TaskCompletionSource%601" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskCompletionSource (object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object state) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">The state to use as the underlying <see cref="System.Threading.Tasks.Task%601" />'s AsyncState.</param>
        <summary>Creates a <see cref="System.Threading.Tasks.TaskCompletionSource%601" /> with the specified state.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskCompletionSource (System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="creationOptions">The options to use when creating the underlying <see cref="System.Threading.Tasks.Task%601" />.</param>
        <summary>Creates a <see cref="System.Threading.Tasks.TaskCompletionSource%601" /> with the specified options.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Threading.Tasks.Task%601> created by this instance and accessible through its <xref:System.Threading.Tasks.TaskCompletionSource%601.Task%2A> property will be instantiated using the specified `creationOptions`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> represent options invalid for use with a <see cref="System.Threading.Tasks.TaskCompletionSource%601" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TaskCompletionSource (object state, System.Threading.Tasks.TaskCreationOptions creationOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object state, valuetype System.Threading.Tasks.TaskCreationOptions creationOptions) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="creationOptions" Type="System.Threading.Tasks.TaskCreationOptions" />
      </Parameters>
      <Docs>
        <param name="state">The state to use as the underlying <see cref="System.Threading.Tasks.Task%601" />'s AsyncState.</param>
        <param name="creationOptions">The options to use when creating the underlying <see cref="System.Threading.Tasks.Task%601" />.</param>
        <summary>Creates a <see cref="System.Threading.Tasks.TaskCompletionSource%601" /> with the specified state and options.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="creationOptions" /> represent options invalid for use with a <see cref="System.Threading.Tasks.TaskCompletionSource%601" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetCanceled">
      <MemberSignature Language="C#" Value="public void SetCanceled ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCanceled() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Transitions the underlying <see cref="System.Threading.Tasks.Task%601" /> into the <see cref="T:System.Threading.Tasks.TaskStatus" /> state.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">The underlying <see cref="System.Threading.Tasks.Task%601" /> is already in one of the three final states: <see cref="T:System.Threading.Tasks.TaskStatus" />, <see cref="T:System.Threading.Tasks.TaskStatus" />, or <see cref="T:System.Threading.Tasks.TaskStatus" />, or if the underlying <see cref="System.Threading.Tasks.Task%601" /> has already been disposed.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetException">
      <MemberSignature Language="C#" Value="public void SetException (System.Collections.Generic.IEnumerable&lt;Exception&gt; exceptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetException(class System.Collections.Generic.IEnumerable`1&lt;class System.Exception&gt; exceptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptions" Type="System.Collections.Generic.IEnumerable&lt;System.Exception&gt;" />
      </Parameters>
      <Docs>
        <param name="exceptions">The collection of exceptions to bind to this <see cref="System.Threading.Tasks.Task%601" />.</param>
        <summary>Transitions the underlying <see cref="System.Threading.Tasks.Task%601" /> into the <see cref="T:System.Threading.Tasks.TaskStatus" /> state and binds a collection of exception objects to it.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="System.Threading.Tasks.TaskCompletionSource%601.Task%2A" /> was disposed.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="exceptions" /> argument is null.</exception>
        <exception cref="T:System.ArgumentException">There are one or more null elements in <paramref name="exceptions" />.</exception>
        <exception cref="T:System.InvalidOperationException">The underlying <see cref="System.Threading.Tasks.Task%601" /> is already in one of the three final states: <see cref="T:System.Threading.Tasks.TaskStatus" />, <see cref="T:System.Threading.Tasks.TaskStatus" />, or <see cref="T:System.Threading.Tasks.TaskStatus" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetException">
      <MemberSignature Language="C#" Value="public void SetException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetException(class System.Exception exception) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">The exception to bind to this <see cref="System.Threading.Tasks.Task%601" />.</param>
        <summary>Transitions the underlying <see cref="System.Threading.Tasks.Task%601" /> into the <see cref="T:System.Threading.Tasks.TaskStatus" /> state and binds it to a specified exception.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="System.Threading.Tasks.TaskCompletionSource%601.Task%2A" /> was disposed.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> argument is null.</exception>
        <exception cref="T:System.InvalidOperationException">The underlying <see cref="System.Threading.Tasks.Task%601" /> is already in one of the three final states: <see cref="T:System.Threading.Tasks.TaskStatus" />, <see cref="T:System.Threading.Tasks.TaskStatus" />, or <see cref="T:System.Threading.Tasks.TaskStatus" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetResult">
      <MemberSignature Language="C#" Value="public void SetResult (TResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResult(!TResult result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="TResult" />
      </Parameters>
      <Docs>
        <param name="result">The result value to bind to this <see cref="System.Threading.Tasks.Task%601" />.</param>
        <summary>Transitions the underlying <see cref="System.Threading.Tasks.Task%601" /> into the <see cref="T:System.Threading.Tasks.TaskStatus" /> state.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="System.Threading.Tasks.TaskCompletionSource%601.Task%2A" /> was disposed.</exception>
        <exception cref="T:System.InvalidOperationException">The underlying <see cref="System.Threading.Tasks.Task%601" /> is already in one of the three final states: <see cref="T:System.Threading.Tasks.TaskStatus" />, <see cref="T:System.Threading.Tasks.TaskStatus" />, or <see cref="T:System.Threading.Tasks.TaskStatus" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Task">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;TResult&gt; Task { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.Tasks.Task`1&lt;!TResult&gt; Task" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="System.Threading.Tasks.Task%601" /> created by this <see cref="System.Threading.Tasks.TaskCompletionSource%601" />.</summary>
        <value>Returns the <see cref="System.Threading.Tasks.Task%601" /> created by this <see cref="System.Threading.Tasks.TaskCompletionSource%601" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property enables a consumer to access the <xref:System.Threading.Tasks.Task%601> that is controlled by this instance. When you create a <xref:System.Threading.Tasks.TaskCompletionSource%601> object, the <xref:System.Threading.Tasks.Task.Status%2A> property of this <xref:System.Threading.Tasks.Task%601> object returns <xref:System.Threading.Tasks.TaskStatus>  
  
 The <xref:System.Threading.Tasks.TaskCompletionSource%601.SetResult%2A>, <xref:System.Threading.Tasks.TaskCompletionSource%601.SetException%2A>, <xref:System.Threading.Tasks.TaskCompletionSource%601.SetException%2A>, and <xref:System.Threading.Tasks.TaskCompletionSource%601.SetCanceled%2A> methods (and their "Try" variants) on this instance all result in the relevant state transitions on this underlying Task.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetCanceled">
      <MemberSignature Language="C#" Value="public bool TrySetCanceled ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySetCanceled() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Attempts to transition the underlying <see cref="System.Threading.Tasks.Task%601" /> into the <see cref="T:System.Threading.Tasks.TaskStatus" /> state.</summary>
        <returns>True if the operation was successful; false if the operation was unsuccessful or the object has already been disposed.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This operation will return false if the <xref:System.Threading.Tasks.Task%601> is already in one of the three final states: <xref:System.Threading.Tasks.TaskStatus>, <xref:System.Threading.Tasks.TaskStatus>, or <xref:System.Threading.Tasks.TaskStatus>.  
  
 This method also returns false if the underlying <xref:System.Threading.Tasks.Task%601> has already been disposed.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrySetException">
      <MemberSignature Language="C#" Value="public bool TrySetException (System.Collections.Generic.IEnumerable&lt;Exception&gt; exceptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySetException(class System.Collections.Generic.IEnumerable`1&lt;class System.Exception&gt; exceptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exceptions" Type="System.Collections.Generic.IEnumerable&lt;System.Exception&gt;" />
      </Parameters>
      <Docs>
        <param name="exceptions">The collection of exceptions to bind to this <see cref="System.Threading.Tasks.Task%601" />.</param>
        <summary>Attempts to transition the underlying <see cref="System.Threading.Tasks.Task%601" /> into the <see cref="T:System.Threading.Tasks.TaskStatus" /> state and binds a collection of exception objects to it.</summary>
        <returns>True if the operation was successful; otherwise, false.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This operation will return false if the <xref:System.Threading.Tasks.Task%601> is already in one of the three final states: <xref:System.Threading.Tasks.TaskStatus>, <xref:System.Threading.Tasks.TaskStatus>, or <xref:System.Threading.Tasks.TaskStatus>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="System.Threading.Tasks.TaskCompletionSource%601.Task%2A" /> was disposed.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="exceptions" /> argument is null.</exception>
        <exception cref="T:System.ArgumentException">There are one or more null elements in <paramref name="exceptions" />.  
  
 -or-  
  
 The <paramref name="exceptions" /> collection is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="TrySetException">
      <MemberSignature Language="C#" Value="public bool TrySetException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySetException(class System.Exception exception) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">The exception to bind to this <see cref="System.Threading.Tasks.Task%601" />.</param>
        <summary>Attempts to transition the underlying <see cref="System.Threading.Tasks.Task%601" /> into the <see cref="T:System.Threading.Tasks.TaskStatus" /> state and binds it to a specified exception.</summary>
        <returns>True if the operation was successful; otherwise, false.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This operation will return false if the <xref:System.Threading.Tasks.Task%601> is already in one of the three final states: <xref:System.Threading.Tasks.TaskStatus>, <xref:System.Threading.Tasks.TaskStatus>, or <xref:System.Threading.Tasks.TaskStatus>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">The <see cref="System.Threading.Tasks.TaskCompletionSource%601.Task%2A" /> was disposed.</exception>
        <exception cref="T:System.ArgumentNullException">The <paramref name="exception" /> argument is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="TrySetResult">
      <MemberSignature Language="C#" Value="public bool TrySetResult (TResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySetResult(!TResult result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="TResult" />
      </Parameters>
      <Docs>
        <param name="result">The result value to bind to this <see cref="System.Threading.Tasks.Task%601" />.</param>
        <summary>Attempts to transition the underlying <see cref="System.Threading.Tasks.Task%601" /> into the <see cref="T:System.Threading.Tasks.TaskStatus" /> state.</summary>
        <returns>True if the operation was successful; otherwise, false.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This operation will return false if the <xref:System.Threading.Tasks.Task%601> is already in one of the three final states: <xref:System.Threading.Tasks.TaskStatus>, <xref:System.Threading.Tasks.TaskStatus>, or <xref:System.Threading.Tasks.TaskStatus>.  
  
 This method also returns false if the underlying <xref:System.Threading.Tasks.Task%601> has already been disposed.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>