<Type Name="ITypeInfo2" FullName="System.Runtime.InteropServices.ComTypes.ITypeInfo2">
  <TypeSignature Language="C#" Value="public interface ITypeInfo2 : System.Runtime.InteropServices.ComTypes.ITypeInfo" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITypeInfo2 implements class System.Runtime.InteropServices.ComTypes.ITypeInfo" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices.ComTypes.ITypeInfo</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00020412-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides the managed definition of the <see langword="ITypeInfo2" /> interface.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The common language runtime throws an exception when a COM method in native code returns an HRESULT. For more information, see [How to: Map HRESULTs and Exceptions](../Topic/How%20to:%20Map%20HRESULTs%20and%20Exceptions.md).  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="AddressOfMember">
      <MemberSignature Language="C#" Value="public void AddressOfMember (int memid, System.Runtime.InteropServices.ComTypes.INVOKEKIND invKind, out IntPtr ppv);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddressOfMember(int32 memid, valuetype System.Runtime.InteropServices.ComTypes.INVOKEKIND invKind, native int ppv) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memid" Type="System.Int32" />
        <Parameter Name="invKind" Type="System.Runtime.InteropServices.ComTypes.INVOKEKIND" />
        <Parameter Name="ppv" Type="System.IntPtr&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="memid">The member ID of the <see langword="static" /> member's address to retrieve.</param>
        <param name="invKind">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> values that specifies whether the member is a property, and if so, what kind.</param>
        <param name="ppv">When this method returns, contains a reference to the <see langword="static" /> member. This parameter is passed uninitialized.</param>
        <summary>Retrieves the addresses of static functions or variables, such as those defined in a DLL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For additional information about `ITypeInfo::AddressOfMember`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public void CreateInstance (object pUnkOuter, ref Guid riid, out object ppvObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateInstance(object pUnkOuter, valuetype System.Guid riid, object ppvObj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pUnkOuter" Type="System.Object" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="ppvObj" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pUnkOuter">An object that acts as the controlling <see langword="IUnknown" />.</param>
        <param name="riid">The IID of the interface that the caller uses to communicate with the resulting object.</param>
        <param name="ppvObj">When this method returns, contains a reference to the created object. This parameter is passed uninitialized.</param>
        <summary>Creates a new instance of a type that describes a component class (coclass).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For additional information about `ITypeInfo::CreateInstance`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetAllCustData">
      <MemberSignature Language="C#" Value="public void GetAllCustData (IntPtr pCustData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetAllCustData(native int pCustData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pCustData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pCustData">A pointer to <see langword="CUSTDATA" />, which holds all custom data items.</param>
        <summary>Gets all custom data items for the library.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetAllFuncCustData">
      <MemberSignature Language="C#" Value="public void GetAllFuncCustData (int index, IntPtr pCustData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetAllFuncCustData(int32 index, native int pCustData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="pCustData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="index">The index of the function to get the custom data for.</param>
        <param name="pCustData">A pointer to <see langword="CUSTDATA" />, which holds all custom data items.</param>
        <summary>Gets all custom data from the specified function.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For additional information about `ITypeInfo2::GetAllFuncCustData`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetAllImplTypeCustData">
      <MemberSignature Language="C#" Value="public void GetAllImplTypeCustData (int index, IntPtr pCustData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetAllImplTypeCustData(int32 index, native int pCustData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="pCustData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="index">The index of the implementation type for the custom data.</param>
        <param name="pCustData">A pointer to <see langword="CUSTDATA" /> which holds all custom data items.</param>
        <summary>Gets all custom data for the specified implementation type.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For additional information about `ITypeInfo2::GetAllImplTypeCustData`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetAllParamCustData">
      <MemberSignature Language="C#" Value="public void GetAllParamCustData (int indexFunc, int indexParam, IntPtr pCustData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetAllParamCustData(int32 indexFunc, int32 indexParam, native int pCustData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexFunc" Type="System.Int32" />
        <Parameter Name="indexParam" Type="System.Int32" />
        <Parameter Name="pCustData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="indexFunc">The index of the function to get the custom data for.</param>
        <param name="indexParam">The index of the parameter of this function to get the custom data for.</param>
        <param name="pCustData">A pointer to <see langword="CUSTDATA" />, which holds all custom data items.</param>
        <summary>Gets all of the custom data for the specified function parameter.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetAllVarCustData">
      <MemberSignature Language="C#" Value="public void GetAllVarCustData (int index, IntPtr pCustData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetAllVarCustData(int32 index, native int pCustData) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="pCustData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="index">The index of the variable to get the custom data for.</param>
        <param name="pCustData">A pointer to <see langword="CUSTDATA" />, which holds all custom data items.</param>
        <summary>Gets the variable for the custom data.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetContainingTypeLib">
      <MemberSignature Language="C#" Value="public void GetContainingTypeLib (out System.Runtime.InteropServices.ComTypes.ITypeLib ppTLB, out int pIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetContainingTypeLib(class System.Runtime.InteropServices.ComTypes.ITypeLib ppTLB, int32 pIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ppTLB" Type="System.Runtime.InteropServices.ComTypes.ITypeLib&amp;" RefType="out" />
        <Parameter Name="pIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ppTLB">When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.</param>
        <param name="pIndex">When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.</param>
        <summary>Retrieves the type library that contains this type description and its index within that type library.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For additional information about `ITypeInfo::GetContainingTypeLib`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustData">
      <MemberSignature Language="C#" Value="public void GetCustData (ref Guid guid, out object pVarVal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetCustData(valuetype System.Guid guid, object pVarVal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="guid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="pVarVal" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="guid">The GUID used to identify the data.</param>
        <param name="pVarVal">When this method returns, contains an <see langword="Object" /> that specifies where to put the retrieved data. This parameter is passed uninitialized.</param>
        <summary>Gets the custom data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For additional information about `ITypeInfo2::GetCustData`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetDllEntry">
      <MemberSignature Language="C#" Value="public void GetDllEntry (int memid, System.Runtime.InteropServices.ComTypes.INVOKEKIND invKind, IntPtr pBstrDllName, IntPtr pBstrName, IntPtr pwOrdinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetDllEntry(int32 memid, valuetype System.Runtime.InteropServices.ComTypes.INVOKEKIND invKind, native int pBstrDllName, native int pBstrName, native int pwOrdinal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memid" Type="System.Int32" />
        <Parameter Name="invKind" Type="System.Runtime.InteropServices.ComTypes.INVOKEKIND" />
        <Parameter Name="pBstrDllName" Type="System.IntPtr" />
        <Parameter Name="pBstrName" Type="System.IntPtr" />
        <Parameter Name="pwOrdinal" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="memid">The ID of the member function whose DLL entry description is to be returned.</param>
        <param name="invKind">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> values that specifies the kind of member identified by `memid`.</param>
        <param name="pBstrDllName">If not <see langword="null" />, the function sets `pBstrDllName` to a <see langword="BSTR" /> that contains the name of the DLL.</param>
        <param name="pBstrName">If not <see langword="null" />, the function sets `lpbstrName` to a <see langword="BSTR" /> that contains the name of the entry point.</param>
        <param name="pwOrdinal">If not <see langword="null" />, and the function is defined by an ordinal, then `lpwOrdinal` is set to point to the ordinal.</param>
        <summary>Retrieves a description or specification of an entry point for a function in a DLL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For additional information about `ITypeInfo::GetDllEntry`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetDocumentation">
      <MemberSignature Language="C#" Value="public void GetDocumentation (int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetDocumentation(int32 index, string strName, string strDocString, int32 dwHelpContext, string strHelpFile) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="strName" Type="System.String&amp;" RefType="out" />
        <Parameter Name="strDocString" Type="System.String&amp;" RefType="out" />
        <Parameter Name="dwHelpContext" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="strHelpFile" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="index">The ID of the member whose documentation is to be returned.</param>
        <param name="strName">When this method returns, contains the name of the item method. This parameter is passed uninitialized.</param>
        <param name="strDocString">When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.</param>
        <param name="dwHelpContext">When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.</param>
        <param name="strHelpFile">When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.</param>
        <summary>Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For additional information about `ITypeInfo::GetDocumentation`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetDocumentation2">
      <MemberSignature Language="C#" Value="public void GetDocumentation2 (int memid, out string pbstrHelpString, out int pdwHelpStringContext, out string pbstrHelpStringDll);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetDocumentation2(int32 memid, string pbstrHelpString, int32 pdwHelpStringContext, string pbstrHelpStringDll) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.LCIDConversion(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memid" Type="System.Int32" />
        <Parameter Name="pbstrHelpString" Type="System.String&amp;" RefType="out" />
        <Parameter Name="pdwHelpStringContext" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="pbstrHelpStringDll" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="memid">The member identifier for the type description.</param>
        <param name="pbstrHelpString">When this method returns, contains a <see langword="BSTR" /> that contains the name of the specified item. If the caller does not need the item name, `pbstrHelpString` can be <see langword="null" />. This parameter is passed uninitialized.</param>
        <param name="pdwHelpStringContext">When this method returns, contains the Help localization context. If the caller does not need the Help context, `pdwHelpStringContext` can be <see langword="null" />. This parameter is passed uninitialized.</param>
        <param name="pbstrHelpStringDll">When this method returns, contains a <see langword="BSTR" /> that contains the fully qualified name of the file containing the DLL used for the Help file. If the caller does not need the file name, `pbstrHelpStringDll` can be <see langword="null" />. This parameter is passed uninitialized.</param>
        <summary>Retrieves the documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetFuncCustData">
      <MemberSignature Language="C#" Value="public void GetFuncCustData (int index, ref Guid guid, out object pVarVal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetFuncCustData(int32 index, valuetype System.Guid guid, object pVarVal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="guid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="pVarVal" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="index">The index of the function to get the custom data for.</param>
        <param name="guid">The GUID used to identify the data.</param>
        <param name="pVarVal">When this method returns, contains an <see langword="Object" /> that specified where to put the data. This parameter is passed uninitialized.</param>
        <summary>Gets the custom data from the specified function.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetFuncDesc">
      <MemberSignature Language="C#" Value="public void GetFuncDesc (int index, out IntPtr ppFuncDesc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetFuncDesc(int32 index, native int ppFuncDesc) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="ppFuncDesc" Type="System.IntPtr&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="index">The index of the function description to return.</param>
        <param name="ppFuncDesc">When this method returns, contains a reference to a <see langword="FUNCDESC" /> structure that describes the specified function. This parameter is passed uninitialized.</param>
        <summary>Retrieves the <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> structure that contains information about a specified function.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The values of the `ppFuncDesc` parameter can be accessed through the <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> method.  
  
 For additional information about `ITypeInfo::GetFuncDesc`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetFuncIndexOfMemId">
      <MemberSignature Language="C#" Value="public void GetFuncIndexOfMemId (int memid, System.Runtime.InteropServices.ComTypes.INVOKEKIND invKind, out int pFuncIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetFuncIndexOfMemId(int32 memid, valuetype System.Runtime.InteropServices.ComTypes.INVOKEKIND invKind, int32 pFuncIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memid" Type="System.Int32" />
        <Parameter Name="invKind" Type="System.Runtime.InteropServices.ComTypes.INVOKEKIND" />
        <Parameter Name="pFuncIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="memid">The member identifier.</param>
        <param name="invKind">One of the <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> values that specifies the kind of member identified by memid.</param>
        <param name="pFuncIndex">When this method returns, contains an index into the function. This parameter is passed uninitialized.</param>
        <summary>Binds to a specific member based on a known DISPID, where the member name is not known (for example, when binding to a default member).</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetIDsOfNames">
      <MemberSignature Language="C#" Value="public void GetIDsOfNames (string[] rgszNames, int cNames, int[] pMemId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetIDsOfNames(string[] rgszNames, int32 cNames, int32[] pMemId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgszNames" Type="System.String[]" />
        <Parameter Name="cNames" Type="System.Int32" />
        <Parameter Name="pMemId" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="rgszNames">An array of names to map.</param>
        <param name="cNames">The count of names to map.</param>
        <param name="pMemId">When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.</param>
        <summary>Maps between member names and member IDs, and parameter names and parameter IDs.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For additional information about `ITypeInfo::GetIDsOfNames`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetImplTypeCustData">
      <MemberSignature Language="C#" Value="public void GetImplTypeCustData (int index, ref Guid guid, out object pVarVal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetImplTypeCustData(int32 index, valuetype System.Guid guid, object pVarVal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="guid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="pVarVal" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="index">The index of the implementation type for the custom data.</param>
        <param name="guid">The GUID used to identify the data.</param>
        <param name="pVarVal">When this method returns, contains an <see langword="Object" /> that specifies where to put the retrieved data. This parameter is passed uninitialized.</param>
        <summary>Gets the implementation type of the custom data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For additional information about `ITypeInfo2::GetImplTypeCustData`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetImplTypeFlags">
      <MemberSignature Language="C#" Value="public void GetImplTypeFlags (int index, out System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS pImplTypeFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetImplTypeFlags(int32 index, valuetype System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS pImplTypeFlags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="pImplTypeFlags" Type="System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="index">The index of the implemented interface or base interface.</param>
        <param name="pImplTypeFlags">When this method returns, contains a reference to the <see langword="IMPLTYPEFLAGS" /> enumeration. This parameter is passed uninitialized.</param>
        <summary>Retrieves the <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> value for one implemented interface or base interface in a type description.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For additional information about `ITypeInfo::GetImplTypeFlags`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetMops">
      <MemberSignature Language="C#" Value="public void GetMops (int memid, out string pBstrMops);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetMops(int32 memid, string pBstrMops) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memid" Type="System.Int32" />
        <Parameter Name="pBstrMops" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="memid">The member ID that indicates which marshaling information is needed.</param>
        <param name="pBstrMops">When this method returns, contains a reference to the <see langword="opcode" /> string used in marshaling the fields of the structure described by the referenced type description, or returns <see langword="null" /> if there is no information to return. This parameter is passed uninitialized.</param>
        <summary>Retrieves marshaling information.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For additional information about `ITypeInfo::GetMops`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetNames">
      <MemberSignature Language="C#" Value="public void GetNames (int memid, string[] rgBstrNames, int cMaxNames, out int pcNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetNames(int32 memid, string[] rgBstrNames, int32 cMaxNames, int32 pcNames) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memid" Type="System.Int32" />
        <Parameter Name="rgBstrNames" Type="System.String[]" />
        <Parameter Name="cMaxNames" Type="System.Int32" />
        <Parameter Name="pcNames" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="memid">The ID of the member whose name (or names) is to be returned.</param>
        <param name="rgBstrNames">When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.</param>
        <param name="cMaxNames">The length of the `rgBstrNames` array.</param>
        <param name="pcNames">When this method returns, contains the number of names in the `rgBstrNames` array. This parameter is passed uninitialized.</param>
        <summary>Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For additional information about `ITypeInfo::GetNames`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetParamCustData">
      <MemberSignature Language="C#" Value="public void GetParamCustData (int indexFunc, int indexParam, ref Guid guid, out object pVarVal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetParamCustData(int32 indexFunc, int32 indexParam, valuetype System.Guid guid, object pVarVal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexFunc" Type="System.Int32" />
        <Parameter Name="indexParam" Type="System.Int32" />
        <Parameter Name="guid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="pVarVal" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="indexFunc">The index of the function to get the custom data for.</param>
        <param name="indexParam">The index of the parameter of this function to get the custom data for.</param>
        <param name="guid">The GUID used to identify the data.</param>
        <param name="pVarVal">When this method returns, contains an <see langword="Object" /> that specifies where to put the retrieved data. This parameter is passed uninitialized.</param>
        <summary>Gets the specified custom data parameter.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetRefTypeInfo">
      <MemberSignature Language="C#" Value="public void GetRefTypeInfo (int hRef, out System.Runtime.InteropServices.ComTypes.ITypeInfo ppTI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetRefTypeInfo(int32 hRef, class System.Runtime.InteropServices.ComTypes.ITypeInfo ppTI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hRef" Type="System.Int32" />
        <Parameter Name="ppTI" Type="System.Runtime.InteropServices.ComTypes.ITypeInfo&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="hRef">A handle to the referenced type description to return.</param>
        <param name="ppTI">When this method returns, contains the referenced type description. This parameter is passed uninitialized.</param>
        <summary>Retrieves the referenced type descriptions, if a type description references other type descriptions.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For additional information about `ITypeInfo::GetRefTypeInfo`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetRefTypeOfImplType">
      <MemberSignature Language="C#" Value="public void GetRefTypeOfImplType (int index, out int href);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetRefTypeOfImplType(int32 index, int32 href) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="href" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="index">The index of the implemented type whose handle is returned.</param>
        <param name="href">When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.</param>
        <summary>Retrieves the type description of the implemented interface types, if a type description describes a COM class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For additional information about `ITypeInfo::GetRefTypeOfImplType`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetTypeAttr">
      <MemberSignature Language="C#" Value="public void GetTypeAttr (out IntPtr ppTypeAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTypeAttr(native int ppTypeAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ppTypeAttr" Type="System.IntPtr&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ppTypeAttr">When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.</param>
        <summary>Retrieves a <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> structure that contains the attributes of the type description.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The values of the `ppTypeAttr` parameter can be accessed through the <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> method.  
  
 For additional information about `ITypeInfo::GetTypeAttr`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetTypeComp">
      <MemberSignature Language="C#" Value="public void GetTypeComp (out System.Runtime.InteropServices.ComTypes.ITypeComp ppTComp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTypeComp(class System.Runtime.InteropServices.ComTypes.ITypeComp ppTComp) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ppTComp" Type="System.Runtime.InteropServices.ComTypes.ITypeComp&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ppTComp">When this method returns, contains a reference to the <see langword="ITypeComp" /> of the containing type library. This parameter is passed uninitialized.</param>
        <summary>Retrieves the <see langword="ITypeComp" /> interface for the type description, which enables a client compiler to bind to the type description's members.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For additional information about `ITypeInfo::GetTypeComp`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFlags">
      <MemberSignature Language="C#" Value="public void GetTypeFlags (out int pTypeFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTypeFlags(int32 pTypeFlags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pTypeFlags" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pTypeFlags">When this method returns, contains a <see langword="DWORD" /> reference to a <see langword="TYPEFLAG" />. This parameter is passed uninitialized.</param>
        <summary>Returns the type flags without any allocations. This method returns a <see langword="DWORD" /> type flag, which expands the type flags without growing the <see langword="TYPEATTR" /> (type attribute).</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetTypeKind">
      <MemberSignature Language="C#" Value="public void GetTypeKind (out System.Runtime.InteropServices.ComTypes.TYPEKIND pTypeKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTypeKind(valuetype System.Runtime.InteropServices.ComTypes.TYPEKIND pTypeKind) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pTypeKind" Type="System.Runtime.InteropServices.ComTypes.TYPEKIND&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pTypeKind">When this method returns, contains a reference to a <see langword="TYPEKIND" /> enumeration. This parameter is passed uninitialized.</param>
        <summary>Returns the <see langword="TYPEKIND" /> enumeration quickly, without doing any allocations.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetVarCustData">
      <MemberSignature Language="C#" Value="public void GetVarCustData (int index, ref Guid guid, out object pVarVal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetVarCustData(int32 index, valuetype System.Guid guid, object pVarVal) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="guid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="pVarVal" Type="System.Object&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="index">The index of the variable to get the custom data for.</param>
        <param name="guid">The GUID used to identify the data.</param>
        <param name="pVarVal">When this method returns, contains an <see langword="Object" /> that specifies where to put the retrieved data. This parameter is passed uninitialized.</param>
        <summary>Gets the variable for the custom data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For additional information about `ITypeInfo2::GetVarCustData`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetVarDesc">
      <MemberSignature Language="C#" Value="public void GetVarDesc (int index, out IntPtr ppVarDesc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetVarDesc(int32 index, native int ppVarDesc) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="ppVarDesc" Type="System.IntPtr&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="index">The index of the variable description to return.</param>
        <param name="ppVarDesc">When this method returns, contains a reference to the <see langword="VARDESC" /> structure that describes the specified variable. This parameter is passed uninitialized.</param>
        <summary>Retrieves a <see langword="VARDESC" /> structure that describes the specified variable.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The values of the `ppVarDesc` parameter can be accessed through the <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> method.  
  
 For additional information about `ITypeInfo::GetVarDesc`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetVarIndexOfMemId">
      <MemberSignature Language="C#" Value="public void GetVarIndexOfMemId (int memid, out int pVarIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetVarIndexOfMemId(int32 memid, int32 pVarIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memid" Type="System.Int32" />
        <Parameter Name="pVarIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="memid">The member identifier.</param>
        <param name="pVarIndex">When this method returns, contains an index of `memid`. This parameter is passed uninitialized.</param>
        <summary>Binds to a specific member based on a known <see langword="DISPID" />, where the member name is not known (for example, when binding to a default member).</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (object pvInstance, int memid, short wFlags, ref System.Runtime.InteropServices.ComTypes.DISPPARAMS pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, out int puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invoke(object pvInstance, int32 memid, int16 wFlags, valuetype System.Runtime.InteropServices.ComTypes.DISPPARAMS pDispParams, native int pVarResult, native int pExcepInfo, int32 puArgErr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pvInstance" Type="System.Object" />
        <Parameter Name="memid" Type="System.Int32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.Runtime.InteropServices.ComTypes.DISPPARAMS&amp;" RefType="ref" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pvInstance">A reference to the interface described by this type description.</param>
        <param name="memid">Identifier of the interface member.</param>
        <param name="wFlags">Flags describing the context of the invoke call.</param>
        <param name="pDispParams">A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.</param>
        <param name="pVarResult">A reference to the location at which the result is to be stored. If `wFlags` specifies <see langword="DISPATCH_PROPERTYPUT" /> or <see langword="DISPATCH_PROPERTYPUTREF" />, `pVarResult` is ignored. Set to <see langword="null" /> if no result is desired.</param>
        <param name="pExcepInfo">A pointer to an exception information structure, which is filled in only if <see langword="DISP_E_EXCEPTION" /> is returned.</param>
        <param name="puArgErr">If <see langword="Invoke" /> returns <see langword="DISP_E_TYPEMISMATCH" />, `puArgErr` indicates the index of the argument with incorrect type. If more than one argument returns an error, `puArgErr` indicates only the first argument with an error.</param>
        <summary>Invokes a method, or accesses a property of an object, that implements the interface described by the type description.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The values of the `pDispParams` parameter can be accessed through the <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> method.  
  
 Valid values for `wFlags` are:  
  
|Value|Description|  
|-----------|-----------------|  
|DISPATCH_METHOD|The member is accessed as a method. If there is ambiguity, both this flag and the `DISPATCH_PROPERTYGET` flag can be set.|  
|DISPATCH_PROPERTYGET|The member is retrieved as a property or data member.|  
|DISPATCH_PROPERTYPUT|The member is changed as a property or data member.|  
|DISPATCH_PROPERTYPUTREF|The member is changed by using a reference assignment, rather than a value assignment. This value is valid only when the property accepts a reference to an object.|  
  
 For additional information about `ITypeInfo::Invoke`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReleaseFuncDesc">
      <MemberSignature Language="C#" Value="public void ReleaseFuncDesc (IntPtr pFuncDesc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseFuncDesc(native int pFuncDesc) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pFuncDesc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pFuncDesc">A reference to the <see langword="FUNCDESC" /> structure to release.</param>
        <summary>Releases a <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> structure previously returned by the <see cref="System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc%2A" /> method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For additional information about `ITypeInfo::ReleaseFuncDesc`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReleaseTypeAttr">
      <MemberSignature Language="C#" Value="public void ReleaseTypeAttr (IntPtr pTypeAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseTypeAttr(native int pTypeAttr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pTypeAttr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pTypeAttr">A reference to the <see langword="TYPEATTR" /> structure to release.</param>
        <summary>Releases a <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> structure previously returned by the <see cref="System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr%2A" /> method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For additional information about `ITypeInfo::ReleaseTypeAttr`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ReleaseVarDesc">
      <MemberSignature Language="C#" Value="public void ReleaseVarDesc (IntPtr pVarDesc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseVarDesc(native int pVarDesc) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pVarDesc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pVarDesc">A reference to the <see langword="VARDESC" /> structure to release.</param>
        <summary>Releases a <see langword="VARDESC" /> structure previously returned by the <see cref="System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc%2A" /> method.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For additional information about `ITypeInfo::ReleaseVarDesc`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>