<Type Name="DateTimeOffset" FullName="System.DateTimeOffset">
  <TypeSignature Language="C#" Value="public struct DateTimeOffset : IComparable, IComparable&lt;DateTimeOffset&gt;, IEquatable&lt;DateTimeOffset&gt;, IFormattable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeOffset extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IEquatable`1&lt;valuetype System.DateTimeOffset&gt;, class System.IFormattable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.DateTimeOffset&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Represents a point in time, typically expressed as a date and time of day, relative to Coordinated Universal Time (UTC).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DateTimeOffset structure includes a <xref:System.DateTime> value, together with an <xref:System.DateTimeOffset.Offset%2A> property that defines the difference between the current DateTimeOffset instance's date and time and Coordinated Universal Time (UTC). Because it exactly defines a date and time relative to UTC, the DateTimeOffset structure does not include a `Kind` member, as the <xref:System.DateTime> structure does. It represents dates and times with values whose UTC ranges from 12:00:00 midnight, January 1, 0001 Anno Domini (Common Era), to 11:59:59 P.M., December 31, 9999 A.D. (C.E.).  
  
 The time component of a DateTimeOffset value is measured in 100-nanosecond units called ticks, and a particular date is the number of ticks since 12:00 midnight, January 1, 0001 A.D. (C.E.) in the <xref:System.Globalization.GregorianCalendar> calendar. A DateTimeOffset value is always expressed in the context of an explicit or default calendar. Ticks that are attributable to leap seconds are not included in the total number of ticks.  
  
> [!NOTE]
>  If you are working with a ticks value that you want to convert to some other time interval, such as minutes or seconds, you should use the <xref:System.TimeSpan.TicksPerDay?displayProperty=fullName>, <xref:System.TimeSpan.TicksPerHour?displayProperty=fullName>, <xref:System.TimeSpan.TicksPerMinute?displayProperty=fullName>, <xref:System.TimeSpan.TicksPerSecond?displayProperty=fullName>, or <xref:System.TimeSpan.TicksPerMillisecond?displayProperty=fullName> constant to perform the conversion. For example, to add the number of seconds represented by a specified number of ticks to the <xref:System.DateTimeOffset.Second%2A> component of a DateTimeOffset value, you can use the expression `dateValue.Second + nTicks/Timespan.TicksPerSecond`.  
  
 Although a DateTimeOffset value includes an offset, it is not a fully time zone-aware data structure. While an offset from UTC is one characteristic of a time zone, it does not unambiguously identify a time zone. Not only do multiple time zones share the same offset from UTC, but the offset of a single time zone changes if it observes daylight saving time. This means that, as soon as a DateTimeOffset value is disassociated from its time zone, it can no longer be unambiguously linked back to its original time zone.  
  
 Because DateTimeOffset is a structure, a DateTimeOffset object that has been declared but not otherwise initialized contains the default values for each of its member fields. This means that its <xref:System.DateTimeOffset.DateTime%2A> property is set to <xref:System.DateTimeOffset.MinValue?displayProperty=fullName> and its <xref:System.DateTimeOffset.Offset%2A> property is set to <xref:System.TimeSpan.Zero?displayProperty=fullName>.  
  
 You can create a new DateTimeOffset value by calling any of the overloads of its constructor, which are similar to the overloaded constructors for the <xref:System.DateTime> structure. You can also create a new DateTimeOffset value by assigning it a <xref:System.DateTime> value. This is an implicit conversion; it does not require a casting operator (in C#) or call to a conversion method (in Visual Basic). You can also initialize a DateTimeOffset value from the string representation of a date and time by calling a number of static string parsing methods, which include <xref:System.DateTimeOffset.Parse%2A>, <xref:System.DateTimeOffset.ParseExact%2A>, <xref:System.DateTimeOffset.TryParse%2A>, and <xref:System.DateTimeOffset.TryParseExact%2A>.  
  
 The members of the DateTimeOffset structure provide functionality in the following areas:  
  
-   Date and time arithmetic.  
  
     You can add or subtract either dates or time intervals from a particular DateTimeOffset value. Arithmetic operations with DateTimeOffset values, unlike those with <xref:System.DateTime> values, adjust for differences in time offsets when returning a result. For example, the following code uses <xref:System.DateTime> variables to subtract the current local time from the current UTC time. The code then uses DateTimeOffset variables to perform the same operation. The subtraction with <xref:System.DateTime> values returns the local time zone's difference from UTC, while the subtraction with DateTimeOffset values returns <xref:System.TimeSpan.Zero?displayProperty=fullName>.  
  
     [!code-vb[System.DateTimeOffset.Type#1](~/add/codesnippet/visualbasic/t-system.datetimeoffset_1.vb)]
     [!code-cs[System.DateTimeOffset.Type#1](~/add/codesnippet/csharp/t-system.datetimeoffset_1.cs)]  
  
-   Type conversion operations.  
  
     You can convert DateTimeOffset values to <xref:System.DateTimeOffset.DateTime%2A> values and vice versa.  
  
-   Time manipulation and extraction operations.  
  
     You can extract either the date or the time of a DateTimeOffset value. You can also retrieve the value of a particular DateTimeOffset component, such as its year or its month.  
  
-   Date and time conversion.  
  
     You can convert any DateTimeOffset value to another DateTimeOffset value that represents the same point in time in another time zone. However, a time zone's adjustment rules are applied only in the case of the <xref:System.DateTimeOffset.ToLocalTime%2A> method, which converts a DateTimeOffset value to the date and time in the local system zone.  
  
-   Date and time comparison.  
  
     You can determine whether any particular DateTimeOffset value is earlier than, the same as, or later than another DateTimeOffset value. Before the comparison is performed, all values are converted to UTC.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">A date and time.</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified <see cref="T:System.DateTime" /> value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor's behavior depends on the value of the <xref:System.DateTime.Kind%2A?displayProperty=fullName> property of the `dateTime` parameter:  
  
-   If the value of <xref:System.DateTime.Kind%2A?displayProperty=fullName> is <xref:System.DateTimeKind?displayProperty=fullName>, the <xref:System.DateTimeOffset.DateTime%2A> property of the new instance is set equal to `dateTime`, and the <xref:System.DateTimeOffset.Offset%2A> property is set equal to <xref:System.TimeSpan.Zero>.  
  
-   If the value of <xref:System.DateTime.Kind%2A?displayProperty=fullName> is <xref:System.DateTimeKind?displayProperty=fullName> or <xref:System.DateTimeKind?displayProperty=fullName>, the <xref:System.DateTimeOffset.DateTime%2A> property of the new instance is set equal to `dateTime`, and the <xref:System.DateTimeOffset.Offset%2A> property is set equal to the offset of the local system's current time zone.  
  
   
  
## Examples  
 The following example illustrates how the value of the <xref:System.DateTime.Kind%2A?displayProperty=fullName> property of the `dateTime` parameter affects the date and time value that is returned by this constructor.  
  
 [!code-vb[System.DateTimeOffset.Constructors#1](~/add/codesnippet/visualbasic/m-system.datetimeoffset._4_1.vb)]
 [!code-cs[System.DateTimeOffset.Constructors#1](~/add/codesnippet/csharp/m-system.datetimeoffset._4_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The Coordinated Universal Time (UTC) date and time that results from applying the offset is earlier than <see cref="F:System.DateTimeOffset.MinValue" />.  
  
 -or-  
  
 The UTC date and time that results from applying the offset is later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (DateTime dateTime, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.DateTime dateTime, valuetype System.TimeSpan offset) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTime">A date and time.</param>
        <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified <see cref="T:System.DateTime" /> value and offset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor's behavior depends in part on the value of the <xref:System.DateTime.Kind%2A> property of the `dateTime` parameter:  
  
-   If the value of <xref:System.DateTime.Kind%2A> is <xref:System.DateTimeKind?displayProperty=fullName>, the value of the `offset` parameter must be 0 or an <xref:System.ArgumentException> is thrown.  
  
-   If the value of <xref:System.DateTime.Kind%2A> is <xref:System.DateTimeKind?displayProperty=fullName>, the value of the `offset` parameter must be equal to the local time zone's offset from Coordinated Universal Time (UTC) for that particular date or an <xref:System.ArgumentException> is thrown.  
  
-   If the value of <xref:System.DateTime.Kind%2A> is <xref:System.DateTimeKind?displayProperty=fullName>, the `offset` parameter can have any valid value.  
  
   
  
## Examples  
 The following example shows how to initialize a <xref:System.DateTimeOffset> object with a date and time and the offset of the local time zone when that time zone is not known in advance.  
  
 [!code-vb[System.DateTimeOffset.Constructors#3](~/add/codesnippet/visualbasic/m-system.datetimeoffset._27_1.vb)]
 [!code-cs[System.DateTimeOffset.Constructors#3](~/add/codesnippet/csharp/m-system.datetimeoffset._27_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="dateTime.Kind" /> equals <see cref="T:System.DateTimeKind" /> and <paramref name="offset" /> does not equal zero.  
  
 -or-  
  
 <paramref name="dateTime.Kind" /> equals <see cref="T:System.DateTimeKind" /> and <paramref name="offset" /> does not equal the offset of the system's local time zone.  
  
 -or-  
  
 <paramref name="offset" /> is not specified in whole minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> is less than -14 hours or greater than 14 hours.  
  
 -or-  
  
 &lt;xref:System.DateTimeOffset.UtcDateTime%2A&gt; is less than <see cref="F:System.DateTimeOffset.MinValue" /> or greater than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (long ticks, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks, valuetype System.TimeSpan offset) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ticks">A date and time expressed as the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight on January 1, 0001.</param>
        <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified number of ticks and offset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ordinarily, trying to call the <xref:System.DateTimeOffset.%23ctor%2A> constructor to instantiate a <xref:System.DateTimeOffset> value with a local time and an offset other than that of the local time zone throws an <xref:System.ArgumentException>. You can use this overload of the <xref:System.DateTimeOffset> constructor to work around this limitation. The following example uses the local time's number of ticks to instantiate a <xref:System.DateTimeOffset> value whose offset does not necessarily represent that of the local time:  
  
 [!code-vb[System.DateTimeOffset.Constructors#4](~/add/codesnippet/visualbasic/m-system.datetimeoffset._20_1.vb)]
 [!code-cs[System.DateTimeOffset.Constructors#4](~/add/codesnippet/csharp/m-system.datetimeoffset._20_1.cs)]  
  
   
  
## Examples  
 The following example initializes a <xref:System.DateTimeOffset> object by using the number of ticks in an arbitrary date (in this case, July 16, 2007, at 1:32 PM) with an offset of -5.  
  
 [!code-vb[System.DateTimeOffset.Constructors#2](~/add/codesnippet/visualbasic/m-system.datetimeoffset._20_2.vb)]
 [!code-cs[System.DateTimeOffset.Constructors#2](~/add/codesnippet/csharp/m-system.datetimeoffset._20_2.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> is not specified in whole minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The &lt;xref:System.DateTimeOffset.UtcDateTime%2A&gt; property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.  
  
 -or-  
  
 <paramref name="ticks" /> is less than <see langword="DateTimeOffset.MinValue.Ticks" /> or greater than <see langword="DateTimeOffset.MaxValue.Ticks" />.  
  
 -or-  
  
 <paramref name="Offset" /> s less than -14 hours or greater than 14 hours.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, valuetype System.TimeSpan offset) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in `month`).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, and offset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor interprets `year`, `month`, and `day` as a year, month, and day in the Gregorian calendar. To instantiate a <xref:System.DateTimeOffset> value by using the year, month, and day in another calendar, call the <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29> constructor.  
  
   
  
## Examples  
 The following example instantiates a <xref:System.DateTimeOffset> object by using the DateTimeOffset constructor overload.  
  
 [!code-vb[System.DateTimeOffset.Constructors#5](~/add/codesnippet/visualbasic/f3825233-b2e4-46f2-a634-_1.vb)]
 [!code-cs[System.DateTimeOffset.Constructors#5](~/add/codesnippet/csharp/f3825233-b2e4-46f2-a634-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> does not represent whole minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than one or greater than 9999.  
  
 -or-  
  
 <paramref name="month" /> is less than one or greater than 12.  
  
 -or-  
  
 <paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.  
  
 -or-  
  
 <paramref name="hour" /> is less than zero or greater than 23.  
  
 -or-  
  
 <paramref name="minute" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="second" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="offset" /> is less than -14 hours or greater than 14 hours.  
  
 -or-  
  
 The &lt;xref:System.DateTimeOffset.UtcDateTime%2A&gt; property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, valuetype System.TimeSpan offset) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">The year (1 through 9999).</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in `month`).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, millisecond, and offset.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor interprets `year`, `month`, and `day` as a year, month, and day in the Gregorian calendar. To instantiate a <xref:System.DateTimeOffset> value by using the year, month, and day in another calendar, call the <xref:System.DateTimeOffset.%23ctor%28System.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%2CSystem.Globalization.Calendar%2CSystem.TimeSpan%29> constructor.  
  
   
  
## Examples  
 The following example instantiates a <xref:System.DateTimeOffset> object by using the DateTimeOffset constructor overload.  
  
 [!code-vb[System.DateTimeOffset.Constructors#7](~/add/codesnippet/visualbasic/b2fcb9f3-4498-4491-8bff-_1.vb)]
 [!code-cs[System.DateTimeOffset.Constructors#7](~/add/codesnippet/csharp/b2fcb9f3-4498-4491-8bff-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> does not represent whole minutes.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than one or greater than 9999.  
  
 -or-  
  
 <paramref name="month" /> is less than one or greater than 12.  
  
 -or-  
  
 <paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.  
  
 -or-  
  
 <paramref name="hour" /> is less than zero or greater than 23.  
  
 -or-  
  
 <paramref name="minute" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="second" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="millisecond" /> is less than 0 or greater than 999.  
  
 -or-  
  
 <paramref name="offset" /> is less than -14 or greater than 14.  
  
 -or-  
  
 The &lt;xref:System.DateTimeOffset.UtcDateTime%2A&gt; property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 year, int32 month, int32 day, int32 hour, int32 minute, int32 second, int32 millisecond, class System.Globalization.Calendar calendar, valuetype System.TimeSpan offset) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
        <Parameter Name="month" Type="System.Int32" />
        <Parameter Name="day" Type="System.Int32" />
        <Parameter Name="hour" Type="System.Int32" />
        <Parameter Name="minute" Type="System.Int32" />
        <Parameter Name="second" Type="System.Int32" />
        <Parameter Name="millisecond" Type="System.Int32" />
        <Parameter Name="calendar" Type="System.Globalization.Calendar" />
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="year">The year.</param>
        <param name="month">The month (1 through 12).</param>
        <param name="day">The day (1 through the number of days in `month`).</param>
        <param name="hour">The hours (0 through 23).</param>
        <param name="minute">The minutes (0 through 59).</param>
        <param name="second">The seconds (0 through 59).</param>
        <param name="millisecond">The milliseconds (0 through 999).</param>
        <param name="calendar">The calendar that is used to interpret `year`, `month`, and `day`.</param>
        <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
        <summary>Initializes a new instance of the <see cref="T:System.DateTimeOffset" /> structure using the specified year, month, day, hour, minute, second, millisecond, and offset of a specified calendar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `year`, `month`, `day`, `hour`, `minute`, `second`, and `millisecond` parameters all reflect values expressed in the calendar specified by the `calendar` parameter. An exception is thrown if these values form a date and time that cannot be expressed by using this calendar.  
  
   
  
## Examples  
 The following example uses instances of both the <xref:System.Globalization.HebrewCalendar> class and the <xref:System.Globalization.HijriCalendar> class to instantiate a <xref:System.DateTimeOffset> value. That date is then displayed to the console using the respective calendars and the Gregorian calendar.  
  
 [!code-vb[System.DateTimeOffset.Constructors#8](~/add/codesnippet/visualbasic/10ea762c-cbb7-4029-b19a-_1.vb)]
 [!code-cs[System.DateTimeOffset.Constructors#8](~/add/codesnippet/csharp/10ea762c-cbb7-4029-b19a-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> does not represent whole minutes.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="calendar" /> cannot be <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="year" /> is less than the <paramref name="calendar" /> parameter's <see langword="MinSupportedDateTime.Year" /> or greater than <see langword="MaxSupportedDateTime.Year" />.  
  
 -or-  
  
 <paramref name="month" /> is either less than or greater than the number of months in <paramref name="year" /> in the <paramref name="calendar" />.  
  
 -or-  
  
 <paramref name="day" /> is less than one or greater than the number of days in <paramref name="month" />.  
  
 -or-  
  
 <paramref name="hour" /> is less than zero or greater than 23.  
  
 -or-  
  
 <paramref name="minute" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="second" /> is less than 0 or greater than 59.  
  
 -or-  
  
 <paramref name="millisecond" /> is less than 0 or greater than 999.  
  
 -or-  
  
 <paramref name="offset" /> is less than -14 hours or greater than 14 hours.  
  
 -or-  
  
 The <paramref name="year" />, <paramref name="month" />, and <paramref name="day" /> parameters cannot be represented as a date and time value.  
  
 -or-  
  
 The &lt;xref:System.DateTimeOffset.UtcDateTime%2A&gt; property is earlier than <see cref="F:System.DateTimeOffset.MinValue" /> or later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public DateTimeOffset Add (TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Add(valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeSpan">A <see cref="T:System.TimeSpan" /> object that represents a positive or a negative time interval.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified time interval to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the time interval represented by <paramref name="timeSpan" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use the Add method to add more than one kind of time interval (days, hours, minutes, seconds, or milliseconds) in a single operation. This method's behavior is identical to the addition operator. The <xref:System.DateTimeOffset> structure also supports specialized addition methods (such as <xref:System.DateTimeOffset.AddDays%2A>, <xref:System.DateTimeOffset.AddHours%2A>, and <xref:System.DateTimeOffset.AddMinutes%2A>) for each time interval.  
  
> [!NOTE]
>  This method returns a new <xref:System.DateTimeOffset> object. It does not modify the value of the current object by adding `timeSpan` to its date and time.  
  
 The Add method does not affect the value of the current <xref:System.DateTimeOffset> object's <xref:System.DateTimeOffset.Offset%2A> property.  
  
 Because a <xref:System.DateTimeOffset> object does not represent the date and time in a specific time zone, the Add method does not consider a particular time zone's adjustment rules when it performs date and time arithmetic.  
  
 If the `timeSpan` parameter is `null`, this method returns the value of the original <xref:System.DateTimeOffset> object unchanged.  
  
   
  
## Examples  
 The following example creates an array of <xref:System.TimeSpan> objects that represent the flight times between destinations. The Add method then adds these times to a <xref:System.DateTimeOffset> object that represents a flight's initial takeoff time. The result reflects the scheduled arrival time at each destination.  
  
 [!code-vb[System.DateTimeOffset.Methods#1](~/add/codesnippet/visualbasic/m-system.datetimeoffset._14_1.vb)]
 [!code-cs[System.DateTimeOffset.Methods#1](~/add/codesnippet/csharp/m-system.datetimeoffset._14_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="T:System.DateTimeOffset" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="T:System.DateTimeOffset" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddDays">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddDays (double days);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddDays(float64 days) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="days" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="days">A number of whole and fractional days. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of whole and fractional days to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of days represented by <paramref name="days" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The fractional part of the `days` parameter is the fractional part of a day. For example, 4.5 is equivalent to 4 days, 12 hours, 0 minutes, 0 seconds, 0 milliseconds. The `days` parameter is rounded to the nearest millisecond.  
  
> [!NOTE]
>  This method returns a new <xref:System.DateTimeOffset> object. It does not modify the value of the current object by adding `days` to its date and time.  
  
 Because a <xref:System.DateTimeOffset> object does not represent the date and time in a specific time zone, the AddDays method does not consider a particular time zone's adjustment rules when it performs date and time arithmetic.  
  
 Converting time intervals of less than a day to a fraction can involve a loss of precision. If this is problematic, you can use the <xref:System.DateTimeOffset.Add%2A> method, which enables you to specify more than one kind of time interval in a single method call and eliminates the need to convert time intervals to fractional parts of a day.  
  
   
  
## Examples  
 The following example uses the AddDays method to list the dates that fall on Monday, the start of the work week, in March 2008.  
  
 [!code-vb[System.DateTimeOffset.Methods#2](~/add/codesnippet/visualbasic/m-system.datetimeoffset._5_1.vb)]
 [!code-cs[System.DateTimeOffset.Methods#2](~/add/codesnippet/csharp/m-system.datetimeoffset._5_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="T:System.DateTimeOffset" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="T:System.DateTimeOffset" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddHours">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddHours (double hours);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddHours(float64 hours) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hours" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="hours">A number of whole and fractional hours. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of whole and fractional hours to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of hours represented by <paramref name="hours" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The fractional part of the `hours` parameter is the fractional part of an hour. For example, 4.5 is equivalent to 4 hours, 30 minutes, 0 seconds, 0 milliseconds. The `hours` parameter is rounded to the nearest millisecond.  
  
> [!NOTE]
>  This method returns a new <xref:System.DateTimeOffset> object. It does not modify the value of the current object by adding `hours` to its date and time.  
  
 Because a <xref:System.DateTimeOffset> object does not represent the date and time in a specific time zone, the AddHours method does not consider a particular time zone's adjustment rules when it performs date and time arithmetic.  
  
 Converting time intervals of less than an hour to a fraction can involve a loss of precision. (For example, one minute is 0.01666 of an hour.) If this is problematic, you can use the <xref:System.DateTimeOffset.Add%2A> method, which enables you to specify more than one kind of time interval in a single method call and eliminates the need to convert time intervals to fractional parts of an hour.  
  
   
  
## Examples  
 The following example uses the AddHours method to list the start times of work shifts for a particular week at an office that has two eight-hour shifts per day.  
  
 [!code-vb[System.DateTimeOffset.Methods#3](~/add/codesnippet/visualbasic/m-system.datetimeoffset._23_1.vb)]
 [!code-cs[System.DateTimeOffset.Methods#3](~/add/codesnippet/csharp/m-system.datetimeoffset._23_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="T:System.DateTimeOffset" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="T:System.DateTimeOffset" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddMilliseconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMilliseconds (double milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMilliseconds(float64 milliseconds) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="milliseconds">A number of whole and fractional milliseconds. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of milliseconds to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of whole milliseconds represented by <paramref name="milliseconds" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The fractional part of the `milliseconds` parameter is the fractional part of a millisecond. For example, 4.5 is equivalent to 4 milliseconds and 5000 ticks, where one millisecond equals 10,000 ticks. However, `milliseconds` is rounded to the nearest millisecond; all values of .5 or greater are rounded up.  
  
> [!NOTE]
>  This method returns a new <xref:System.DateTimeOffset> object. It does not modify the value of the current object by adding `milliseconds` to its date and time.  
  
 Because a <xref:System.DateTimeOffset> object does not represent the date and time in a specific time zone, the AddMilliseconds method does not consider a particular time zone's adjustment rules when it performs date and time arithmetic.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="T:System.DateTimeOffset" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="T:System.DateTimeOffset" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddMinutes">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMinutes (double minutes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMinutes(float64 minutes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="minutes" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="minutes">A number of whole and fractional minutes. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of whole and fractional minutes to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of minutes represented by <paramref name="minutes" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The fractional part of the `minutes` parameter is the fractional part of a minute. For example, 4.5 is equivalent to 4 minutes, 30 seconds, 0 milliseconds. The `minutes` parameter is rounded to the nearest millisecond.  
  
> [!NOTE]
>  This method returns a new <xref:System.DateTimeOffset> object. It does not modify the value of the current object by adding `minutes` to its date and time.  
  
 Because a <xref:System.DateTimeOffset> object does not represent the date and time in a specific time zone, the AddMinutes method does not consider a particular time zone's adjustment rules when it performs date and time arithmetic.  
  
 Converting time intervals of less than a minute to a fraction can involve a loss of precision. (For example, one second is 0.01666 of a minute.) If this is problematic, you can use the <xref:System.DateTimeOffset.Add%2A> method, which enables you to specify more than one kind of time interval in a single method call and eliminates the need to convert time intervals to fractional parts of a minute.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="T:System.DateTimeOffset" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="T:System.DateTimeOffset" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddMonths">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddMonths (int months);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddMonths(int32 months) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="months" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="months">A number of whole months. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of months to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of months represented by <paramref name="months" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unlike most of the other methods that add a single time interval unit (such as minutes or days) to a date and time value, AddMonths does not enable you to add fractional parts of a month. To add a time that consists of other time units in addition to months to a <xref:System.DateTimeOffset> object, use the <xref:System.DateTimeOffset.Add%2A> method.  
  
> [!NOTE]
>  This method returns a new <xref:System.DateTimeOffset> object. It does not modify the value of the current object by adding `months` to its date and time.  
  
   
  
## Examples  
 The following example uses the AddMonths method to display the start date of each quarter of the year 2007.  
  
 [!code-vb[System.DateTimeOffset.Methods#4](~/add/codesnippet/visualbasic/m-system.datetimeoffset._9_1.vb)]
 [!code-cs[System.DateTimeOffset.Methods#4](~/add/codesnippet/csharp/m-system.datetimeoffset._9_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="T:System.DateTimeOffset" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="T:System.DateTimeOffset" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddSeconds">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddSeconds (double seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddSeconds(float64 seconds) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="seconds">A number of whole and fractional seconds. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of whole and fractional seconds to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of seconds represented by <paramref name="seconds" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The fractional part of the `seconds` parameter is the fractional part of a second. The value of fractional parts of a second are shown in the following table.  
  
|Second value|Equivalent|  
|------------------|----------------|  
|.1 second|100 milliseconds|  
|.01 second|10 milliseconds|  
|.001 second|1 millisecond|  
  
 The `seconds` parameter is rounded to the nearest millisecond.  
  
> [!NOTE]
>  This method returns a new <xref:System.DateTimeOffset> object. It does not modify the value of the current object by adding `minutes` to its date and time.  
  
 Because a <xref:System.DateTimeOffset> object does not represent the date and time in a specific time zone, the AddSeconds method does not consider a particular time zone's adjustment rules when it performs date and time arithmetic.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="T:System.DateTimeOffset" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="T:System.DateTimeOffset" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddTicks">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddTicks (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddTicks(int64 ticks) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">A number of 100-nanosecond ticks. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of ticks to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of ticks represented by <paramref name="ticks" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A tick represents 100 nanoseconds, or one-ten millionth of a second. Because a tick is a very small and precise time interval, any larger time unit can be expressed as a number of ticks without a loss of precision.  
  
> [!NOTE]
>  This method returns a new <xref:System.DateTimeOffset> object. It does not modify the value of the current object by adding `minutes` to its date and time.  
  
 The following table lists the number of ticks in a particular time interval.  
  
|Time interval|Number of ticks|  
|-------------------|---------------------|  
|Second|10,000,000|  
|Minute|600,000,000|  
|Hour|36,000,000,000|  
|Day|864,000,000,000|  
|Week|6,048,000,000,000|  
|Month|Depends on number of days in the month.|  
|Non-leap year|315,360,000,000,000|  
|Leap year|316,224,000,000,000|  
  
 Because a <xref:System.DateTimeOffset> object does not represent the date and time in a specific time zone, the AddTicks method does not consider a particular time zone's adjustment rules when it performs date and time arithmetic.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="T:System.DateTimeOffset" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="T:System.DateTimeOffset" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="AddYears">
      <MemberSignature Language="C#" Value="public DateTimeOffset AddYears (int years);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset AddYears(int32 years) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="years" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="years">A number of years. The number can be negative or positive.</param>
        <summary>Returns a new <see cref="T:System.DateTimeOffset" /> object that adds a specified number of years to the value of this instance.</summary>
        <returns>An object whose value is the sum of the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object and the number of years represented by <paramref name="years" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unlike most of the other methods that add a single time interval unit (such as minutes or days) to a date and time value, AddYears does not enable you to add fractional parts of a year. To add a time that consists of other time units in addition to years to a <xref:System.DateTimeOffset> object, use the <xref:System.DateTimeOffset.Add%2A> method.  
  
> [!NOTE]
>  This method returns a new <xref:System.DateTimeOffset> object. It does not modify the value of the current object by adding `months` to its date and time.  
  
   
  
## Examples  
 In the United States, driver's licenses cannot be issued to persons under 16 years of age. The following example displays the latest possible date on which a person must be born in order to legally be issued a driver's license.  
  
 [!code-vb[System.DateTimeOffset.Methods#6](~/add/codesnippet/visualbasic/m-system.datetimeoffset._1_1.vb)]
 [!code-cs[System.DateTimeOffset.Methods#6](~/add/codesnippet/csharp/m-system.datetimeoffset._1_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="T:System.DateTimeOffset" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="T:System.DateTimeOffset" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">The first object to compare.</param>
        <param name="second">The second object to compare.</param>
        <summary>Compares two <see cref="T:System.DateTimeOffset" /> objects and indicates whether the first is earlier than the second, equal to the second, or later than the second.</summary>
        <returns>A signed integer that indicates whether the value of the <paramref name="first" /> parameter is earlier than, later than, or the same time as the value of the <paramref name="second" /> parameter, as the following table shows.  
  
 <list type="table">  
<listheader>  
<term> Return value  
  
 </term>  
<description> Meaning  
  
 </description>  
</listheader>  
<item>  
<term> Less than zero  
  
 </term>  
<description> <paramref name="first" /> is earlier than <paramref name="second" />.  
  
 </description>  
</item>  
<item>  
<term> Zero  
  
 </term>  
<description> <paramref name="first" /> is equal to <paramref name="second" />.  
  
 </description>  
</item>  
<item>  
<term> Greater than zero  
  
 </term>  
<description> <paramref name="first" /> is later than <paramref name="second" />.  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In performing the comparison, the method converts both the `first` and the `second` parameters to Coordinated Universal Time (UTC) before it performs the comparison. The method is equivalent to the following:  
  
 [!code-cs[System.DateTimeOffset.Syntax#1](~/add/codesnippet/csharp/m-system.datetimeoffset._6_1.cs)]
 [!code-vb[System.DateTimeOffset.Syntax#1](~/add/codesnippet/visualbasic/m-system.datetimeoffset._6_1.vb)]  
  
 In other words, the Compare method determines whether two <xref:System.DateTimeOffset> objects represent a single point in time. It directly compares neither dates and times nor offsets.  
  
   
  
## Examples  
 The following example illustrates calls to the Compare method to compare <xref:System.DateTimeOffset> objects.  
  
 [!code-cs[System.DateTimeOffset.Methods#7](~/add/codesnippet/csharp/m-system.datetimeoffset._6_2.cs)]
 [!code-vb[System.DateTimeOffset.Methods#7](~/add/codesnippet/visualbasic/m-system.datetimeoffset._6_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.DateTimeOffset other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">An object to compare with the current <see cref="T:System.DateTimeOffset" /> object.</param>
        <summary>Compares the current <see cref="T:System.DateTimeOffset" /> object to a specified <see cref="T:System.DateTimeOffset" /> object and indicates whether the current object is earlier than, the same as, or later than the second <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>A signed integer that indicates the relationship between the current <see cref="T:System.DateTimeOffset" /> object and <paramref name="other" />, as the following table shows.  
  
 <list type="table">  
<listheader>  
<term> Return Value  
  
 </term>  
<description> Description  
  
 </description>  
</listheader>  
<item>  
<term> Less than zero  
  
 </term>  
<description> The current <see cref="T:System.DateTimeOffset" /> object is earlier than <paramref name="other" />.  
  
 </description>  
</item>  
<item>  
<term> Zero  
  
 </term>  
<description> The current <see cref="T:System.DateTimeOffset" /> object is the same as <paramref name="other" />.  
  
 </description>  
</item>  
<item>  
<term> Greater than zero.  
  
 </term>  
<description> The current <see cref="T:System.DateTimeOffset" /> object is later than <paramref name="other" />.  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method compares <xref:System.DateTimeOffset> objects by comparing their <xref:System.DateTimeOffset.UtcDateTime%2A> values; that is, it determines whether the two objects represent a single point in time, and indicates whether the current object is earlier than, later than, or the same as the `other` parameter.  
  
   
  
## Examples  
 The following example illustrates calls to the CompareTo method to compare <xref:System.DateTimeOffset> objects.  
  
 [!code-cs[System.DateTimeOffset.Methods#8](~/add/codesnippet/csharp/m-system.datetimeoffset._28_1.cs)]
 [!code-vb[System.DateTimeOffset.Methods#8](~/add/codesnippet/visualbasic/m-system.datetimeoffset._28_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Date">
      <MemberSignature Language="C#" Value="public DateTime Date { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime Date" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTime" /> value that represents the date component of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>A <see cref="T:System.DateTime" /> value that represents the date component of the current <see cref="T:System.DateTimeOffset" /> object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property removes any significant part of the time component from a <xref:System.DateTimeOffset> object and returns only its significant date component. For example, if the <xref:System.DateTimeOffset> object has a date and time value of "1/12/07 4:01pm +7:30", the property returns a <xref:System.DateTime> value of "1/12/07 12:00:00 AM". The <xref:System.DateTime> value can then be displayed by using any of the standard or custom format specifiers that display dates only. (See the Example section for an illustration.)  
  
 The value of the <xref:System.DateTime.Kind%2A?displayProperty=fullName> property of the returned <xref:System.DateTime> object is always <xref:System.DateTimeKind?displayProperty=fullName>. It is not affected by the value of the <xref:System.DateTimeOffset.Offset%2A> property.  
  
 To display a date without its time component, you can also use the "D" or "d" format specifiers; for an illustration, see the Example section.  
  
   
  
## Examples  
 The following example retrieves the value of the Date property for a specific date. It then displays that value to the console using some standard and custom date-only format specifiers.  
  
 [!code-vb[System.DateTimeOffset.Properties#1](~/add/codesnippet/visualbasic/p-system.datetimeoffset._4_1.vb)]
 [!code-cs[System.DateTimeOffset.Properties#1](~/add/codesnippet/csharp/p-system.datetimeoffset._4_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DateTime">
      <MemberSignature Language="C#" Value="public DateTime DateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime DateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTime" /> value that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>The date and time of the current <see cref="T:System.DateTimeOffset" /> object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DateTime property is not affected by the value of the <xref:System.DateTimeOffset.Offset%2A> property.  
  
 This property returns both the date and the time component of a <xref:System.DateTimeOffset> object, which makes it useful for performing <xref:System.DateTimeOffset> to <xref:System.DateTime> conversion. For example, if the <xref:System.DateTimeOffset> object has a date and time value of "1/12/07 4:01pm + 7:30", the property returns a date of "1/12/07 4:01pm".  
  
 The value of the <xref:System.DateTime.Kind%2A?displayProperty=fullName> property of the returned <xref:System.DateTime> object is <xref:System.DateTimeKind?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example illustrates the use of the DateTime property to convert the time returned by the <xref:System.DateTimeOffset.Now%2A> and <xref:System.DateTimeOffset.UtcNow%2A> properties to <xref:System.DateTime> values.  
  
 [!code-vb[System.DateTimeOffset.Properties#2](~/add/codesnippet/visualbasic/p-system.datetimeoffset._6_1.vb)]
 [!code-cs[System.DateTimeOffset.Properties#2](~/add/codesnippet/csharp/p-system.datetimeoffset._6_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public int Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the month represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>The day component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as a value between 1 and 31.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Day property is not affected by the value of the <xref:System.DateTimeOffset.Offset%2A> property.  
  
 You can also create a string representation of a <xref:System.DateTimeOffset> object's day component by calling the <xref:System.DateTimeOffset.ToString%2A> method with the "d" or "dd" custom format specifiers.  
  
   
  
## Examples  
 The following example displays the day component of a <xref:System.DateTimeOffset> object in three different ways:  
  
-   By retrieving the value of the Day property.  
  
-   By calling the <xref:System.DateTimeOffset.ToString%28System.String%29> method with the "d" format specifier.  
  
-   By calling the <xref:System.DateTimeOffset.ToString%28System.String%29> method with the "dd" format specifier.  
  
 [!code-vb[System.DateTimeOffset.Properties#10](~/add/codesnippet/visualbasic/p-system.datetimeoffset._0_1.vb)]
 [!code-cs[System.DateTimeOffset.Properties#10](~/add/codesnippet/csharp/p-system.datetimeoffset._0_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek DayOfWeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek DayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the week represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>One of the enumeration values that indicates the day of the week of the current <see cref="T:System.DateTimeOffset" /> object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of the constants in the <xref:System.DayOfWeek> enumeration ranges from <xref:System.DayOfWeek?displayProperty=fullName> to <xref:System.DayOfWeek?displayProperty=fullName>. If cast to an integer, its value ranges from zero (which indicates <xref:System.DayOfWeek?displayProperty=fullName>) to six (which indicates <xref:System.DayOfWeek?displayProperty=fullName>).  
  
 You can also display the weekday name of a particular date by using the "D" format specifier or the "dddd" custom format specifier. For example:  
  
 [!code-vb[System.DateTimeOffset.Properties#4](~/add/codesnippet/visualbasic/p-system.datetimeoffset._7_1.vb)]
 [!code-cs[System.DateTimeOffset.Properties#4](~/add/codesnippet/csharp/p-system.datetimeoffset._7_1.cs)]  
  
 Note that the string returned by calling the `ToString` method of the <xref:System.DayOfWeek> enumeration member that is returned by this property is not localized. To extract a string that contains the weekday name of the current culture or of a specific culture, call the <xref:System.DateTimeOffset.ToString%2A> method with the "dddd" custom format specifier. For example, the following code displays the weekday name for a date using the `fr-fr` culture.  
  
 [!code-vb[System.DateTimeOffset.Properties#5](~/add/codesnippet/visualbasic/p-system.datetimeoffset._7_2.vb)]
 [!code-cs[System.DateTimeOffset.Properties#5](~/add/codesnippet/csharp/p-system.datetimeoffset._7_2.cs)]  
  
   
  
## Examples  
 The following example displays the weekday name of the first day of each month of the year 2008.  
  
 [!code-vb[System.DateTimeOffset.Properties#3](~/add/codesnippet/visualbasic/p-system.datetimeoffset._7_3.vb)]
 [!code-cs[System.DateTimeOffset.Properties#3](~/add/codesnippet/csharp/p-system.datetimeoffset._7_3.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DayOfYear">
      <MemberSignature Language="C#" Value="public int DayOfYear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DayOfYear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the day of the year represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>The day of the year of the current <see cref="T:System.DateTimeOffset" /> object, expressed as a value between 1 and 366.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.DateTimeOffset other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">An object to compare to the current <see cref="T:System.DateTimeOffset" /> object.</param>
        <summary>Determines whether the current <see cref="T:System.DateTimeOffset" /> object represents the same point in time as a specified <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>
          <see langword="true" /> if both <see cref="T:System.DateTimeOffset" /> objects have the same &lt;xref:System.DateTimeOffset.UtcDateTime%2A&gt; value; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Before it performs the comparison, this method converts the values of both <xref:System.DateTimeOffset> objects to Coordinated Universal Time (UTC). The method is equivalent to the following:  
  
 [!code-cs[System.DateTimeOffset.Syntax#2](~/add/codesnippet/csharp/m-system.datetimeoffset._15_1.cs)]
 [!code-vb[System.DateTimeOffset.Syntax#2](~/add/codesnippet/visualbasic/m-system.datetimeoffset._15_1.vb)]  
  
 In other words, the Equals method determines whether two <xref:System.DateTimeOffset> objects represent a single point in time. It directly compares neither dates and times nor offsets. To determine whether two <xref:System.DateTimeOffset> objects represent the same time and have the same offset value, use the <xref:System.DateTimeOffset.EqualsExact%2A> method.  
  
 A <xref:System.DateTimeOffset> object that is not `null` is considered to be later (or greater) than one that is `null`.  
  
 This overload of the Equals method implements the <xref:System.IEquatable%601.Equals%2A?displayProperty=fullName> method. It offers slightly better performance than the <xref:System.DateTimeOffset.Equals%28System.Object%29?displayProperty=fullName> overload because the `other` parameter does not have to be converted from an object.  
  
   
  
## Examples  
 The following example illustrates calls to the Equals method to test <xref:System.DateTimeOffset> objects for equality with the current <xref:System.DateTimeOffset> object.  
  
 [!code-vb[System.DateTimeOffset.Methods#9](~/add/codesnippet/visualbasic/m-system.datetimeoffset._15_2.vb)]
 [!code-cs[System.DateTimeOffset.Methods#9](~/add/codesnippet/csharp/m-system.datetimeoffset._15_2.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare to the current <see cref="T:System.DateTimeOffset" /> object.</param>
        <summary>Determines whether a <see cref="T:System.DateTimeOffset" /> object represents the same point in time as a specified object.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="obj" /> parameter is a <see cref="T:System.DateTimeOffset" /> object and represents the same point in time as the current <see cref="T:System.DateTimeOffset" /> object; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Before it performs the comparison, this method converts the values of both the current <xref:System.DateTimeOffset> object and the `obj` parameter to Coordinated Universal Time (UTC). The method is equivalent to the following:  
  
 [!code-cs[System.DateTimeOffset.Syntax#3](~/add/codesnippet/csharp/m-system.datetimeoffset._19_1.cs)]
 [!code-vb[System.DateTimeOffset.Syntax#3](~/add/codesnippet/visualbasic/m-system.datetimeoffset._19_1.vb)]  
  
 In other words, the Equals method determines whether the current <xref:System.DateTimeOffset> object and a specified object represent a single point in time. It directly compares neither dates and times nor offsets. To determine whether two <xref:System.DateTimeOffset> objects represent the same time and have the same offset value, use the <xref:System.DateTimeOffset.EqualsExact%2A> method.  
  
 If `obj` is `null`, or if the run-time type of `obj` is not <xref:System.DateTimeOffset>, the method returns `false`.  
  
   
  
## Examples  
 The following example indicates whether the current <xref:System.DateTimeOffset> object is equal to several other <xref:System.DateTimeOffset> objects, as well as to a null reference and a <xref:System.DateTime> object.  
  
 [!code-vb[System.DateTimeOffset.Methods#10](~/add/codesnippet/visualbasic/m-system.datetimeoffset._19_2.vb)]
 [!code-cs[System.DateTimeOffset.Methods#10](~/add/codesnippet/csharp/m-system.datetimeoffset._19_2.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (DateTimeOffset first, DateTimeOffset second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.DateTimeOffset first, valuetype System.DateTimeOffset second) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.DateTimeOffset" />
        <Parameter Name="second" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="first">The first object to compare.</param>
        <param name="second">The second object to compare.</param>
        <summary>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects represent the same point in time.</summary>
        <returns>
          <see langword="true" /> if the two <see cref="T:System.DateTimeOffset" /> objects have the same &lt;xref:System.DateTimeOffset.UtcDateTime%2A&gt; value; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Before it performs the comparison, this method converts both <xref:System.DateTimeOffset> objects to Coordinated Universal Time (UTC). The method is equivalent to the following:  
  
 [!code-cs[System.DateTimeOffset.Syntax#4](~/add/codesnippet/csharp/m-system.datetimeoffset._0_1.cs)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/add/codesnippet/visualbasic/m-system.datetimeoffset._0_1.vb)]  
  
 In other words, the Equals method determines whether the two <xref:System.DateTimeOffset> objects represent a single point in time. It directly compares neither dates and times nor offsets. To determine whether two <xref:System.DateTimeOffset> objects represent the same time and have the same offset value, use the <xref:System.DateTimeOffset.EqualsExact%2A> method.  
  
   
  
## Examples  
 The following example illustrates calls to the Equals method to test various pairs of <xref:System.DateTimeOffset> objects for equality.  
  
 [!code-vb[System.DateTimeOffset.Methods#11](~/add/codesnippet/visualbasic/m-system.datetimeoffset._0_2.vb)]
 [!code-cs[System.DateTimeOffset.Methods#11](~/add/codesnippet/csharp/m-system.datetimeoffset._0_2.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="EqualsExact">
      <MemberSignature Language="C#" Value="public bool EqualsExact (DateTimeOffset other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EqualsExact(valuetype System.DateTimeOffset other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="other">The object to compare to the current <see cref="T:System.DateTimeOffset" /> object.</param>
        <summary>Determines whether the current <see cref="T:System.DateTimeOffset" /> object represents the same time and has the same offset as a specified <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>
          <see langword="true" /> if the current <see cref="T:System.DateTimeOffset" /> object and <paramref name="other" /> have the same date and time value and the same &lt;xref:System.DateTimeOffset.Offset%2A&gt; value; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Because multiple time zones share a single offset, a return value of `true` does not guarantee that the current and the `other` object represent times in the same time zone.  
  
 Unlike the EqualsExact method, the overloads of the <xref:System.DateTimeOffset.Equals%2A> method determine only whether two <xref:System.DateTimeOffset> values represent a single point in time. They do not indicate that two values have the same date and time as well as the same offset.  
  
   
  
## Examples  
 The following example illustrates the use of the EqualsExact method to compare similar <xref:System.DateTimeOffset> objects.  
  
 [!code-vb[System.DateTimeOffset.Methods#12](~/add/codesnippet/visualbasic/m-system.datetimeoffset._8_1.vb)]
 [!code-cs[System.DateTimeOffset.Methods#12](~/add/codesnippet/csharp/m-system.datetimeoffset._8_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FromFileTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset FromFileTime (long fileTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset FromFileTime(int64 fileTime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileTime" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fileTime">A Windows file time, expressed in ticks.</param>
        <summary>Converts the specified Windows file time to an equivalent local time.</summary>
        <returns>An object that represents the date and time of <paramref name="fileTime" /> with the offset set to the local time offset.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A Windows file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC). Windows uses a file time to record when an application creates, accesses, or writes to a file.  
  
 A Windows file time is directly accessible through the Windows API by calling the `GetFileTime` function, which returns a `FILETIME` structure. The single function parameter is the handle of the file whose file time information is to be retrieved. The file handle is retrieved by calling the `CreateFile` function. The `FILETIME` structure's `dwHighDateTime` member contains the four high-order bytes of the file time, and its `dwLowDateTime` member contains the four low-order bytes. The example that follows illustrates how to retrieve Windows file time values and convert them to <xref:System.DateTimeOffset> values.  
  
 Windows file time values can also be created from <xref:System.DateTime> values by calling the <xref:System.DateTime.ToFileTime%2A?displayProperty=fullName> and <xref:System.DateTime.ToFileTimeUtc%2A?displayProperty=fullName> methods, and from <xref:System.DateTimeOffset> values by calling the <xref:System.DateTimeOffset.ToFileTime%2A?displayProperty=fullName> method.  
  
   
  
## Examples  
 The following example uses the Windows API to retrieve the Windows file times for the WordPad executable.  
  
 [!code-cs[System.DateTimeOffset.FromFileTime#1](~/add/codesnippet/csharp/m-system.datetimeoffset._11_1.cs)]
 [!code-vb[System.DateTimeOffset.FromFileTime#1](~/add/codesnippet/visualbasic/m-system.datetimeoffset._11_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="filetime" /> is less than zero.  
  
 -or-  
  
 <paramref name="filetime" /> is greater than <see langword="DateTimeOffset.MaxValue.Ticks" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public int Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the hour component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>The hour component of the current <see cref="T:System.DateTimeOffset" /> object. This property uses a 24-hour clock; the value ranges from 0 to 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Hour property is not affected by the value of the <xref:System.DateTimeOffset.Offset%2A> property.  
  
 You can also create a string representation of a <xref:System.DateTimeOffset> object's hour component by calling the <xref:System.DateTimeOffset.ToString%2A> method with the "H", or "HH" custom format specifiers.  
  
   
  
## Examples  
 The following example displays the hour component of a <xref:System.DateTimeOffset> object in three different ways:  
  
-   By retrieving the value of the Hour property.  
  
-   By calling the <xref:System.DateTimeOffset.ToString%28System.String%29> method with the "H" format specifier.  
  
-   By calling the <xref:System.DateTimeOffset.ToString%28System.String%29> method with the "HH" format specifier.  
  
 [!code-vb[System.DateTimeOffset.Properties#6](~/add/codesnippet/visualbasic/p-system.datetimeoffset._13_1.vb)]
 [!code-cs[System.DateTimeOffset.Properties#6](~/add/codesnippet/csharp/p-system.datetimeoffset._13_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="LocalDateTime">
      <MemberSignature Language="C#" Value="public DateTime LocalDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime LocalDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTime" /> value that represents the local date and time of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>The local date and time of the current <see cref="T:System.DateTimeOffset" /> object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If necessary, the LocalDateTime property converts the current <xref:System.DateTimeOffset> object's date and time to the local system's date and time. The conversion is a two-step operation:  
  
1.  The property converts the current <xref:System.DateTimeOffset> object's time to Coordinated Universal Time (UTC).  
  
2.  The property then converts UTC to local time.  
  
 There are no invalid times and ambiguous times are mapped to the local zone's standard time. (However, the conversion can create an anomaly: if a <xref:System.DateTimeOffset> value that is derived from the local computer reflects an ambiguous date and time, that value can be converted to UTC and then back to a local time that differs from the original time.)  The property applies any adjustment rules in the local time zone when it performs this conversion.  
  
 This property returns both the date and the time component of a <xref:System.DateTimeOffset> object, which makes it useful for <xref:System.DateTimeOffset> to <xref:System.DateTime> conversion. In addition to performing any necessary time conversion, this property differs from the <xref:System.DateTimeOffset.DateTime%2A> property by setting the value of the <xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTime> object to <xref:System.DateTimeKind?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example illustrates several conversions of <xref:System.DateTimeOffset> values to local times in the U.S. Pacific Standard Time zone. Note that the last three times are all ambiguous; the property maps all of them to a single date and time in the Pacific Standard Time zone.  
  
 [!code-vb[System.DateTimeOffset.Properties#7](~/add/codesnippet/visualbasic/p-system.datetimeoffset._3_1.vb)]
 [!code-cs[System.DateTimeOffset.Properties#7](~/add/codesnippet/csharp/p-system.datetimeoffset._3_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the greatest possible value of <see cref="T:System.DateTimeOffset" />. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this constant is 12/31/9999 11:59:59 PM +00:00.  
  
 The MaxValue property is used to determine whether the value of a new <xref:System.DateTimeOffset> object or the <xref:System.DateTimeOffset> value returned by an arithmetic operation is the same as or earlier than this maximum range value. If it is not, the method throws an <xref:System.ArgumentOutOfRangeException>. Any <xref:System.DateTimeOffset> value is converted to Coordinated Universal Time (UTC) before the method compares it with MaxValue.  This means that a <xref:System.DateTimeOffset> value whose date and time are close to the maximum range, but whose offset is negative, may throw an exception. For example, the value 12/31/9999 11:00 PM -02:00 is out of range because it is one hour later than MaxValue when it is converted to UTC.  
  
 Some calendars, such as the <xref:System.Globalization.UmAlQuraCalendar>, support an upper date range that is earlier than <xref:System.DateTime.MaxValue>. In these cases, trying to access <xref:System.DateTime.MaxValue> in variable assignments or formatting and parsing operations can throw an <xref:System.ArgumentOutOfRangeException>. Instead of retrieving the value of <xref:System.DateTime.MaxValue?displayProperty=fullName>, you can retrieve the value of the specified culture's latest valid date value from the <xref:System.Globalization.Calendar.MaxSupportedDateTime%2A?displayProperty=fullName> property.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="F:System.DateTime.MaxValue" /> is outside the range of the current or specified culture's default calendar.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Millisecond">
      <MemberSignature Language="C#" Value="public int Millisecond { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Millisecond" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the millisecond component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>The millisecond component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer between 0 and 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can also create a string representation of a <xref:System.DateTimeOffset> object's millisecond component by calling the <xref:System.DateTimeOffset.ToString%2A> method with the "fff" custom format specifier.  
  
 If you rely on properties such as <xref:System.DateTimeOffset.Now%2A> or <xref:System.DateTimeOffset.UtcNow%2A> to accurately track the number of elapsed milliseconds, the precision of the time's millisecond component depends on the resolution of the system clock. On Windows NT 3.5 and later, and Windows Vista operating systems, the clock's resolution is approximately 10-15 milliseconds.  
  
   
  
## Examples  
 The following example displays the number of milliseconds of a <xref:System.DateTimeOffset> object by using a custom format specifier and by directly accessing the Millisecond property.  
  
 [!code-vb[System.DateTimeOffset.Properties#12](~/add/codesnippet/visualbasic/p-system.datetimeoffset._1_1.vb)]
 [!code-cs[System.DateTimeOffset.Properties#12](~/add/codesnippet/csharp/p-system.datetimeoffset._1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public int Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the minute component of the time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>The minute component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer between 0 and 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Minute property is not affected by the value of the <xref:System.DateTimeOffset.Offset%2A> property.  
  
 You can also create a string representation of a <xref:System.DateTimeOffset> object's minute component by calling the <xref:System.DateTimeOffset.ToString%2A> method with the "m", or "mm" custom format specifiers.  
  
   
  
## Examples  
 The following example displays the minute component of a <xref:System.DateTimeOffset> object in three different ways:  
  
-   By retrieving the value of the Minute property.  
  
-   By calling the <xref:System.DateTimeOffset.ToString%28System.String%29> method with the "m" format specifier.  
  
-   By calling the <xref:System.DateTimeOffset.ToString%28System.String%29> method with the "mm" format specifier.  
  
 [!code-vb[System.DateTimeOffset.Properties#8](~/add/codesnippet/visualbasic/p-system.datetimeoffset._11_1.vb)]
 [!code-cs[System.DateTimeOffset.Properties#8](~/add/codesnippet/csharp/p-system.datetimeoffset._11_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the earliest possible <see cref="T:System.DateTimeOffset" /> value. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this constant is 1/1/0001 12:00:00 AM +00:00.  
  
 The MinValue property is used to determine whether the value of a new <xref:System.DateTimeOffset> object or the <xref:System.DateTimeOffset> value returned by an arithmetic operation is the same as or later than this minimum range value. If it is not, the method throws an <xref:System.ArgumentOutOfRangeException>. Any <xref:System.DateTimeOffset> value is converted to Coordinated Universal Time (UTC) before the method performs the comparison with MinValue.  This means that a <xref:System.DateTimeOffset> value whose date and time are close to the minimum range, but whose offset is positive, may throw an exception. For example, the value 1/1/0001 1:00:00 AM +02:00 is out of range because it is one hour earlier than MinValue when it is converted to UTC.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public int Month { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Month" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the month component of the date represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>The month component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer between 1 and 12.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Month property is not affected by the value of the <xref:System.DateTimeOffset.Offset%2A> property.  
  
 You can also create a string representation of a <xref:System.DateTimeOffset> object's month component by calling the <xref:System.DateTimeOffset.ToString%2A> method with the "M" or "MM" custom format specifiers.  
  
   
  
## Examples  
 The following example displays the month component of a <xref:System.DateTimeOffset> value in three different ways:  
  
-   By retrieving the value of the Month property.  
  
-   By calling the <xref:System.DateTimeOffset.ToString%28System.String%29> method with the "M" format specifier.  
  
-   By calling the <xref:System.DateTimeOffset.ToString%28System.String%29> method with the "MM" format specifier.  
  
 [!code-vb[System.DateTimeOffset.Properties#9](~/add/codesnippet/visualbasic/p-system.datetimeoffset._2_1.vb)]
 [!code-cs[System.DateTimeOffset.Properties#9](~/add/codesnippet/csharp/p-system.datetimeoffset._2_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTimeOffset" /> object that is set to the current date and time on the current computer, with the offset set to the local time's offset from Coordinated Universal Time (UTC).</summary>
        <value>A <see cref="T:System.DateTimeOffset" /> object whose date and time is the current local time and whose offset is the local time zone's offset from Coordinated Universal Time (UTC).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The precision of the current local time's millisecond component depends on the resolution of the system clock. On Windows NT 3.5 and later, and Windows Vista operating systems, the clock's resolution is approximately 10-15 milliseconds.  
  
   
  
## Examples  
 The following example uses the Now property to retrieve the current date and time and displays it by using each of the [standard date and time format strings](../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md) supported by the <xref:System.DateTimeOffset> type.  
  
 [!code-cs[System.DateTimeOffset.Now#1](~/add/codesnippet/csharp/p-system.datetimeoffset._15_1.cs)]
 [!code-vb[System.DateTimeOffset.Now#1](~/add/codesnippet/visualbasic/p-system.datetimeoffset._15_1.vb)]  
  
 The following example uses the Now and <xref:System.DateTimeOffset.Millisecond%2A> properties to determine the resolution of the system clock. It displays the time only when the value of its millisecond component has changed.  
  
 [!code-vb[System.DateTimeOffset.Properties#11](~/add/codesnippet/visualbasic/p-system.datetimeoffset._15_2.vb)]
 [!code-cs[System.DateTimeOffset.Properties#11](~/add/codesnippet/csharp/p-system.datetimeoffset._15_2.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public TimeSpan Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time's offset from Coordinated Universal Time (UTC).</summary>
        <value>The difference between the current <see cref="T:System.DateTimeOffset" /> object's time value and Coordinated Universal Time (UTC).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of the <xref:System.TimeSpan.Hours%2A> property of the returned <xref:System.TimeSpan> object can range from -14 hours to 14 hours.  
  
 The value of the Offset property is precise to the minute.  
  
   
  
## Examples  
 The following example uses the Offset property to display the local time's difference from Coordinated Universal Time (UTC).  
  
 [!code-vb[System.DateTimeOffset.Properties#13](~/add/codesnippet/visualbasic/p-system.datetimeoffset._9_1.vb)]
 [!code-cs[System.DateTimeOffset.Properties#13](~/add/codesnippet/csharp/p-system.datetimeoffset._9_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static DateTimeOffset op_Addition (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Addition(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">The object to add the time interval to.</param>
        <param name="timeSpan">The time interval to add.</param>
        <summary>Adds a specified time interval to a <see cref="T:System.DateTimeOffset" /> object that has a specified date and time, and yields a <see cref="T:System.DateTimeOffset" /> object that has new a date and time.</summary>
        <returns>An object whose value is the sum of the values of <paramref name="dateTimeTz" /> and <paramref name="timeSpan" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Addition method defines the addition operation for <xref:System.DateTimeOffset> values. It enables code such as the following:  
  
 [!code-cs[System.DateTimeOffset.Operators#1](~/add/codesnippet/csharp/m-system.datetimeoffset._3_1.cs)]
 [!code-vb[System.DateTimeOffset.Operators#1](~/add/codesnippet/visualbasic/m-system.datetimeoffset._3_1.vb)]  
  
 Languages that do not support custom operators and operator overloading can call the <xref:System.DateTimeOffset.Add%2A> method instead.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="T:System.DateTimeOffset" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="T:System.DateTimeOffset" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">The first object to compare.</param>
        <param name="right">The second object to compare.</param>
        <summary>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects represent the same point in time.</summary>
        <returns>
          <see langword="true" /> if both <see cref="T:System.DateTimeOffset" /> objects have the same &lt;xref:System.DateTimeOffset.UtcDateTime%2A&gt; value; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Equality method defines the operation of the equality operator for <xref:System.DateTimeOffset> objects. It enables code such as the following:  
  
 [!code-cs[System.DateTimeOffset.Operators#2](~/add/codesnippet/csharp/m-system.datetimeoffset._22_1.cs)]
 [!code-vb[System.DateTimeOffset.Operators#2](~/add/codesnippet/visualbasic/m-system.datetimeoffset._22_1.vb)]  
  
 Before evaluating the `left` and `right` operands for equality, the operator converts both values to Coordinated Universal Time (UTC). The operation is equivalent to the following:  
  
 [!code-cs[System.DateTimeOffset.Syntax#4](~/add/codesnippet/csharp/m-system.datetimeoffset._22_2.cs)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/add/codesnippet/visualbasic/m-system.datetimeoffset._22_2.vb)]  
  
 In other words, the Equality method determines whether the two <xref:System.DateTimeOffset> objects represent a single point in time. It directly compares neither dates and times nor offsets. To determine whether two <xref:System.DateTimeOffset> objects represent the same time and have the same offset value, use the <xref:System.DateTimeOffset.EqualsExact%2A> method.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThan (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">The first object to compare.</param>
        <param name="right">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is greater than (or later than) a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>
          <see langword="true" /> if the &lt;xref:System.DateTimeOffset.UtcDateTime%2A&gt; value of <paramref name="left" /> is later than the &lt;xref:System.DateTimeOffset.UtcDateTime%2A&gt; value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GreaterThan method defines the operation of the greater than operator for <xref:System.DateTimeOffset> objects. It enables code such as the following:  
  
 [!code-cs[System.DateTimeOffset.Operators#3](~/add/codesnippet/csharp/0b797724-634e-47fd-9f05-_1.cs)]
 [!code-vb[System.DateTimeOffset.Operators#3](~/add/codesnippet/visualbasic/0b797724-634e-47fd-9f05-_1.vb)]  
  
 Languages that do not support custom operators can call the <xref:System.DateTimeOffset.Compare%2A> method instead. They can also call the GreaterThan method directly, as the following example shows.  
  
 [!code-vb[System.DateTimeOffset.Operators#4](~/add/codesnippet/visualbasic/0b797724-634e-47fd-9f05-_2.vb)]  
  
 Before evaluating the `left` and `right` operands, the operator converts both values to Coordinated Universal Time (UTC). The operation is equivalent to the following:  
  
 [!code-cs[System.DateTimeOffset.Syntax#5](~/add/codesnippet/csharp/0b797724-634e-47fd-9f05-_3.cs)]
 [!code-vb[System.DateTimeOffset.Syntax#5](~/add/codesnippet/visualbasic/0b797724-634e-47fd-9f05-_3.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThanOrEqual (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">The first object to compare.</param>
        <param name="right">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is greater than or equal to a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>
          <see langword="true" /> if the &lt;xref:System.DateTimeOffset.UtcDateTime%2A&gt; value of <paramref name="left" /> is the same as or later than the &lt;xref:System.DateTimeOffset.UtcDateTime%2A&gt; value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.DateTimeOffset.op_GreaterThan%2A> method defines the operation of the greater than or equal to operator for <xref:System.DateTimeOffset> objects. It enables code such as the following:  
  
 [!code-cs[System.DateTimeOffset.Operators#5](~/add/codesnippet/csharp/c44bb85d-5a4b-4661-bf69-_1.cs)]
 [!code-vb[System.DateTimeOffset.Operators#5](~/add/codesnippet/visualbasic/c44bb85d-5a4b-4661-bf69-_1.vb)]  
  
 Languages that do not support custom operators can call the <xref:System.DateTimeOffset.Compare%2A> method instead. Some languages can also call the GreaterThanOrEqual method directly, as the following example shows.  
  
 [!code-vb[System.DateTimeOffset.Operators#6](~/add/codesnippet/visualbasic/c44bb85d-5a4b-4661-bf69-_2.vb)]  
  
 Before evaluating the `left` and `right` operands, the operator converts both values to Coordinated Universal Time (UTC). The operation is equivalent to the following:  
  
 [!code-cs[System.DateTimeOffset.Syntax#6](~/add/codesnippet/csharp/c44bb85d-5a4b-4661-bf69-_3.cs)]
 [!code-vb[System.DateTimeOffset.Syntax#6](~/add/codesnippet/visualbasic/c44bb85d-5a4b-4661-bf69-_3.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static DateTimeOffset op_Implicit (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Implicit(valuetype System.DateTime dateTime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="dateTime">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">The first object to compare.</param>
        <param name="right">The second object to compare.</param>
        <summary>Determines whether two specified <see cref="T:System.DateTimeOffset" /> objects refer to different points in time.</summary>
        <returns>
          <see langword="true" /> if <paramref name="left" /> and <paramref name="right" /> do not have the same &lt;xref:System.DateTimeOffset.UtcDateTime%2A&gt; value; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Inequality method defines the operation of the inequality operator for <xref:System.DateTimeOffset> objects. It always returns the opposite result from <xref:System.DateTimeOffset.op_Equality%2A>. The Inequality method enables code such as the following:  
  
 [!code-cs[System.DateTimeOffset.Operators#8](~/add/codesnippet/csharp/2ab124f0-dd60-42ce-8a37-_1.cs)]
 [!code-vb[System.DateTimeOffset.Operators#8](~/add/codesnippet/visualbasic/2ab124f0-dd60-42ce-8a37-_1.vb)]  
  
 Before evaluating the `left` and `right` operands for equality, the operator converts both values to Coordinated Universal Time (UTC). The operation is equivalent to the following:  
  
 [!code-cs[System.DateTimeOffset.Syntax#4](~/add/codesnippet/csharp/2ab124f0-dd60-42ce-8a37-_2.cs)]
 [!code-vb[System.DateTimeOffset.Syntax#4](~/add/codesnippet/visualbasic/2ab124f0-dd60-42ce-8a37-_2.vb)]  
  
 In other words, the Inequality method determines whether the two <xref:System.DateTimeOffset> objects represent different points in time. It directly compares neither dates and times nor offsets.  
  
 Languages that do not support custom operators can call the <xref:System.DateTimeOffset.Compare%2A> method instead. In addition, some languages can also call the Inequality method directly, as the following example shows.  
  
 [!code-vb[System.DateTimeOffset.Operators#9](~/add/codesnippet/visualbasic/2ab124f0-dd60-42ce-8a37-_3.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool op_LessThan (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">The first object to compare.</param>
        <param name="right">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is less than a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>
          <see langword="true" /> if the &lt;xref:System.DateTimeOffset.UtcDateTime%2A&gt; value of <paramref name="left" /> is earlier than the &lt;xref:System.DateTimeOffset.UtcDateTime%2A&gt; value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The LessThan method defines the operation of the less than operator for <xref:System.DateTimeOffset> objects. It enables code such as the following:  
  
 [!code-cs[System.DateTimeOffset.Operators#10](~/add/codesnippet/csharp/m-system.datetimeoffset._17_1.cs)]
 [!code-vb[System.DateTimeOffset.Operators#10](~/add/codesnippet/visualbasic/m-system.datetimeoffset._17_1.vb)]  
  
 Before evaluating the `left` and `right` operands, the operator converts both operands to Coordinated Universal Time (UTC). The operation is equivalent to the following:  
  
 [!code-cs[System.DateTimeOffset.Syntax#8](~/add/codesnippet/csharp/m-system.datetimeoffset._17_2.cs)]
 [!code-vb[System.DateTimeOffset.Syntax#8](~/add/codesnippet/visualbasic/m-system.datetimeoffset._17_2.vb)]  
  
 Languages that do not support custom operators can call the <xref:System.DateTimeOffset.Compare%2A> method instead. In addition, some languages can also call the LessThan method directly, as the following example shows.  
  
 [!code-vb[System.DateTimeOffset.Operators#11](~/add/codesnippet/visualbasic/m-system.datetimeoffset._17_3.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_LessThanOrEqual (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">The first object to compare.</param>
        <param name="right">The second object to compare.</param>
        <summary>Determines whether one specified <see cref="T:System.DateTimeOffset" /> object is less than a second specified <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>
          <see langword="true" /> if the &lt;xref:System.DateTimeOffset.UtcDateTime%2A&gt; value of <paramref name="left" /> is earlier than the &lt;xref:System.DateTimeOffset.UtcDateTime%2A&gt; value of <paramref name="right" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The LessThanOrEqual method defines the operation of the less than or equal to operator for <xref:System.DateTimeOffset> objects. It enables code such as the following:  
  
 [!code-cs[System.DateTimeOffset.Operators#12](~/add/codesnippet/csharp/f4a8a78e-adc3-4017-98c4-_1.cs)]
 [!code-vb[System.DateTimeOffset.Operators#12](~/add/codesnippet/visualbasic/f4a8a78e-adc3-4017-98c4-_1.vb)]  
  
 Languages that do not support custom operators can call the <xref:System.DateTimeOffset.Compare%2A> method instead. Some languages can also call the LessThanOrEqual method directly, as the following example shows.  
  
 [!code-vb[System.DateTimeOffset.Operators#13](~/add/codesnippet/visualbasic/f4a8a78e-adc3-4017-98c4-_2.vb)]  
  
 Before evaluating the `left` and `right` operands, the operator converts both values to Coordinated Universal Time (UTC). The operation is equivalent to the following:  
  
 [!code-cs[System.DateTimeOffset.Syntax#9](~/add/codesnippet/csharp/f4a8a78e-adc3-4017-98c4-_3.cs)]
 [!code-vb[System.DateTimeOffset.Syntax#9](~/add/codesnippet/visualbasic/f4a8a78e-adc3-4017-98c4-_3.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan op_Subtraction (DateTimeOffset left, DateTimeOffset right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.DateTimeOffset left, valuetype System.DateTimeOffset right) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.DateTimeOffset" />
        <Parameter Name="right" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="left">The minuend.</param>
        <param name="right">The subtrahend.</param>
        <summary>Subtracts one <see cref="T:System.DateTimeOffset" /> object from another and yields a time interval.</summary>
        <returns>An object that represents the difference between <paramref name="left" /> and <paramref name="right" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Subtraction method defines the subtraction operation for <xref:System.DateTimeOffset> objects. It enables code such as the following:  
  
 [!code-cs[System.DateTimeOffset.Operators#14](~/add/codesnippet/csharp/240ff2ba-327f-4a3d-9fd1-_1.cs)]
 [!code-vb[System.DateTimeOffset.Operators#14](~/add/codesnippet/visualbasic/240ff2ba-327f-4a3d-9fd1-_1.vb)]  
  
 Languages that do not support custom operators and operator overloading can call the <xref:System.DateTimeOffset.Subtract%28System.DateTimeOffset%29?displayProperty=fullName> method instead.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static DateTimeOffset op_Subtraction (DateTimeOffset dateTimeOffset, TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.DateTimeOffset op_Subtraction(valuetype System.DateTimeOffset dateTimeOffset, valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeTz" Type="System.DateTimeOffset" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">The date and time object to subtract from.</param>
        <param name="timeSpan">The time interval to subtract.</param>
        <summary>Subtracts a specified time interval from a specified date and time, and yields a new date and time.</summary>
        <returns>An object that is equal to the value of <paramref name="dateTimeOffset" /> minus <paramref name="timeSpan" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Subtraction method defines the subtraction operation for <xref:System.DateTimeOffset> objects. It enables code such as the following:  
  
 [!code-cs[System.DateTimeOffset.Operators#15](~/add/codesnippet/csharp/m-system.datetimeoffset._10_1.cs)]
 [!code-vb[System.DateTimeOffset.Operators#15](~/add/codesnippet/visualbasic/m-system.datetimeoffset._10_1.vb)]  
  
 Languages that do not support custom operators and operator overloading can call the <xref:System.DateTimeOffset.Subtract%28System.TimeSpan%29?displayProperty=fullName> method instead.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="T:System.DateTimeOffset" /> or greater than <see cref="T:System.DateTimeOffset" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <summary>Converts the specified string representation of a date, time, and offset to its <see cref="T:System.DateTimeOffset" /> equivalent.</summary>
        <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parse parses a string with three elements that can appear in any order and are delimited by white space. These three elements are as shown in the following table.  
  
|Element|Example|  
|-------------|-------------|  
|\<Date>|"2/10/2007"|  
|\<Time>|"1:02:03 PM"|  
|\<Offset>|"-7:30"|  
  
 Although each of these elements is optional, \<Offset> cannot appear by itself. It must be provided together with either \<Date> or \<Time>. If \<Date> is missing, its default value is the current day. If \<Time> is missing, its default value is 12:00:00 AM. If \<Date> is present but its year component consists of only two digits, it is converted to a year in the current culture's current calendar based on the value of the <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=fullName> property. If \<Offset> is missing, its default value is the offset of the local time zone. \<Offset> can represent either a negative or a positive offset from Coordinated Universal Time (UTC). In either case, \<Offset> must include a sign symbol.  
  
 The `input` string is parsed by using the formatting information in a <xref:System.Globalization.DateTimeFormatInfo> object that is initialized for the current culture. To parse a string that contains designated formatting that does not necessarily correspond to the formatting of the current culture, use the <xref:System.DateTimeOffset.ParseExact%2A> method and provide a format specifier.  
  
   
  
## Examples  
 The following example calls the Parse method to parse several date and time strings. The example includes output from March 22, 2007, on a system whose culture is en-us.  
  
 [!code-vb[System.DateTimeOffset.Parse#1](~/add/codesnippet/visualbasic/m-system.datetimeoffset._12_1.vb)]
 [!code-cs[System.DateTimeOffset.Parse#1](~/add/codesnippet/csharp/m-system.datetimeoffset._12_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> does not contain a valid string representation of a date and time.  
  
 -or-  
  
 <paramref name="input" /> contains the string representation of an offset value without a date or time.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="formatProvider">An object that provides culture-specific format information about `input`.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified culture-specific format information.</summary>
        <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" />, as specified by <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method parses a string with three elements that can appear in any order and are delimited by white space. These three elements are shown in the following table.  
  
|Element|Example|  
|-------------|-------------|  
|\<Date>|"2/10/2007"|  
|\<Time>|"1:02:03 PM"|  
|\<Offset>|"-7:30"|  
  
 Although each of these elements is optional, \<Offset> cannot appear by itself. It must be provided together with either \<Date> or \<Time>. If \<Date> is missing, its default value is the current day. If \<Date> is present but its year component consists of only two digits, it is converted to a year in the `provider` parameter's current calendar based on the value of the <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=fullName> property. If \<Time> is missing, its default value is 12:00:00 AM. If \<Offset> is missing, its default value is the offset of the local time zone. \<Offset> can represent either a negative or a positive offset from Coordinated Universal Time (UTC). In either case, \<Offset> must include a sign symbol.  
  
 The format of these three elements is defined by the `formatProvider` parameter, which can be either of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting is used in the `input` parameter. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property defines the formatting used in `input`.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the format of date and time data.  
  
 If `formatprovider` is `null`, the <xref:System.Globalization.CultureInfo> object that corresponds to the current culture is used.  
  
 The positive or negative sign used in \<Offset> must be either + or -. It is not defined by the <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> or <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> properties of the <xref:System.Globalization.NumberFormatInfo> object of the `formatProvider` parameter.  
  
   
  
## Examples  
 The following example parses date and time strings that are formatted for the fr-fr culture and displays them using the local system's default en-us culture.  
  
 [!code-vb[System.DateTimeOffset.Parse#2](~/add/codesnippet/visualbasic/m-system.datetimeoffset._21_1.vb)]
 [!code-cs[System.DateTimeOffset.Parse#2](~/add/codesnippet/csharp/m-system.datetimeoffset._21_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> does not contain a valid string representation of a date and time.  
  
 -or-  
  
 <paramref name="input" /> contains the string representation of an offset value without a date or time.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset Parse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="formatProvider">An object that provides culture-specific format information about `input`.</param>
        <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of `input`. A typical value to specify is <see cref="T:System.Globalization.DateTimeStyles" />.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified culture-specific format information and formatting style.</summary>
        <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" /> as specified by <paramref name="formatProvider" /> and <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method parses a string with three elements that can appear in any order and are delimited by white space. These three elements are shown in the following table.  
  
|Element|Example|  
|-------------|-------------|  
|\<Date>|"2/10/2007"|  
|\<Time>|"1:02:03 PM"|  
|\<Offset>|"-7:30"|  
  
 Although each of these elements is optional, \<Offset> cannot appear by itself. It must be provided together with either \<Date> or \<Time>. If \<Date> is missing, its default value is the current day. If \<Date> is present but its year component consists of only two digits, it is converted to a year in the `provider` parameter's current calendar based on the value of the <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=fullName> property. If \<Time> is missing, its default value is 12:00:00 AM. If \<Offset> is missing, its default value is the offset of the local time zone, or <xref:System.TimeSpan.Zero?displayProperty=fullName> if either the <xref:System.Globalization.DateTimeStyles?displayProperty=fullName> or <xref:System.Globalization.DateTimeStyles?displayProperty=fullName> value is specified in the `styles` parameter. If \<Offset> is present, it can represent either a negative or a positive offset from Coordinated Universal Time (UTC). In either case, \<Offset> must include a sign symbol.  
  
 The format of these three elements is defined by the `formatProvider` parameter, which can be either of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting is used in the `input` parameter. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property defines the formatting used in `input`.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the format of date and time data.  
  
 Each element can also be enclosed by leading or trailing white space, and the \<Date> and \<Time> elements can include inner white space (such as 6:   00:00). Only the \<Offset> component cannot include inner white space.  
  
 If `formatprovider` is `null`, the <xref:System.Globalization.CultureInfo> object that corresponds to the current culture is used.  
  
 The positive or negative sign used in \<Offset> must be either + or -. It is not defined by the <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> or <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> properties of the <xref:System.Globalization.NumberFormatInfo> object returned by the `formatProvider` parameter.  
  
 The following table shows the members of the <xref:System.Globalization.DateTimeStyles?displayProperty=fullName> enumeration that are supported.  
  
|DateTimeStyles member|Description|  
|---------------------------|-----------------|  
|<xref:System.Globalization.DateTimeStyles>|Parses the string represented by `input` and, if necessary, converts it to UTC. It is equivalent to parsing a string and then calling the <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=fullName> method of the returned <xref:System.DateTimeOffset> object.|  
|<xref:System.Globalization.DateTimeStyles>|Although valid, this value is ignored. Inner white space is permitted in the \<Date> and \<Time> elements.|  
|<xref:System.Globalization.DateTimeStyles>|Although valid, this value is ignored. Leading white space is permitted in front of each component in the parsed string.|  
|<xref:System.Globalization.DateTimeStyles>|Although valid, this value is ignored. Trailing white space is permitted in front of each component in the parsed string.|  
|<xref:System.Globalization.DateTimeStyles>|This is the default behavior. It cannot be overridden by supplying a more restrictive <xref:System.Globalization.DateTimeStyles> enumeration value, such as <xref:System.Globalization.DateTimeStyles?displayProperty=fullName>.|  
|<xref:System.Globalization.DateTimeStyles>|Indicates that, if the `input` parameter lacks an \<Offset> element, the offset of the local time zone should be provided. This is the default behavior of the <xref:System.DateTimeOffset.Parse%2A> method.|  
|<xref:System.Globalization.DateTimeStyles>|Indicates that, if the `input` parameter lacks an \<Offset> element, the UTC offset (00:00) should be provided.|  
|<xref:System.Globalization.DateTimeStyles>|Although valid, this value is ignored and has no effect.|  
|<xref:System.Globalization.DateTimeStyles>|Because the <xref:System.DateTimeOffset> structure does not include a `Kind` property, this value has no effect.|  
  
 Only the <xref:System.Globalization.DateTimeStyles?displayProperty=fullName> value is not supported. An <xref:System.ArgumentException> is thrown if this value is included in the `styles` parameter.  
  
   
  
## Examples  
 The following example illustrates the effect of passing the <xref:System.Globalization.DateTimeStyles?displayProperty=fullName>, <xref:System.Globalization.DateTimeStyles?displayProperty=fullName>, and <xref:System.Globalization.DateTimeStyles?displayProperty=fullName> values to the `styles` parameter of the Parse method.  
  
 [!code-vb[System.DateTimeOffset.Parse#3](~/add/codesnippet/visualbasic/b271c477-2a66-458b-9c1f-_1.vb)]
 [!code-cs[System.DateTimeOffset.Parse#3](~/add/codesnippet/csharp/b271c477-2a66-458b-9c1f-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.  
  
 -or-  
  
 <paramref name="styles" /> is not a valid <see cref="T:System.Globalization.DateTimeStyles" /> value.  
  
 -or-  
  
 <paramref name="styles" /> includes an unsupported <see cref="T:System.Globalization.DateTimeStyles" /> value.  
  
 -or-  
  
 <paramref name="styles" /> includes <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> does not contain a valid string representation of a date and time.  
  
 -or-  
  
 <paramref name="input" /> contains the string representation of an offset value without a date or time.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="format">A format specifier that defines the expected format of `input`.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information about `input`.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
        <returns>An object that is equivalent to the date and time that is contained in <paramref name="input" /> as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ParseExact method parses the string representation of a date, which must be in the format defined by the `format` parameter. It also requires that the \<Date>, \<Time>, and \<Offset> elements of the string representation of a date and time appear in the order specified by `format`. If the `input` string does not match this `format` parameter, the method throws a <xref:System.FormatException>.  In contrast, the <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method parses the string representation of a date in any one of the formats recognized by the format provider's <xref:System.Globalization.DateTimeFormatInfo> object. <xref:System.DateTimeOffset.Parse%2A> also allows the \<Date>, \<Time>, and \<Offset> elements of the string representation of a date and time to appear in any order.  
  
 The `format` parameter is a string that contains either a single standard format specifier or one or more custom format specifiers that define the required format of the `input` parameter. For details about valid formatting codes, see [Standard Date and Time Format Strings](../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md) and [Custom Date and Time Format Strings](../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md). If `format` includes the `z`, `zz`, or `zzz` custom format specifiers to indicate that an offset must be present in `input`, that offset must include either a negative sign or a positive sign. If the sign is missing, the method throws a <xref:System.FormatException>.  
  
 If `format` requires that `input` contain a date but not a time, the resulting <xref:System.DateTimeOffset> object is assigned a time of midnight (0:00:00). If `format` requires that `input` contain a time but not a date, the resulting <xref:System.DateTimeOffset> object is assigned the current date on the local system. If `format` does not require that `input` contain an offset, the resulting <xref:System.DateTimeOffset> object is assigned the time zone offset of the local system.  
  
 The particular date and time symbols and strings used in `input` are defined by the `formatProvider` parameter, as is the precise format of `input` if `format` is a standard format specifier string. The `formatProvider` parameter can be either of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture based on which `input` is interpreted. The <xref:System.Globalization.DateTimeFormatInfo> object returned by its <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> property defines the symbols and formatting in `input`.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the format of date and time data.  
  
 If `formatprovider` is `null`, the <xref:System.Globalization.CultureInfo> object that corresponds to the current culture is used.  
  
   
  
## Examples  
 The following example uses the ParseExact method with standard and custom format specifiers and the invariant culture to parse several date and time strings.  
  
 [!code-vb[System.DateTimeOffset.ParseExact#1](~/add/codesnippet/visualbasic/fdeb8bf3-6972-4551-8638-_1.vb)]
 [!code-cs[System.DateTimeOffset.ParseExact#1](~/add/codesnippet/csharp/fdeb8bf3-6972-4551-8638-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> is an empty string ("").  
  
 -or-  
  
 <paramref name="input" /> does not contain a valid string representation of a date and time.  
  
 -or-  
  
 <paramref name="format" /> is an empty string.  
  
 -or-  
  
 The hour component and the AM/PM designator in <paramref name="input" /> do not agree.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="format">A format specifier that defines the expected format of `input`.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information about `input`.</param>
        <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of `input`.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly.</summary>
        <returns>An object that is equivalent to the date and time that is contained in the <paramref name="input" /> parameter, as specified by the <paramref name="format" />, <paramref name="formatProvider" />, and <paramref name="styles" /> parameters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ParseExact method parses the string representation of a date, which must be in the format defined by the `format` parameter. It also requires that the \<Date>, \<Time>, and \<Offset> elements of the string representation of a date and time appear in the order specified by `format`. If the `input` string does not match the pattern of the `format` parameter, with any variations defined by the `styles` parameter, the method throws a <xref:System.FormatException>.  In contrast, the <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName> method parses the string representation of a date in any one of the formats recognized by the format provider's <xref:System.Globalization.DateTimeFormatInfo> object. <xref:System.DateTimeOffset.Parse%2A> also allows the \<Date>, \<Time>, and \<Offset> elements of the string representation of a date and time to appear in any order.  
  
 The `format` parameter is a string that contains either a single standard format specifier or one or more custom format specifiers that define the required pattern of the `input` parameter. For details about valid formatting codes, see [Standard Date and Time Format Strings](../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md) and [Custom Date and Time Format Strings](../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md). If `format` includes the `z`, `zz`, or `zzz` custom format specifiers to indicate that an offset must be present in `input`, that offset must include either a negative sign or a positive sign. If the sign is missing, the method throws a <xref:System.FormatException>.  
  
 If `format` requires that `input` contain a date but not a time, the resulting <xref:System.DateTimeOffset> object is assigned a time of midnight (0:00:00). If `format` requires that `input` contain a time but not a date, the resulting <xref:System.DateTimeOffset> object is assigned the current date on the local system. If `format` does not require that `input` contain an offset, the offset of the resulting <xref:System.DateTimeOffset> object depends on the value of the `styles` parameter. If `styles` includes <xref:System.Globalization.DateTimeStyles>, the offset of the local time zone is assigned to the <xref:System.DateTimeOffset> object. If `styles` includes <xref:System.Globalization.DateTimeStyles>, the Coordinated Universal Time (UTC) offset, or +00:00, is assigned to the <xref:System.DateTimeOffset> object. If neither value is specified, the offset of the local time zone is used.  
  
 The particular date and time symbols and strings used in `input` are defined by the `formatProvider` parameter. The same is true for the precise format of `input`, if `format` is a standard format specifier string. The `formatProvider` parameter can be either of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture based on which `input` is interpreted. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property defines the symbols and formatting in `input`.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the format of date and time data.  
  
 If `formatprovider` is `null`, the <xref:System.Globalization.CultureInfo> object that corresponds to the current culture is used.  
  
 The `styles` parameter defines whether white space is allowed in the input string, indicates how strings without an explicit offset component are parsed, and supports UTC conversion as part of the parsing operation. All members of the <xref:System.Globalization.DateTimeStyles> enumeration are supported except <xref:System.Globalization.DateTimeStyles>. The following table lists the effect of each supported member.  
  
|`DateTimeStyles` member|Behavior|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles>|Parses `input` and, if necessary, converts it to UTC. It is equivalent to parsing a string, and then calling the <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=fullName> method of the returned <xref:System.DateTimeOffset> object.|  
|<xref:System.Globalization.DateTimeStyles>|If `format` does not require that `input` contain an offset value, the returned <xref:System.DateTimeOffset> object is given the offset of the local time zone. This is the default value.|  
|<xref:System.Globalization.DateTimeStyles>|If `format` does not require that `input` contain an offset value, the returned <xref:System.DateTimeOffset> object is given the UTC offset (+00:00).|  
|<xref:System.Globalization.DateTimeStyles>|Allows `input` to include inner white space not specified by `format`. Extra white space can appear between date and time components and within individual components, and is ignored when parsing the string.|  
|<xref:System.Globalization.DateTimeStyles>|Allows `input` to include leading spaces not specified by `format`. These are ignored when parsing the string.|  
|<xref:System.Globalization.DateTimeStyles>|Allows `input` to include trailing spaces not specified by `format`. These are ignored when parsing the string.|  
|<xref:System.Globalization.DateTimeStyles>|Allows `input` to include leading, trailing, and inner spaces not specified by `format`. All extra white-space characters not specified in `format` are ignored when parsing the string.|  
|<xref:System.Globalization.DateTimeStyles>|Indicates that additional white space is not permitted in `input`. White space must appear exactly as specified in `format`. This is the default behavior.|  
|<xref:System.Globalization.DateTimeStyles>|Has no effect because the <xref:System.DateTimeOffset> structure does not include a `Kind` property.|  
  
   
  
## Examples  
 The following example uses the ParseExact method with standard and custom format specifiers, the invariant culture, and various <xref:System.Globalization.DateTimeStyles> values to parse several date and time strings.  
  
 [!code-vb[System.DateTimeOffset.ParseExact#2](~/add/codesnippet/visualbasic/15b42d94-2be5-4ced-bcf1-_1.vb)]
 [!code-cs[System.DateTimeOffset.ParseExact#2](~/add/codesnippet/csharp/15b42d94-2be5-4ced-bcf1-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.  
  
 -or-  
  
 The <paramref name="styles" /> parameter includes an unsupported value.  
  
 -or-  
  
 The <paramref name="styles" /> parameter contains <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.  
  
 -or-  
  
 <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> is an empty string ("").  
  
 -or-  
  
 <paramref name="input" /> does not contain a valid string representation of a date and time.  
  
 -or-  
  
 <paramref name="format" /> is an empty string.  
  
 -or-  
  
 The hour component and the AM/PM designator in <paramref name="input" /> do not agree.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="formats">An array of format specifiers that define the expected formats of `input`.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information about `input`.</param>
        <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of `input`.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified formats, culture-specific format information, and style. The format of the string representation must match one of the specified formats exactly.</summary>
        <returns>An object that is equivalent to the date and time that is contained in the <paramref name="input" /> parameter, as specified by the <paramref name="formats" />, <paramref name="formatProvider" />, and <paramref name="styles" /> parameters.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ParseExact method parses the string representation of a date that matches any one of the patterns assigned to the `formats` parameter. If the `input` string does not match any one of these patterns with any of the variations defined by the `styles` parameter, the method throws a <xref:System.FormatException>. Aside from comparing `input` to multiple formatting patterns, this overload behaves identically to the <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName> method.  
  
 The `formats` parameter is a string array whose elements contain either a single standard format specifier or one or more custom format specifiers that define the possible pattern of the `input` parameter. When the method is called, `input` must match one of these patterns. For details about valid formatting codes, see [Standard Date and Time Format Strings](../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md) and [Custom Date and Time Format Strings](../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md). If the matched element in `formats` includes the `z`, `zz`, or `zzz` custom format specifiers to indicate that an offset must be present in `input`, that offset must include either a negative sign or a positive sign. If the sign is missing, the method throws a <xref:System.FormatException>.  
  
> [!IMPORTANT]
>  Using the `formats` parameter of this overload to specify multiple formats can help reduce the frustration many users experience when they enter dates and times. In particular, the ability to define multiple input patterns enables an application to handle date and time representations that can either include or lack leading zeros in months, days, hours, minutes, and seconds. The example provides an illustration of this.  
  
 If the matched element in `formats` requires that `input` contain a date but not a time, the resulting <xref:System.DateTimeOffset> object is assigned a time of midnight (0:00:00). If the matched element in `formats` requires that `input` contain a time but not a date, the resulting <xref:System.DateTimeOffset> object is assigned the current date on the local system. If the matched element in `formats` does not require that `input` contain an offset, the offset of the resulting <xref:System.DateTimeOffset> object depends on the value of the `styles` parameter. If `styles` includes <xref:System.Globalization.DateTimeStyles>, the offset of the local time zone is assigned to the <xref:System.DateTimeOffset> object. If `styles` includes <xref:System.Globalization.DateTimeStyles>, the Coordinated Universal Time (UTC) offset, or +00:00, is assigned to the <xref:System.DateTimeOffset> object. If neither value is specified, the offset of the local time zone is used.  
  
 The particular date and time symbols and strings used in `input` are defined by the `formatProvider` parameter. The same is true for the precise format of `input`, if the matching element of `formats` is a standard format specifier string. The `formatProvider` parameter can be either of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture based on which `input` is interpreted. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property defines the symbols and formatting in `input`.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the format of date and time data.  
  
 If `formatprovider` is `null`, the <xref:System.Globalization.CultureInfo> object that corresponds to the current culture is used.  
  
 The `styles` parameter defines whether white space is permitted in the input string, indicates how strings without an explicit offset component are parsed, and supports UTC conversion as part of the parsing operation. All members of the <xref:System.Globalization.DateTimeStyles> enumeration are supported except <xref:System.Globalization.DateTimeStyles>. The following table lists the effect of each supported member.  
  
|`DateTimeStyles` member|Behavior|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles>|Parses `input` and, if necessary, converts it to UTC. It is equivalent to parsing a string, and then calling the <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=fullName> method of the returned <xref:System.DateTimeOffset> object.|  
|<xref:System.Globalization.DateTimeStyles>|If the matched element in `formats` does not require that `input` contain an offset value, the returned <xref:System.DateTimeOffset> object is given the offset of the local time zone. This is the default value.|  
|<xref:System.Globalization.DateTimeStyles>|If the matched element in `formats` does not require that `input` contain an offset value, the returned <xref:System.DateTimeOffset> object is given the UTC offset (+00:00).|  
|<xref:System.Globalization.DateTimeStyles>|Allows `input` to include inner white space not specified by `format`. Extra white space can appear between date and time components and within individual components (except the offset), and is ignored when parsing the string.|  
|<xref:System.Globalization.DateTimeStyles>|Allows `input` to include leading spaces not specified by `formats`. These are ignored when parsing the string.|  
|<xref:System.Globalization.DateTimeStyles>|Allows `input` to include trailing spaces not specified by `formats`. These are ignored when parsing the string.|  
|<xref:System.Globalization.DateTimeStyles>|Allows `input` to include leading, trailing, and inner spaces not specified by `formats`. All extra white-space characters not specified in the matched element in `formats` are ignored when parsing the string.|  
|<xref:System.Globalization.DateTimeStyles>|Indicates that additional white space is not permitted in `input`. White space must appear exactly as specified in a particular element of `formats` for a match to occur. This is the default behavior.|  
|<xref:System.Globalization.DateTimeStyles>|Has no effect because the <xref:System.DateTimeOffset> structure does not include a `Kind` property.|  
  
   
  
## Examples  
 The following example defines multiple input formats for the string representation of a date and time and offset value, and then passes the string that is entered by the user to the ParseExact method.  
  
 [!code-vb[System.DateTimeOffset.ParseExact#3](~/add/codesnippet/visualbasic/128e130f-8497-45f4-89e2-_1.vb)]
 [!code-cs[System.DateTimeOffset.ParseExact#3](~/add/codesnippet/csharp/128e130f-8497-45f4-89e2-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The offset is greater than 14 hours or less than -14 hours.  
  
 -or-  
  
 <paramref name="styles" /> includes an unsupported value.  
  
 -or-  
  
 The <paramref name="styles" /> parameter contains <see cref="T:System.Globalization.DateTimeStyles" /> values that cannot be used together.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> is an empty string ("").  
  
 -or-  
  
 <paramref name="input" /> does not contain a valid string representation of a date and time.  
  
 -or-  
  
 No element of <paramref name="formats" /> contains a valid format specifier.  
  
 -or-  
  
 The hour component and the AM/PM designator in <paramref name="input" /> do not agree.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public int Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the second component of the clock time represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>The second component of the <see cref="T:System.DateTimeOffset" /> object, expressed as an integer value between 0 and 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Second property is not affected by the value of the <xref:System.DateTimeOffset.Offset%2A> property.  
  
 You can also create a string representation of a <xref:System.DateTimeOffset> object's second component by calling the <xref:System.DateTimeOffset.ToString%2A> method with the "s", or "ss" custom format specifiers.  
  
   
  
## Examples  
 The following example displays the second component of a <xref:System.DateTimeOffset> object in three different ways:  
  
-   By retrieving the value of the Second property.  
  
-   By calling the <xref:System.DateTimeOffset.ToString%28System.String%29> method with the "s" format specifier.  
  
-   By calling the <xref:System.DateTimeOffset.ToString%28System.String%29> method with the "ss" format specifier.  
  
 [!code-vb[System.DateTimeOffset.Properties#14](~/add/codesnippet/visualbasic/p-system.datetimeoffset._16_1.vb)]
 [!code-cs[System.DateTimeOffset.Properties#14](~/add/codesnippet/csharp/p-system.datetimeoffset._16_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.DateTimeOffset value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">An object that represents the value to subtract.</param>
        <summary>Subtracts a <see cref="T:System.DateTimeOffset" /> value that represents a specific date and time from the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>An object that specifies the interval between the two <see cref="T:System.DateTimeOffset" /> objects.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method converts both <xref:System.DateTimeOffset> objects to Coordinated Universal Time (UTC) before calculating the time interval that separates them. This removes any effect that different offsets from UTC may have on the comparison.  
  
> [!NOTE]
>  For languages that support custom operators, you can also perform date and time subtraction by using the subtraction operator. For details, see the <xref:System.DateTimeOffset.op_Subtraction%2A> method.  
  
 Because neither the current <xref:System.DateTimeOffset> object nor the `value` parameter represent the date and time in a specific time zone, the Subtract method does not consider a particular time zone's adjustment rules when it subtracts dates and times.  
  
   
  
## Examples  
 The following example illustrates subtraction that uses the Subtract method.  
  
 [!code-vb[System.DateTimeOffset.Methods#13](~/add/codesnippet/visualbasic/m-system.datetimeoffset._2_1.vb)]
 [!code-cs[System.DateTimeOffset.Methods#13](~/add/codesnippet/csharp/m-system.datetimeoffset._2_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public DateTimeOffset Subtract (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset Subtract(valuetype System.TimeSpan value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">The time interval to subtract.</param>
        <summary>Subtracts a specified time interval from the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <returns>An object that is equal to the date and time represented by the current <see cref="T:System.DateTimeOffset" /> object, minus the time interval represented by <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use the Subtract method to subtract more than one kind of time interval (days, hours, minutes, seconds, or milliseconds) in a single operation. Its behavior is identical to the <xref:System.DateTimeOffset.op_Subtraction%28System.DateTimeOffset%2CSystem.TimeSpan%29> method, which defines the subtraction operator. The <xref:System.DateTimeOffset> structure also supports specialized addition methods (such as <xref:System.DateTimeOffset.AddDays%2A>, <xref:System.DateTimeOffset.AddHours%2A>, and <xref:System.DateTimeOffset.AddMinutes%2A>) that allow you to perform subtraction by assigning a negative value to the method parameter.  
  
> [!NOTE]
>  This method returns a new <xref:System.DateTimeOffset> object. It does not modify the value of the current object by adding `timeSpan` to its date and time.  
  
 The Subtract method does not affect the value of the <xref:System.DateTimeOffset> object's <xref:System.DateTimeOffset.Offset%2A> property. The returned <xref:System.DateTimeOffset> object has the same offset as the original object.  
  
 Because the current <xref:System.DateTimeOffset> object does not represent the date and time in a specific time zone, the Subtract method does not consider a particular time zone's adjustment rules when it performs the subtraction.  
  
   
  
## Examples  
 The following example illustrates subtraction that uses the Subtract method.  
  
 [!code-vb[System.DateTimeOffset.Methods#14](~/add/codesnippet/visualbasic/m-system.datetimeoffset._24_1.vb)]
 [!code-cs[System.DateTimeOffset.Methods#14](~/add/codesnippet/csharp/m-system.datetimeoffset._24_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting <see cref="T:System.DateTimeOffset" /> value is less than <see cref="T:System.DateTimeOffset" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> value is greater than <see cref="T:System.DateTimeOffset" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare with the current <see cref="T:System.DateTimeOffset" /> object.</param>
        <summary>Compares the value of the current <see cref="T:System.DateTimeOffset" /> object with another object of the same type.</summary>
        <returns>A 32-bit signed integer that indicates whether the current <see cref="T:System.DateTimeOffset" /> object is less than, equal to, or greater than <paramref name="obj" />. The return values of the method are interpreted as follows:  
  
 <list type="table">  
<listheader>  
<term> Return Value  
  
 </term>  
<description> Description  
  
 </description>  
</listheader>  
<item>  
<term> Less than zero  
  
 </term>  
<description> The current <see cref="T:System.DateTimeOffset" /> object is less than (earlier than) <paramref name="obj" />.  
  
 </description>  
</item>  
<item>  
<term> Zero  
  
 </term>  
<description> The current <see cref="T:System.DateTimeOffset" /> object is equal to (the same point in time as) <paramref name="obj" />.  
  
 </description>  
</item>  
<item>  
<term> Greater than zero  
  
 </term>  
<description> The current <see cref="T:System.DateTimeOffset" /> object is greater than (later than) <paramref name="obj" />.  
  
 </description>  
</item>  
</list></returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">The object that initiated the callback. The functionality for this parameter is not currently implemented.</param>
        <summary>Runs when the deserialization of an object has been completed.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">The object to populate with data.</param>
        <param name="context">The destination for this serialization (see <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the data required to serialize the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of ticks that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object in clock time.</summary>
        <value>The number of ticks in the <see cref="T:System.DateTimeOffset" /> object's clock time.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Ticks property is not affected by the value of the <xref:System.DateTimeOffset.Offset%2A> property.  
  
 The value of the Ticks property represents the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight on January 1, 0001 (the value of <xref:System.DateTimeOffset.MinValue>). It does not include ticks that would be added by leap seconds. A nanosecond is one billionth of a second; there are ten million ticks in a second. The value of the Ticks property ranges from `DateTimeOffset.MinValue.Ticks` to `DateTimeOffset.MaxValue.Ticks`.  
  
 You can assign the number of ticks to a <xref:System.DateTimeOffset> object by using the <xref:System.DateTimeOffset.%23ctor%28System.Int64%2CSystem.TimeSpan%29> constructor overload.  
  
   
  
## Examples  
 The following example initializes a <xref:System.DateTimeOffset> object by approximating the number of ticks in the date July 1, 2008 1:23:07. It then displays the date and the number of ticks represented by that date to the console.  
  
 [!code-vb[System.DateTimeOffset.Properties#15](~/add/codesnippet/visualbasic/p-system.datetimeoffset._12_1.vb)]
 [!code-cs[System.DateTimeOffset.Properties#15](~/add/codesnippet/csharp/p-system.datetimeoffset._12_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public TimeSpan TimeOfDay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time of day for the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>The time interval of the current date that has elapsed since midnight.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TimeOfDay property is not affected by the value of the <xref:System.DateTimeOffset.Offset%2A> property.  
  
 The TimeOfDay property returns the time component of a <xref:System.DateTimeOffset> object in the form of a <xref:System.TimeSpan> object. It is equivalent to the <xref:System.DateTime.TimeOfDay%2A?displayProperty=fullName> property.  
  
   
  
## Examples  
 The following example uses the TimeOfDay property to extract the time and display it to the console.  
  
 [!code-vb[System.DateTimeOffset.Properties#16](~/add/codesnippet/visualbasic/p-system.datetimeoffset._14_1.vb)]
 [!code-cs[System.DateTimeOffset.Properties#16](~/add/codesnippet/csharp/p-system.datetimeoffset._14_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToFileTime">
      <MemberSignature Language="C#" Value="public long ToFileTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 ToFileTime() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to a Windows file time.</summary>
        <returns>The value of the current <see cref="T:System.DateTimeOffset" /> object, expressed as a Windows file time.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A Windows file time is a 64-bit value that represents the number of 100-nanosecond intervals that have elapsed since 12:00 midnight, January 1, 1601 A.D. (C.E.) Coordinated Universal Time (UTC). Windows uses a file time to record when an application creates, accesses, or writes to a file.  
  
 The ToFileTime method converts the current <xref:System.DateTimeOffset> object's date and time to UTC before it performs the conversion. In other words, calling the ToFileTime method is equivalent to the following method call:  
  
 [C#]  
  
```  
this.ToUtcDateTime().ToFileTime();  
```  
  
 [Visual Basic]  
  
```  
Me.ToUtcDateTime().ToFileTime()  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The resulting file time would represent a date and time before midnight on January 1, 1601 C.E. Coordinated Universal Time (UTC).</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToLocalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToLocalTime() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the current <see cref="T:System.DateTimeOffset" /> object to a <see cref="T:System.DateTimeOffset" /> object that represents the local time.</summary>
        <returns>An object that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object converted to local time.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In performing the conversion to local time, the method first converts the current <xref:System.DateTimeOffset> object's date and time to Coordinated Universal Time (UTC) by subtracting the offset from the time. It then converts the UTC date and time to local time by adding the local time zone offset. In doing this, it takes account of any adjustment rules for the local time zone.  
  
 Both the value of the current <xref:System.DateTimeOffset> object and the value of the <xref:System.DateTimeOffset> object returned by the method call represent the same point in time. That is, if both are passed to the <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=fullName> method, the method will return `true`.  
  
 If the conversion causes a time that is out of range of the <xref:System.DateTimeOffset> type, the ToLocalTime method returns a <xref:System.DateTimeOffset> object that has the date and time set to either <xref:System.DateTimeOffset.MaxValue> or <xref:System.DateTimeOffset.MinValue> and the offset set to the local time zone offset.  
  
   
  
## Examples  
 The following example uses the ToLocalTime method to convert a <xref:System.DateTimeOffset> value to local time in the Pacific Standard Time zone. It also illustrates the method's support for the local time zone's adjustment rules.  
  
 [!code-vb[System.DateTimeOffset.Methods#15](~/add/codesnippet/visualbasic/m-system.datetimeoffset._30_1.vb)]
 [!code-cs[System.DateTimeOffset.Methods#15](~/add/codesnippet/csharp/m-system.datetimeoffset._30_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToOffset">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToOffset (TimeSpan offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToOffset(valuetype System.TimeSpan offset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="offset">The offset to convert the <see cref="T:System.DateTimeOffset" /> value to.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to the date and time specified by an offset value.</summary>
        <returns>An object that is equal to the original <see cref="T:System.DateTimeOffset" /> object (that is, their &lt;xref:System.DateTimeOffset.ToUniversalTime%2A&gt; methods return identical points in time) but whose &lt;xref:System.DateTimeOffset.Offset%2A&gt; property is set to <paramref name="offset" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ToOffset method is an alternative to calling the <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29?displayProperty=fullName> method. It can be useful for performing simple conversions from one time zone to another when the time zones' offsets from Coordinated Universal Time (UTC) are known. However, because neither the original <xref:System.DateTimeOffset> object nor the new <xref:System.DateTimeOffset> object returned by the method call are unambiguously related to a particular time zone, the method does not apply any time zone adjustment rules in the conversion.  
  
   
  
## Examples  
 The following example illustrates how to use the ToOffset method to convert a <xref:System.DateTimeOffset> object to a <xref:System.DateTimeOffset> object with a different offset.  
  
 [!code-vb[System.DateTimeOffset.ToOffset#1](~/add/codesnippet/visualbasic/m-system.datetimeoffset._13_1.vb)]
 [!code-cs[System.DateTimeOffset.ToOffset#1](~/add/codesnippet/csharp/m-system.datetimeoffset._13_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The resulting <see cref="T:System.DateTimeOffset" /> object has a &lt;xref:System.DateTimeOffset.DateTime%2A&gt; value earlier than <see cref="F:System.DateTimeOffset.MinValue" />.  
  
 -or-  
  
 The resulting <see cref="T:System.DateTimeOffset" /> object has a &lt;xref:System.DateTimeOffset.DateTime%2A&gt; value later than <see cref="F:System.DateTimeOffset.MaxValue" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> is less than -14 hours.  
  
 -or-  
  
 <paramref name="offset" /> is greater than 14 hours.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation.</summary>
        <returns>A string representation of a <see cref="T:System.DateTimeOffset" /> object that includes the offset appended at the end of the string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value of this method is identical to that of the <xref:System.DateTime.ToString?displayProperty=fullName> method, except that it includes a space followed by the offset appended at the end of the string. In other words, it formats output using the short date pattern, the long time pattern, and the `zzz` custom format string, with each element separated from the previous element by a space. For example, if <xref:System.DateTime.ToString?displayProperty=fullName> returns a value of 1/12/2008 6:15:50 PM, ToString returns a value of 1/12/2008 6:15:50 PM -08:00 for a time that is eight hours behind Coordinated Universal Time (UTC).  
  
 This method uses formatting information derived from the current culture. For more information, see <xref:System.Globalization.CultureInfo.CurrentCulture%2A>. Other overloads of the ToString method enable you to specify the culture whose formatting to use, and to define the output pattern of the <xref:System.DateTimeOffset> value.  
  
   
  
## Examples  
 The following example illustrates calls to the ToString method and displays its output on a system whose current culture is en-us.  
  
 [!code-cs[System.DateTimeOffset.ToString#1](~/add/codesnippet/csharp/m-system.datetimeoffset._25_2.cs)]
 [!code-vb[System.DateTimeOffset.ToString#1](~/add/codesnippet/visualbasic/m-system.datetimeoffset._25_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider formatProvider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified culture-specific formatting information.</summary>
        <returns>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value of this method is identical to that of its equivalent overload of the <xref:System.DateTime.ToString%2A?displayProperty=fullName> method, except that it includes a space followed by the offset appended at the end of the string. In other words, it formats output using the short date pattern, the long time pattern, and the `zzz` custom format string, with each element separated from the previous element by a space.  
  
 The format of these three elements is defined by the `formatProvider` parameter. The `formatProvider` parameter can be either of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are applied to the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the format of date and time data.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object associated with the current culture is used (see <xref:System.Globalization.CultureInfo.CurrentCulture%2A>).  
  
   
  
## Examples  
 The following example displays a <xref:System.DateTimeOffset> object using <xref:System.Globalization.CultureInfo> objects that represent the invariant culture, as well as four other cultures.  
  
 [!code-cs[System.DateTimeOffset.ToString#2](~/add/codesnippet/csharp/m-system.datetimeoffset._7_2.cs)]
 [!code-vb[System.DateTimeOffset.ToString#2](~/add/codesnippet/visualbasic/m-system.datetimeoffset._7_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="formatProvider" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">A format string.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified format.</summary>
        <returns>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="format" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `format` parameter should contain either a single format specifier character (see [Standard Date and Time Format Strings](../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md)) or a custom format pattern (see [Custom Date and Time Format Strings](../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md)) that defines the format of the returned string. If `format` is a null or empty string (""), the <xref:System.DateTimeOffset> value is output using the default format.  
  
 The following table shows the exact operation of certain format specifiers when used with <xref:System.DateTimeOffset>, which differs from their behavior when used with <xref:System.DateTime>.  
  
|Existing format specifier|New behavior|  
|-------------------------------|------------------|  
|"K"|Designed to round-trip a date and time. With <xref:System.DateTimeOffset>, maps to "zzz" (the offset is always displayed with hours and minutes). Note that "K" is a custom format specifier; it cannot appear as the single character in `format`.|  
|"U"|Not supported.|  
|"r"|Converts the <xref:System.DateTimeOffset> object to Coordinated Universal Time (UTC) and outputs it using the custom format string `ddd, dd MMM yyyy HH:mm:ss GMT`.|  
|"u"|Converts the <xref:System.DateTimeOffset> object to UTC and outputs it using the format `yyyy-MM-dd HH:mm:ssZ`.|  
  
 The remaining standard date and time format specifiers behave the same with the ToString method as they do with the <xref:System.DateTime.ToString%2A> method.  
  
 This method uses formatting information derived from the current culture. For more information, see <xref:System.Globalization.CultureInfo.CurrentCulture%2A>.  
  
   
  
## Examples  
 The following example displays a <xref:System.DateTimeOffset> object to the console using each of the standard date and time format specifiers. The output is formatted by using the en-us culture.  
  
 [!code-cs[System.DateTimeOffset.ToString#3](~/add/codesnippet/csharp/m-system.datetimeoffset._29_2.cs)]
 [!code-vb[System.DateTimeOffset.ToString#3](~/add/codesnippet/visualbasic/m-system.datetimeoffset._29_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The length of <paramref name="format" /> is one, and it is not one of the standard format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
 -or-  
  
 <paramref name="format" /> does not contain a valid custom format pattern.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by the current culture.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">A format string.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the current <see cref="T:System.DateTimeOffset" /> object to its equivalent string representation using the specified format and culture-specific format information.</summary>
        <returns>A string representation of the value of the current <see cref="T:System.DateTimeOffset" /> object, as specified by <paramref name="format" /> and <paramref name="provider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `format` parameter should contain either a single format specifier character (see [Standard Date and Time Format Strings](../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md)) or a custom format pattern (see [Custom Date and Time Format Strings](../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md)). If `format` is a null or empty string (""), the <xref:System.DateTimeOffset> object is output using the default format.  
  
 The following table shows the exact operation of certain format specifiers when used with <xref:System.DateTimeOffset>, which differs from their behavior when used with <xref:System.DateTime>.  
  
|Existing format specifier|New behavior|  
|-------------------------------|------------------|  
|"K"|Designed to round-trip a date and time. With <xref:System.DateTimeOffset>, maps to "zzz" (the offset is always displayed with hours and minutes). Note that "K" is a custom format specifier; it cannot appear as the single character in `format`.|  
|"U"|Not supported.|  
|"r"|Converts the <xref:System.DateTimeOffset> object to Coordinated Universal Time (UTC) and outputs it using the custom format string `ddd, dd MMM yyyy HH:mm:ss GMT`.|  
|"u"|Converts the <xref:System.DateTimeOffset> value to UTC and outputs it using the format `yyyy-MM-dd HH:mm:ssZ`.|  
  
 The remaining standard date and time format specifiers behave the same with the <xref:System.DateTimeOffset.ToString%28System.String%29> method as they do with the <xref:System.DateTime.ToString%2A> method.  
  
 The pattern that corresponds to standard format specifiers, as well as the symbols and names of date and time components, is defined by the `formatProvider` parameter. The `formatProvider` parameter can be either of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting is used in `input`. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property defines the formatting used in `input`.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the format of date and time data.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object associated with the current culture is used (see <xref:System.Globalization.CultureInfo.CurrentCulture%2A>).  
  
   
  
## Examples  
 The following example uses the ToString method to display a <xref:System.DateTimeOffset> object using a custom format string for several different cultures.  
  
 [!code-cs[System.DateTimeOffset.ToString#4](~/add/codesnippet/csharp/m-system.datetimeoffset._16_2.cs)]
 [!code-vb[System.DateTimeOffset.ToString#4](~/add/codesnippet/visualbasic/m-system.datetimeoffset._16_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The length of <paramref name="format" /> is one, and it is not one of the standard format specifier characters defined for <see cref="T:System.Globalization.DateTimeFormatInfo" />.  
  
 -or-  
  
 <paramref name="format" /> does not contain a valid custom format pattern.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">The date and time is outside the range of dates supported by the calendar used by <paramref name="formatProvider" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public DateTimeOffset ToUniversalTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTimeOffset ToUniversalTime() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the current <see cref="T:System.DateTimeOffset" /> object to a <see cref="T:System.DateTimeOffset" /> value that represents the Coordinated Universal Time (UTC).</summary>
        <returns>An object that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object converted to Coordinated Universal Time (UTC).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method returns a <xref:System.DateTimeOffset> object whose <xref:System.DateTimeOffset.Offset%2A> property is set to zero.  
  
 Both the value of the current <xref:System.DateTimeOffset> object and the value of the <xref:System.DateTimeOffset> object returned by the method call represent the same point in time. That is, if both are passed to the <xref:System.DateTimeOffset.Equals%28System.DateTimeOffset%2CSystem.DateTimeOffset%29?displayProperty=fullName> method, the method will return `true`.  
  
   
  
## Examples  
 The following example calls the ToUniversalTime method to convert a local time and several other times to Coordinated Universal Time (UTC).  
  
 [!code-vb[System.DateTimeOffset.Methods#16](~/add/codesnippet/visualbasic/m-system.datetimeoffset._26_1.vb)]
 [!code-cs[System.DateTimeOffset.Methods#16](~/add/codesnippet/csharp/m-system.datetimeoffset._26_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, valuetype System.DateTimeOffset result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of `input`, if the conversion succeeded, or <see cref="T:System.DateTimeOffset" />, if the conversion failed. The conversion fails if the `input` parameter is <see langword="null" /> or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
        <summary>Tries to converts a specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This overload of the TryParse method is like the <xref:System.DateTimeOffset.Parse%28System.String%29?displayProperty=fullName> method, except that it does not throw an exception if the conversion fails. It parses a string with three elements that can appear in any order and are delimited by white space. These three elements are shown in the following table.  
  
|Element|Example|  
|-------------|-------------|  
|\<Date>|"2/10/2007"|  
|\<Time>|"1:02:03 PM"|  
|\<Offset>|"-7:30"|  
  
 Although each of these elements is optional, \<Offset> cannot appear by itself. It must be provided together with either \<Date> or \<Time>. If \<Date> is missing, its default value is the current day. If \<Date> is present but its year component consists of only two digits, it is converted to a year in the current culture's current calendar based on the value of the <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=fullName> property. If \<Time> is missing, its default value is 12:00:00 AM. If \<Offset> is missing, its default value is the offset of the local time zone. If \<Offset> is present, it can represent either a negative or a positive offset from Coordinated Universal Time (UTC). In either case, \<Offset> must include a sign symbol or the method returns `false`.  
  
 The `input` string is parsed by using the formatting information in a <xref:System.Globalization.DateTimeFormatInfo> object initialized for the current culture. To parse a string that contains designated formatting that does not necessarily correspond to that of the current culture, use the <xref:System.DateTimeOffset.TryParseExact%2A> method and provide a format specifier.  
  
   
  
## Examples  
 The following example calls the TryParse method to parse several strings with various date and time formats.  
  
 [!code-vb[System.DateTimeOffset.TryParse#1](~/add/codesnippet/visualbasic/m-system.datetimeoffset._18_1.vb)]
 [!code-cs[System.DateTimeOffset.TryParse#1](~/add/codesnippet/csharp/m-system.datetimeoffset._18_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, valuetype System.DateTimeOffset result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="formatProvider">An object that provides culture-specific formatting information about `input`.</param>
        <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of `input`.</param>
        <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> value equivalent to the date and time of `input`, if the conversion succeeded, or <see cref="T:System.DateTimeOffset" />, if the conversion failed. The conversion fails if the `input` parameter is <see langword="null" /> or does not contain a valid string representation of a date and time. This parameter is passed uninitialized.</param>
        <summary>Tries to convert a specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent, and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This overload of the TryParse method is like the <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName> method, except that it does not throw an exception if the conversion fails. The method parses a string with three elements that can appear in any order and are delimited by white space. These three elements are shown in the following table.  
  
|Element|Example|  
|-------------|-------------|  
|\<Date>|"2/10/2007"|  
|\<Time>|"1:02:03 PM"|  
|\<Offset>|"-7:30"|  
  
 Although each of these elements is optional, \<Offset> cannot appear by itself. It must be provided together with either \<Date> or \<Time>. If \<Date> is missing, its default value is the current day. If \<Date> is present but its year component consists of only two digits, it is converted to a year in the `provider` parameter's current calendar based on the value of the <xref:System.Globalization.Calendar.TwoDigitYearMax%2A?displayProperty=fullName> property. If \<Time> is missing, its default value is 12:00:00 AM. If \<Offset> is missing, its default value is the offset of the local time zone, or <xref:System.TimeSpan.Zero> if either the <xref:System.Globalization.DateTimeStyles?displayProperty=fullName> or <xref:System.Globalization.DateTimeStyles?displayProperty=fullName> value is specified in `styles`. If \<Offset> is present, it can represent either a negative or a positive offset from Coordinated Universal Time (UTC). In either case, \<Offset> must include a sign symbol or the method returns `false`.  
  
 The `input` string is parsed by using the culture-specific formatting information in a <xref:System.Globalization.DateTimeFormatInfo> object supplied by the `formatProvider` parameter. The `formatProvider` parameter can be either of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting is used in `input`. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property defines the format that is used in `input`.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the format of date and time data.  
  
 In addition, each element can be delimited by leading or trailing white space, and the \<Date> and \<Time> components can include inner white space (such as 6:   00:00). Only the \<Offset> component cannot include inner white space.  
  
 If `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that corresponds to the current culture is used.  
  
 The positive or negative sign used in \<Offset> must be either + or -. It is not defined by the <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A> or <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> properties of the <xref:System.Globalization.NumberFormatInfo> object returned by the `formatprovider` parameter's <xref:System.Globalization.CultureInfo.NumberFormat%2A> property.  
  
 The following members of the <xref:System.Globalization.DateTimeStyles> enumeration are supported:  
  
|DateTimeStyles Member|Comments|  
|---------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles>|Parses the string represented by `input` and, if necessary, converts it to UTC. It is equivalent to parsing a string, and then calling the returned object's <xref:System.DateTimeOffset.ToUniversalTime> method.|  
|<xref:System.Globalization.DateTimeStyles>|Although valid, this value is ignored. Inner white space is allowed in the \<Date> and \<Time> components.|  
|<xref:System.Globalization.DateTimeStyles>|Although valid, this value is ignored. Leading white space is allowed in front of each component in the parsed string.|  
|<xref:System.Globalization.DateTimeStyles>|Although valid, this value is ignored. Trailing white space is allowed in front of each component in the parsed string.|  
|<xref:System.Globalization.DateTimeStyles>|This is the default behavior. It cannot be overridden by supplying a more restrictive <xref:System.Globalization.DateTimeStyles> enumeration value, such as <xref:System.Globalization.DateTimeStyles?displayProperty=fullName>.|  
|<xref:System.Globalization.DateTimeStyles>|Indicates that, if the `input` parameter lacks an \<Offset> element, the offset of the local time zone should be provided. This is the default behavior of the TryParse method.|  
|<xref:System.Globalization.DateTimeStyles>|Indicates that, if the `input` parameter lacks an \<Offset> element, the UTC offset (00:00) should be provided.|  
|<xref:System.Globalization.DateTimeStyles>|Although valid, this value is ignored and has no effect.|  
|<xref:System.Globalization.DateTimeStyles>|Because the <xref:System.DateTimeOffset> structure does not include a `Kind` property, this value has no effect.|  
  
 Only the <xref:System.Globalization.DateTimeStyles?displayProperty=fullName> value is not supported. An <xref:System.ArgumentException> is thrown if this value is included in the `styles` parameter.  
  
   
  
## Examples  
 The following example calls the TryParse method with a variety of <xref:System.Globalization.DateTimeStyles> values to parse some strings with various date and time formats.  
  
 [!code-vb[System.DateTimeOffset.TryParse#2](~/add/codesnippet/visualbasic/09211b95-6140-4570-96bc-_1.vb)]
 [!code-cs[System.DateTimeOffset.TryParse#2](~/add/codesnippet/csharp/09211b95-6140-4570-96bc-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.  
  
 -or-  
  
 <see cref="T:System.Globalization.DateTimeStyles" /> is not supported.  
  
 -or-  
  
 <paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, valuetype System.DateTimeOffset result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="format">A format specifier that defines the required format of `input`.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information about `input`.</param>
        <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of input. A typical value to specify is <see langword="None" />.</param>
        <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of `input`, if the conversion succeeded, or <see cref="T:System.DateTimeOffset" />, if the conversion failed. The conversion fails if the `input` parameter is <see langword="null" />, or does not contain a valid string representation of a date and time in the expected format defined by `format` and `provider`. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified format, culture-specific format information, and style. The format of the string representation must match the specified format exactly.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This overload of the TryParseExact method is like the <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName> method, except that this method does not throw an exception if the conversion fails. It parses the string representation of a date and time that must exactly match the pattern specified by the `format` parameter. If the `input` string does not match this pattern, with some possible variations in white space defined by the `styles` parameter, the parsing operation fails and the method returns `false`.  
  
 The `format` parameter is a string that contains either a single standard format specifier or one or more custom format specifiers that define the required pattern of `input`. For details about valid formatting codes, see [Standard Date and Time Format Strings](../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md) and [Custom Date and Time Format Strings](../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md). If `format` includes the `z`, `zz`, or `zzz` custom format specifiers to indicate that an offset must be present in `input`, that offset must include either a negative sign or a positive sign. If the sign is missing, the parsing operation fails and the method returns `false`.  
  
 If `format` requires that `input` contain a date but not a time, the resulting <xref:System.DateTimeOffset> object is assigned a time of midnight (0:00:00). If `format` requires that `input` contain a time but not a date, the resulting <xref:System.DateTimeOffset> object is assigned the current date on the local system. If `format` does not require that `input` contain an offset, the offset of the resulting <xref:System.DateTimeOffset> object depends on the value of the `styles` parameter. If `styles` includes <xref:System.Globalization.DateTimeStyles>, the offset of the local time zone is assigned to the <xref:System.DateTimeOffset> object. If `styles` includes <xref:System.Globalization.DateTimeStyles>, the Coordinated Universal Time (UTC) offset, or +00:00, is assigned to the <xref:System.DateTimeOffset> object. If neither value is specified, the offset of the local time zone is used.  
  
 The particular date and time symbols and strings used in `input` are defined by the `formatProvider` parameter. The same is true for the precise pattern of `input` if `format` is a standard format specifier string. The `formatProvider` parameter can be either of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture based on which `input` is interpreted. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property defines the symbols and standard formats allowed in `input`.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the format of date and time data.  
  
 If `formatprovider` is `null`, the <xref:System.Globalization.CultureInfo> object that corresponds to the current culture is used.  
  
 The `styles` parameter defines whether white space is allowed in the input string, indicates how strings without an explicit offset component are parsed, and supports UTC conversion as part of the parsing operation. All members of the <xref:System.Globalization.DateTimeStyles> enumeration are supported except <xref:System.Globalization.DateTimeStyles>. The following table lists the effect of each supported member.  
  
|`DateTimeStyles` member|Behavior|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles>|Parses `input` and, if necessary, converts it to UTC. It is equivalent to parsing a string, and then calling the <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=fullName> method of the returned <xref:System.DateTimeOffset> object.|  
|<xref:System.Globalization.DateTimeStyles>|If `format` does not require that `input` contain an offset value, the returned <xref:System.DateTimeOffset> object is given the offset of the local time zone. This is the default behavior.|  
|<xref:System.Globalization.DateTimeStyles>|If `format` does not require that `input` contain an offset value, the returned <xref:System.DateTimeOffset> object is given the UTC offset (+00:00).|  
|<xref:System.Globalization.DateTimeStyles>|Allows `input` to include inner white space not specified by format. Extra white space can appear between date and time components and within individual components, other than the offset, and is ignored when parsing the string.|  
|<xref:System.Globalization.DateTimeStyles>|Allows `input` to include leading spaces not specified by `format`. These are ignored when parsing the string.|  
|<xref:System.Globalization.DateTimeStyles>|Allows `input` to include trailing spaces not specified by `format`. These are ignored when parsing the string.|  
|<xref:System.Globalization.DateTimeStyles>|Allows `input` to include leading, trailing, and inner spaces not specified by `format`. All extra white-space characters not specified in `format` are ignored when parsing the string.|  
|<xref:System.Globalization.DateTimeStyles>|Indicates that additional white space is not permitted in `input`. White space must appear exactly as specified in `format`. This is the default behavior.|  
|<xref:System.Globalization.DateTimeStyles>|Has no effect, because the <xref:System.DateTimeOffset> structure does not include a `Kind` property.|  
  
   
  
## Examples  
 The following example uses the TryParseExact method with standard and custom format specifiers, the invariant culture, and various <xref:System.Globalization.DateTimeStyles> values to parse several date and time strings.  
  
 [!code-vb[System.DateTimeOffset.TryParseExact#1](~/add/codesnippet/visualbasic/f423b102-3042-4971-a34c-_1.vb)]
 [!code-cs[System.DateTimeOffset.TryParseExact#1](~/add/codesnippet/csharp/f423b102-3042-4971-a34c-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.  
  
 -or-  
  
 <see cref="T:System.Globalization.DateTimeStyles" /> is not supported.  
  
 -or-  
  
 <paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.DateTimeStyles styles, valuetype System.DateTimeOffset result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.DateTimeStyles" />
        <Parameter Name="result" Type="System.DateTimeOffset&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">A string that contains a date and time to convert.</param>
        <param name="formats">An array that defines the expected formats of `input`.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information about `input`.</param>
        <param name="styles">A bitwise combination of enumeration values that indicates the permitted format of input. A typical value to specify is <see langword="None" />.</param>
        <param name="result">When the method returns, contains the <see cref="T:System.DateTimeOffset" /> equivalent to the date and time of `input`, if the conversion succeeded, or <see cref="T:System.DateTimeOffset" />, if the conversion failed. The conversion fails if the `input` does not contain a valid string representation of a date and time, or does not contain the date and time in the expected format defined by `format`, or if `formats` is <see langword="null" />. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a date and time to its <see cref="T:System.DateTimeOffset" /> equivalent using the specified array of formats, culture-specific format information, and style. The format of the string representation must match one of the specified formats exactly.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="input" /> parameter is successfully converted; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TryParseExact method parses the string representation of a date that matches any one of the patterns assigned to the `formats` array. If the `input` string does not match any one of these patterns with any variations defined by the `styles` parameter, the parsing operation fails and the method returns `false`. Aside from comparing `input` to multiple strings that contain format specifiers, this overload behaves identically to the [DateTimeOffset.ParseExact(String, String\[\], IFormatProvider, DateTimeStyles)](assetId:///M:System.DateTimeOffset.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)?qualifyHint=True&autoUpgrade=False) method.  
  
 The `formats` parameter is a string array whose elements contain either a single standard format specifier or one or more custom format specifiers that define the possible pattern of `input`. For details about valid formatting codes, see [Standard Date and Time Format Strings](../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md) and [Custom Date and Time Format Strings](../Topic/Custom%20Date%20and%20Time%20Format%20Strings.md). If the matched element in `formats` includes the `z`, `zz`, or `zzz` custom format specifiers to indicate that an offset must be present in `input`, that offset must include either a negative sign or a positive sign. If the sign is missing, the parse operation fails and the method returns `false`.  
  
> [!IMPORTANT]
>  Using the `formats` parameter of this overload to specify multiple formats can help reduce the frustration many users experience when they enter dates and times. In particular, the ability to define multiple input patterns enables an application to handle date and time representations that can either include or lack leading zeros in months, days, hours, minutes, and seconds. The example provides an illustration of this.  
  
 If the matched element in `formats` requires that `input` contain a date but not a time, the resulting <xref:System.DateTimeOffset> object is assigned a time of midnight (0:00:00). If the matched element in `formats` requires that input contain a time but not a date, the resulting <xref:System.DateTimeOffset> object is assigned the current date on the local system. If the matched element in `formats` does not require that `input` contain an offset, the offset of the resulting <xref:System.DateTimeOffset> object depends on the value of the `styles` parameter. If `styles` includes <xref:System.Globalization.DateTimeStyles>, the offset of the local time zone is assigned to the <xref:System.DateTimeOffset> object. If `styles` includes <xref:System.Globalization.DateTimeStyles>, the Coordinated Universal Time (UTC) offset, or +00:00, is assigned to the <xref:System.DateTimeOffset> object. If neither value is specified, the offset of the local time zone is used.  
  
 The particular date and time symbols and strings used in `input` are defined by the `formatProvider` parameter. The same is true for the precise pattern of `input` if the matching element of `formats` is a standard format specifier string. The `formatProvider` parameter can be either of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture based on which `input` is interpreted. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property defines the symbols and formatting in `input`.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the format of date and time data.  
  
 If `formatprovider` is `null`, the <xref:System.Globalization.CultureInfo> object that corresponds to the current culture is used.  
  
 The `styles` parameter defines whether white space is permitted in the input string, indicates how strings without an explicit offset component are parsed, and supports UTC conversion as part of the parsing operation. All members of the <xref:System.Globalization.DateTimeStyles> enumeration are supported except <xref:System.Globalization.DateTimeStyles>. The following table lists the effect of each supported member.  
  
|`DateTimeStyles` member|Behavior|  
|-----------------------------|--------------|  
|<xref:System.Globalization.DateTimeStyles>|Parses `input` and, if necessary, converts it to UTC. It is equivalent to parsing a string, and then calling the <xref:System.DateTimeOffset.ToUniversalTime%2A?displayProperty=fullName> method of the returned <xref:System.DateTimeOffset> object.|  
|<xref:System.Globalization.DateTimeStyles>|If the matched element in `formats` does not require that `input` contain an offset value, the returned <xref:System.DateTimeOffset> object is given the offset of the local time zone. This is the default value.|  
|<xref:System.Globalization.DateTimeStyles>|If the matched element in `formats` does not require that `input` contain an offset value, the returned <xref:System.DateTimeOffset> object is given the UTC offset (+00:00).|  
|<xref:System.Globalization.DateTimeStyles>|Allows `input` to include inner white space not specified by the elements in `formats`. Extra white space can appear between date and time components and within individual components (except for the offset) and is ignored when parsing the string.|  
|<xref:System.Globalization.DateTimeStyles>|Allows `input` to include leading spaces not specified by the elements in `formats`. These are ignored when parsing the string.|  
|<xref:System.Globalization.DateTimeStyles>|Allows `input` to include trailing spaces not specified by the elements in `formats`. These are ignored when parsing the string.|  
|<xref:System.Globalization.DateTimeStyles>|Allows `input` to include leading, trailing, and inner spaces not specified by the elements in `formats`. All extra white-space characters not specified in the matched element in `formats` are ignored when parsing the string.|  
|<xref:System.Globalization.DateTimeStyles>|Indicates that additional white space is not permitted in `input`. White space must appear exactly as specified in a particular element in `formats` for a successful match to occur. This is the default behavior.|  
|<xref:System.Globalization.DateTimeStyles>|Has no effect because the <xref:System.DateTimeOffset> structure does not include a `Kind` property.|  
  
   
  
## Examples  
 The following example defines multiple input formats for the string representation of a date and time and offset value, and then passes the string that is entered by the user to the TryParseExact method.  
  
 [!code-vb[System.DateTimeOffset.TryParseExact#2](~/add/codesnippet/visualbasic/34341620-726e-4494-adbd-_1.vb)]
 [!code-cs[System.DateTimeOffset.TryParseExact#2](~/add/codesnippet/csharp/34341620-726e-4494-adbd-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> includes an undefined <see cref="T:System.Globalization.DateTimeStyles" /> value.  
  
 -or-  
  
 <see cref="T:System.Globalization.DateTimeStyles" /> is not supported.  
  
 -or-  
  
 <paramref name="styles" /> includes mutually exclusive <see cref="T:System.Globalization.DateTimeStyles" /> values.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UtcDateTime">
      <MemberSignature Language="C#" Value="public DateTime UtcDateTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime UtcDateTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTime" /> value that represents the Coordinated Universal Time (UTC) date and time of the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>The Coordinated Universal Time (UTC) date and time of the current <see cref="T:System.DateTimeOffset" /> object.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The UtcDateTime property performs a dual conversion:  
  
-   It converts the date and time of the current <xref:System.DateTimeOffset> object to Coordinated Universal Time (UTC). The conversion is performed by subtracting the value of the <xref:System.DateTimeOffset.Offset%2A> property from the date and time of the current <xref:System.DateTimeOffset> object.  
  
-   It converts the <xref:System.DateTimeOffset> value to a <xref:System.DateTime> value.  
  
 The <xref:System.DateTime.Kind%2A> property of the returned <xref:System.DateTimeOffset.DateTime%2A> value is set to <xref:System.DateTimeKind?displayProperty=fullName>.  
  
 Retrieving the value of the UtcDateTime property is equivalent to calling the current <xref:System.DateTimeOffset> object's `ToUniversalTime.DateTime` property, except that the <xref:System.DateTime.Kind%2A> property of the latter <xref:System.DateTime> value is <xref:System.DateTimeKind?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example shows how to use of the UtcDateTime property to display a <xref:System.DateTimeOffset> value and its corresponding UTC time.  
  
 [!code-vb[System.DateTimeOffset.Properties#17](~/add/codesnippet/visualbasic/p-system.datetimeoffset._5_1.vb)]
 [!code-cs[System.DateTimeOffset.Properties#17](~/add/codesnippet/csharp/p-system.datetimeoffset._5_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UtcNow">
      <MemberSignature Language="C#" Value="public static DateTimeOffset UtcNow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTimeOffset UtcNow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a <see cref="T:System.DateTimeOffset" /> object whose date and time are set to the current Coordinated Universal Time (UTC) date and time and whose offset is <see cref="F:System.TimeSpan.Zero" />.</summary>
        <value>An object whose date and time is the current Coordinated Universal Time (UTC) and whose offset is <see cref="F:System.TimeSpan.Zero" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The UtcNow property computes the current Universal Coordinated Time (UTC) based on the local system's clock time and an offset defined by the local system's time zone.  
  
 The precision of the current UTC time's millisecond component depends on the resolution of the system clock. On Windows NT 3.5 and later, and Windows Vista operating systems, the clock's resolution is approximately 10-15 milliseconds.  
  
   
  
## Examples  
 The following example illustrates the relationship between Coordinated Universal Time (UTC) and local time.  
  
 [!code-vb[System.DateTimeOffset.Properties#18](~/add/codesnippet/visualbasic/p-system.datetimeoffset._8_1.vb)]
 [!code-cs[System.DateTimeOffset.Properties#18](~/add/codesnippet/csharp/p-system.datetimeoffset._8_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="UtcTicks">
      <MemberSignature Language="C#" Value="public long UtcTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 UtcTicks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of ticks that represents the date and time of the current <see cref="T:System.DateTimeOffset" /> object in Coordinated Universal Time (UTC).</summary>
        <value>The number of ticks in the <see cref="T:System.DateTimeOffset" /> object's Coordinated Universal Time (UTC).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of the UtcTicks property represents the number of 100-nanosecond intervals that have elapsed since 12:00:00 midnight on January 1, 0001 (the value of <xref:System.DateTimeOffset.MinValue>). It does not include ticks that would be added by leap seconds. A nanosecond is one billionth of a second; there are ten million ticks in a second. The value of the UtcTicks property ranges from `DateTimeOffset.MinValue.Ticks` to `DateTimeOffset.MaxValue.Ticks`.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public int Year { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Year" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the year component of the date represented by the current <see cref="T:System.DateTimeOffset" /> object.</summary>
        <value>The year component of the current <see cref="T:System.DateTimeOffset" /> object, expressed as an integer value between 0 and 9999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Year property is not affected by the value of the <xref:System.DateTimeOffset.Offset%2A> property.  
  
 You can also create a string representation of a <xref:System.DateTimeOffset> object's year component by calling the <xref:System.DateTimeOffset.ToString%2A> method with the "y", "yy", or "yyyy" custom format specifiers.  
  
   
  
## Examples  
 The following example displays the year component of a <xref:System.DateTimeOffset> value in four different ways:  
  
-   By retrieving the value of the Year property.  
  
-   By calling the <xref:System.DateTimeOffset.ToString%28System.String%29> method with the "y" format specifier.  
  
-   By calling the <xref:System.DateTimeOffset.ToString%28System.String%29> method with the "yy" format specifier.  
  
-   By calling the <xref:System.DateTimeOffset.ToString%28System.String%29> method with the "yyyy" format specifier.  
  
 [!code-vb[System.DateTimeOffset.Properties#19](~/add/codesnippet/visualbasic/p-system.datetimeoffset._10_1.vb)]
 [!code-cs[System.DateTimeOffset.Properties#19](~/add/codesnippet/csharp/p-system.datetimeoffset._10_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>