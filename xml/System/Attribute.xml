<Type Name="Attribute" FullName="System.Attribute">
  <TypeSignature Language="C#" Value="public abstract class Attribute : System.Runtime.InteropServices._Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Attribute extends System.Object implements class System.Runtime.InteropServices._Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Attribute</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.All, AllowMultiple=false, Inherited=true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Attribute))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents the base class for custom attributes.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Attribute class associates predefined system information or user-defined custom information with a target element. A target element can be an assembly, class, constructor, delegate, enum, event, field, interface, method, portable executable file module, parameter, property, return value, struct, or another attribute.  
  
 Information provided by an attribute is also known as metadata. Metadata can be examined at run time by your application to control how your program processes data, or before run time by external tools to control how your application itself is processed or maintained. For example, the .NET Framework predefines and uses attribute types to control run-time behavior, and some programming languages use attribute types to represent language features not directly supported by the .NET Framework common type system.  
  
 All attribute types derive directly or indirectly from the Attribute class. Attributes can be applied to any target element; multiple attributes can be applied to the same target element; and attributes can be inherited by an element derived from a target element. Use the <xref:System.AttributeTargets> class to specify the target element to which the attribute is applied.  
  
 The Attribute class provides convenient methods to retrieve and test custom attributes. For more information about using attributes, see [Applying Attributes](../Topic/Applying%20Attributes.md) and [Attributes](../Topic/Extending%20Metadata%20Using%20Attributes.md).  
  
   
  
## Examples  
 The following code example demonstrates the usage of Attribute.  
  
 [!code-cs[AnimalAttributes#1](~/add/codesnippet/csharp/t-system.attribute_1.cs)]
 [!code-cpp[AnimalAttributes#1](~/add/codesnippet/cpp/t-system.attribute_1.cpp)]
 [!code-vb[AnimalAttributes#1](~/add/codesnippet/visualbasic/t-system.attribute_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe>This type is thread safe.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Attribute ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Attribute" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor is only called by classes that derive from <xref:System.Attribute>.  
  
   
  
## Examples  
 The following code example shows the definition of a custom parameter <xref:System.Attribute> class with its constructor.  
  
 [!code-cpp[System.Attribute.GetCustomAttribute#2](~/add/codesnippet/cpp/m-system.attribute.sharp_1.cpp)]
 [!code-vb[System.Attribute.GetCustomAttribute#2](~/add/codesnippet/visualbasic/m-system.attribute.sharp_1.vb)]
 [!code-cs[System.Attribute.GetCustomAttribute#2](~/add/codesnippet/csharp/m-system.attribute.sharp_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">An <see cref="T:System.Object" /> to compare with this instance or <see langword="null" />.</param>
        <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
        <returns>
          <see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example defines two custom parameter <xref:System.Attribute> classes, then creates several objects of each class and shows the use of the Equals method to compare them.  
  
 [!code-cs[System.Attribute.Equals#1](~/add/codesnippet/csharp/m-system.attribute.equal_1.cs)]
 [!code-cpp[System.Attribute.Equals#1](~/add/codesnippet/cpp/m-system.attribute.equal_1.cpp)]
 [!code-vb[System.Attribute.Equals#1](~/add/codesnippet/visualbasic/m-system.attribute.equal_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttribute">
      <MemberSignature Language="C#" Value="public static Attribute GetCustomAttribute (System.Reflection.Assembly element, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute GetCustomAttribute(class System.Reflection.Assembly element, class System.Type attributeType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Assembly" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
        <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
        <summary>Retrieves a custom attribute applied to a specified assembly. Parameters specify the assembly and the type of the custom attribute to search for.</summary>
        <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the <xref:System.Attribute.GetCustomAttributes%2A> method if you expect more than one value to be returned, or <xref:System.Reflection.AmbiguousMatchException> will be thrown.  
  
> [!NOTE]
>  Starting with the .NET Framework version 2.0, this method returns security attributes if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 The following code example illustrates the use of the <xref:System.Attribute.GetCustomAttribute%2A> method taking an <xref:System.Reflection.Assembly> as a parameter.  
  
 [!code-cs[IsDefined#1](~/add/codesnippet/csharp/m-system.attribute.getcu_6_1.cs)]
 [!code-cpp[IsDefined#1](~/add/codesnippet/cpp/m-system.attribute.getcu_6_1.cpp)]
 [!code-vb[IsDefined#1](~/add/codesnippet/visualbasic/m-system.attribute.getcu_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttribute">
      <MemberSignature Language="C#" Value="public static Attribute GetCustomAttribute (System.Reflection.MemberInfo element, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute GetCustomAttribute(class System.Reflection.MemberInfo element, class System.Type attributeType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.MemberInfo" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class.</param>
        <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
        <summary>Retrieves a custom attribute applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</summary>
        <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A match is determined in the same way described in the Return Value section of <xref:System.Type.IsAssignableFrom%2A?displayProperty=fullName>.  
  
> [!NOTE]
>  Starting with the .NET Framework version 2.0, this method returns security attributes on types, methods, and constructors if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 The following code example illustrates the use of the <xref:System.Attribute.GetCustomAttribute%2A> method taking a <xref:System.Reflection.MemberInfo> as a parameter.  
  
 [!code-cs[IsDefined#4](~/add/codesnippet/csharp/m-system.attribute.getcu_1_1.cs)]
 [!code-vb[IsDefined#4](~/add/codesnippet/visualbasic/m-system.attribute.getcu_1_1.vb)]
 [!code-cpp[IsDefined#4](~/add/codesnippet/cpp/m-system.attribute.getcu_1_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
        <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttribute">
      <MemberSignature Language="C#" Value="public static Attribute GetCustomAttribute (System.Reflection.Module element, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute GetCustomAttribute(class System.Reflection.Module element, class System.Type attributeType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Module" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
        <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
        <summary>Retrieves a custom attribute applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</summary>
        <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example illustrates the use of the <xref:System.Attribute.GetCustomAttribute%2A> method taking a <xref:System.Reflection.Module> as a parameter.  
  
 [!code-cs[IsDefined#2](~/add/codesnippet/csharp/m-system.attribute.getcu_0_1.cs)]
 [!code-cpp[IsDefined#2](~/add/codesnippet/cpp/m-system.attribute.getcu_0_1.cpp)]
 [!code-vb[IsDefined#2](~/add/codesnippet/visualbasic/m-system.attribute.getcu_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttribute">
      <MemberSignature Language="C#" Value="public static Attribute GetCustomAttribute (System.Reflection.ParameterInfo element, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute GetCustomAttribute(class System.Reflection.ParameterInfo element, class System.Type attributeType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.ParameterInfo" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
        <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
        <summary>Retrieves a custom attribute applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</summary>
        <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `element` represents a parameter in a method of a derived type, the return value includes the inheritable custom attributes applied to the same parameter in the overridden base methods.  
  
   
  
## Examples  
 The following code example defines a custom parameter <xref:System.Attribute> class and applies the custom attribute to a method in a derived class and the base of the derived class. The example shows the use of the <xref:System.Attribute.GetCustomAttribute%2A> method to return the attributes.  
  
 [!code-cpp[System.Attribute.GetCustomAttribute#1](~/add/codesnippet/cpp/bd4024eb-39f4-4016-a48f-_1.cpp)]
 [!code-vb[System.Attribute.GetCustomAttribute#1](~/add/codesnippet/visualbasic/bd4024eb-39f4-4016-a48f-_1.vb)]
 [!code-cs[System.Attribute.GetCustomAttribute#1](~/add/codesnippet/csharp/bd4024eb-39f4-4016-a48f-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
        <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttribute">
      <MemberSignature Language="C#" Value="public static Attribute GetCustomAttribute (System.Reflection.Assembly element, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute GetCustomAttribute(class System.Reflection.Assembly element, class System.Type attributeType, bool inherit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Assembly" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
        <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
        <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
        <summary>Retrieves a custom attribute applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</summary>
        <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Starting with the .NET Framework version 2.0, this method returns security attributes if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 The following code example illustrates the use of the <xref:System.Attribute.GetCustomAttribute%2A> method taking an <xref:System.Reflection.Assembly> as a parameter.  
  
 [!code-cs[IsDefined#1](~/add/codesnippet/csharp/693d7c0c-148b-474a-9638-_1.cs)]
 [!code-cpp[IsDefined#1](~/add/codesnippet/cpp/693d7c0c-148b-474a-9638-_1.cpp)]
 [!code-vb[IsDefined#1](~/add/codesnippet/visualbasic/693d7c0c-148b-474a-9638-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttribute">
      <MemberSignature Language="C#" Value="public static Attribute GetCustomAttribute (System.Reflection.MemberInfo element, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute GetCustomAttribute(class System.Reflection.MemberInfo element, class System.Type attributeType, bool inherit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.MemberInfo" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class.</param>
        <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
        <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of `element` for custom attributes.</param>
        <summary>Retrieves a custom attribute applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</summary>
        <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Starting with the .NET Framework version 2.0, this method returns security attributes on types, methods, and constructors if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 The following code example illustrates the use of the <xref:System.Attribute.GetCustomAttribute%2A> method taking a <xref:System.Reflection.MemberInfo> as a parameter.  
  
 [!code-cs[IsDefined#4](~/add/codesnippet/csharp/0b048619-02aa-4933-be76-_1.cs)]
 [!code-vb[IsDefined#4](~/add/codesnippet/visualbasic/0b048619-02aa-4933-be76-_1.vb)]
 [!code-cpp[IsDefined#4](~/add/codesnippet/cpp/0b048619-02aa-4933-be76-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
        <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttribute">
      <MemberSignature Language="C#" Value="public static Attribute GetCustomAttribute (System.Reflection.Module element, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute GetCustomAttribute(class System.Reflection.Module element, class System.Type attributeType, bool inherit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Module" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
        <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
        <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
        <summary>Retrieves a custom attribute applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.</summary>
        <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example illustrates the use of the <xref:System.Attribute.GetCustomAttribute%2A> method taking a <xref:System.Reflection.Module> as a parameter.  
  
 [!code-cs[IsDefined#2](~/add/codesnippet/csharp/ec7cdda3-5fcd-46fd-a0c3-_1.cs)]
 [!code-cpp[IsDefined#2](~/add/codesnippet/cpp/ec7cdda3-5fcd-46fd-a0c3-_1.cpp)]
 [!code-vb[IsDefined#2](~/add/codesnippet/visualbasic/ec7cdda3-5fcd-46fd-a0c3-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttribute">
      <MemberSignature Language="C#" Value="public static Attribute GetCustomAttribute (System.Reflection.ParameterInfo element, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute GetCustomAttribute(class System.Reflection.ParameterInfo element, class System.Type attributeType, bool inherit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.ParameterInfo" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
        <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
        <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of `element` for custom attributes.</param>
        <summary>Retrieves a custom attribute applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</summary>
        <returns>A reference to the single custom attribute of type <paramref name="attributeType" /> that is applied to <paramref name="element" />, or <see langword="null" /> if there is no such attribute.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `element` represents a parameter in a method of a derived type, the return value includes the inheritable custom attributes applied to the same parameter in the overridden base methods.  
  
   
  
## Examples  
 The following code example defines a custom parameter <xref:System.Attribute> class and applies the custom attribute to a method in a derived class and the base of the derived class. The example shows the use of the <xref:System.Attribute.GetCustomAttribute%2A> method to return the attributes.  
  
 [!code-cpp[System.Attribute.GetCustomAttribute#3](~/add/codesnippet/cpp/40aae63c-fdd3-4772-89b6-_1.cpp)]
 [!code-cs[System.Attribute.GetCustomAttribute#3](~/add/codesnippet/csharp/40aae63c-fdd3-4772-89b6-_1.cs)]
 [!code-vb[System.Attribute.GetCustomAttribute#3](~/add/codesnippet/visualbasic/40aae63c-fdd3-4772-89b6-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">More than one of the requested attributes was found.</exception>
        <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.Assembly element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.Assembly element) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
        <summary>Retrieves an array of the custom attributes applied to an assembly. A parameter specifies the assembly.</summary>
        <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Starting with the .NET Framework version 2.0, this method returns security attributes if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 The following example retrieves the custom attributes found in the current assembly.  
  
 [!code-cpp[GetCustomAttributes#1](~/add/codesnippet/cpp/m-system.attribute.getcu_10_1.cpp)]
 [!code-cs[GetCustomAttributes#1](~/add/codesnippet/csharp/m-system.attribute.getcu_10_1.cs)]
 [!code-vb[GetCustomAttributes#1](~/add/codesnippet/visualbasic/m-system.attribute.getcu_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.MemberInfo element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.MemberInfo element) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class.</param>
        <summary>Retrieves an array of the custom attributes applied to a member of a type. A parameter specifies the member.</summary>
        <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value contains the custom attributes for ancestors of `element`.  
  
> [!NOTE]
>  Starting with the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 The following code example demonstrates the use of <xref:System.Attribute.GetCustomAttribute%2A>, taking a <xref:System.Reflection.MemberInfo> as a parameter.  
  
 [!code-cpp[GetCustomAttributes#4](~/add/codesnippet/cpp/m-system.attribute.getcu_2_1.cpp)]
 [!code-cs[GetCustomAttributes#4](~/add/codesnippet/csharp/m-system.attribute.getcu_2_1.cs)]
 [!code-vb[GetCustomAttributes#4](~/add/codesnippet/visualbasic/m-system.attribute.getcu_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> is <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
        <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.Module element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.Module element) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Module" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
        <summary>Retrieves an array of the custom attributes applied to a module. A parameter specifies the module.</summary>
        <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of <xref:System.Attribute.GetCustomAttributes%2A>, taking a <xref:System.Reflection.Module> as a parameter.  
  
 [!code-cpp[GetCustomAttributes#2](~/add/codesnippet/cpp/m-system.attribute.getcu_3_1.cpp)]
 [!code-cs[GetCustomAttributes#2](~/add/codesnippet/csharp/m-system.attribute.getcu_3_1.cs)]
 [!code-vb[GetCustomAttributes#2](~/add/codesnippet/visualbasic/m-system.attribute.getcu_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.ParameterInfo element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.ParameterInfo element) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.ParameterInfo" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
        <summary>Retrieves an array of the custom attributes applied to a method parameter. A parameter specifies the method parameter.</summary>
        <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `element` represents a parameter in a method of a derived type, the return value includes the inheritable custom attributes applied to the same parameter in the overridden base methods.  
  
   
  
## Examples  
 The following code example demonstrates the use of <xref:System.Attribute.GetCustomAttributes%2A>, taking a <xref:System.Reflection.ParameterInfo> as a parameter.  
  
 [!code-cpp[GetCustomAttributes#5](~/add/codesnippet/cpp/m-system.attribute.getcu_5_1.cpp)]
 [!code-cs[GetCustomAttributes#5](~/add/codesnippet/csharp/m-system.attribute.getcu_5_1.cs)]
 [!code-vb[GetCustomAttributes#5](~/add/codesnippet/visualbasic/m-system.attribute.getcu_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> is <see langword="null" />.</exception>
        <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.Assembly element, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.Assembly element, bool inherit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Assembly" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
        <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
        <summary>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and an ignored search option.</summary>
        <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Starting with the .NET Framework version 2.0, this method returns security attributes if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 The following code example demonstrates the use of <xref:System.Attribute.GetCustomAttributes%2A>, taking an <xref:System.Reflection.Assembly> as a parameter.  
  
 [!code-cpp[GetCustomAttributes#1](~/add/codesnippet/cpp/9309775f-431f-4ff7-a18b-_1.cpp)]
 [!code-cs[GetCustomAttributes#1](~/add/codesnippet/csharp/9309775f-431f-4ff7-a18b-_1.cs)]
 [!code-vb[GetCustomAttributes#1](~/add/codesnippet/visualbasic/9309775f-431f-4ff7-a18b-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.Assembly element, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.Assembly element, class System.Type attributeType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Assembly" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
        <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
        <summary>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, and the type of the custom attribute to search for.</summary>
        <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Starting with the .NET Framework version 2.0, this method returns security attributes if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 The following code example demonstrates the use of <xref:System.Attribute.GetCustomAttributes%2A>, taking an <xref:System.Reflection.Assembly> as a parameter.  
  
 [!code-cpp[GetCustomAttributes#1](~/add/codesnippet/cpp/m-system.attribute.getcu_4_1.cpp)]
 [!code-cs[GetCustomAttributes#1](~/add/codesnippet/csharp/m-system.attribute.getcu_4_1.cs)]
 [!code-vb[GetCustomAttributes#1](~/add/codesnippet/visualbasic/m-system.attribute.getcu_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.MemberInfo element, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.MemberInfo element, bool inherit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.MemberInfo" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class.</param>
        <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of `element` for custom attributes.</param>
        <summary>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</summary>
        <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value contains the custom attributes for ancestors of `element` if `inherit` is `true`.  
  
> [!NOTE]
>  Starting with the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 The following code example demonstrates the use of <xref:System.Attribute.GetCustomAttributes%2A>, taking a <xref:System.Reflection.MemberInfo> as a parameter.  
  
 [!code-cpp[GetCustomAttributes#4](~/add/codesnippet/cpp/f3608cd5-8828-444c-82b4-_1.cpp)]
 [!code-cs[GetCustomAttributes#4](~/add/codesnippet/csharp/f3608cd5-8828-444c-82b4-_1.cs)]
 [!code-vb[GetCustomAttributes#4](~/add/codesnippet/visualbasic/f3608cd5-8828-444c-82b4-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> is <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
        <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.MemberInfo element, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.MemberInfo element, class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.MemberInfo" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class.</param>
        <param name="type">The type, or a base type, of the custom attribute to search for.</param>
        <summary>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</summary>
        <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="type" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value contains the custom attributes for ancestors of `element`.  
  
> [!NOTE]
>  Starting with the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 The following code example demonstrates the use of <xref:System.Attribute.GetCustomAttribute%2A>, taking a <xref:System.Reflection.MemberInfo> as a parameter.  
  
 [!code-cpp[GetCustomAttributes#4](~/add/codesnippet/cpp/m-system.attribute.getcu_8_1.cpp)]
 [!code-cs[GetCustomAttributes#4](~/add/codesnippet/csharp/m-system.attribute.getcu_8_1.cs)]
 [!code-vb[GetCustomAttributes#4](~/add/codesnippet/visualbasic/m-system.attribute.getcu_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="type" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="type" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
        <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.Module element, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.Module element, bool inherit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Module" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
        <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
        <summary>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, and an ignored search option.</summary>
        <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value contains the custom attributes for ancestors of `element` if `inherit` is `true`.  
  
   
  
## Examples  
 The following code example demonstrates the use of <xref:System.Attribute.GetCustomAttributes%2A>, taking a <xref:System.Reflection.Module> as a parameter.  
  
 [!code-cpp[GetCustomAttributes#2](~/add/codesnippet/cpp/m-system.attribute.getcu_9_1.cpp)]
 [!code-cs[GetCustomAttributes#2](~/add/codesnippet/csharp/m-system.attribute.getcu_9_1.cs)]
 [!code-vb[GetCustomAttributes#2](~/add/codesnippet/visualbasic/m-system.attribute.getcu_9_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.Module element, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.Module element, class System.Type attributeType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Module" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
        <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
        <summary>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</summary>
        <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example demonstrates the use of <xref:System.Attribute.GetCustomAttributes%2A>, taking a <xref:System.Reflection.Module> as a parameter.  
  
 [!code-cpp[GetCustomAttributes#2](~/add/codesnippet/cpp/m-system.attribute.getcu_7_1.cpp)]
 [!code-cs[GetCustomAttributes#2](~/add/codesnippet/csharp/m-system.attribute.getcu_7_1.cs)]
 [!code-vb[GetCustomAttributes#2](~/add/codesnippet/visualbasic/m-system.attribute.getcu_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.ParameterInfo element, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.ParameterInfo element, bool inherit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.ParameterInfo" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
        <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of `element` for custom attributes.</param>
        <summary>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, and whether to search ancestors of the method parameter.</summary>
        <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `element` represents a parameter in a method of a derived type, the return value includes the inheritable custom attributes applied to the same parameter in the overridden base methods.  
  
   
  
## Examples  
 The following code example demonstrates the use of <xref:System.Attribute.GetCustomAttributes%2A>, taking a <xref:System.Reflection.ParameterInfo> as a parameter.  
  
 [!code-cpp[GetCustomAttributes#5](~/add/codesnippet/cpp/84f32889-592e-4454-8fea-_1.cpp)]
 [!code-cs[GetCustomAttributes#5](~/add/codesnippet/csharp/84f32889-592e-4454-8fea-_1.cs)]
 [!code-vb[GetCustomAttributes#5](~/add/codesnippet/visualbasic/84f32889-592e-4454-8fea-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The &lt;xref:System.Reflection.ParameterInfo.Member%2A&gt; property of <paramref name="element" /> is <see langword="null." /><see langword="" /></exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> is <see langword="null" />.</exception>
        <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.ParameterInfo element, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.ParameterInfo element, class System.Type attributeType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.ParameterInfo" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
        <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
        <summary>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</summary>
        <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `element` represents a parameter in a method of a derived type, the return value includes the inheritable custom attributes applied to the same parameter in the overridden base methods.  
  
   
  
## Examples  
 The following code example demonstrates the use of <xref:System.Attribute.GetCustomAttributes%2A>, taking a <xref:System.Reflection.ParameterInfo> as a parameter.  
  
 [!code-cpp[GetCustomAttributes#5](~/add/codesnippet/cpp/7d818251-7409-420e-9e53-_1.cpp)]
 [!code-cs[GetCustomAttributes#5](~/add/codesnippet/csharp/7d818251-7409-420e-9e53-_1.cs)]
 [!code-vb[GetCustomAttributes#5](~/add/codesnippet/visualbasic/7d818251-7409-420e-9e53-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.Assembly element, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.Assembly element, class System.Type attributeType, bool inherit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Assembly" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
        <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
        <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
        <summary>Retrieves an array of the custom attributes applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</summary>
        <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Starting with the .NET Framework version 2.0, this method returns security attributes if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 The following code example demonstrates the use of <xref:System.Attribute.GetCustomAttributes%2A>, taking an <xref:System.Reflection.Assembly> as a parameter.  
  
 [!code-cpp[GetCustomAttributes#1](~/add/codesnippet/cpp/f277bc87-fcfe-44af-8a88-_1.cpp)]
 [!code-cs[GetCustomAttributes#1](~/add/codesnippet/csharp/f277bc87-fcfe-44af-8a88-_1.cs)]
 [!code-vb[GetCustomAttributes#1](~/add/codesnippet/visualbasic/f277bc87-fcfe-44af-8a88-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.MemberInfo element, Type type, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.MemberInfo element, class System.Type type, bool inherit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.MemberInfo" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, or property member of a class.</param>
        <param name="type">The type, or a base type, of the custom attribute to search for.</param>
        <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of `element` for custom attributes.</param>
        <summary>Retrieves an array of the custom attributes applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</summary>
        <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="type" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value contains the custom attributes for ancestors of `element` if `inherit` is `true`.  
  
> [!NOTE]
>  Starting with the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if the attributes are stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 The following code example demonstrates the use of <xref:System.Attribute.GetCustomAttributes%2A>, taking a <xref:System.Reflection.MemberInfo> as a parameter.  
  
 [!code-cpp[GetCustomAttributes#4](~/add/codesnippet/cpp/f99aa1c6-ee1b-4c7c-8bb9-_1.cpp)]
 [!code-cs[GetCustomAttributes#4](~/add/codesnippet/csharp/f99aa1c6-ee1b-4c7c-8bb9-_1.cs)]
 [!code-vb[GetCustomAttributes#4](~/add/codesnippet/visualbasic/f99aa1c6-ee1b-4c7c-8bb9-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="type" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="type" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
        <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.Module element, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.Module element, class System.Type attributeType, bool inherit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Module" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
        <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
        <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
        <summary>Retrieves an array of the custom attributes applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.</summary>
        <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value contains the custom attributes for ancestors of `element` if `inherit` is `true`.  
  
   
  
## Examples  
 The following code example demonstrates the use of <xref:System.Attribute.GetCustomAttributes%2A>, taking a <xref:System.Reflection.Module> as a parameter.  
  
 [!code-cpp[GetCustomAttributes#2](~/add/codesnippet/cpp/930d1766-d889-4e14-8e66-_1.cpp)]
 [!code-cs[GetCustomAttributes#2](~/add/codesnippet/csharp/930d1766-d889-4e14-8e66-_1.cs)]
 [!code-vb[GetCustomAttributes#2](~/add/codesnippet/visualbasic/930d1766-d889-4e14-8e66-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.ParameterInfo element, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.ParameterInfo element, class System.Type attributeType, bool inherit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.ParameterInfo" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
        <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
        <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of `element` for custom attributes.</param>
        <summary>Retrieves an array of the custom attributes applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</summary>
        <returns>An <see cref="T:System.Attribute" /> array that contains the custom attributes of type <paramref name="attributeType" /> applied to <paramref name="element" />, or an empty array if no such custom attributes exist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `element` represents a parameter in a method of a derived type, the return value includes the inheritable custom attributes applied to the same parameter in the overridden base methods.  
  
   
  
## Examples  
 The following code example demonstrates the use of <xref:System.Attribute.GetCustomAttributes%2A>, taking a <xref:System.Reflection.ParameterInfo> as a parameter.  
  
 [!code-cpp[GetCustomAttributes#5](~/add/codesnippet/cpp/dab5cb4e-3dcc-4a65-8128-_1.cpp)]
 [!code-cs[GetCustomAttributes#5](~/add/codesnippet/csharp/dab5cb4e-3dcc-4a65-8128-_1.cs)]
 [!code-vb[GetCustomAttributes#5](~/add/codesnippet/visualbasic/dab5cb4e-3dcc-4a65-8128-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.TypeLoadException">A custom attribute type cannot be loaded.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for this instance.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example illustrates the use of GetHashCode in the context of <xref:System.Attribute>.  
  
 [!code-cs[GetHashCode#1](~/add/codesnippet/csharp/m-system.attribute.getha_1.cs)]
 [!code-vb[GetHashCode#1](~/add/codesnippet/visualbasic/m-system.attribute.getha_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsDefaultAttribute">
      <MemberSignature Language="C#" Value="public virtual bool IsDefaultAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDefaultAttribute() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden in a derived class, indicates whether the value of this instance is the default value for the derived class.</summary>
        <returns>
          <see langword="true" /> if this instance is the default attribute for the class; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The default implementation of this class returns `false`, and must be implemented in the derived class to be useful to that class.  
  
 The implementation of this method in a derived class compares the value of this instance to a standard default value, then returns a Boolean value that indicates whether the value of this instance is equal to the standard value. The standard value is typically coded as a constant in the implementation, or stored programmatically in a field used by the implementation.  
  
   
  
## Examples  
 The following code example illustrates the use of IsDefaultAttribute.  
  
 [!code-cs[IsDefaultAttribute#1](~/add/codesnippet/csharp/m-system.attribute.isdef_3_1.cs)]
 [!code-vb[IsDefaultAttribute#1](~/add/codesnippet/visualbasic/m-system.attribute.isdef_3_1.vb)]
 [!code-cpp[IsDefaultAttribute#1](~/add/codesnippet/cpp/m-system.attribute.isdef_3_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (System.Reflection.Assembly element, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Reflection.Assembly element, class System.Type attributeType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Assembly" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
        <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
        <summary>Determines whether any custom attributes are applied to an assembly. Parameters specify the assembly, and the type of the custom attribute to search for.</summary>
        <returns>
          <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Starting with the .NET Framework version 2.0, this method returns `true` if the assembly has security attributes stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 The following code example illustrates the use of <xref:System.Attribute.IsDefined%2A>, taking an <xref:System.Reflection.Assembly> as a parameter.  
  
 [!code-cs[IsDefined#1](~/add/codesnippet/csharp/m-system.attribute.isdef_2_1.cs)]
 [!code-cpp[IsDefined#1](~/add/codesnippet/cpp/m-system.attribute.isdef_2_1.cpp)]
 [!code-vb[IsDefined#1](~/add/codesnippet/visualbasic/m-system.attribute.isdef_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (System.Reflection.MemberInfo element, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Reflection.MemberInfo element, class System.Type attributeType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.MemberInfo" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, type, or property member of a class.</param>
        <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
        <summary>Determines whether any custom attributes are applied to a member of a type. Parameters specify the member, and the type of the custom attribute to search for.</summary>
        <returns>
          <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ancestors of `element` are searched for custom attributes.  
  
> [!NOTE]
>  Starting with the .NET Framework version 2.0, this method returns `true` if a type, method, or constructor has security attributes stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 The following code example illustrates the use of <xref:System.Attribute.IsDefined%2A>, taking a <xref:System.Reflection.MemberInfo> as a parameter.  
  
 [!code-cs[IsDefined#4](~/add/codesnippet/csharp/m-system.attribute.isdef_0_1.cs)]
 [!code-vb[IsDefined#4](~/add/codesnippet/visualbasic/m-system.attribute.isdef_0_1.vb)]
 [!code-cpp[IsDefined#4](~/add/codesnippet/cpp/m-system.attribute.isdef_0_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (System.Reflection.Module element, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Reflection.Module element, class System.Type attributeType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Module" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
        <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
        <summary>Determines whether any custom attributes of a specified type are applied to a module. Parameters specify the module, and the type of the custom attribute to search for.</summary>
        <returns>
          <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ancestors of `element` are not searched for custom attributes.  
  
   
  
## Examples  
 The following code example illustrates the use of <xref:System.Attribute.IsDefined%2A>, taking a <xref:System.Reflection.Module> as a parameter.  
  
 [!code-cs[IsDefined#2](~/add/codesnippet/csharp/m-system.attribute.isdef_1_1.cs)]
 [!code-cpp[IsDefined#2](~/add/codesnippet/cpp/m-system.attribute.isdef_1_1.cpp)]
 [!code-vb[IsDefined#2](~/add/codesnippet/visualbasic/m-system.attribute.isdef_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (System.Reflection.ParameterInfo element, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Reflection.ParameterInfo element, class System.Type attributeType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.ParameterInfo" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
        <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
        <summary>Determines whether any custom attributes are applied to a method parameter. Parameters specify the method parameter, and the type of the custom attribute to search for.</summary>
        <returns>
          <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ancestors of `element` are searched for custom attributes.  
  
   
  
## Examples  
 The following code example illustrates the use of <xref:System.Attribute.IsDefined%2A>, taking a <xref:System.Reflection.ParameterInfo> as a parameter.  
  
 [!code-cpp[IsDefined#5](~/add/codesnippet/cpp/m-system.attribute.isdef_4_1.cpp)]
 [!code-vb[IsDefined#5](~/add/codesnippet/visualbasic/m-system.attribute.isdef_4_1.vb)]
 [!code-cs[IsDefined#5](~/add/codesnippet/csharp/m-system.attribute.isdef_4_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (System.Reflection.Assembly element, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Reflection.Assembly element, class System.Type attributeType, bool inherit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Assembly" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.Assembly" /> class that describes a reusable collection of modules.</param>
        <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
        <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
        <summary>Determines whether any custom attributes are applied to an assembly. Parameters specify the assembly, the type of the custom attribute to search for, and an ignored search option.</summary>
        <returns>
          <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Starting with the .NET Framework version 2.0, this method returns `true` if the assembly has security attributes stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 The following code example illustrates the use of <xref:System.Attribute.IsDefined%2A>, taking an <xref:System.Reflection.Assembly> as a parameter.  
  
 [!code-cs[IsDefined#1](~/add/codesnippet/csharp/1332fff9-b832-40be-b558-_1.cs)]
 [!code-cpp[IsDefined#1](~/add/codesnippet/cpp/1332fff9-b832-40be-b558-_1.cpp)]
 [!code-vb[IsDefined#1](~/add/codesnippet/visualbasic/1332fff9-b832-40be-b558-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (System.Reflection.MemberInfo element, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Reflection.MemberInfo element, class System.Type attributeType, bool inherit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.MemberInfo" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.MemberInfo" /> class that describes a constructor, event, field, method, type, or property member of a class.</param>
        <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
        <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of `element` for custom attributes.</param>
        <summary>Determines whether any custom attributes are applied to a member of a type. Parameters specify the member, the type of the custom attribute to search for, and whether to search ancestors of the member.</summary>
        <returns>
          <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Starting with the .NET Framework version 2.0, this method returns `true` if a type, method, or constructor has security attributes stored in the new metadata format. Assemblies compiled with version 2.0 or later use the new format. Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format. See [Emitting Declarative Security Attributes](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 The following code example illustrates the use of <xref:System.Attribute.IsDefined%2A>, taking a <xref:System.Reflection.MemberInfo> as a parameter.  
  
 [!code-cs[IsDefined#4](~/add/codesnippet/csharp/06c081df-1af1-42ec-8f31-_1.cs)]
 [!code-vb[IsDefined#4](~/add/codesnippet/visualbasic/06c081df-1af1-42ec-8f31-_1.vb)]
 [!code-cpp[IsDefined#4](~/add/codesnippet/cpp/06c081df-1af1-42ec-8f31-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="element" /> is not a constructor, method, property, event, type, or field.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (System.Reflection.Module element, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Reflection.Module element, class System.Type attributeType, bool inherit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Module" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.Module" /> class that describes a portable executable file.</param>
        <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
        <param name="inherit">This parameter is ignored, and does not affect the operation of this method.</param>
        <summary>Determines whether any custom attributes are applied to a module. Parameters specify the module, the type of the custom attribute to search for, and an ignored search option.</summary>
        <returns>
          <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method ignores the `inherit` parameter and does not search the ancestors of `element` for custom attributes.  
  
   
  
## Examples  
 The following code example illustrates the use of <xref:System.Attribute.IsDefined%2A>, taking a <xref:System.Reflection.Module> as a parameter.  
  
 [!code-cs[IsDefined#2](~/add/codesnippet/csharp/855c870c-9a6e-4f3d-9d7b-_1.cs)]
 [!code-cpp[IsDefined#2](~/add/codesnippet/cpp/855c870c-9a6e-4f3d-9d7b-_1.cpp)]
 [!code-vb[IsDefined#2](~/add/codesnippet/visualbasic/855c870c-9a6e-4f3d-9d7b-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (System.Reflection.ParameterInfo element, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Reflection.ParameterInfo element, class System.Type attributeType, bool inherit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.ParameterInfo" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">An object derived from the <see cref="T:System.Reflection.ParameterInfo" /> class that describes a parameter of a member of a class.</param>
        <param name="attributeType">The type, or a base type, of the custom attribute to search for.</param>
        <param name="inherit">If <see langword="true" />, specifies to also search the ancestors of `element` for custom attributes.</param>
        <summary>Determines whether any custom attributes are applied to a method parameter. Parameters specify the method parameter, the type of the custom attribute to search for, and whether to search ancestors of the method parameter.</summary>
        <returns>
          <see langword="true" /> if a custom attribute of type <paramref name="attributeType" /> is applied to <paramref name="element" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following code example illustrates the use of <xref:System.Attribute.IsDefined%2A>, taking a <xref:System.Reflection.ParameterInfo> as a parameter.  
  
 [!code-cpp[IsDefined#5](~/add/codesnippet/cpp/38e014dd-1398-4700-849e-_1.cpp)]
 [!code-vb[IsDefined#5](~/add/codesnippet/visualbasic/38e014dd-1398-4700-849e-_1.vb)]
 [!code-cs[IsDefined#5](~/add/codesnippet/csharp/38e014dd-1398-4700-849e-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> or <paramref name="attributeType" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" /> is not derived from <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.ExecutionEngineException">
          <paramref name="element" /> is not a method, constructor, or type.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public virtual bool Match (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Match(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">An <see cref="T:System.Object" /> to compare with this instance of <see cref="T:System.Attribute" />.</param>
        <summary>When overridden in a derived class, returns a value that indicates whether this instance equals a specified object.</summary>
        <returns>
          <see langword="true" /> if this instance equals <paramref name="obj" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method determines if one <xref:System.Attribute> equals another. Its default implementation is the same as <xref:System.Attribute.Equals%2A>, which performs a value and reference comparison. Override this method to implement support for attribute values, such as flags or bit fields, that consist of components that are meaningful in themselves.  
  
 For example, consider an attribute whose value is a binary field divided into a bit field of flags. Two instances of this attribute have one flag in set in common while all the other flags differ. The <xref:System.Attribute.Equals%2A> method cannot determine that the two instances have the same flag set, but the Match method can.  
  
   
  
## Examples  
 The following code example illustrates the use of Match in the context of <xref:System.Attribute>.  
  
 [!code-cs[Match#1](~/add/codesnippet/csharp/m-system.attribute.match_1.cs)]
 [!code-vb[Match#1](~/add/codesnippet/visualbasic/m-system.attribute.match_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Attribute.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _Attribute.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Attribute.GetIDsOfNames(valuetype System.Guid riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">Reserved for future use. Must be IID_NULL.</param>
        <param name="rgszNames">Passed-in array of names to be mapped.</param>
        <param name="cNames">Count of the names to be mapped.</param>
        <param name="lcid">The locale context in which to interpret the names.</param>
        <param name="rgDispId">Caller-allocated array that receives the IDs corresponding to the names.</param>
        <summary>Maps a set of names to a corresponding set of dispatch identifiers.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Late-bound access using the COM `IDispatch` interface is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Attribute.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _Attribute.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Attribute.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">The type information to return.</param>
        <param name="lcid">The locale identifier for the type information.</param>
        <param name="ppTInfo">Receives a pointer to the requested type information object.</param>
        <summary>Retrieves the type information for an object, which can be used to get the type information for an interface.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Late-bound access using the COM `IDispatch` interface is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Attribute.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _Attribute.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Attribute.GetTypeInfoCount(unsigned int32 pcTInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">Points to a location that receives the number of type information interfaces provided by the object.</param>
        <summary>Retrieves the number of type information interfaces that an object provides (either 0 or 1).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Late-bound access using the COM `IDispatch` interface is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Attribute.Invoke">
      <MemberSignature Language="C#" Value="void _Attribute.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Attribute.Invoke(unsigned int32 dispIdMember, valuetype System.Guid riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">Identifies the member.</param>
        <param name="riid">Reserved for future use. Must be IID_NULL.</param>
        <param name="lcid">The locale context in which to interpret arguments.</param>
        <param name="wFlags">Flags describing the context of the call.</param>
        <param name="pDispParams">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</param>
        <param name="pVarResult">Pointer to the location where the result is to be stored.</param>
        <param name="pExcepInfo">Pointer to a structure that contains exception information.</param>
        <param name="puArgErr">The index of the first argument that has an error.</param>
        <summary>Provides access to properties and methods exposed by an object.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is for access to managed classes from unmanaged code, and should not be called from managed code. For more information about `IDispatch::Invoke`, see the MSDN Library.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Late-bound access using the COM `IDispatch` interface is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TypeId">
      <MemberSignature Language="C#" Value="public virtual object TypeId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TypeId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When implemented in a derived class, gets a unique identifier for this <see cref="T:System.Attribute" />.</summary>
        <value>An <see cref="T:System.Object" /> that is a unique identifier for the attribute.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 As implemented, this identifier is merely the <xref:System.Type> of the attribute. However, it is intended that the unique identifier be used to identify two attributes of the same type.  
  
   
  
## Examples  
 The following code example implements the TypeId property in a custom parameter <xref:System.Attribute> class and shows its use.  
  
 [!code-cpp[System.Attribute.TypeId#1](~/add/codesnippet/cpp/p-system.attribute.typeid_1.cpp)]
 [!code-vb[System.Attribute.TypeId#1](~/add/codesnippet/visualbasic/p-system.attribute.typeid_1.vb)]
 [!code-cs[System.Attribute.TypeId#1](~/add/codesnippet/csharp/p-system.attribute.typeid_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>