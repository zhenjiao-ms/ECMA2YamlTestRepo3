<Type Name="InvalidTimeZoneException" FullName="System.InvalidTimeZoneException">
  <TypeSignature Language="C#" Value="public class InvalidTimeZoneException : Exception" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit InvalidTimeZoneException extends System.Exception" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The exception that is thrown when time zone information is invalid.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This exception is thrown when a <xref:System.TimeZoneInfo> object contains invalid, incomplete, or missing data. It is thrown by the <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> method when a time zone is found in the registry but contains corrupted data. It can also be thrown by the <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> method under any of the following conditions:  
  
-   The adjustment rules overlap.  
  
-   The adjustment rules contain one or more null elements.  
  
-   The sum of the Coordinated Universal Time (UTC) offset and daylight delta is out of range. (It is either greater than 14 hours or less than -14 hours.)  
  
-   A single date has multiple adjustment rules applied to it.  
  
 This exception is not thrown to indicate that the time zone is not defined on a particular system; the <xref:System.TimeZoneNotFoundException> is used for this purpose.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidTimeZoneException ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.InvalidTimeZoneException" /> class with a system-supplied message.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This is the default constructor of the <xref:System.InvalidTimeZoneException> class. It initializes the <xref:System.Exception.Message%2A> property of the new instance to a system-supplied message that describes the error, such as "Exception of type 'System.InvalidTimeZoneException' was thrown." This message is localized for the current system culture.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidTimeZoneException (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">A string that describes the exception.</param>
        <summary>Initializes a new instance of the <see cref="T:System.InvalidTimeZoneException" /> class with the specified message string.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The string supplied as the `message` parameter is assigned to the <xref:System.Exception.Message%2A> property. It should be localized for the current culture.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InvalidTimeZoneException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">The object that contains the serialized data.</param>
        <param name="context">The stream that contains the serialized data.</param>
        <summary>Initializes a new instance of the <see cref="T:System.InvalidTimeZoneException" /> class from serialized data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor is not called directly by your code to instantiate the <xref:System.InvalidTimeZoneException> object. Instead, it is called by the <xref:System.Runtime.Serialization.IFormatter> object's <xref:System.Runtime.Serialization.IFormatter.Deserialize%2A> method when deserializing the <xref:System.InvalidTimeZoneException> object from a stream.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is <see langword="null" />.  
  
 -or-  
  
 The <paramref name="context" /> parameter is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InvalidTimeZoneException (string message, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string message, class System.Exception innerException) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">A string that describes the exception.</param>
        <param name="innerException">The exception that is the cause of the current exception.</param>
        <summary>Initializes a new instance of the <see cref="T:System.InvalidTimeZoneException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typically, you use this overload of the <xref:System.InvalidTimeZoneException> class to handle an exception in a `try`â€¦`catch` block. The `innerException` parameter should be a reference to the exception object handled in the `catch` block, or it can be `null`. This value is then assigned to the <xref:System.InvalidTimeZoneException> object's <xref:System.Exception.InnerException%2A> property.  
  
 The `message` string is assigned to the <xref:System.Exception.Message%2A> property. The string should be localized for the current culture.  
  
   
  
## Examples  
 The following code tries to retrieve a <xref:System.TimeZoneInfo> object that represents the Central Standard Time zone. If an <xref:System.InvalidTimeZoneException> occurs in the `RetrieveTimeZone` method call, the exception handler wraps the exception in a new <xref:System.InvalidTimeZoneException> object, which it returns to the caller. The caller's exception handler then displays information about both the outer and inner exceptions.  
  
 [!code-cs[System.TimeZoneNotFoundException.Class#1](~/add/codesnippet/csharp/m-system.invalidtimezone_1.cs)]
 [!code-vb[System.TimeZoneNotFoundException.Class#1](~/add/codesnippet/visualbasic/m-system.invalidtimezone_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>