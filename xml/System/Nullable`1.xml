<Type Name="Nullable&lt;T&gt;" FullName="System.Nullable&lt;T&gt;">
  <TypeSignature Language="C#" Value="public struct Nullable&lt;T&gt; where T : struct" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Nullable`1&lt;struct .ctor (class System.ValueType) T&gt; extends System.ValueType" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
        <BaseTypeName>System.ValueType</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T">To be added.</typeparam>
    <summary>Represents a value type that can be assigned <see langword="null" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A type is said to be nullable if it can be assigned a value or can be assigned `null`, which means the type has no value whatsoever. By default, all reference types, such as <xref:System.String>, are nullable, but all value types, such as <xref:System.Int32>, are not.  
  
 In C# and Visual Basic, you mark a value type as nullable by using the `?` notation after the value type. For example, `int?` in C# or `Integer?` in Visual Basic declares an integer value type that can be assigned `null`.  
  
 The Nullable(T) structure supports using only a value type as a nullable type because reference types are nullable by design.  
  
 The <xref:System.Nullable> class provides complementary support for the Nullable(T) structure. The <xref:System.Nullable> class supports obtaining the underlying type of a nullable type, and comparison and equality operations on pairs of nullable types whose underlying value type does not support generic comparison and equality operations.  
  
## Fundamental Properties  
 The two fundamental members of the Nullable(T) structure are the <xref:System.Nullable%601.HasValue%2A> and <xref:System.Nullable%601.Value%2A> properties. If the <xref:System.Nullable%601.HasValue%2A> property for a Nullable(T) object is `true`, the value of the object can be accessed with the <xref:System.Nullable%601.Value%2A> property. If the <xref:System.Nullable%601.HasValue%2A> property is `false`, the value of the object is undefined and an attempt to access the <xref:System.Nullable%601.Value%2A> property throws an <xref:System.InvalidOperationException>.  
  
## Boxing and Unboxing  
 When a nullable type is boxed, the common language runtime automatically boxes the underlying value of the Nullable(T) object, not the Nullable(T) object itself. That is, if the <xref:System.Nullable%601.HasValue%2A> property is `true`, the contents of the <xref:System.Nullable%601.Value%2A> property is boxed. When the underlying value of a nullable type is unboxed, the common language runtime creates a new Nullable(T) structure initialized to the underlying value.  
  
 If the `HasValue` property of a nullable type is `false`, the result of a boxing operation is `null`. Consequently, if a boxed nullable type is passed to a method that expects an object argument, that method must be prepared to handle the case where the argument is `null`. When `null` is unboxed into a nullable type, the common language runtime creates a new Nullable(T) structure and initializes its `HasValue` property to `false`.  
  
## [!INCLUDE[net_v451](~/add/includes/net-v451-md.md)] and Windows Runtime Components  
 Starting with the [!INCLUDE[net_v451](~/add/includes/net-v451-md.md)], you can include a Nullable(T) type as a member of a structure exported in a WinMD library. Previously, this was not supported.  
  
   
  
## Examples  
 The following code example defines three rows of a table in the Microsoft Pubs sample database. The table contains two columns that are not nullable and two columns that are nullable.  
  
 [!code-cs[system.nullableOfT.class#1](~/add/codesnippet/csharp/t-system.nullable`1_1.cs)]
 [!code-vb[system.nullableOfT.class#1](~/add/codesnippet/visualbasic/t-system.nullable`1_1.vb)]
 [!code-cpp[system.nullableOfT.class#1](~/add/codesnippet/cpp/t-system.nullable`1_1.cpp)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Nullable (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T value) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">A value type.</param>
        <summary>Initializes a new instance of the <see cref="System.Nullable%601" /> structure to the specified value.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Nullable(T) constructor initializes the <xref:System.Nullable%601.HasValue%2A> property of the new <xref:System.Nullable%601> object to `true`, and the <xref:System.Nullable%601.Value%2A> property to the value of the `value` parameter.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other">An object.</param>
        <summary>Indicates whether the current <see cref="System.Nullable%601" /> object is equal to a specified object.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="other" /> parameter is equal to the current <see cref="System.Nullable%601" /> object; otherwise, <see langword="false" />.  
  
 This table describes how equality is defined for the compared values:  
  
 <list type="table">  
<listheader>  
<term> Return Value  
  
 </term>  
<description> Description  
  
 </description>  
</listheader>  
<item>  
<term> <see langword="true" />  
  
 </term>  
<description> The <see cref="System.Nullable%601.HasValue%2A" /> property is <see langword="false" />, and the <paramref name="other" /> parameter is <see langword="null" />. That is, two null values are equal by definition.  
  
 -or-  
  
 The <see cref="System.Nullable%601.HasValue%2A" /> property is <see langword="true" />, and the value returned by the <see cref="System.Nullable%601.Value%2A" /> property is equal to the <paramref name="other" /> parameter.  
  
 </description>  
</item>  
<item>  
<term> <see langword="false" />  
  
 </term>  
<description> The <see cref="System.Nullable%601.HasValue%2A" /> property for the current <see cref="System.Nullable%601" /> structure is <see langword="true" />, and the <paramref name="other" /> parameter is <see langword="null" />.  
  
 -or-  
  
 The <see cref="System.Nullable%601.HasValue%2A" /> property for the current <see cref="System.Nullable%601" /> structure is <see langword="false" />, and the <paramref name="other" /> parameter is not <see langword="null" />.  
  
 -or-  
  
 The <see cref="System.Nullable%601.HasValue%2A" /> property for the current <see cref="System.Nullable%601" /> structure is <see langword="true" />, and the value returned by the <see cref="System.Nullable%601.Value%2A" /> property is not equal to the <paramref name="other" /> parameter.  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Nullable%601.HasValue%2A> property of the current <xref:System.Nullable%601> structure is `true` and the `other` argument is not `null`, equality is determined by passing the `other` parameter to the `Equals` method of the underlying value of the current <xref:System.Nullable%601> structure.  
  
   
  
## Examples  
 The following code example determines whether an object and a <xref:System.Nullable%601> object are equal to the current <xref:System.Nullable%601> object.  
  
 [!code-vb[system.nullableOfT.Equals#1](~/add/codesnippet/visualbasic/m-system.nullable`1.equa_1.vb)]
 [!code-cs[system.nullableOfT.Equals#1](~/add/codesnippet/csharp/m-system.nullable`1.equa_1.cs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves the hash code of the object returned by the <see cref="System.Nullable%601.Value%2A" /> property.</summary>
        <returns>The hash code of the object returned by the <see cref="System.Nullable%601.Value%2A" /> property if the <see cref="System.Nullable%601.HasValue%2A" /> property is <see langword="true" />, or zero if the <see cref="System.Nullable%601.HasValue%2A" /> property is <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValueOrDefault">
      <MemberSignature Language="C#" Value="public T GetValueOrDefault ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T GetValueOrDefault() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Retrieves the value of the current <see cref="System.Nullable%601" /> object, or the object's default value.</summary>
        <returns>The value of the <see cref="System.Nullable%601.Value%2A" /> property if the  <see cref="System.Nullable%601.HasValue%2A" /> property is <see langword="true" />; otherwise, the default value of the current <see cref="System.Nullable%601" /> object. The type of the default value is the type argument of the current <see cref="System.Nullable%601" /> object, and the value of the default value consists solely of binary zeroes.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Nullable%601.GetValueOrDefault%2A> method returns a value even if the <xref:System.Nullable%601.HasValue%2A> property is `false` (unlike the <xref:System.Nullable%601.Value%2A> property, which throws an exception).  
  
   
  
## Examples  
 The following code example retrieves the value of a <xref:System.Nullable%601> object if that value is defined; otherwise, it retrieves the default value or a specific default value.  
  
 [!code-cs[system.nullableOfT.GetValueOrDefault#1](~/add/codesnippet/csharp/m-system.nullable`1.getv_0_1.cs)]
 [!code-vb[system.nullableOfT.GetValueOrDefault#1](~/add/codesnippet/visualbasic/m-system.nullable`1.getv_0_1.vb)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValueOrDefault">
      <MemberSignature Language="C#" Value="public T GetValueOrDefault (T defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !T GetValueOrDefault(!T defaultValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="defaultValue" Type="T" />
      </Parameters>
      <Docs>
        <param name="defaultValue">A value to return if the <see cref="System.Nullable%601.HasValue%2A" /> property is <see langword="false" />.</param>
        <summary>Retrieves the value of the current <see cref="System.Nullable%601" /> object, or the specified default value.</summary>
        <returns>The value of the <see cref="System.Nullable%601.Value%2A" /> property if the <see cref="System.Nullable%601.HasValue%2A" /> property is <see langword="true" />; otherwise, the <paramref name="defaultValue" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Nullable%601.GetValueOrDefault%2A> method returns a value even if the <xref:System.Nullable%601.HasValue%2A> property is `false` (unlike the <xref:System.Nullable%601.Value%2A> property, which throws an exception).  
  
   
  
## Examples  
 The following code example retrieves the value of a <xref:System.Nullable%601> object if that value is defined; otherwise, it retrieves the default value or a specific default value.  
  
 [!code-cs[system.nullableOfT.GetValueOrDefault#1](~/add/codesnippet/csharp/m-system.nullable`1.getv_1_1.cs)]
 [!code-vb[system.nullableOfT.GetValueOrDefault#1](~/add/codesnippet/visualbasic/m-system.nullable`1.getv_1_1.vb)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasValue">
      <MemberSignature Language="C#" Value="public bool HasValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the current <see cref="System.Nullable%601" /> object has a valid value of its underlying type.</summary>
        <value>
          <see langword="true" /> if the current <see cref="System.Nullable%601" /> object has a value; <see langword="false" /> if the current <see cref="System.Nullable%601" /> object has no value.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the HasValue property is `true`, the value of the current <xref:System.Nullable%601> object can be accessed with the <xref:System.Nullable%601.Value%2A> property. Otherwise, attempting to access its value throws an <xref:System.InvalidOperationException> exception.  
  
   
  
## Examples  
 The following example uses the HasValue property of a `Nullable<Integer>` object to determine whether it should display the object's <xref:System.Nullable%601.Value%2A> property or its <xref:System.Nullable%601.GetValueOrDefault%2A> property.  
  
 [!code-cs[System.Nullable~1.HasValue#1](~/add/codesnippet/csharp/p-system.nullable`1.hasv_1.cs)]
 [!code-vb[System.Nullable~1.HasValue#1](~/add/codesnippet/visualbasic/p-system.nullable`1.hasv_1.vb)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static T op_Explicit (Nullable&lt;T&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname !T op_Explicit(valuetype System.Nullable`1&lt;!T&gt; value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Nullable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static Nullable&lt;T&gt; op_Implicit (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Nullable`1&lt;!T&gt; op_Implicit(!T value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the text representation of the value of the current <see cref="System.Nullable%601" /> object.</summary>
        <returns>The text representation of the value of the current <see cref="System.Nullable%601" /> object if the <see cref="System.Nullable%601.HasValue%2A" /> property is <see langword="true" />, or an empty string ("") if the <see cref="System.Nullable%601.HasValue%2A" /> property is <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ToString property returns the string yielded by calling the `ToString` property of the object returned by the <xref:System.Nullable%601.Value%2A> property.  
  
   
  
## Examples  
 The following code example displays the value of the current <xref:System.Nullable%601> object.  
  
 [!code-vb[system.nullableOfT.ToString#1](~/add/codesnippet/visualbasic/m-system.nullable`1.tost_1.vb)]
 [!code-cs[system.nullableOfT.ToString#1](~/add/codesnippet/csharp/m-system.nullable`1.tost_1.cs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public T Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the current <see cref="System.Nullable%601" /> object if it has been assigned a valid underlying value.</summary>
        <value>The value of the current <see cref="System.Nullable%601" /> object if the <see cref="System.Nullable%601.HasValue%2A" /> property is <see langword="true" />. An exception is thrown if the <see cref="System.Nullable%601.HasValue%2A" /> property is <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If a value of type `T` has not been assigned to the <xref:System.Nullable%601> object, you can compare it to `null` and retrieve its <xref:System.Nullable%601.HasValue%2A> property, but you cannot access its Value property or call its other members.  
  
   
  
## Examples  
 The following example uses the <xref:System.Nullable%601.HasValue%2A> property of a `Nullable<Integer>` object to determine whether it should display the object's Value property or its <xref:System.Nullable%601.GetValueOrDefault%2A> property.  
  
 [!code-cs[System.Nullable~1.HasValue#1](~/add/codesnippet/csharp/p-system.nullable`1.value_1.cs)]
 [!code-vb[System.Nullable~1.HasValue#1](~/add/codesnippet/visualbasic/p-system.nullable`1.value_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">The <see cref="System.Nullable%601.HasValue%2A" /> property is <see langword="false" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>