<Type Name="EventHandler" FullName="System.EventHandler">
  <TypeSignature Language="C#" Value="public delegate void EventHandler(object sender, EventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed EventHandler extends System.MulticastDelegate" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.EventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">The source of the event.</param>
    <param name="e">An object that contains no event data.</param>
    <summary>Represents the method that will handle an event that has no event data.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed:  
  
-   A delegate that identifies the method that provides the response to the event.  
  
-   Optionally, a class that holds the event data, if the event provides data.  
  
 The delegate is a type that defines a signature, that is, the return value type and parameter list types for a method. You can use the delegate type to declare a variable that can refer to any method with the same signature as the delegate.  
  
 The standard signature of an event handler delegate defines a method that does not return a value. This method's first parameter is of type <xref:System.Object> and refers to the instance that raises the event. Its second parameter is derived from type <xref:System.EventArgs> and holds the event data. If the event does not generate event data, the second parameter is simply the value of the <xref:System.EventArgs?displayProperty=fullName> field. Otherwise, the second parameter is a type derived from <xref:System.EventArgs> and supplies any fields or properties needed to hold the event data.  
  
 The EventHandler delegate is a predefined delegate that specifically represents an event handler method for an event that does not generate data. If your event does generate data, you must use the generic <xref:System.EventHandler%601> delegate class.  
  
 To associate the event with the method that will handle the event, add an instance of the delegate to the event. The event handler is called whenever the event occurs, unless you remove the delegate.  
  
 For more information about event handler delegates, see [Events](../Topic/Handling%20and%20Raising%20Events.md).  
  
   
  
## Examples  
 The following example shows an event named `ThresholdReached` that is associated with an EventHandler delegate. The method assigned to the EventHandler delegate is called in the `OnThresholdReached` method.  
  
 [!code-cs[EventsOverview#6](~/add/codesnippet/csharp/t-system.eventhandler_1.cs)]
 [!code-cpp[EventsOverview#6](~/add/codesnippet/cpp/t-system.eventhandler_1.cpp)]
 [!code-vb[EventsOverview#6](~/add/codesnippet/visualbasic/t-system.eventhandler_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
</Type>