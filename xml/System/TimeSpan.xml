<Type Name="TimeSpan" FullName="System.TimeSpan">
  <TypeSignature Language="C#" Value="public struct TimeSpan : IComparable, IComparable&lt;TimeSpan&gt;, IEquatable&lt;TimeSpan&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit TimeSpan extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.TimeSpan&gt;, class System.IEquatable`1&lt;valuetype System.TimeSpan&gt;, class System.IFormattable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.TimeSpan&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeSpan&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a time interval.  
  
 To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/timespan.cs#865ef7b89f41b632).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/timespan.cs#865ef7b89f41b632). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  
  
 A TimeSpan object represents a time interval (duration of time or elapsed time) that is measured as a positive or negative number of days, hours, minutes, seconds, and fractions of a second. The TimeSpan structure can also be used to represent the time of day, but only if the time is unrelated to a particular date. Otherwise, the <xref:System.DateTime> or <xref:System.DateTimeOffset> structure should be used instead. (For more information about using the TimeSpan structure to reflect the time of day, see [Choosing Between DateTime, DateTimeOffset, TimeSpan, and TimeZoneInfo](../Topic/Choosing%20Between%20DateTime,%20DateTimeOffset,%20TimeSpan,%20and%20TimeZoneInfo.md).)  
  
> [!NOTE]
>  A TimeSpan value represents a time interval and can be expressed as a particular number of days, hours, minutes, seconds, and milliseconds. Because it represents a general interval without reference to a particular start or end point, it cannot be expressed in terms of years and months, both of which have a variable number of days. It differs from a <xref:System.DateTime> value, which represents a date and time without reference to a particular time zone, or a <xref:System.DateTimeOffset> value, which represents a specific moment of time.  
  
 The largest unit of time that the TimeSpan structure uses to measure duration is a day. Time intervals are measured in days for consistency, because the number of days in larger units of time, such as months and years, varies.  
  
 The value of a TimeSpan object is the number of ticks that equal the represented time interval. A tick is equal to 100 nanoseconds, or one ten-millionth of a second. The value of a TimeSpan object can range from <xref:System.TimeSpan.MinValue?displayProperty=fullName> to <xref:System.TimeSpan.MaxValue?displayProperty=fullName>.  
  
## Instantiating a TimeSpan Value  
 You can instantiate a TimeSpan value in a number of ways:  
  
-   By calling its implicit default constructor. This creates an object whose value is <xref:System.TimeSpan.Zero?displayProperty=fullName>, as the following example shows.  
  
     [!code-cs[System.TimeSpan.Class#2](~/add/codesnippet/csharp/t-system.timespan_1.cs)]
     [!code-vb[System.TimeSpan.Class#2](~/add/codesnippet/visualbasic/t-system.timespan_1.vb)]  
  
-   By calling one of its explicit constructors. The following example initializes a TimeSpan value to a specified number of hours, minutes, and seconds.  
  
     [!code-cs[System.TimeSpan.Class#3](~/add/codesnippet/csharp/t-system.timespan_2.cs)]
     [!code-vb[System.TimeSpan.Class#3](~/add/codesnippet/visualbasic/t-system.timespan_2.vb)]  
  
-   By calling a method or performing an operation that returns a TimeSpan value. For example, you can instantiate a TimeSpan value that represents the interval between two date and time values, as the following example shows.  
  
     [!code-cs[System.TimeSpan.Class#4](~/add/codesnippet/csharp/t-system.timespan_3.cs)]
     [!code-vb[System.TimeSpan.Class#4](~/add/codesnippet/visualbasic/t-system.timespan_3.vb)]  
  
     You can also initialize a TimeSpan object to a zero time value in this way, as the following example shows.  
  
     [!code-cs[System.TimeSpan.Class#6](~/add/codesnippet/csharp/t-system.timespan_4.cs)]
     [!code-vb[System.TimeSpan.Class#6](~/add/codesnippet/visualbasic/t-system.timespan_4.vb)]  
  
     TimeSpan values are returned by arithmetic operators and methods of the <xref:System.DateTime>, <xref:System.DateTimeOffset>, and TimeSpan structures.  
  
-   By parsing the string representation of a TimeSpan value. You can use the <xref:System.TimeSpan.Parse%2A> and <xref:System.TimeSpan.TryParse%2A> methods to convert strings that contain time intervals to TimeSpan values. The following example uses the <xref:System.TimeSpan.Parse%2A> method to convert an array of strings to TimeSpan values.  
  
     [!code-cs[System.TimeSpan.Class#5](~/add/codesnippet/csharp/t-system.timespan_5.cs)]
     [!code-vb[System.TimeSpan.Class#5](~/add/codesnippet/visualbasic/t-system.timespan_5.vb)]  
  
     In addition, you can define the precise format of the input string to be parsed and converted to a TimeSpan value by calling the <xref:System.TimeSpan.ParseExact%2A> or <xref:System.TimeSpan.TryParseExact%2A> method.  
  
## Performing Operations on TimeSpan Values  
 You can add and subtract time durations either by using the <xref:System.TimeSpan.op_Addition%2A> and <xref:System.TimeSpan.op_Subtraction%2A> operators, or by calling the <xref:System.TimeSpan.Add%2A> and <xref:System.TimeSpan.Subtract%2A> methods. You can also compare two time durations by calling the <xref:System.TimeSpan.Compare%2A>, <xref:System.TimeSpan.CompareTo%2A>, and <xref:System.TimeSpan.Equals%2A> methods. The TimeSpan structure also includes the <xref:System.TimeSpan.Duration%2A> and <xref:System.TimeSpan.Negate%2A> methods, which convert time intervals to positive and negative values,  
  
 The range of TimeSpan values is <xref:System.TimeSpan.MinValue> to <xref:System.TimeSpan.MaxValue>.  
  
## Formatting a TimeSpan Value  
 A TimeSpan value can be represented as [*-*]*d*.*hh*:*mm*:*ss*.*ff*, where the optional minus sign indicates a negative time interval, the *d* component is days, *hh* is hours as measured on a 24-hour clock, *mm* is minutes, *ss* is seconds, and *ff* is fractions of a second. That is, a time interval consists of a positive or negative number of days without a time of day, or a number of days with a time of day, or only a time of day.  
  
 Beginning with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], the TimeSpan structure supports culture-sensitive formatting through the overloads of its <xref:System.TimeSpan.ToString%2A> method, which converts a TimeSpan value to its string representation. The default <xref:System.TimeSpan.ToString?displayProperty=fullName> method returns a time interval by using an invariant format that is identical to its return value in previous versions of the .NET Framework. The <xref:System.TimeSpan.ToString%28System.String%29?displayProperty=fullName> overload lets you specify a format string that defines the string representation of the time interval. The <xref:System.TimeSpan.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> overload lets you specify a format string and the culture whose formatting conventions are used to create the string representation of the time interval. TimeSpan supports both standard and custom format strings. (For more information, see [Standard TimeSpan Format Strings](../Topic/Standard%20TimeSpan%20Format%20Strings.md) and [Custom TimeSpan Format Strings](../Topic/Custom%20TimeSpan%20Format%20Strings.md).) However, only standard format strings are culture-sensitive.  
  
## Restoring Legacy TimeSpan Formatting  
 In some cases, code that successfully formats TimeSpan values in [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)] and earlier versions fails in [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]. This is most common in code that calls a [<TimeSpan_LegacyFormatMode> element](../Topic/%3CTimeSpan_LegacyFormatMode%3E%20Element.md) method to format a TimeSpan value with a format string. The following example successfully formats a TimeSpan value in [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)] and earlier versions, but throws an exception in [!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)] and later versions. Note that it attempts to format a TimeSpan value by using an unsupported format specifier, which is ignored in [!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)] and earlier versions.  
  
 [!code-vb[System.TimeSpan.Class.Legacy#1](~/add/codesnippet/visualbasic/t-system.timespan_6.vb)]
 [!code-cs[System.TimeSpan.Class.Legacy#1](~/add/codesnippet/csharp/t-system.timespan_6.cs)]  
  
 If you cannot modify the code, you can restore the legacy formatting of TimeSpan values in one of the following ways:  
  
-   By creating a configuration file that contains the [<TimeSpan_LegacyFormatMode> element](../Topic/%3CTimeSpan_LegacyFormatMode%3E%20Element.md). Setting this element's `enabled` attribute to `true` restores legacy TimeSpan formatting on a per-application basis.  
  
-   By setting the "NetFx40_TimeSpanLegacyFormatMode" compatibility switch when you create an application domain. This enables legacy TimeSpan formatting on a per-application-domain basis. The following example creates an application domain that uses legacy TimeSpan formatting.  
  
     [!code-cs[System.TimeSpan.Class.AppDomain#1](~/add/codesnippet/csharp/t-system.timespan_7.cs)]
     [!code-vb[System.TimeSpan.Class.AppDomain#1](~/add/codesnippet/visualbasic/t-system.timespan_7.vb)]  
  
     When the following code executes in the new application domain, it reverts to legacy TimeSpan formatting behavior.  
  
     [!code-vb[System.TimeSpan.Class.AppDomain#2](~/add/codesnippet/visualbasic/t-system.timespan_8.vb)]
     [!code-cs[System.TimeSpan.Class.AppDomain#2](~/add/codesnippet/csharp/t-system.timespan_8.cs)]  
  
   
  
## Examples  
 The following example instantiates a TimeSpan object that represents the difference between two dates. It then displays the TimeSpan object's properties.  
  
 [!code-vb[System.TimeSpan.Class#1](~/add/codesnippet/visualbasic/t-system.timespan_9.vb)]
 [!code-cs[System.TimeSpan.Class#1](~/add/codesnippet/csharp/t-system.timespan_9.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">A time period expressed in 100-nanosecond units.</param>
        <summary>Initializes a new instance of the <see cref="T:System.TimeSpan" /> structure to the specified number of ticks.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A single tick represents one hundred nanoseconds or one ten-millionth of a second. There are 10,000 ticks in a millisecond.  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects using the constructor overload that initializes a <xref:System.TimeSpan> to a specified number of ticks.  
  
 [!code-cs[System.TimeSpan.Ctor#1](~/add/codesnippet/csharp/m-system.timespan.sharpc_1_1.cs)]
 [!code-vb[System.TimeSpan.Ctor#1](~/add/codesnippet/visualbasic/m-system.timespan.sharpc_1_1.vb)]
 [!code-cpp[System.TimeSpan.Ctor#1](~/add/codesnippet/cpp/m-system.timespan.sharpc_1_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (int hours, int minutes, int seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 hours, int32 minutes, int32 seconds) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="hours" Type="System.Int32" />
        <Parameter Name="minutes" Type="System.Int32" />
        <Parameter Name="seconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hours">Number of hours.</param>
        <param name="minutes">Number of minutes.</param>
        <param name="seconds">Number of seconds.</param>
        <summary>Initializes a new instance of the <see cref="T:System.TimeSpan" /> structure to a specified number of hours, minutes, and seconds.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The specified `hours`, `minutes`, and `seconds` are converted to ticks, and that value initializes this instance.  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects using the constructor overload that initializes a <xref:System.TimeSpan> to a specified number of hours, minutes, and seconds.  
  
 [!code-cpp[System.TimeSpan.Ctor#2](~/add/codesnippet/cpp/m-system.timespan.sharpc_0_1.cpp)]
 [!code-vb[System.TimeSpan.Ctor#2](~/add/codesnippet/visualbasic/m-system.timespan.sharpc_0_1.vb)]
 [!code-cs[System.TimeSpan.Ctor#2](~/add/codesnippet/csharp/m-system.timespan.sharpc_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (int days, int hours, int minutes, int seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 days, int32 hours, int32 minutes, int32 seconds) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="days" Type="System.Int32" />
        <Parameter Name="hours" Type="System.Int32" />
        <Parameter Name="minutes" Type="System.Int32" />
        <Parameter Name="seconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="days">Number of days.</param>
        <param name="hours">Number of hours.</param>
        <param name="minutes">Number of minutes.</param>
        <param name="seconds">Number of seconds.</param>
        <summary>Initializes a new instance of the <see cref="T:System.TimeSpan" /> structure to a specified number of days, hours, minutes, and seconds.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The specified `days`, `hours`, `minutes`, and `seconds` are converted to ticks, and that value initializes this instance.  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects using the constructor overload that initializes a <xref:System.TimeSpan> to a specified number of days, hours, minutes, and seconds.  
  
 [!code-cpp[System.TimeSpan.Ctor#3](~/add/codesnippet/cpp/m-system.timespan.sharpc_2_1.cpp)]
 [!code-vb[System.TimeSpan.Ctor#3](~/add/codesnippet/visualbasic/m-system.timespan.sharpc_2_1.vb)]
 [!code-cs[System.TimeSpan.Ctor#3](~/add/codesnippet/csharp/m-system.timespan.sharpc_2_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (int days, int hours, int minutes, int seconds, int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 days, int32 hours, int32 minutes, int32 seconds, int32 milliseconds) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="days" Type="System.Int32" />
        <Parameter Name="hours" Type="System.Int32" />
        <Parameter Name="minutes" Type="System.Int32" />
        <Parameter Name="seconds" Type="System.Int32" />
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="days">Number of days.</param>
        <param name="hours">Number of hours.</param>
        <param name="minutes">Number of minutes.</param>
        <param name="seconds">Number of seconds.</param>
        <param name="milliseconds">Number of milliseconds.</param>
        <summary>Initializes a new instance of the <see cref="T:System.TimeSpan" /> structure to a specified number of days, hours, minutes, seconds, and milliseconds.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The specified `days`, `hours`, `minutes`, `seconds`, and `milliseconds` are converted to ticks, and that value initializes this instance.  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects using the constructor overload that initializes a <xref:System.TimeSpan> to a specified number of days, hours, minutes, seconds, and milliseconds.  
  
 [!code-cpp[System.TimeSpan.Ctor#4](~/add/codesnippet/cpp/a3da9c8d-85d2-41f3-9639-_1.cpp)]
 [!code-vb[System.TimeSpan.Ctor#4](~/add/codesnippet/visualbasic/a3da9c8d-85d2-41f3-9639-_1.vb)]
 [!code-cs[System.TimeSpan.Ctor#4](~/add/codesnippet/csharp/a3da9c8d-85d2-41f3-9639-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify a <see cref="T:System.TimeSpan" /> value less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public TimeSpan Add (TimeSpan ts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Add(valuetype System.TimeSpan ts) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ts" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ts">The time interval to add.</param>
        <summary>Returns a new <see cref="T:System.TimeSpan" /> object whose value is the sum of the specified <see cref="T:System.TimeSpan" /> object and this instance.</summary>
        <returns>A new object that represents the value of this instance plus the value of <paramref name="ts" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value must be between <xref:System.TimeSpan?displayProperty=fullName> and <xref:System.TimeSpan?displayProperty=fullName>; otherwise, an exception is thrown.  
  
 The return value is a new <xref:System.TimeSpan>; the original <xref:System.TimeSpan> is not modified.  
  
   
  
## Examples  
 The following example calls the Add method to add each element in an array of time intervals to a base <xref:System.TimeSpan> value.  
  
 [!code-cs[System.TimeSpan.Add#1](~/add/codesnippet/csharp/m-system.timespan.add-sy_1.cs)]
 [!code-vb[System.TimeSpan.Add#1](~/add/codesnippet/visualbasic/m-system.timespan.add-sy_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan" /> is less than <see cref="T:System.TimeSpan" /> or greater than <see cref="T:System.TimeSpan" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">The first time interval to compare.</param>
        <param name="t2">The second time interval to compare.</param>
        <summary>Compares two <see cref="T:System.TimeSpan" /> values and returns an integer that indicates whether the first value is shorter than, equal to, or longer than the second value.</summary>
        <returns>One of the following values.  
  
 <list type="table">  
<listheader>  
<term> Value  
  
 </term>  
<description> Description  
  
 </description>  
</listheader>  
<item>  
<term> -1  
  
 </term>  
<description> <paramref name="t1" /> is shorter than <paramref name="t2" />.  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> <paramref name="t1" /> is equal to <paramref name="t2" />.  
  
 </description>  
</item>  
<item>  
<term> 1  
  
 </term>  
<description> <paramref name="t1" /> is longer than <paramref name="t2" />.  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example uses the Compare method to compare several <xref:System.TimeSpan> objects with a <xref:System.TimeSpan> object whose value is a 2-hour time interval.  
  
 [!code-cs[System.TimeSpan.Compare#1](~/add/codesnippet/csharp/m-system.timespan.compar_1_1.cs)]
 [!code-vb[System.TimeSpan.Compare#1](~/add/codesnippet/visualbasic/m-system.timespan.compar_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object to compare, or <see langword="null" />.</param>
        <summary>Compares this instance to a specified object and returns an integer that indicates whether this instance is shorter than, equal to, or longer than the specified object.</summary>
        <returns>One of the following values.  
  
 <list type="table">  
<listheader>  
<term> Value  
  
 </term>  
<description> Description  
  
 </description>  
</listheader>  
<item>  
<term> -1  
  
 </term>  
<description> This instance is shorter than <paramref name="value" />.  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> This instance is equal to <paramref name="value" />.  
  
 </description>  
</item>  
<item>  
<term> 1  
  
 </term>  
<description> This instance is longer than <paramref name="value" />.  
  
 -or-  
  
 <paramref name="value" /> is <see langword="null" />.  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Any instance of <xref:System.TimeSpan>, regardless of its value, is considered greater than `null`.  
  
 The `value` parameter must be an instance of <xref:System.TimeSpan> or `null`; otherwise, an exception is thrown.  
  
   
  
## Examples  
 The following example compares several <xref:System.TimeSpan> structures and other objects to a reference <xref:System.TimeSpan> structure using the CompareTo method.  
  
 [!code-vb[System.TimeSpan.Compare_Equals#1](~/add/codesnippet/visualbasic/m-system.timespan.compar_0_1.vb)]
 [!code-cpp[System.TimeSpan.Compare_Equals#1](~/add/codesnippet/cpp/m-system.timespan.compar_0_1.cpp)]
 [!code-cs[System.TimeSpan.Compare_Equals#1](~/add/codesnippet/csharp/m-system.timespan.compar_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is not a <see cref="T:System.TimeSpan" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.TimeSpan value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">An object to compare to this instance.</param>
        <summary>Compares this instance to a specified <see cref="T:System.TimeSpan" /> object and returns an integer that indicates whether this instance is shorter than, equal to, or longer than the <see cref="T:System.TimeSpan" /> object.</summary>
        <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table">  
<listheader>  
<term> Value  
  
 </term>  
<description> Description  
  
 </description>  
</listheader>  
<item>  
<term> A negative integer  
  
 </term>  
<description> This instance is shorter than <paramref name="value" />.  
  
 </description>  
</item>  
<item>  
<term> Zero  
  
 </term>  
<description> This instance is equal to <paramref name="value" />.  
  
 </description>  
</item>  
<item>  
<term> A positive integer  
  
 </term>  
<description> This instance is longer than <paramref name="value" />.  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method implements the <xref:System.IComparable%601?displayProperty=fullName> interface and performs slightly better than the <xref:System.TimeSpan.CompareTo%2A?displayProperty=fullName> method because it does not have to convert the `value` parameter to an object.  
  
   
  
## Examples  
 The following example demonstrates generic and nongeneric versions of the <xref:System.TimeSpan.CompareTo%2A> method for several value and reference types.  
  
 [!code-vb[T.CompareTo#1](~/add/codesnippet/visualbasic/m-system.timespan.compar_2_1.vb)]
 [!code-cpp[T.CompareTo#1](~/add/codesnippet/cpp/m-system.timespan.compar_2_1.cpp)]
 [!code-cs[T.CompareTo#1](~/add/codesnippet/csharp/m-system.timespan.compar_2_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Days">
      <MemberSignature Language="C#" Value="public int Days { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Days" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the days component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
        <value>The day component of this instance. The return value can be positive or negative.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.TimeSpan> value can be represented as [*-*]*d*.*hh*:*mm*:*ss*.*ff*, where the optional minus sign indicates a negative time interval, the *d* component is days, *hh* is hours as measured on a 24-hour clock, *mm* is minutes, *ss* is seconds, and *ff* is fractions of a second. The value of the Days property is the day component, *d*.  
  
 The Days property represents whole days, whereas the <xref:System.TimeSpan.TotalDays%2A> property represents whole and fractional days.  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects and displays the Days property of each.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/add/codesnippet/cpp/p-system.timespan.days_1.cpp)]
 [!code-vb[System.TimeSpan.Properties#1](~/add/codesnippet/visualbasic/p-system.timespan.days_1.vb)]
 [!code-cs[System.TimeSpan.Properties#1](~/add/codesnippet/csharp/p-system.timespan.days_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public TimeSpan Duration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Duration() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a new <see cref="T:System.TimeSpan" /> object whose value is the absolute value of the current <see cref="T:System.TimeSpan" /> object.</summary>
        <returns>A new object whose value is the absolute value of the current <see cref="T:System.TimeSpan" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example applies the Duration method to several <xref:System.TimeSpan> objects.  
  
 [!code-cpp[System.TimeSpan.Dura_Nega_Unary#1](~/add/codesnippet/cpp/m-system.timespan.duration_1.cpp)]
 [!code-cs[System.TimeSpan.Dura_Nega_Unary#1](~/add/codesnippet/csharp/m-system.timespan.duration_1.cs)]
 [!code-vb[System.TimeSpan.Dura_Nega_Unary#1](~/add/codesnippet/visualbasic/m-system.timespan.duration_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">The value of this instance is <see cref="T:System.TimeSpan" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object to compare with this instance.</param>
        <summary>Returns a value indicating whether this instance is equal to a specified object.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is a <see cref="T:System.TimeSpan" /> object that represents the same time interval as the current <see cref="T:System.TimeSpan" /> structure; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example compares several <xref:System.TimeSpan> and other objects to a reference <xref:System.TimeSpan> using the Equals method.  
  
 [!code-vb[System.TimeSpan.Compare_Equals#1](~/add/codesnippet/visualbasic/m-system.timespan.equals_2_1.vb)]
 [!code-cpp[System.TimeSpan.Compare_Equals#1](~/add/codesnippet/cpp/m-system.timespan.equals_2_1.cpp)]
 [!code-cs[System.TimeSpan.Compare_Equals#1](~/add/codesnippet/csharp/m-system.timespan.equals_2_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeSpan obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.TimeSpan obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">An object to compare with this instance.</param>
        <summary>Returns a value indicating whether this instance is equal to a specified <see cref="T:System.TimeSpan" /> object.</summary>
        <returns>
          <see langword="true" /> if <paramref name="obj" /> represents the same time interval as this instance; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method implements the <xref:System.IEquatable%601?displayProperty=fullName> interface, and performs slightly better than <xref:System.TimeSpan.Equals%2A> because it does not have to convert the `obj` parameter to an object.  
  
   
  
## Examples  
 The following example demonstrates generic and nongeneric versions of the <xref:System.TimeSpan.CompareTo%2A> method for several value and reference types.  
  
 [!code-vb[T.CompareTo#1](~/add/codesnippet/visualbasic/m-system.timespan.equals_1_1.vb)]
 [!code-cpp[T.CompareTo#1](~/add/codesnippet/cpp/m-system.timespan.equals_1_1.cpp)]
 [!code-cs[T.CompareTo#1](~/add/codesnippet/csharp/m-system.timespan.equals_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">The first time interval to compare.</param>
        <param name="t2">The second time interval to compare.</param>
        <summary>Returns a value that indicates whether two specified instances of <see cref="T:System.TimeSpan" /> are equal.</summary>
        <returns>
          <see langword="true" /> if the values of <paramref name="t1" /> and <paramref name="t2" /> are equal; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example compares several <xref:System.TimeSpan> objects to a reference <xref:System.TimeSpan> object using the static Equals method.  
  
 [!code-cpp[System.TimeSpan.Compare_Equals#2](~/add/codesnippet/cpp/m-system.timespan.equals_0_1.cpp)]
 [!code-cs[System.TimeSpan.Compare_Equals#2](~/add/codesnippet/csharp/m-system.timespan.equals_0_1.cs)]
 [!code-vb[System.TimeSpan.Compare_Equals#2](~/add/codesnippet/visualbasic/m-system.timespan.equals_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FromDays">
      <MemberSignature Language="C#" Value="public static TimeSpan FromDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromDays(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of days, accurate to the nearest millisecond.</param>
        <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of days, where the specification is accurate to the nearest millisecond.</summary>
        <returns>An object that represents <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `value` parameter is converted to milliseconds, which is converted to ticks, and that number of ticks is used to initialize the new <xref:System.TimeSpan>. Therefore, `value` will only be considered accurate to the nearest millisecond. Note that, because of the loss of precision of the <xref:System.Double> data type, this conversion can cause an <xref:System.OverflowException> for values that are near to but still in the range of either <xref:System.TimeSpan.MinValue> or <xref:System.TimeSpan.MaxValue>. For example, this causes an <xref:System.OverflowException> in the following attempt to instantiate a <xref:System.TimeSpan> object.  
  
 [!code-cs[System.TimeSpan.FromMinutes#2](~/add/codesnippet/csharp/m-system.timespan.fromda_1.cs)]
 [!code-vb[System.TimeSpan.FromMinutes#2](~/add/codesnippet/visualbasic/m-system.timespan.fromda_1.vb)]  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects using the FromDays method.  
  
 [!code-cpp[System.TimeSpan.From#6](~/add/codesnippet/cpp/m-system.timespan.fromda_2.cpp)]
 [!code-vb[System.TimeSpan.From#6](~/add/codesnippet/visualbasic/m-system.timespan.fromda_2.vb)]
 [!code-cs[System.TimeSpan.From#6](~/add/codesnippet/csharp/m-system.timespan.fromda_2.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than <see cref="T:System.TimeSpan" /> or greater than <see cref="T:System.TimeSpan" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FromHours">
      <MemberSignature Language="C#" Value="public static TimeSpan FromHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromHours(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of hours accurate to the nearest millisecond.</param>
        <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of hours, where the specification is accurate to the nearest millisecond.</summary>
        <returns>An object that represents <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `value` parameter is converted to milliseconds, which is converted to ticks, and that number of ticks is used to initialize the new <xref:System.TimeSpan>. Therefore, `value` will only be considered accurate to the nearest millisecond. Note that, because of the loss of precision of the <xref:System.Double> data type, this conversion can generate an <xref:System.OverflowException> for values that are near to but still in the range of either <xref:System.TimeSpan.MinValue> or <xref:System.TimeSpan.MaxValue>. For example, this causes an <xref:System.OverflowException> in the following attempt to instantiate a <xref:System.TimeSpan> object.  
  
 [!code-cs[System.TimeSpan.FromMinutes#3](~/add/codesnippet/csharp/m-system.timespan.fromho_1.cs)]
 [!code-vb[System.TimeSpan.FromMinutes#3](~/add/codesnippet/visualbasic/m-system.timespan.fromho_1.vb)]  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects using the FromHours method.  
  
 [!code-cpp[System.TimeSpan.From#5](~/add/codesnippet/cpp/m-system.timespan.fromho_2.cpp)]
 [!code-vb[System.TimeSpan.From#5](~/add/codesnippet/visualbasic/m-system.timespan.fromho_2.vb)]
 [!code-cs[System.TimeSpan.From#5](~/add/codesnippet/csharp/m-system.timespan.fromho_2.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than <see cref="T:System.TimeSpan" /> or greater than <see cref="T:System.TimeSpan" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FromMilliseconds">
      <MemberSignature Language="C#" Value="public static TimeSpan FromMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromMilliseconds(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of milliseconds.</param>
        <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of milliseconds.</summary>
        <returns>An object that represents <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `value` parameter is converted to ticks, and that number of ticks is used to initialize the new <xref:System.TimeSpan>. Therefore, `value` will only be considered accurate to the nearest millisecond. Note that, because of the loss of precision of the <xref:System.Double> data type, this conversion can generate an <xref:System.OverflowException> for values that are near to but still in the range of either <xref:System.TimeSpan.MinValue> or <xref:System.TimeSpan.MaxValue>. For example, this causes an <xref:System.OverflowException> in the following attempt to instantiate a <xref:System.TimeSpan> object.  
  
 [!code-cs[System.TimeSpan.FromMinutes#4](~/add/codesnippet/csharp/m-system.timespan.frommi_1_1.cs)]
 [!code-vb[System.TimeSpan.FromMinutes#4](~/add/codesnippet/visualbasic/m-system.timespan.frommi_1_1.vb)]  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects by using the FromMilliseconds method.  
  
 [!code-cs[System.TimeSpan.From#2](~/add/codesnippet/csharp/m-system.timespan.frommi_1_2.cs)]
 [!code-cpp[System.TimeSpan.From#2](~/add/codesnippet/cpp/m-system.timespan.frommi_1_2.cpp)]
 [!code-vb[System.TimeSpan.From#2](~/add/codesnippet/visualbasic/m-system.timespan.frommi_1_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than <see cref="T:System.TimeSpan" /> or greater than <see cref="T:System.TimeSpan" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FromMinutes">
      <MemberSignature Language="C#" Value="public static TimeSpan FromMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromMinutes(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of minutes, accurate to the nearest millisecond.</param>
        <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of minutes, where the specification is accurate to the nearest millisecond.</summary>
        <returns>An object that represents <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `value` parameter is converted to milliseconds, which is converted to ticks, and that number of ticks is used to initialize the new <xref:System.TimeSpan>. Therefore, `value` will only be considered accurate to the nearest millisecond. Note that, because of the loss of precision of the <xref:System.Double> data type, this conversion can generate an <xref:System.OverflowException> for values that are near to but still in the range of either <xref:System.TimeSpan.MinValue> or <xref:System.TimeSpan.MaxValue>. For example, this causes an <xref:System.OverflowException> in the following attempt to instantiate a <xref:System.TimeSpan> object.  
  
 [!code-cs[System.TimeSpan.FromMinutes#1](~/add/codesnippet/csharp/m-system.timespan.frommi_0_1.cs)]
 [!code-vb[System.TimeSpan.FromMinutes#1](~/add/codesnippet/visualbasic/m-system.timespan.frommi_0_1.vb)]  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects using the FromMinutes method.  
  
 [!code-vb[System.TimeSpan.From#4](~/add/codesnippet/visualbasic/m-system.timespan.frommi_0_2.vb)]
 [!code-cs[System.TimeSpan.From#4](~/add/codesnippet/csharp/m-system.timespan.frommi_0_2.cs)]
 [!code-cpp[System.TimeSpan.From#4](~/add/codesnippet/cpp/m-system.timespan.frommi_0_2.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than <see cref="T:System.TimeSpan" /> or greater than <see cref="T:System.TimeSpan" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FromSeconds">
      <MemberSignature Language="C#" Value="public static TimeSpan FromSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromSeconds(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">A number of seconds, accurate to the nearest millisecond.</param>
        <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified number of seconds, where the specification is accurate to the nearest millisecond.</summary>
        <returns>An object that represents <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `value` parameter is converted to milliseconds, which is converted to ticks, and that number of ticks is used to intialize the new <xref:System.TimeSpan>. Therefore, `value` will only be considered accurate to the nearest millisecond. Note that, because of the loss of precision of the <xref:System.Double> data type, this can generate an <xref:System.OverflowException> for values that are near but still in the range of either  <xref:System.TimeSpan.MinValue> or <xref:System.TimeSpan.MaxValue>, This is the cause of an <xref:System.OverflowException>, for example, in the following attempt to instantiate a <xref:System.TimeSpan> object.  
  
 [!code-cs[System.TimeSpan.FromMinutes#5](~/add/codesnippet/csharp/m-system.timespan.fromse_1.cs)]
 [!code-vb[System.TimeSpan.FromMinutes#5](~/add/codesnippet/visualbasic/m-system.timespan.fromse_1.vb)]  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects using the FromSeconds method.  
  
 [!code-cpp[System.TimeSpan.From#3](~/add/codesnippet/cpp/m-system.timespan.fromse_2.cpp)]
 [!code-vb[System.TimeSpan.From#3](~/add/codesnippet/visualbasic/m-system.timespan.fromse_2.vb)]
 [!code-cs[System.TimeSpan.From#3](~/add/codesnippet/csharp/m-system.timespan.fromse_2.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than <see cref="T:System.TimeSpan" /> or greater than <see cref="T:System.TimeSpan" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.PositiveInfinity" />.  
  
 -or-  
  
 <paramref name="value" /> is <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is equal to <see cref="F:System.Double.NaN" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FromTicks">
      <MemberSignature Language="C#" Value="public static TimeSpan FromTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromTicks(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">A number of ticks that represent a time.</param>
        <summary>Returns a <see cref="T:System.TimeSpan" /> that represents a specified time, where the specification is in units of ticks.</summary>
        <returns>An object that represents <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This is a convenience method with the same behavior as the <xref:System.TimeSpan.%23ctor%28System.Int64%29?displayProperty=fullName> constructor. A single tick represents one hundred nanoseconds or one ten-millionth of a second. There are 10,000 ticks in a millisecond.  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects using the FromTicks method.  
  
 [!code-vb[System.TimeSpan.From#1](~/add/codesnippet/visualbasic/m-system.timespan.fromti_1.vb)]
 [!code-cs[System.TimeSpan.From#1](~/add/codesnippet/csharp/m-system.timespan.fromti_1.cs)]
 [!code-cpp[System.TimeSpan.From#1](~/add/codesnippet/cpp/m-system.timespan.fromti_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a hash code for this instance.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Two <xref:System.TimeSpan> objects might have the same hash code even though they represent different time values.  
  
   
  
## Examples  
 The following example generates the hash codes of several <xref:System.TimeSpan> objects using the GetHashCode method.  
  
 [!code-cpp[System.TimeSpan.GetHashCode#1](~/add/codesnippet/cpp/m-system.timespan.gethas_1.cpp)]
 [!code-cs[System.TimeSpan.GetHashCode#1](~/add/codesnippet/csharp/m-system.timespan.gethas_1.cs)]
 [!code-vb[System.TimeSpan.GetHashCode#1](~/add/codesnippet/visualbasic/m-system.timespan.gethas_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Hours">
      <MemberSignature Language="C#" Value="public int Hours { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hours" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the hours component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
        <value>The hour component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -23 through 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.TimeSpan> value can be represented as [*-*]*d*.*hh*:*mm*:*ss*.*ff*, where the optional minus sign indicates a negative time interval, the *d* component is days, *hh* is hours as measured on a 24-hour clock, *mm* is minutes, *ss* is seconds, and *ff* is fractions of a second. The value of the Hours property is the hours component, *hh*.  
  
 The Hours property represents whole hours, whereas the <xref:System.TimeSpan.TotalHours%2A> property represents whole and fractional hours.  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects and displays the Hours property of each.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/add/codesnippet/cpp/p-system.timespan.hours_1.cpp)]
 [!code-vb[System.TimeSpan.Properties#1](~/add/codesnippet/visualbasic/p-system.timespan.hours_1.vb)]
 [!code-cs[System.TimeSpan.Properties#1](~/add/codesnippet/csharp/p-system.timespan.hours_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the maximum <see cref="T:System.TimeSpan" /> value. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this field is equivalent to <xref:System.Int64.MaxValue?displayProperty=fullName> ticks. The string representation of this value is positive 10675199.02:48:05.4775807, or slightly more than 10,675,199 days.  
  
   
  
## Examples  
 The following example references and displays the value of the MaxValue field.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/add/codesnippet/cpp/f-system.timespan.maxvalue_1.cpp)]
 [!code-cs[System.TimeSpan.Fields#1](~/add/codesnippet/csharp/f-system.timespan.maxvalue_1.cs)]
 [!code-vb[System.TimeSpan.Fields#1](~/add/codesnippet/visualbasic/f-system.timespan.maxvalue_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Milliseconds">
      <MemberSignature Language="C#" Value="public int Milliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Milliseconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the milliseconds component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
        <value>The millisecond component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -999 through 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.TimeSpan> value can be represented as [*-*]*d*.*hh*:*mm*:*ss*.*ff*, where the optional minus sign indicates a negative time interval, the *d* component is days, *hh* is hours as measured on a 24-hour clock, *mm* is minutes, *ss* is seconds, and *ff* is fractions of a second. The value of the Milliseconds property is the fractional second component, *ff*.  
  
 The Milliseconds property represents whole milliseconds, whereas the <xref:System.TimeSpan.TotalMilliseconds%2A> property represents whole and fractional milliseconds.  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects and displays the Milliseconds property of each.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/add/codesnippet/cpp/p-system.timespan.millis_1.cpp)]
 [!code-vb[System.TimeSpan.Properties#1](~/add/codesnippet/visualbasic/p-system.timespan.millis_1.vb)]
 [!code-cs[System.TimeSpan.Properties#1](~/add/codesnippet/csharp/p-system.timespan.millis_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Minutes">
      <MemberSignature Language="C#" Value="public int Minutes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minutes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the minutes component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
        <value>The minute component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -59 through 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.TimeSpan> value can be represented as [*-*]*d*.*hh*:*mm*:*ss*.*ff*, where the optional minus sign indicates a negative time interval, the *d* component is days, *hh* is hours as measured on a 24-hour clock, *mm* is minutes, *ss* is seconds, and *ff* is fractions of a second. The value of the Minutes property is the minute component, *mm*.  
  
 The Minutes property represents whole minutes, whereas the <xref:System.TimeSpan.TotalMinutes%2A> property represents whole and fractional minutes.  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects and displays the Minutes property of each.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/add/codesnippet/cpp/p-system.timespan.minutes_1.cpp)]
 [!code-vb[System.TimeSpan.Properties#1](~/add/codesnippet/visualbasic/p-system.timespan.minutes_1.vb)]
 [!code-cs[System.TimeSpan.Properties#1](~/add/codesnippet/csharp/p-system.timespan.minutes_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the minimum <see cref="T:System.TimeSpan" /> value. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this field is equivalent to <xref:System.Int64.MinValue?displayProperty=fullName> ticks. The string representation of this value is negative 10675199.02:48:05.4775808, or slightly more than negative 10,675,199 days.  
  
   
  
## Examples  
 The following example references and displays the value of the MinValue field.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/add/codesnippet/cpp/f-system.timespan.minvalue_1.cpp)]
 [!code-cs[System.TimeSpan.Fields#1](~/add/codesnippet/csharp/f-system.timespan.minvalue_1.cs)]
 [!code-vb[System.TimeSpan.Fields#1](~/add/codesnippet/visualbasic/f-system.timespan.minvalue_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public TimeSpan Negate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Negate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a new <see cref="T:System.TimeSpan" /> object whose value is the negated value of this instance.</summary>
        <returns>A new object with the same numeric value as this instance, but with the opposite sign.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example applies the Negate method to several <xref:System.TimeSpan> objects.  
  
 [!code-cpp[System.TimeSpan.Dura_Nega_Unary#1](~/add/codesnippet/cpp/m-system.timespan.negate_1.cpp)]
 [!code-cs[System.TimeSpan.Dura_Nega_Unary#1](~/add/codesnippet/csharp/m-system.timespan.negate_1.cs)]
 [!code-vb[System.TimeSpan.Dura_Nega_Unary#1](~/add/codesnippet/visualbasic/m-system.timespan.negate_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan" />; that is, the value of this instance is <see cref="T:System.TimeSpan" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static TimeSpan op_Addition (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Addition(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">The first time interval to add.</param>
        <param name="t2">The second time interval to add.</param>
        <summary>Adds two specified <see cref="T:System.TimeSpan" /> instances.</summary>
        <returns>An object whose value is the sum of the values of <paramref name="t1" /> and <paramref name="t2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Addition method defines the addition operator for <xref:System.TimeSpan> values. It enables code such as the following:  
  
 [!code-cs[System.TimeSpan.Operators#1](~/add/codesnippet/csharp/m-system.timespan.op-add_1.cs)]
 [!code-vb[System.TimeSpan.Operators#1](~/add/codesnippet/visualbasic/m-system.timespan.op-add_1.vb)]  
  
 Languages that do not support custom operators can call the <xref:System.TimeSpan.Add%2A> method instead.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">The resulting <see cref="T:System.TimeSpan" /> is less than <see cref="T:System.TimeSpan" /> or greater than <see cref="T:System.TimeSpan" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">The first time interval to compare.</param>
        <param name="t2">The second time interval to compare.</param>
        <summary>Indicates whether two <see cref="T:System.TimeSpan" /> instances are equal.</summary>
        <returns>
          <see langword="true" /> if the values of <paramref name="t1" /> and <paramref name="t2" /> are equal; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example compares several <xref:System.TimeSpan> objects to a reference <xref:System.TimeSpan> using the Equality operator.  
  
 [!code-cs[System.TimeSpan.RelationalOps#1](~/add/codesnippet/csharp/m-system.timespan.op-equ_1.cs)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/add/codesnippet/visualbasic/m-system.timespan.op-equ_1.vb)]
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/add/codesnippet/cpp/m-system.timespan.op-equ_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThan (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">The first time interval to compare.</param>
        <param name="t2">The second time interval to compare.</param>
        <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is greater than another specified <see cref="T:System.TimeSpan" />.</summary>
        <returns>
          <see langword="true" /> if the value of <paramref name="t1" /> is greater than the value of <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example compares several <xref:System.TimeSpan> objects to a reference <xref:System.TimeSpan> using the GreaterThan operator.  
  
 [!code-cs[System.TimeSpan.RelationalOps#1](~/add/codesnippet/csharp/m-system.timespan.op-gre_1_1.cs)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/add/codesnippet/visualbasic/m-system.timespan.op-gre_1_1.vb)]
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/add/codesnippet/cpp/m-system.timespan.op-gre_1_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThanOrEqual (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">The first time interval to compare.</param>
        <param name="t2">The second time interval to compare.</param>
        <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is greater than or equal to another specified <see cref="T:System.TimeSpan" />.</summary>
        <returns>
          <see langword="true" /> if the value of <paramref name="t1" /> is greater than or equal to the value of <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example compares several <xref:System.TimeSpan> objects to a reference <xref:System.TimeSpan> using the GreaterThanOrEqual operator.  
  
 [!code-cs[System.TimeSpan.RelationalOps#1](~/add/codesnippet/csharp/m-system.timespan.op-gre_0_1.cs)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/add/codesnippet/visualbasic/m-system.timespan.op-gre_0_1.vb)]
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/add/codesnippet/cpp/m-system.timespan.op-gre_0_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">The first time interval to compare.</param>
        <param name="t2">The second time interval to compare.</param>
        <summary>Indicates whether two <see cref="T:System.TimeSpan" /> instances are not equal.</summary>
        <returns>
          <see langword="true" /> if the values of <paramref name="t1" /> and <paramref name="t2" /> are not equal; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example compares several <xref:System.TimeSpan> objects to a reference <xref:System.TimeSpan> using the Inequality operator.  
  
 [!code-cs[System.TimeSpan.RelationalOps#1](~/add/codesnippet/csharp/m-system.timespan.op-ine_1.cs)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/add/codesnippet/visualbasic/m-system.timespan.op-ine_1.vb)]
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/add/codesnippet/cpp/m-system.timespan.op-ine_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool op_LessThan (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">The first time interval to compare.</param>
        <param name="t2">The second time interval to compare.</param>
        <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is less than another specified <see cref="T:System.TimeSpan" />.</summary>
        <returns>
          <see langword="true" /> if the value of <paramref name="t1" /> is less than the value of <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example compares several <xref:System.TimeSpan> objects to a reference <xref:System.TimeSpan> using the LessThan operator.  
  
 [!code-cs[System.TimeSpan.RelationalOps#1](~/add/codesnippet/csharp/m-system.timespan.op-les_0_1.cs)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/add/codesnippet/visualbasic/m-system.timespan.op-les_0_1.vb)]
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/add/codesnippet/cpp/m-system.timespan.op-les_0_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_LessThanOrEqual (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">The first time interval to compare.</param>
        <param name="t2">The second time interval to compare.</param>
        <summary>Indicates whether a specified <see cref="T:System.TimeSpan" /> is less than or equal to another specified <see cref="T:System.TimeSpan" />.</summary>
        <returns>
          <see langword="true" /> if the value of <paramref name="t1" /> is less than or equal to the value of <paramref name="t2" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example compares several <xref:System.TimeSpan> objects to a reference <xref:System.TimeSpan> using the LessThanOrEqual operator.  
  
 [!code-cs[System.TimeSpan.RelationalOps#1](~/add/codesnippet/csharp/m-system.timespan.op-les_1_1.cs)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/add/codesnippet/visualbasic/m-system.timespan.op-les_1_1.vb)]
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/add/codesnippet/cpp/m-system.timespan.op-les_1_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan op_Subtraction (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">The minuend.</param>
        <param name="t2">The subtrahend.</param>
        <summary>Subtracts a specified <see cref="T:System.TimeSpan" /> from another specified <see cref="T:System.TimeSpan" />.</summary>
        <returns>An object whose value is the result of the value of <paramref name="t1" /> minus the value of <paramref name="t2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example uses the <xref:System.TimeSpan> subtraction operator to calculate the total length of the weekly work day. It also uses the <xref:System.TimeSpan> addition operator to compute the total time of the daily breaks before using it in a subtraction operation to compute the total actual daily working time.  
  
 [!code-vb[System.TimeSpan.Operators#2](~/add/codesnippet/visualbasic/m-system.timespan.op-sub_1.vb)]
 [!code-cs[System.TimeSpan.Operators#2](~/add/codesnippet/csharp/m-system.timespan.op-sub_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">The return value is less than <see cref="T:System.TimeSpan" /> or greater than <see cref="T:System.TimeSpan" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static TimeSpan op_UnaryNegation (TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_UnaryNegation(valuetype System.TimeSpan t) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t">The time interval to be negated.</param>
        <summary>Returns a <see cref="T:System.TimeSpan" /> whose value is the negated value of the specified instance.</summary>
        <returns>An object that has the same numeric value as this instance, but the opposite sign.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example applies the UnaryNegation operator to several <xref:System.TimeSpan> objects.  
  
 [!code-cpp[System.TimeSpan.Dura_Nega_Unary#1](~/add/codesnippet/cpp/m-system.timespan.op-una_0_1.cpp)]
 [!code-cs[System.TimeSpan.Dura_Nega_Unary#1](~/add/codesnippet/csharp/m-system.timespan.op-una_0_1.cs)]
 [!code-vb[System.TimeSpan.Dura_Nega_Unary#1](~/add/codesnippet/visualbasic/m-system.timespan.op-una_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">The negated value of this instance cannot be represented by a <see cref="T:System.TimeSpan" />; that is, the value of this instance is <see cref="T:System.TimeSpan" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryPlus">
      <MemberSignature Language="C#" Value="public static TimeSpan op_UnaryPlus (TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_UnaryPlus(valuetype System.TimeSpan t) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t">The time interval to return.</param>
        <summary>Returns the specified instance of <see cref="T:System.TimeSpan" />.</summary>
        <returns>The time interval specified by <paramref name="t" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example applies the UnaryPlus operator to several <xref:System.TimeSpan> objects.  
  
 [!code-cpp[System.TimeSpan.Dura_Nega_Unary#1](~/add/codesnippet/cpp/m-system.timespan.op-una_1_1.cpp)]
 [!code-cs[System.TimeSpan.Dura_Nega_Unary#1](~/add/codesnippet/csharp/m-system.timespan.op-una_1_1.cs)]
 [!code-vb[System.TimeSpan.Dura_Nega_Unary#1](~/add/codesnippet/visualbasic/m-system.timespan.op-una_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static TimeSpan Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan Parse(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">A string that specifies the time interval to convert.</param>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent.</summary>
        <returns>A time interval that corresponds to <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `s` parameter contains a time interval specification in the form:  
  
 [*ws*][-]{ *d* &#124; [*d*.]*hh*:*mm*[:*ss*[.*ff*]] }[*ws*]  
  
 Elements in square brackets ([ and ]) are optional. One selection from the list of alternatives enclosed in braces ({ and }) and separated by vertical bars (&#124;) is required. The following table describes each element.  
  
|Element|Description|  
|-------------|-----------------|  
|*ws*|Optional white space.|  
|-|An optional minus sign, which indicates a negative <xref:System.TimeSpan>.|  
|*d*|Days, ranging from 0 to 10675199.|  
|.|A culture-sensitive symbol that separates days from hours. The invariant format uses a period (".") character.|  
|*hh*|Hours, ranging from 0 to 23.|  
|:|The culture-sensitive time separator symbol. The invariant format uses a colon (":") character.|  
|*mm*|Minutes, ranging from 0 to 59.|  
|*ss*|Optional seconds, ranging from 0 to 59.|  
|*.*|A culture-sensitive symbol that separates seconds from fractions of a second. The invariant format uses a period (".") character.|  
|*ff*|Optional fractional seconds, consisting of one to seven decimal digits.|  
  
 The components of `s` must collectively specify a time interval that is greater than or equal to <xref:System.TimeSpan?displayProperty=fullName> and less than or equal to <xref:System.TimeSpan.MaxValue?displayProperty=fullName>.  
  
 The Parse method tries to parse `s` by using each of the culture-specific formats for the current culture.  
  
   
  
## Examples  
 The following example uses the Parse method to convert each element in a string array to a <xref:System.TimeSpan> value. It changes the current system culture to Croatian - Croatia ("hr-HR") and English - United States ("en-US") to illustrate how the current system culture affects the parsing operation.  
  
 [!code-cs[System.TimeSpan.Parse#1](~/add/codesnippet/csharp/m-system.timespan.parse-_1_2.cs)]
 [!code-vb[System.TimeSpan.Parse#1](~/add/codesnippet/visualbasic/m-system.timespan.parse-_1_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" /> has an invalid format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> represents a number that is less than <see cref="T:System.TimeSpan" /> or greater than <see cref="T:System.TimeSpan" />.  
  
 -or-  
  
 At least one of the days, hours, minutes, or seconds components is outside its valid range.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static TimeSpan Parse (string input, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">A string that specifies the time interval to convert.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified culture-specific format information.</summary>
        <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `input` parameter contains a time interval specification in the form:  
  
 [*ws*][-]{ *d* &#124; [*d*.]*hh*:*mm*[:*ss*[.*ff*]] }[*ws*]  
  
 Elements in square brackets ([ and ]) are optional; one selection from the list of alternatives enclosed in braces ({ and }) and separated by vertical bars (&#124;) is required. The following table describes each element.  
  
|Element|Description|  
|-------------|-----------------|  
|*ws*|Optional white space.|  
|-|An optional minus sign, which indicates a negative <xref:System.TimeSpan>.|  
|*d*|Days, ranging from 0 to 10675199.|  
|.|A culture-sensitive symbol that separates days from hours. The default value is a period (".") character.|  
|*hh*|Hours, ranging from 0 to 23.|  
|:|The culture-sensitive time separator symbol.|  
|*mm*|Minutes, ranging from 0 to 59.|  
|*ss*|Optional seconds, ranging from 0 to 59.|  
|.|A culture-sensitive symbol that separates seconds from fractions of a second. The default value is a period (".") character.|  
|*ff*|Optional fractional seconds, consisting of one to seven decimal digits.|  
  
 The components of `input` must collectively specify a time interval that is greater than or equal to <xref:System.TimeSpan?displayProperty=fullName> and less than or equal to <xref:System.TimeSpan.MaxValue?displayProperty=fullName>.  
  
 The <xref:System.TimeSpan.Parse%28System.String%29> method tries to parse `input` by using each of the culture-specific formats for the culture specified by `formatProvider`.  
  
 The `formatProvider` parameter is an <xref:System.IFormatProvider> implementation that provides culture-specific information about the format of the returned string. The `formatProvider` parameter can be any of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the formatting of the returned string.  
  
-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> method returns a <xref:System.Globalization.DateTimeFormatInfo> object that provides formatting information.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object that is associated with the current culture is used.  
  
   
  
## Examples  
 The following example defines an array of <xref:System.Globalization.CultureInfo> objects, and uses each object in calls to the Parse method to parse the elements in a string array. The example illustrates how the conventions of a specific culture influence the formatting operation.  
  
 [!code-vb[System.TimeSpan.Parse#2](~/add/codesnippet/visualbasic/m-system.timespan.parse-_0_2.vb)]
 [!code-cs[System.TimeSpan.Parse#2](~/add/codesnippet/csharp/m-system.timespan.parse-_0_2.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> has an invalid format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> represents a number that is less than <see cref="T:System.TimeSpan" /> or greater than <see cref="T:System.TimeSpan" />.  
  
 -or-  
  
 At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">A string that specifies the time interval to convert.</param>
        <param name="format">A standard or custom format string that defines the required format of `input`.</param>
        <param name="formatProvider">An object that provides culture-specific formatting information.</param>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format and culture-specific format information. The format of the string representation must match the specified format exactly.</summary>
        <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ParseExact method parses the string representation of a time interval, which must be in the format defined by the `format` parameter, except that leading and trailing white-space characters are ignored. Because `input` must conform to the format of `format` exactly, you should always use exception handling when converting a string input by the user to a time interval. If you prefer not to use exception handling, you can call the <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> method instead.  
  
 The `format` parameter is a string that contains either a single standard format specifier, or one or more custom format specifiers that define the required format of `input`. For more information about valid format strings, see [Standard TimeSpan Format Strings](../Topic/Standard%20TimeSpan%20Format%20Strings.md) and [Custom TimeSpan Format Strings](../Topic/Custom%20TimeSpan%20Format%20Strings.md).  
  
> [!IMPORTANT]
>  The ParseExact method uses the conventions of the culture specified by the `formatProvider` parameter only if `format` is a standard <xref:System.TimeSpan> format string whose value is either "g" or "G". The "c", "t", and "T" standard format strings use the formatting conventions of the invariant culture. Custom format strings define the precise format of the input string and use literal characters to separate the components of a time interval.  
  
 The `formatProvider` parameter is an <xref:System.IFormatProvider> implementation that provides culture-specific information about the format of the returned string if `format` is a standard format string. The `formatProvider` parameter can be any of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the formatting of the returned string.  
  
-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> method returns a <xref:System.Globalization.DateTimeFormatInfo> object that provides formatting information.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object that is associated with the current culture is used.  
  
   
  
## Examples  
 The following example uses the ParseExact method to parse several string representations of time intervals using various format strings and cultures.  
  
 [!code-vb[System.TimeSpan.ParseExact#1](~/add/codesnippet/visualbasic/m-system.timespan.parsee_1.vb)]
 [!code-cs[System.TimeSpan.ParseExact#1](~/add/codesnippet/csharp/m-system.timespan.parsee_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> has an invalid format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> represents a number that is less than <see cref="T:System.TimeSpan" /> or greater than <see cref="T:System.TimeSpan" />.  
  
 -or-  
  
 At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string[] formats, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">A string that specifies the time interval to convert.</param>
        <param name="formats">A array of standard or custom format strings that defines the required format of `input`.</param>
        <param name="formatProvider">An object that provides culture-specific formatting information.</param>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified array of format strings and culture-specific format information. The format of the string representation must match one of the specified formats exactly.</summary>
        <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="formats" /> and <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> method parses the string representation of a time interval, which must be in one of the formats defined by the `formats` parameter, except that leading and trailing white-space characters are ignored. Because `input` must exactly conform to one of the formats specified in `formats`, you should always use exception handling when converting a string input by the user to a time interval. If you prefer not to use exception handling, you can call the [TryParseExact(String, String\[\], IFormatProvider, TimeSpan)](assetId:///M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)?qualifyHint=False&autoUpgrade=False) method instead.  
  
 The `formats` parameter is a string array whose elements consist of either a single standard format specifier, or one or more custom format specifiers that define the required format of `input`. For more information about valid format strings, see [Standard TimeSpan Format Strings](../Topic/Standard%20TimeSpan%20Format%20Strings.md) and [Custom TimeSpan Format Strings](../Topic/Custom%20TimeSpan%20Format%20Strings.md). `input` must correspond exactly to a member of `formats` for the parse operation to succeed. The parse operation attempts to match `input` to each element in `formats` starting with the first element in the array.  
  
> [!IMPORTANT]
>  The <xref:System.TimeSpan.ParseExact%2A> method uses the conventions of the culture specified by the `formatProvider` parameter only if the format string used to parse `input` is a standard <xref:System.TimeSpan> format string whose value is either "g" or "G". The "c", "t", and "T" standard format strings use the formatting conventions of the invariant culture. Custom format strings define the precise format of the input string and use literal characters to separate the components of a time interval.  
  
 The `formatProvider` parameter is an <xref:System.IFormatProvider> implementation that provides culture-specific information about the format of the returned string if the format string used to parse `input` is a standard format string. The `formatProvider` parameter can be any of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the formatting of the returned string.  
  
-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> method returns a <xref:System.Globalization.DateTimeFormatInfo> object that provides formatting information.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object that is associated with the current culture is used.  
  
   
  
## Examples  
 The following example calls the ParseExact method to convert each element of a string array to a <xref:System.TimeSpan> value. The example interprets the strings using the formatting conventions of the French - France ("fr-FR") culture. The strings can represent a time interval in either the general short format or the general long format.  
  
 In addition, the example changes the way in which the time interval parsing methods interpret a single digit. Ordinarily, a single digit is interpreted as the number of days in a time interval. Instead, the `%h` custom format string is used to interpret a single digit as the number of hours. For this change to be effective, note that the `%h` custom format string must precede the other format strings in the `formats` array.  
  
 [!code-vb[System.TimeSpan.ParseExact#3](~/add/codesnippet/visualbasic/b309d71a-e668-495d-88be-_1.vb)]
 [!code-cs[System.TimeSpan.ParseExact#3](~/add/codesnippet/csharp/b309d71a-e668-495d-88be-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> has an invalid format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> represents a number that is less than <see cref="T:System.TimeSpan" /> or greater than <see cref="T:System.TimeSpan" />.  
  
 -or-  
  
 At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
      </Parameters>
      <Docs>
        <param name="input">A string that specifies the time interval to convert.</param>
        <param name="format">A standard or custom format string that defines the required format of `input`.</param>
        <param name="formatProvider">An object that provides culture-specific formatting information.</param>
        <param name="styles">A bitwise combination of enumeration values that defines the style elements that may be present in `input`.</param>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format, culture-specific format information, and styles. The format of the string representation must match the specified format exactly.</summary>
        <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="format" />, <paramref name="formatProvider" />, and <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ParseExact method parses the string representation of a time interval, which must be in the format defined by the `format` parameter, except that leading and trailing white-space characters are ignored. Because `input` must conform to the format of `format` exactly, you should always use exception handling when converting a string input by the user to a time interval. If you prefer not to use exception handling, you can call the <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> method instead.  
  
 The `format` parameter is a string that contains either a single standard format specifier, or one or more custom format specifiers that define the required format of `input`. For more information about valid format strings, see [Standard TimeSpan Format Strings](../Topic/Standard%20TimeSpan%20Format%20Strings.md) and [Custom TimeSpan Format Strings](../Topic/Custom%20TimeSpan%20Format%20Strings.md).  
  
> [!IMPORTANT]
>  The <xref:System.TimeSpan.ParseExact%2A> method uses the conventions of the culture specified by the `formatProvider` parameter only if `format` is a standard <xref:System.TimeSpan> format string whose value is either "g" or "G". The "c", "t", and "T" standard format strings use the formatting conventions of the invariant culture. Custom format strings define the precise format of the input string and use literal characters to separate the components of a time interval.  
  
 The `formatProvider` parameter is an <xref:System.IFormatProvider> implementation that provides culture-specific information about the format of the returned string if `format` is a standard format string. The `formatProvider` parameter can be any of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the formatting of the returned string.  
  
-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> method returns a <xref:System.Globalization.DateTimeFormatInfo> object that provides formatting information.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object that is associated with the current culture is used.  
  
 The `styles` parameter affects the interpretation of strings that are parsed using custom format strings. It determines whether `input` is interpreted as a negative time interval only if a negative sign is present (<xref:System.Globalization.TimeSpanStyles?displayProperty=fullName>), or whether it is always interpreted as a negative time interval (<xref:System.Globalization.TimeSpanStyles?displayProperty=fullName>). If <xref:System.Globalization.TimeSpanStyles?displayProperty=fullName> is not used, `format` must include a literal negative sign symbol (such as "\\-") to successfully parse a negative time interval.  
  
   
  
## Examples  
 The following example uses the <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> method to parse several string representations of time intervals using various format strings and cultures. It also uses the <xref:System.Globalization.TimeSpanStyles?displayProperty=fullName> value to interpret each string as a negative time interval. The output from the example illustrates that the <xref:System.Globalization.TimeSpanStyles?displayProperty=fullName> style affects the return value only when it is used with custom format strings.  
  
 [!code-cs[System.TimeSpan.ParseExact#2](~/add/codesnippet/csharp/ff075969-6265-43be-8b21-_1.cs)]
 [!code-vb[System.TimeSpan.ParseExact#2](~/add/codesnippet/visualbasic/ff075969-6265-43be-8b21-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> is an invalid <see cref="T:System.Globalization.TimeSpanStyles" /> value.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> has an invalid format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> represents a number that is less than <see cref="T:System.TimeSpan" /> or greater than <see cref="T:System.TimeSpan" />.  
  
 -or-  
  
 At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
      </Parameters>
      <Docs>
        <param name="input">A string that specifies the time interval to convert.</param>
        <param name="formats">A array of standard or custom format strings that define the required format of `input`.</param>
        <param name="formatProvider">An object that provides culture-specific formatting information.</param>
        <param name="styles">A bitwise combination of enumeration values that defines the style elements that may be present in input.</param>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats, culture-specific format information, and styles. The format of the string representation must match one of the specified formats exactly.</summary>
        <returns>A time interval that corresponds to <paramref name="input" />, as specified by <paramref name="formats" />, <paramref name="formatProvider" />, and <paramref name="styles" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ParseExact method parses the string representation of a time interval, which must be in one of the formats defined by the `formats` parameter, except that leading and trailing white-space characters are ignored. Because `input` must exactly conform to one of the formats specified in `formats`, you should always use exception handling when converting a string input by the user to a time interval. If you prefer not to use exception handling, you can call the [TryParseExact(String, String\[\], IFormatProvider, TimeSpanStyles, TimeSpan)](assetId:///M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)?qualifyHint=False&autoUpgrade=False) method instead.  
  
 The `formats` parameter is a string array whose elements consist of either a single standard format specifier, or one or more custom format specifiers that define the required format of `input`. For more information about valid format strings, see [Standard TimeSpan Format Strings](../Topic/Standard%20TimeSpan%20Format%20Strings.md) and [Custom TimeSpan Format Strings](../Topic/Custom%20TimeSpan%20Format%20Strings.md). `input` must correspond exactly to a member of `formats` for the parse operation to succeed. The parse operation attempts to match `input` to each element in `formats` starting with the first element in the array.  
  
> [!IMPORTANT]
>  The <xref:System.TimeSpan.ParseExact%2A> method uses the conventions of the culture specified by the `formatProvider` parameter only if the format string used to parse `input` is a standard <xref:System.TimeSpan> format string whose value is either "g" or "G". The "c", "t", and "T" standard format strings use the formatting conventions of the invariant culture. Custom format strings define the precise format of the input string and use literal characters to separate the components of a time interval.  
  
 The `formatProvider` parameter is an <xref:System.IFormatProvider> implementation that provides culture-specific information about the format of the returned string if the format string used to parse `input` is a standard format string. The `formatProvider` parameter can be any of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the formatting of the returned string.  
  
-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> method returns a <xref:System.Globalization.DateTimeFormatInfo> object that provides formatting information.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object that is associated with the current culture is used.  
  
 The `styles` parameter affects the interpretation of strings that are parsed using custom format strings. It determines whether `input` is interpreted as a negative time interval only if a negative sign is present (<xref:System.Globalization.TimeSpanStyles?displayProperty=fullName>), or whether it is always interpreted as a negative time interval (<xref:System.Globalization.TimeSpanStyles?displayProperty=fullName>). If <xref:System.Globalization.TimeSpanStyles?displayProperty=fullName> is not used, `format` must include a literal negative sign symbol (such as "\\-") to successfully parse a negative time interval.  
  
   
  
## Examples  
 The following example calls the ParseExact method to convert each element of a string array to a <xref:System.TimeSpan> value. The strings can represent a time interval in either the general short format or the general long format.  
  
 In addition, the example changes the way in which the time interval parsing methods interpret a single digit. Ordinarily, a single digit is interpreted as the number of days in a time interval. Instead, the `%h` custom format string is used to interpret a single digit as the number of hours. For this change to be effective, note that the `%h` custom format string must precede the other format strings in the `formats` array. Also note from the output that the <xref:System.Globalization.TimeSpanStyles?displayProperty=fullName> flag specified in the method call is used only when parsing a string with this format specifier.  
  
 [!code-cs[System.TimeSpan.ParseExact#4](~/add/codesnippet/csharp/c61980cf-5b3d-4fd8-bbf9-_1.cs)]
 [!code-vb[System.TimeSpan.ParseExact#4](~/add/codesnippet/visualbasic/c61980cf-5b3d-4fd8-bbf9-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" /> is an invalid <see cref="T:System.Globalization.TimeSpanStyles" /> value.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> has an invalid format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> represents a number that is less than <see cref="T:System.TimeSpan" /> or greater than <see cref="T:System.TimeSpan" />.  
  
 -or-  
  
 At least one of the days, hours, minutes, or seconds components in <paramref name="input" /> is outside its valid range.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Seconds">
      <MemberSignature Language="C#" Value="public int Seconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Seconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the seconds component of the time interval represented by the current <see cref="T:System.TimeSpan" /> structure.</summary>
        <value>The second component of the current <see cref="T:System.TimeSpan" /> structure. The return value ranges from -59 through 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.TimeSpan> value can be represented as [*-*]*d*.*hh*:*mm*:*ss*.*ff*, where the optional minus sign indicates a negative time interval, the *d* component is days, *hh* is hours as measured on a 24-hour clock, *mm* is minutes, *ss* is seconds, and *ff* is fractions of a second. The value of the Seconds property is the seconds component, *ss*.  
  
 The Seconds property represents whole seconds, whereas the <xref:System.TimeSpan.TotalSeconds%2A> property represents whole and fractional seconds.  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects and displays the Seconds property of each.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/add/codesnippet/cpp/p-system.timespan.seconds_1.cpp)]
 [!code-vb[System.TimeSpan.Properties#1](~/add/codesnippet/visualbasic/p-system.timespan.seconds_1.vb)]
 [!code-cs[System.TimeSpan.Properties#1](~/add/codesnippet/csharp/p-system.timespan.seconds_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (TimeSpan ts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.TimeSpan ts) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ts" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ts">The time interval to be subtracted.</param>
        <summary>Returns a new <see cref="T:System.TimeSpan" /> object whose value is the difference between the specified <see cref="T:System.TimeSpan" /> object and this instance.</summary>
        <returns>A new time interval whose value is the result of the value of this instance minus the value of <paramref name="ts" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value must be between <xref:System.TimeSpan?displayProperty=fullName> and <xref:System.TimeSpan?displayProperty=fullName>; otherwise, an exception is thrown.  
  
 The return value is a new <xref:System.TimeSpan>; the original <xref:System.TimeSpan> is not modified.  
  
   
  
## Examples  
 The following example uses the Subtract method to calculate the difference between a single <xref:System.TimeSpan> value and each of the time intervals in an array. Note that, because <xref:System.TimeSpan> format strings do not include negative signs in the result string, the example uses conditional logic to include a negative sign with negative time intervals.  
  
 [!code-cs[System.TimeSpan.Subtract#1](~/add/codesnippet/csharp/m-system.timespan.subtra_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">The return value is less than <see cref="T:System.TimeSpan" /> or greater than <see cref="T:System.TimeSpan" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of ticks that represent the value of the current <see cref="T:System.TimeSpan" /> structure.</summary>
        <value>The number of ticks contained in this instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The smallest unit of time is the tick, which is equal to 100 nanoseconds or one ten-millionth of a second. There are 10,000 ticks in a millisecond. The value of the Ticks property can be negative or positive to represent a negative or positive time interval.  
  
   
  
## Examples  
 The following example creates several <xref:System.TimeSpan> objects and displays the Ticks property of each.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/add/codesnippet/cpp/p-system.timespan.ticks_1.cpp)]
 [!code-vb[System.TimeSpan.Properties#1](~/add/codesnippet/visualbasic/p-system.timespan.ticks_1.vb)]
 [!code-cs[System.TimeSpan.Properties#1](~/add/codesnippet/csharp/p-system.timespan.ticks_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TicksPerDay">
      <MemberSignature Language="C#" Value="public const long TicksPerDay = 864000000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerDay = (864000000000)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>864000000000</MemberValue>
      <Docs>
        <summary>Represents the number of ticks in 1 day. This field is constant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this constant is 864 billion; that is, 864,000,000,000.  
  
   
  
## Examples  
 The following example references and displays the value of the TicksPerDay field.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/add/codesnippet/cpp/f-system.timespan.ticksp_2_1.cpp)]
 [!code-cs[System.TimeSpan.Fields#1](~/add/codesnippet/csharp/f-system.timespan.ticksp_2_1.cs)]
 [!code-vb[System.TimeSpan.Fields#1](~/add/codesnippet/visualbasic/f-system.timespan.ticksp_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TicksPerHour">
      <MemberSignature Language="C#" Value="public const long TicksPerHour = 36000000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerHour = (36000000000)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>36000000000</MemberValue>
      <Docs>
        <summary>Represents the number of ticks in 1 hour. This field is constant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this constant is 36 billion; that is, 36,000,000,000.  
  
   
  
## Examples  
 The following example references and displays the value of the TicksPerHour field.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/add/codesnippet/cpp/f-system.timespan.ticksp_1_1.cpp)]
 [!code-cs[System.TimeSpan.Fields#1](~/add/codesnippet/csharp/f-system.timespan.ticksp_1_1.cs)]
 [!code-vb[System.TimeSpan.Fields#1](~/add/codesnippet/visualbasic/f-system.timespan.ticksp_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TicksPerMillisecond">
      <MemberSignature Language="C#" Value="public const long TicksPerMillisecond = 10000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerMillisecond = (10000)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>10000</MemberValue>
      <Docs>
        <summary>Represents the number of ticks in 1 millisecond. This field is constant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this constant is 10 thousand; that is, 10,000.  
  
   
  
## Examples  
 The following example references and displays the value of the TicksPerMillisecond field.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/add/codesnippet/cpp/f-system.timespan.ticksp_3_1.cpp)]
 [!code-cs[System.TimeSpan.Fields#1](~/add/codesnippet/csharp/f-system.timespan.ticksp_3_1.cs)]
 [!code-vb[System.TimeSpan.Fields#1](~/add/codesnippet/visualbasic/f-system.timespan.ticksp_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TicksPerMinute">
      <MemberSignature Language="C#" Value="public const long TicksPerMinute = 600000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerMinute = (600000000)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>600000000</MemberValue>
      <Docs>
        <summary>Represents the number of ticks in 1 minute. This field is constant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this constant is 600 million; that is, 600,000,000.  
  
   
  
## Examples  
 The following example references and displays the value of the TicksPerMinute field.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/add/codesnippet/cpp/f-system.timespan.ticksp_0_1.cpp)]
 [!code-cs[System.TimeSpan.Fields#1](~/add/codesnippet/csharp/f-system.timespan.ticksp_0_1.cs)]
 [!code-vb[System.TimeSpan.Fields#1](~/add/codesnippet/visualbasic/f-system.timespan.ticksp_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TicksPerSecond">
      <MemberSignature Language="C#" Value="public const long TicksPerSecond = 10000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerSecond = (10000000)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>10000000</MemberValue>
      <Docs>
        <summary>Represents the number of ticks in 1 second.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this constant is 10 million; that is, 10,000,000.  
  
   
  
## Examples  
 The following example references and displays the value of the TicksPerSecond field.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/add/codesnippet/cpp/f-system.timespan.ticksp_4_1.cpp)]
 [!code-cs[System.TimeSpan.Fields#1](~/add/codesnippet/csharp/f-system.timespan.ticksp_4_1.cs)]
 [!code-vb[System.TimeSpan.Fields#1](~/add/codesnippet/visualbasic/f-system.timespan.ticksp_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the value of the current <see cref="T:System.TimeSpan" /> object to its equivalent string representation.</summary>
        <returns>The string representation of the current <see cref="T:System.TimeSpan" /> value.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The returned string is formatted with the "c" format specifier and has the following format:  
  
 [-][*d*.]*hh*:*mm*:*ss*[.*fffffff*]  
  
 Elements in square brackets ([ and ]) may not be included in the returned string. Colons and periods (: and.) are literal characters. The non-literal elements are listed in the following table. Note that the string returned by the ToString method is not culture-sensitive.  
  
|Item|Description|  
|----------|-----------------|  
|"-"|A minus sign, which indicates a negative time interval. No sign is included for a positive time span.|  
|"*d*"|The number of days in the time interval. This element is omitted if the time interval is less than one day.|  
|"*hh*"|The number of hours in the time interval, ranging from 0 to 23.|  
|"*mm*"|The number of minutes in the time interval, ranging from 0 to 59.|  
|"*ss*"|The number of seconds in the time interval, ranging from 0 to 59.|  
|"*fffffff*"|Fractional seconds in the time interval. This element is omitted if the time interval does not include fractional seconds. If present, fractional seconds are always expressed using seven decimal digits.|  
  
> [!NOTE]
>  For more information about comparing the string representation of <xref:System.TimeSpan> and Oracle data types, see Knowledge Base article [324577: System.TimeSpan Does Not Match Oracle 9i INTERVAL DAY TO SECOND Data Type](http://go.microsoft.com/fwlink/?LinkId=161146).  
  
   
  
## Examples  
 The following example displays the strings returned by calling the ToString method with a number of <xref:System.TimeSpan> values. Note that although the example does not call the ToString method directly, it is called by the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method when it attempts to convert a <xref:System.TimeSpan> value to its string representation.  
  
 [!code-cs[System.TimeSpan.ToString#1](~/add/codesnippet/csharp/m-system.timespan.tostring_1.cs)]
 [!code-vb[System.TimeSpan.ToString#1](~/add/codesnippet/visualbasic/m-system.timespan.tostring_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">A standard or custom <see cref="T:System.TimeSpan" /> format string.</param>
        <summary>Converts the value of the current <see cref="T:System.TimeSpan" /> object to its equivalent string representation by using the specified format.</summary>
        <returns>The string representation of the current <see cref="T:System.TimeSpan" /> value in the format specified by the <paramref name="format" /> parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `format` parameter can be any valid standard or custom format specifier for <xref:System.TimeSpan> values. If `format` is equal to <xref:System.String.Empty?displayProperty=fullName> or is `null`, the return value of the current <xref:System.TimeSpan> object is formatted with the common format specifier ("c"). If `format` is any other value, the method throws a <xref:System.FormatException>.  
  
 If `format` is a standard format string, the format of the returned string is defined by the formatting conventions of the current culture.  
  
> [!IMPORTANT]
>  The custom format strings for <xref:System.TimeSpan> values do not include a date or time separator. If you want to include these elements in your format string, you must treat them as character literals. See the example for an illustration, and see the [Custom TimeSpan Format Strings](../Topic/Custom%20TimeSpan%20Format%20Strings.md) topic for more information.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  
  
-   For more information about format strings for <xref:System.TimeSpan> values, see [Standard TimeSpan Format Strings](../Topic/Standard%20TimeSpan%20Format%20Strings.md) and [Custom TimeSpan Format Strings](../Topic/Custom%20TimeSpan%20Format%20Strings.md).  
  
-   For more information about support for formatting in the .NET Framework, see [Formatting Types](../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md).  
  
   
  
## Examples  
 The following example uses standard and custom <xref:System.TimeSpan> format strings to display the string representation of each element in an array of <xref:System.TimeSpan> values  
  
 [!code-vb[System.TimeSpan.ToString#3](~/add/codesnippet/visualbasic/m-system.timespan.tostri_1_1.vb)]
 [!code-cs[System.TimeSpan.ToString#3](~/add/codesnippet/csharp/m-system.timespan.tostri_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is not recognized or is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">A standard or custom <see cref="T:System.TimeSpan" /> format string.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the current <see cref="T:System.TimeSpan" /> object to its equivalent string representation by using the specified format and culture-specific formatting information.</summary>
        <returns>The string representation of the current <see cref="T:System.TimeSpan" /> value, as specified by <paramref name="format" /> and <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `format` parameter can be any valid standard or custom format specifier for <xref:System.TimeSpan> values. If `format` is equal to <xref:System.String.Empty?displayProperty=fullName> or is `null`, the return value of the current <xref:System.TimeSpan> object is formatted with the common format specifier ("c"). If format is any other value, the method throws a <xref:System.FormatException>.  
  
> [!IMPORTANT]
>  The custom format strings for <xref:System.TimeSpan> values do not include a date or time separator. If you want to include these elements in your format string, you must treat them as character literals. See the example for an illustration, and see the [Custom TimeSpan Format Strings](../Topic/Custom%20TimeSpan%20Format%20Strings.md) topic for more information.  
  
 The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:  
  
-   For more information about format strings for <xref:System.TimeSpan> values, see [Standard TimeSpan Format Strings](../Topic/Standard%20TimeSpan%20Format%20Strings.md) and [Custom TimeSpan Format Strings](../Topic/Custom%20TimeSpan%20Format%20Strings.md).  
  
-   For more information about support for formatting in the .NET Framework, see [Formatting Types](../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md).  
  
 The `formatProvider` parameter is an <xref:System.IFormatProvider> implementation that provides culture-specific information about the format of the returned string. The `formatProvider` parameter can be any of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object retuned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the formatting of the returned string.  
  
-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> method returns a <xref:System.Globalization.DateTimeFormatInfo> object that provides formatting information.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object that is associated with the current culture is used. If `format` is a custom format string, the `formatProvider` parameter is ignored.  
  
   
  
## Examples  
 The following example calls the ToString method to format two time intervals. The example calls the method twice for each format string, first to display it using the conventions of the en-US culture and then to display it using the conventions of the fr-FR culture.  
  
 [!code-cs[System.TimeSpan.ToString#4](~/add/codesnippet/csharp/m-system.timespan.tostri_0_1.cs)]
 [!code-vb[System.TimeSpan.ToString#4](~/add/codesnippet/visualbasic/m-system.timespan.tostri_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The <paramref name="format" /> parameter is not recognized or is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TotalDays">
      <MemberSignature Language="C#" Value="public double TotalDays { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalDays" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional days.</summary>
        <value>The total number of days represented by this instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property converts the value of this instance from ticks to days. This number might include whole and fractional days.  
  
 The TotalDays property represents whole and fractional days, whereas the <xref:System.TimeSpan.Days%2A> property represents whole days.  
  
   
  
## Examples  
 The following example instantiates a <xref:System.TimeSpan> object and displays the value of its TotalDays property. It also displays the value of each component (hours, minutes, seconds, milliseconds) that forms the fractional part of the value of its TotalDays property.  
  
 [!code-cs[System.TimeSpan.TotalDays#1](~/add/codesnippet/csharp/p-system.timespan.totald_1.cs)]
 [!code-vb[System.TimeSpan.TotalDays#1](~/add/codesnippet/visualbasic/p-system.timespan.totald_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TotalHours">
      <MemberSignature Language="C#" Value="public double TotalHours { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalHours" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional hours.</summary>
        <value>The total number of hours represented by this instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property converts the value of this instance from ticks to hours. This number might include whole and fractional hours.  
  
 The TotalHours property represents whole and fractional hours, whereas the <xref:System.TimeSpan.Hours%2A> property represents whole hours.  
  
   
  
## Examples  
 The following example instantiates a <xref:System.TimeSpan> object and displays the value its TotalHours property. It also displays the value of each component (hours, minutes, seconds, and milliseconds) that forms the fractional part of the value of its TotalHours property.  
  
 [!code-vb[System.TimeSpan.TotalHours#1](~/add/codesnippet/visualbasic/p-system.timespan.totalh_1.vb)]
 [!code-cs[System.TimeSpan.TotalHours#1](~/add/codesnippet/csharp/p-system.timespan.totalh_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TotalMilliseconds">
      <MemberSignature Language="C#" Value="public double TotalMilliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalMilliseconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional milliseconds.</summary>
        <value>The total number of milliseconds represented by this instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property converts the value of this instance from ticks to milliseconds. This number might include whole and fractional milliseconds.  
  
 The TotalMilliseconds property represents whole and fractional milliseconds, whereas the <xref:System.TimeSpan.Milliseconds%2A> property represents whole milliseconds.  
  
   
  
## Examples  
 The following example instantiates a <xref:System.TimeSpan> object and displays the value of its TotalMilliseconds property.  
  
 [!code-vb[System.TimeSpan.TotalMilliseconds#1](~/add/codesnippet/visualbasic/p-system.timespan.totalm_1_1.vb)]
 [!code-cs[System.TimeSpan.TotalMilliseconds#1](~/add/codesnippet/csharp/p-system.timespan.totalm_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TotalMinutes">
      <MemberSignature Language="C#" Value="public double TotalMinutes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalMinutes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional minutes.</summary>
        <value>The total number of minutes represented by this instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property converts the value of this instance from ticks to minutes. This number might include whole and fractional minutes.  
  
 The TotalMinutes property represents whole and fractional minutes, whereas the <xref:System.TimeSpan.Minutes%2A> property represents whole minutes.  
  
   
  
## Examples  
 The following example instantiates a <xref:System.TimeSpan> object and displays the value of its TotalMinutes property. It also displays the value of each component (seconds, milliseconds) that forms the fractional part of the value of its TotalMinutes property.  
  
 [!code-vb[System.TimeSpan.TotalMinutes#1](~/add/codesnippet/visualbasic/p-system.timespan.totalm_0_1.vb)]
 [!code-cs[System.TimeSpan.TotalMinutes#1](~/add/codesnippet/csharp/p-system.timespan.totalm_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TotalSeconds">
      <MemberSignature Language="C#" Value="public double TotalSeconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalSeconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the current <see cref="T:System.TimeSpan" /> structure expressed in whole and fractional seconds.</summary>
        <value>The total number of seconds represented by this instance.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property converts the value of this instance from ticks to seconds. This number might include whole and fractional seconds.  
  
 The TotalSeconds property represents whole and fractional seconds, whereas the <xref:System.TimeSpan.Seconds%2A> property represents whole seconds.  
  
   
  
## Examples  
 The following example instantiates a <xref:System.TimeSpan> object and displays the value of its TotalSeconds property. It also displays the value of its milliseconds component, which forms the fractional part of the value of its TotalSeconds property.  
  
 [!code-cs[System.TimeSpan.TotalSeconds#1](~/add/codesnippet/csharp/p-system.timespan.totals_1.cs)]
 [!code-vb[System.TimeSpan.TotalSeconds#1](~/add/codesnippet/visualbasic/p-system.timespan.totals_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, valuetype System.TimeSpan result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">A string that specifies the time interval to convert.</param>
        <param name="result">When this method returns, contains an object that represents the time interval specified by `s`, or <see cref="T:System.TimeSpan" /> if the conversion failed. This parameter is passed uninitialized.</param>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if <paramref name="s" /> was converted successfully; otherwise, <see langword="false" />. This operation returns <see langword="false" /> if the <paramref name="s" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, has an invalid format, represents a time interval that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />, or has at least one days, hours, minutes, or seconds component outside its valid range.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TryParse method is like the <xref:System.TimeSpan.Parse%28System.String%29?displayProperty=fullName> method, except that it does not throw an exception if the conversion fails.  
  
 The `s` parameter contains a time interval specification in the form:  
  
 [*ws*][-]{ *d* &#124; *d*.*hh*:*mm*[:*ss*[.*ff*]] &#124; *hh*:*mm*[:*ss*[.*ff*]] }[*ws*]  
  
 Elements in square brackets ([ and ]) are optional. One selection from the list of alternatives enclosed in braces ({ and }) and separated by vertical bars (&#124;) is required. The following table describes each element.  
  
|Element|Description|  
|-------------|-----------------|  
|*ws*|Optional white space.|  
|-|An optional minus sign, which indicates a negative <xref:System.TimeSpan>.|  
|*d*|Days, ranging from 0 to 10675199.|  
|.|A culture-sensitive symbol that separates days from hours. The invariant format uses a period (".") character.|  
|*hh*|Hours, ranging from 0 to 23.|  
|:|The culture-sensitive time separator symbol. The invariant format uses a colon (":") character.|  
|*mm*|Minutes, ranging from 0 to 59.|  
|*ss*|Optional seconds, ranging from 0 to 59.|  
|.|A culture-sensitive symbol that separates seconds from fractions of a second. The invariant format uses a period (".") character.|  
|*ff*|Optional fractional seconds, consisting of one to seven decimal digits.|  
  
 The components of `s` must collectively specify a time interval that is greater than or equal to <xref:System.TimeSpan.MinValue?displayProperty=fullName> and less than or equal to <xref:System.TimeSpan.MaxValue?displayProperty=fullName>.  
  
 The <xref:System.TimeSpan.Parse%28System.String%29> method tries to parse `s` by using each of the culture-specific formats for the current culture.  
  
   
  
## Examples  
 The following example uses the TryParse method to create <xref:System.TimeSpan> objects from valid <xref:System.TimeSpan> strings and to indicate when the parse operation has failed because the time span string is invalid.  
  
 [!code-cs[System.TimeSpan.TryParse#1](~/add/codesnippet/csharp/m-system.timespan.trypar_0_2.cs)]
 [!code-vb[System.TimeSpan.TryParse#1](~/add/codesnippet/visualbasic/m-system.timespan.trypar_0_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, valuetype System.TimeSpan result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">A string that specifies the time interval to convert.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        <param name="result">When this method returns, contains an object that represents the time interval specified by `input`, or <see cref="T:System.TimeSpan" /> if the conversion failed. This parameter is passed uninitialized.</param>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified culture-specific formatting information, and returns a value that indicates whether the conversion succeeded.</summary>
        <returns>
          <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />. This operation returns <see langword="false" /> if the <paramref name="input" /> parameter is <see langword="null" /> or <see cref="F:System.String.Empty" />, has an invalid format, represents a time interval that is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than <see cref="F:System.TimeSpan.MaxValue" />, or has at least one days, hours, minutes, or seconds component outside its valid range.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TryParse method is like the <xref:System.TimeSpan.Parse%28System.String%2CSystem.IFormatProvider%29> method, except that it does not throw an exception if the conversion fails.  
  
 The `input` parameter contains a time interval specification in the form:  
  
 [*ws*][-]{ *d* &#124; *d*.*hh*:*mm*[:*ss*[.*ff*]] &#124; *hh*:*mm*[:*ss*[.*ff*]] }[*ws*]  
  
 Elements in square brackets ([ and ]) are optional. One selection from the list of alternatives enclosed in braces ({ and }) and separated by vertical bars (&#124;) is required. The following table describes each element.  
  
|Element|Description|  
|-------------|-----------------|  
|*ws*|Optional white space.|  
|-|An optional minus sign, which indicates a negative <xref:System.TimeSpan>.|  
|*d*|Days, ranging from 0 to 10675199.|  
|.|A culture-sensitive symbol that separates days from hours. The invariant format uses a period (".") character.|  
|*hh*|Hours, ranging from 0 to 23.|  
|:|The culture-sensitive time separator symbol. The invariant format uses a colon (":") character.|  
|*mm*|Minutes, ranging from 0 to 59.|  
|*ss*|Optional seconds, ranging from 0 to 59.|  
|.|A culture-sensitive symbol that separates seconds from fractions of a second. The invariant format uses a period (".") character.|  
|*ff*|Optional fractional seconds, consisting of one to seven decimal digits.|  
  
 The components of `input` must collectively specify a time interval that is greater than or equal to <xref:System.TimeSpan.MinValue?displayProperty=fullName> and less than or equal to <xref:System.TimeSpan.MaxValue?displayProperty=fullName>.  
  
 The TryParse method tries to parse `input` by using each of the culture-specific formats for the culture specified by `formatProvider`.  
  
 The `formatProvider` parameter is an <xref:System.IFormatProvider> implementation that provides culture-specific information about the format of the returned string. The `formatProvider` parameter can be any of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the formatting of the returned string.  
  
-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> method returns a <xref:System.Globalization.DateTimeFormatInfo> object that provides formatting information.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object that is associated with the current culture is used.  
  
   
  
## Examples  
 The following example defines an array of <xref:System.Globalization.CultureInfo> objects, and uses each object in calls to the TryParse method to parse the elements in a string array. The example illustrates how the conventions of a specific culture influence the formatting operation.  
  
 [!code-cs[System.TimeSpan.TryParse#2](~/add/codesnippet/csharp/m-system.timespan.trypar_1_2.cs)]
 [!code-vb[System.TimeSpan.TryParse#2](~/add/codesnippet/visualbasic/m-system.timespan.trypar_1_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.TimeSpan result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">A string that specifies the time interval to convert.</param>
        <param name="format">A standard or custom format string that defines the required format of `input`.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        <param name="result">When this method returns, contains an object that represents the time interval specified by `input`, or <see cref="T:System.TimeSpan" /> if the conversion failed. This parameter is passed uninitialized.</param>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format and culture-specific format information, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match the specified format exactly.</summary>
        <returns>
          <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TryParseExact method parses the string representation of a time interval, which must be in the format defined by the `format` parameter, except that leading and trailing white-space characters are ignored. This method is similar to the <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> method, except that it does not throw an exception if the conversion fails.  
  
 The `format` parameter is a string that contains either a single standard format specifier, or one or more custom format specifiers that define the required format of `input`. For more information about valid format strings, see [Standard TimeSpan Format Strings](../Topic/Standard%20TimeSpan%20Format%20Strings.md) and [Custom TimeSpan Format Strings](../Topic/Custom%20TimeSpan%20Format%20Strings.md).  
  
> [!IMPORTANT]
>  The TryParseExact method uses the conventions of the culture specified by the `formatProvider` parameter only if `format` is a standard <xref:System.TimeSpan> format string whose value is either "g" or "G". The "c", "t", and "T" standard format strings use the formatting conventions of the invariant culture. Custom format strings define the precise format of the input string and use literal characters to separate the components of a time interval.  
  
 The `formatProvider` parameter is an <xref:System.IFormatProvider> implementation that provides culture-specific information about the format of the returned string if `format` is a standard format string. The `formatProvider` parameter can be any of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the formatting of the returned string.  
  
-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> method returns a <xref:System.Globalization.DateTimeFormatInfo> object that provides formatting information.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object that is associated with the current culture is used.  
  
   
  
## Examples  
 The following example uses the <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> method to parse several string representations of time intervals using various format strings and cultures.  
  
 [!code-cs[System.TimeSpan.TryParseExact#1](~/add/codesnippet/csharp/f1460149-9211-4ff0-8a86-_1.cs)]
 [!code-vb[System.TimeSpan.TryParseExact#1](~/add/codesnippet/visualbasic/f1460149-9211-4ff0-8a86-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.TimeSpan result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">A string that specifies the time interval to convert.</param>
        <param name="formats">A array of standard or custom format strings that define the acceptable formats of `input`.</param>
        <param name="formatProvider">An object that provides culture-specific formatting information.</param>
        <param name="result">When this method returns, contains an object that represents the time interval specified by `input`, or <see cref="T:System.TimeSpan" /> if the conversion failed. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats and culture-specific format information, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match one of the specified formats exactly.</summary>
        <returns>
          <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TryParseExact method parses the string representation of a time interval, which must be in the format defined by one of the format strings specified by the `formats` parameter, except that leading and trailing white-space characters are ignored. This method is similar to the [ParseExact(String, String\[\], IFormatProvider)](assetId:///M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider)?qualifyHint=False&autoUpgrade=False) method, except that it does not throw an exception if the conversion fails.  
  
 The `formats` parameter is a string array whose elements consist of either a single standard format specifier, or one or more custom format specifiers that define the required format of `input`. For more information about valid format strings, see [Standard TimeSpan Format Strings](../Topic/Standard%20TimeSpan%20Format%20Strings.md) and [Custom TimeSpan Format Strings](../Topic/Custom%20TimeSpan%20Format%20Strings.md). `input` must correspond exactly to a member of `formats` for the parse operation to succeed. The parse operation attempts to match `input` to each element in `formats` starting with the first element in the array.  
  
> [!IMPORTANT]
>  The TryParseExact method uses the conventions of the culture specified by the `formatProvider` parameter only if the format string used to parse `input` is a standard <xref:System.TimeSpan> format string whose value is either "g" or "G". The "c", "t", and "T" standard format strings use the formatting conventions of the invariant culture. Custom format strings define the precise format of the input string and use literal characters to separate the components of a time interval.  
  
 The `formatProvider` parameter is an <xref:System.IFormatProvider> implementation that provides culture-specific information about the format of the returned string if the format string used to parse `input` is a standard format string. The `formatProvider` parameter can be any of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the formatting of the returned string.  
  
-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> method returns a <xref:System.Globalization.DateTimeFormatInfo> object that provides formatting information.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object that is associated with the current culture is used.  
  
   
  
## Examples  
 The following example calls the TryParseExact method to convert each element of a string array to a <xref:System.TimeSpan> value. The example interprets the strings by using the formatting conventions of the French - France ("fr-FR") culture. The strings can represent a time interval in either the general short format or the general long format.  
  
 In addition, the example changes the way in which the time interval parsing methods interpret a single digit. Ordinarily, a single digit is interpreted as the number of days in a time interval. Instead, the `%h` custom format string is used to interpret a single digit as the number of hours. For this change to be effective, note that the `%h` custom format string must precede the other format strings in the `formats` array.  
  
 [!code-cs[System.TimeSpan.TryParseExact#3](~/add/codesnippet/csharp/fc773eac-f107-4b2a-a4d5-_1.cs)]
 [!code-vb[System.TimeSpan.TryParseExact#3](~/add/codesnippet/visualbasic/fc773eac-f107-4b2a-a4d5-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles, valuetype System.TimeSpan result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">A string that specifies the time interval to convert.</param>
        <param name="format">A standard or custom format string that defines the required format of `input`.</param>
        <param name="formatProvider">An object that provides culture-specific formatting information.</param>
        <param name="styles">One or more enumeration values that indicate the style of `input`.</param>
        <param name="result">When this method returns, contains an object that represents the time interval specified by `input`, or <see cref="T:System.TimeSpan" /> if the conversion failed. This parameter is passed uninitialized.</param>
        <summary>Converts the string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified format, culture-specific format information, and styles, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match the specified format exactly.</summary>
        <returns>
          <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TryParseExact method parses the string representation of a time interval, which must be in the format defined by the `format` parameter, except that leading and trailing white-space characters are ignored. This method is similar to the <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%29> method, except that it does not throw an exception if the conversion fails.  
  
 The `format` parameter is a string that contains either a single standard format specifier, or one or more custom format specifiers that define the required format of `input`. For more information about valid format strings, see [Standard TimeSpan Format Strings](../Topic/Standard%20TimeSpan%20Format%20Strings.md) and [Custom TimeSpan Format Strings](../Topic/Custom%20TimeSpan%20Format%20Strings.md).  
  
 The `formatProvider` parameter is an <xref:System.IFormatProvider> implementation that provides culture-specific information about the format of the returned string if `format` is a standard format string. The `formatProvider` parameter can be any of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the formatting of the returned string.  
  
-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> method returns a <xref:System.Globalization.DateTimeFormatInfo> object that provides formatting information.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object that is associated with the current culture is used.  
  
 The `styles` parameter affects the interpretation of strings parsed using custom format strings. It determines whether `input` is interpreted as a negative time interval only if a negative sign is present (<xref:System.Globalization.TimeSpanStyles?displayProperty=fullName>), or whether it is always interpreted as a negative time interval (<xref:System.Globalization.TimeSpanStyles?displayProperty=fullName>). If <xref:System.Globalization.TimeSpanStyles?displayProperty=fullName> is not used, `format` must include a literal negative sign symbol (such as "\\-") to successfully parse a negative time interval.  
  
   
  
## Examples  
 The following example uses the <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> method to parse several string representations of time intervals using various format strings and cultures. It also uses the <xref:System.Globalization.TimeSpanStyles?displayProperty=fullName> value to interpret each string as a negative time interval. The output from the example illustrates that the <xref:System.Globalization.TimeSpanStyles?displayProperty=fullName> style affects the return value only when it is used with custom format strings.  
  
 [!code-cs[System.TimeSpan.TryParseExact#2](~/add/codesnippet/csharp/9682541a-3a04-4f30-b681-_1.cs)]
 [!code-vb[System.TimeSpan.TryParseExact#2](~/add/codesnippet/visualbasic/9682541a-3a04-4f30-b681-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles, valuetype System.TimeSpan result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">A string that specifies the time interval to convert.</param>
        <param name="formats">A array of standard or custom format strings that define the acceptable formats of `input`.</param>
        <param name="formatProvider">An object that supplies culture-specific formatting information.</param>
        <param name="styles">One or more enumeration values that indicate the style of `input`.</param>
        <param name="result">When this method returns, contains an object that represents the time interval specified by `input`, or <see cref="T:System.TimeSpan" /> if the conversion failed. This parameter is passed uninitialized.</param>
        <summary>Converts the specified string representation of a time interval to its <see cref="T:System.TimeSpan" /> equivalent by using the specified formats, culture-specific format information, and styles, and returns a value that indicates whether the conversion succeeded. The format of the string representation must match one of the specified formats exactly.</summary>
        <returns>
          <see langword="true" /> if <paramref name="input" /> was converted successfully; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The TryParseExact method parses the string representation of a time interval, which must be in the format defined by one of the format strings specified by the `formats` parameter, except that leading and trailing white-space characters are ignored. This method is similar to the [ParseExact(String, String\[\], IFormatProvider, TimeSpanStyles)](assetId:///M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)?qualifyHint=False&autoUpgrade=False) method, except that it does not throw an exception if the conversion fails.  
  
 The `formats` parameter is a string array whose elements consist of either a single standard format specifier, or one or more custom format specifiers that define the required format of `input`. For more information about valid format strings, see [Standard TimeSpan Format Strings](../Topic/Standard%20TimeSpan%20Format%20Strings.md) and [Custom TimeSpan Format Strings](../Topic/Custom%20TimeSpan%20Format%20Strings.md). `input` must correspond exactly to a member of `formats` for the parse operation to succeed. The parse operation attempts to match `input` to each element in `formats` starting with the first element in the array.  
  
> [!IMPORTANT]
>  The <xref:System.TimeSpan.ParseExact%2A> method uses the conventions of the culture specified by the `formatProvider` parameter only if the format string used to parse `input` is a standard <xref:System.TimeSpan> format string whose value is either "g" or "G". The "c", "t", and "T" standard format strings use the formatting conventions of the invariant culture. Custom format strings define the precise format of the input string and use literal characters to separate the components of a time interval.  
  
 The `formatProvider` parameter is an <xref:System.IFormatProvider> implementation that provides culture-specific information about the format of the returned string if the format string used to parse `input` is a standard format string. The `formatProvider` parameter can be any of the following:  
  
-   A <xref:System.Globalization.CultureInfo> object that represents the culture whose formatting conventions are to be reflected in the returned string. The <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property defines the formatting of the returned string.  
  
-   A <xref:System.Globalization.DateTimeFormatInfo> object that defines the formatting of the returned string.  
  
-   A custom object that implements the <xref:System.IFormatProvider> interface. Its <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> method returns a <xref:System.Globalization.DateTimeFormatInfo> object that provides formatting information.  
  
 If `formatProvider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> object that is associated with the current culture is used.  
  
 The `styles` parameter affects the interpretation of strings that are parsed using custom format strings. It determines whether `input` is interpreted as a negative time interval only if a negative sign is present (<xref:System.Globalization.TimeSpanStyles?displayProperty=fullName>), or whether it is always interpreted as a negative time interval (<xref:System.Globalization.TimeSpanStyles?displayProperty=fullName>). If <xref:System.Globalization.TimeSpanStyles?displayProperty=fullName> is not used, `format` must include a literal negative sign symbol (such as "\\-") to successfully parse a negative time interval.  
  
   
  
## Examples  
 The following example calls the TryParseExact method to convert each element of a string array to a <xref:System.TimeSpan> value. The strings can represent a time interval in either the general short format or the general long format.  
  
 In addition, the example changes the way in which the time interval parsing methods interpret a single digit. Ordinarily, a single digit is interpreted as the number of days in a time interval. Instead, the `%h` custom format string is used to interpret a single digit as the number of hours. For this change to be effective, note that the `%h` custom format string must precede the other format strings in the `formats` array. Also note from the output that the <xref:System.Globalization.TimeSpanStyles?displayProperty=fullName> flag specified in the method call is used only when parsing a string with this format specifier.  
  
 [!code-cs[System.TimeSpan.TryParseExact#4](~/add/codesnippet/csharp/3e789f3b-bfc7-4c7f-9398-_1.cs)]
 [!code-vb[System.TimeSpan.TryParseExact#4](~/add/codesnippet/visualbasic/3e789f3b-bfc7-4c7f-9398-_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan Zero;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan Zero" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the zero <see cref="T:System.TimeSpan" /> value. This field is read-only.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Because the value of the Zero field is a <xref:System.TimeSpan> object that represents a zero time value, you can compare it with other <xref:System.TimeSpan> objects to determine whether the latter represent positive, non-zero, or negative time intervals. You can also use this field to initialize a <xref:System.TimeSpan> object to a zero time value.  
  
   
  
## Examples  
 The following example references and displays the value of the Zero field.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/add/codesnippet/cpp/f-system.timespan.zero_1.cpp)]
 [!code-cs[System.TimeSpan.Fields#1](~/add/codesnippet/csharp/f-system.timespan.zero_1.cs)]
 [!code-vb[System.TimeSpan.Fields#1](~/add/codesnippet/visualbasic/f-system.timespan.zero_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>