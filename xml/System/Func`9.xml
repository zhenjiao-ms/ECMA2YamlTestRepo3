<Type Name="Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,TResult&gt;" FullName="System.Func&lt;T1,T2,T3,T4,T5,T6,T7,T8,TResult&gt;">
  <TypeSignature Language="C#" Value="public delegate TResult Func&lt;in T1,in T2,in T3,in T4,in T5,in T6,in T7,in T8,out TResult&gt;(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Func`9&lt;- T1, - T2, - T3, - T4, - T5, - T6, - T7, - T8, + TResult&gt; extends System.MulticastDelegate" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T2">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T3">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T4">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T5">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T6">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T7">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="T8">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TResult">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="arg1" Type="T1" />
    <Parameter Name="arg2" Type="T2" />
    <Parameter Name="arg3" Type="T3" />
    <Parameter Name="arg4" Type="T4" />
    <Parameter Name="arg5" Type="T5" />
    <Parameter Name="arg6" Type="T6" />
    <Parameter Name="arg7" Type="T7" />
    <Parameter Name="arg8" Type="T8" />
  </Parameters>
  <ReturnValue>
    <ReturnType>TResult</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T1">To be added.</typeparam>
    <typeparam name="T2">To be added.</typeparam>
    <typeparam name="T3">To be added.</typeparam>
    <typeparam name="T4">To be added.</typeparam>
    <typeparam name="T5">To be added.</typeparam>
    <typeparam name="T6">To be added.</typeparam>
    <typeparam name="T7">To be added.</typeparam>
    <typeparam name="T8">To be added.</typeparam>
    <typeparam name="TResult">To be added.</typeparam>
    <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
    <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
    <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
    <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
    <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
    <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
    <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
    <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
    <summary>Encapsulates a method that has eight parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.</summary>
    <returns>The return value of the method that this delegate encapsulates.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have eight parameters, each of which is passed to it by value, and that it must return a value.  
  
> [!NOTE]
>  To reference a method that has eight parameters and returns `void` (or in Visual Basic, that is declared as a `Sub` rather than as a `Function`), use the generic <xref:System.Action%608> delegate instead.  
  
 You can also use the Func(T1, delegate with anonymous methods and lambda expressions.  
  
 The underlying type of a lambda expression is one of the generic `Func` delegates. This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>