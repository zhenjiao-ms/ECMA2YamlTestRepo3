<Type Name="Guid" FullName="System.Guid">
  <TypeSignature Language="C#" Value="public struct Guid : IComparable, IComparable&lt;Guid&gt;, IEquatable&lt;Guid&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Guid extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.Guid&gt;, class System.IEquatable`1&lt;valuetype System.Guid&gt;, class System.IFormattable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.Guid&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Guid&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a globally unique identifier (GUID).  
  
 To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/guid.cs#b622ef5f6b76c10a).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/guid.cs#b622ef5f6b76c10a). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  
  
 A GUID is a 128-bit integer (16 bytes) that can be used across all computers and networks wherever a unique identifier is required. Such an identifier has a very low probability of being duplicated.  
  
   
  
## Examples  
 The following example uses the <xref:System.Runtime.InteropServices.GuidAttribute?displayProperty=fullName> class to assign a GUID to an interface and to a user-defined class. It retrieves the value of the GUID by calling the <xref:System.Attribute.GetCustomAttribute%2A> method, and compares it with two other GUIDs to determine whether they are equal.  
  
 [!code-cs[Guid#1](~/add/codesnippet/csharp/t-system.guid_1.cs)]
 [!code-cpp[Guid#1](~/add/codesnippet/cpp/t-system.guid_1.cpp)]
 [!code-vb[Guid#1](~/add/codesnippet/visualbasic/t-system.guid_1.vb)]  
  
 Note that the <xref:System.Runtime.InteropServices.GuidAttribute> attribute is typically used in an application to expose a type to COM. If you compile this example, you can run the [Assembly Registration tool (Regasm.exe)](../Topic/Regasm.exe%20\(Assembly%20Registration%20Tool\).md) on the generated assembly to create registry (.reg) and type library (.tlb) files. The .reg file can be used to register the coclass in the registry, and the .tlb file can provide metadata for COM interop.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Guid (byte[] b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] b) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="b" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="b">A 16-element byte array containing values with which to initialize the GUID.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Guid" /> structure by using the specified array of bytes.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="b" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="b" /> is not 16 bytes long.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Guid (string g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string g) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="g" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="g">A string that contains a GUID in one of the following formats ("d" represents a hexadecimal digit whose case is ignored):  
  
 32 contiguous digits:  
  
 dddddddddddddddddddddddddddddddd  
  
 -or-  
  
 Groups of 8, 4, 4, 4, and 12 digits with hyphens between the groups. The entire GUID can optionally be enclosed in matching braces or parentheses:  
  
 dddddddd-dddd-dddd-dddd-dddddddddddd  
  
 -or-  
  
 {dddddddd-dddd-dddd-dddd-dddddddddddd}  
  
 -or-  
  
 (dddddddd-dddd-dddd-dddd-dddddddddddd)  
  
 -or-  
  
 Groups of 8, 4, and 4 digits, and a subset of eight groups of 2 digits, with each group prefixed by "0x" or "0X", and separated by commas. The entire GUID, as well as the subset, is enclosed in matching braces:  
  
 {0xdddddddd, 0xdddd, 0xdddd,{0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd,0xdd}}  
  
 All braces, commas, and "0x" prefixes are required. All embedded spaces are ignored. All leading zeros in a group are ignored.  
  
 The digits shown in a group are the maximum number of meaningful digits that can appear in that group. You can specify from 1 to the number of digits shown for a group. The specified digits are assumed to be the low-order digits of the group.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Guid" /> structure by using the value represented by the specified string.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The alphabetic hexadecimal digits in the `g` parameter can be uppercase or lowercase. For example, the following strings represent the same GUID:  
  
 "ca761232ed4211cebacd00aa0057b223"  
  
 "CA761232-ED42-11CE-BACD-00AA0057B223"  
  
 "{CA761232-ED42-11CE-BACD-00AA0057B223}"  
  
 "(CA761232-ED42-11CE-BACD-00AA0057B223)"  
  
 "{0xCA761232, 0xED42, 0x11CE, {0xBA, 0xCD, 0x00, 0xAA, 0x00, 0x57, 0xB2, 0x23}}"  
  
   
  
## Examples  
 The following example passes each string listed in the Remarks section to the Guid constructor.  
  
 [!code-cs[System.Guid.ctor#1](~/add/codesnippet/csharp/m-system.guid.sharpctor-_1.cs)]
 [!code-vb[System.Guid.ctor#1](~/add/codesnippet/visualbasic/m-system.guid.sharpctor-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="g" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The format of <paramref name="g" /> is invalid.</exception>
        <exception cref="T:System.OverflowException">The format of <paramref name="g" /> is invalid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Guid (int a, short b, short c, byte[] d);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 a, int16 b, int16 c, unsigned int8[] d) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int16" />
        <Parameter Name="c" Type="System.Int16" />
        <Parameter Name="d" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="a">The first 4 bytes of the GUID.</param>
        <param name="b">The next 2 bytes of the GUID.</param>
        <param name="c">The next 2 bytes of the GUID.</param>
        <param name="d">The remaining 8 bytes of the GUID.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Guid" /> structure by using the specified integers and byte array.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 `Guid(1,2,3,new byte[]{0,1,2,3,4,5,6,7})` creates a <xref:System.Guid> that corresponds to "00000001-0002-0003-0001-020304050607".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="d" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="d" /> is not 8 bytes long.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Guid (int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 a, int16 b, int16 c, unsigned int8 d, unsigned int8 e, unsigned int8 f, unsigned int8 g, unsigned int8 h, unsigned int8 i, unsigned int8 j, unsigned int8 k) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="a" Type="System.Int32" />
        <Parameter Name="b" Type="System.Int16" />
        <Parameter Name="c" Type="System.Int16" />
        <Parameter Name="d" Type="System.Byte" />
        <Parameter Name="e" Type="System.Byte" />
        <Parameter Name="f" Type="System.Byte" />
        <Parameter Name="g" Type="System.Byte" />
        <Parameter Name="h" Type="System.Byte" />
        <Parameter Name="i" Type="System.Byte" />
        <Parameter Name="j" Type="System.Byte" />
        <Parameter Name="k" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="a">The first 4 bytes of the GUID.</param>
        <param name="b">The next 2 bytes of the GUID.</param>
        <param name="c">The next 2 bytes of the GUID.</param>
        <param name="d">The next byte of the GUID.</param>
        <param name="e">The next byte of the GUID.</param>
        <param name="f">The next byte of the GUID.</param>
        <param name="g">The next byte of the GUID.</param>
        <param name="h">The next byte of the GUID.</param>
        <param name="i">The next byte of the GUID.</param>
        <param name="j">The next byte of the GUID.</param>
        <param name="k">The next byte of the GUID.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Guid" /> structure by using the specified integers and bytes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Specifying individual bytes in this manner can be used to circumvent byte order restrictions (big-endian or little-endian byte order) on particular types of computers.  
  
   
  
## Examples  
 The following example creates a GUID whose string representation is "0000000a-000b-000c-0001-020304050607".  
  
 [!code-vb[System.Guid.Ctor#2](~/add/codesnippet/visualbasic/b68a05ed-d799-49a8-aad3-_1.vb)]
 [!code-cs[System.Guid.Ctor#2](~/add/codesnippet/csharp/b68a05ed-d799-49a8-aad3-_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Guid (uint a, ushort b, ushort c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int32 a, unsigned int16 b, unsigned int16 c, unsigned int8 d, unsigned int8 e, unsigned int8 f, unsigned int8 g, unsigned int8 h, unsigned int8 i, unsigned int8 j, unsigned int8 k) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="a" Type="System.UInt32" />
        <Parameter Name="b" Type="System.UInt16" />
        <Parameter Name="c" Type="System.UInt16" />
        <Parameter Name="d" Type="System.Byte" />
        <Parameter Name="e" Type="System.Byte" />
        <Parameter Name="f" Type="System.Byte" />
        <Parameter Name="g" Type="System.Byte" />
        <Parameter Name="h" Type="System.Byte" />
        <Parameter Name="i" Type="System.Byte" />
        <Parameter Name="j" Type="System.Byte" />
        <Parameter Name="k" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="a">The first 4 bytes of the GUID.</param>
        <param name="b">The next 2 bytes of the GUID.</param>
        <param name="c">The next 2 bytes of the GUID.</param>
        <param name="d">The next byte of the GUID.</param>
        <param name="e">The next byte of the GUID.</param>
        <param name="f">The next byte of the GUID.</param>
        <param name="g">The next byte of the GUID.</param>
        <param name="h">The next byte of the GUID.</param>
        <param name="i">The next byte of the GUID.</param>
        <param name="j">The next byte of the GUID.</param>
        <param name="k">The next byte of the GUID.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Guid" /> structure by using the specified unsigned integers and bytes.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Specifying the bytes in this manner avoids endianness issues.  
  
   
  
## Examples  
 Guid(0xa,0xb,0xc,0,1,2,3,4,5,6,7) creates a <xref:System.Guid> that corresponds to "0000000a-000b-000c-0001-020304050607".  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (Guid value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.Guid value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="value">An object to compare to this instance.</param>
        <summary>Compares this instance to a specified <see cref="T:System.Guid" /> object and returns an indication of their relative values.</summary>
        <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table">  
<listheader>  
<term> Return value  
  
 </term>  
<description> Description  
  
 </description>  
</listheader>  
<item>  
<term> A negative integer  
  
 </term>  
<description> This instance is less than <paramref name="value" />.  
  
 </description>  
</item>  
<item>  
<term> Zero  
  
 </term>  
<description> This instance is equal to <paramref name="value" />.  
  
 </description>  
</item>  
<item>  
<term> A positive integer  
  
 </term>  
<description> This instance is greater than <paramref name="value" />.  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The CompareTo method compares the GUIDs as if they were values provided to the [Guid(Int32, Int16, Int16, Byte\[\])](assetId:///M:System.Guid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte[])?qualifyHint=False&autoUpgrade=False) constructor, as follows:  
  
-   It compares the <xref:System.UInt32> values, and returns a result if they are unequal. If they are equal, it performs the next comparison.  
  
-   It compares the first <xref:System.UInt16> values, and returns a result if they are unequal. If they are equal, it performs the next comparison.  
  
-   It compares the second <xref:System.UInt16> values, and returns a result if they are unequal. If they are equal, it performs the next comparison.  
  
-   If performs a byte-by-byte comparison of the next eight <xref:System.Byte> values. When it encounters the first unequal pair, it returns the result. Otherwise, it returns 0 to indicate that the two <xref:System.Guid> values are equal.  
  
 Note that the final eight bytes appear in the string representation of a <xref:System.Guid> in reverse order, from low byte to high byte. For example, in the string representation of the <xref:System.Guid> value "01e75c83-c6f5-4192-b57e-7427cec5560d", the final eight bytes are "b57e-7427cec5560d." In other words, the final eight bytes are compared on a byte-by-byte basis from left to right starting with 0xb5.  
  
 If two GUIDs have equal values for a component, the method compares the next component. When it finds a component whose values are unequal, it returns the result.  
  
 This method implements the <xref:System.IComparable%601?displayProperty=fullName> interface and performs slightly better than the <xref:System.Guid.CompareTo%2A?displayProperty=fullName> method because it does not have to convert the `value` parameter to a <xref:System.Guid> value.  
  
   
  
## Examples  
 The following example calls the CompareTo method to compare a GUID value with two similar GUID values.  
  
 [!code-cs[System.Guid.CompareTo#1](~/add/codesnippet/csharp/m-system.guid.compareto-_1_1.cs)]
 [!code-vb[System.Guid.CompareTo#1](~/add/codesnippet/visualbasic/m-system.guid.compareto-_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object to compare, or <see langword="null" />.</param>
        <summary>Compares this instance to a specified object and returns an indication of their relative values.</summary>
        <returns>A signed number indicating the relative values of this instance and <paramref name="value" />.  
  
 <list type="table">  
<listheader>  
<term> Return value  
  
 </term>  
<description> Description  
  
 </description>  
</listheader>  
<item>  
<term> A negative integer  
  
 </term>  
<description> This instance is less than <paramref name="value" />.  
  
 </description>  
</item>  
<item>  
<term> Zero  
  
 </term>  
<description> This instance is equal to <paramref name="value" />.  
  
 </description>  
</item>  
<item>  
<term> A positive integer  
  
 </term>  
<description> This instance is greater than <paramref name="value" />, or <paramref name="value" /> is <see langword="null" />.  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `value` parameter must be `null` or an instance of <xref:System.Guid>; otherwise, an exception is thrown. Any instance of <xref:System.Guid>, regardless of its value, is considered greater than `null`.  
  
 The <xref:System.Guid.CompareTo%2A> method compares the GUIDs as if they were values provided to the <xref:System.Guid.%23ctor%2A> constructor, as follows:  
  
-   It compares the <xref:System.Int32> values, and returns a result if they are unequal. If they are equal, it performs the next comparison.  
  
-   It compares the first <xref:System.Int16> values, and returns a result if they are unequal. If they are equal, it performs the next comparison.  
  
-   It compares the second <xref:System.Int16> values, and returns a result if they are unequal. If they are equal, it performs the next comparison.  
  
-   If performs a byte-by-byte comparison of the next eight <xref:System.Byte> values. When it encounters the first unequal pair, it returns the result. Otherwise, it returns 0 to indicate that the two <xref:System.Guid> values are equal.  
  
 If two GUIDs have equal values for a component, the method compares the next component. When it finds a component whose values are unequal, it returns the result.  
  
 Note that the final eight bytes appear in the string representation of a <xref:System.Guid> in reverse order, from low byte to high byte. For example, in the string representation of the <xref:System.Guid> value "01e75c83-c6f5-4192-b57e-7427cec5560d", the final eight bytes are "b57e-7427cec5560d."  
  
   
  
## Examples  
 The following example uses the <xref:System.Runtime.InteropServices.GuidAttribute> attribute to assign a GUID to a class. It retrieves the value of this GUID by calling the <xref:System.Attribute.GetCustomAttribute%2A?displayProperty=fullName> method and passing the <xref:System.Runtime.InteropServices.GuidAttribute.Value%2A> property of the returned <xref:System.Runtime.InteropServices.GuidAttribute> object to the <xref:System.Guid.Parse%2A> method. Then it compares that GUID with an array of values.  
  
 [!code-cs[System.Guid.CompareTo#2](~/add/codesnippet/csharp/m-system.guid.compareto-_0_1.cs)]
 [!code-vb[System.Guid.CompareTo#2](~/add/codesnippet/visualbasic/m-system.guid.compareto-_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> is not a <see cref="T:System.Guid" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static readonly Guid Empty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.Guid Empty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A read-only instance of the <see cref="T:System.Guid" /> structure whose value is all zeros.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can compare a GUID with the value of the Empty field to determine whether a GUID is non-zero. The following example uses the <xref:System.Guid.op_Equality%2A> operator to compare two GUID values with Empty to determine whether they consist exclusively of zeros.  
  
 [!code-vb[System.Guid.Empty#1](~/add/codesnippet/visualbasic/f-system.guid.empty_1.vb)]
 [!code-cs[System.Guid.Empty#1](~/add/codesnippet/csharp/f-system.guid.empty_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Guid g);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.Guid g) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="g">An object to compare to this instance.</param>
        <summary>Returns a value indicating whether this instance and a specified <see cref="T:System.Guid" /> object represent the same value.</summary>
        <returns>
          <see langword="true" /> if <paramref name="g" /> is equal to this instance; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Two <xref:System.Guid> objects are equal if they have identical byte values.  
  
 This method performs slightly better than the <xref:System.Guid.Equals%2A> method because it does not have to box the `g` parameter.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">The object to compare with this instance.</param>
        <summary>Returns a value that indicates whether this instance is equal to a specified object.</summary>
        <returns>
          <see langword="true" /> if <paramref name="o" /> is a <see cref="T:System.Guid" /> that has the same value as this instance; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Two <xref:System.Guid> objects are equal if they have identical byte values.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for this instance.</summary>
        <returns>The hash code for this instance.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="NewGuid">
      <MemberSignature Language="C#" Value="public static Guid NewGuid ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Guid NewGuid() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Guid" /> structure.</summary>
        <returns>A new GUID object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This is a convenient `static` method that you can call to get a new <xref:System.Guid>. The method wraps a call to the Windows [CoCreateGuid](http://msdn.microsoft.com/library/windows/desktop/ms688568.aspx) function. The returned <xref:System.Guid> is guaranteed to not equal <xref:System.Guid?displayProperty=fullName>.  
  
   
  
## Examples  
 The following code example creates and displays the values of two <xref:System.Guid> objects.  
  
 [!code-vb[system.guid.newguid#1](~/add/codesnippet/visualbasic/m-system.guid.newguid_1.vb)]
 [!code-cs[system.guid.newguid#1](~/add/codesnippet/csharp/m-system.guid.newguid_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (Guid a, Guid b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Guid a, valuetype System.Guid b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Guid" />
        <Parameter Name="b" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="a">The first object to compare.</param>
        <param name="b">The second object to compare.</param>
        <summary>Indicates whether the values of two specified <see cref="T:System.Guid" /> objects are equal.</summary>
        <returns>
          <see langword="true" /> if <paramref name="a" /> and <paramref name="b" /> are equal; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example uses the Equality operator to compare two GUID values with <xref:System.Guid?displayProperty=fullName> to determine whether they consist exclusively of zeros.  
  
 [!code-vb[System.Guid.Empty#1](~/add/codesnippet/visualbasic/m-system.guid.op-equalit_1.vb)]
 [!code-cs[System.Guid.Empty#1](~/add/codesnippet/csharp/m-system.guid.op-equalit_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (Guid a, Guid b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Guid a, valuetype System.Guid b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Guid" />
        <Parameter Name="b" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="a">The first object to compare.</param>
        <param name="b">The second object to compare.</param>
        <summary>Indicates whether the values of two specified <see cref="T:System.Guid" /> objects are not equal.</summary>
        <returns>
          <see langword="true" /> if <paramref name="a" /> and <paramref name="b" /> are not equal; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static Guid Parse (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Guid Parse(string input) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">The string to convert.</param>
        <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure.</summary>
        <returns>A structure that contains the value that was parsed.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The Parse method trims any leading or trailing white space from `input` and converts the string representation of a GUID to a <xref:System.Guid> value. This method can convert strings in any of the five formats produced by the <xref:System.Guid.ToString%28System.String%29> and <xref:System.Guid.ToString%28System.String%2CSystem.IFormatProvider%29> methods, as shown in the following table.  
  
|Specifier|Description|Format|  
|---------------|-----------------|------------|  
|`N`|32 digits|00000000000000000000000000000000|  
|`D`|32 digits separated by hyphens|00000000-0000-0000-0000-000000000000|  
|`B`|32 digits separated by hyphens, enclosed in braces|{00000000-0000-0000-0000-000000000000}|  
|`P`|32 digits separated by hyphens, enclosed in parentheses|(00000000-0000-0000-0000-000000000000)|  
|`X`|Four hexadecimal values enclosed in braces, where the fourth value is a subset of eight hexadecimal values that is also enclosed in braces|{0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}|  
  
 The method throws a <xref:System.FormatException> if it is unable to successfully parse the string. Here are some of the reasons why this might occur include:  
  
-   `input` contains characters that are not part of the hexadecimal character set.  
  
-   `input` has too many or too few numeric characters.  
  
-   `input` has too many or too few of the non-numeric characters appropriate for a particular format.  
  
-   `input` is not in one of the formats recognized by the <xref:System.Guid.ToString%2A> method and listed in the previous table.  
  
 Use the <xref:System.Guid.TryParse%2A> method to catch any unsuccessful parse operations without having to handle an exception.  
  
   
  
## Examples  
 The following example creates a new GUID, converts it to three separate string representations by calling the <xref:System.Guid.ToString%28System.String%29> method with the "B", "D", and "X" format specifiers, and then calls the Parse method to convert the strings back to <xref:System.Guid> values.  
  
 [!code-cs[System.Guid.Parse#3](~/add/codesnippet/csharp/m-system.guid.parse-syst_1.cs)]
 [!code-vb[System.Guid.Parse#3](~/add/codesnippet/visualbasic/m-system.guid.parse-syst_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> is not in a recognized format.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static Guid ParseExact (string input, string format);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Guid ParseExact(string input, string format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">The GUID to convert.</param>
        <param name="format">One of the following specifiers that indicates the exact format to use when interpreting `input`: "N", "D", "B", "P", or "X".</param>
        <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure, provided that the string is in the specified format.</summary>
        <returns>A structure that contains the value that was parsed.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ParseExact method requires the string to convert to be exactly in the format specified by the `format` parameter, after leading and trailing white-space characters are removed. The following table shows the accepted format specifiers for the `format` parameter. "0" represents a digit; hyphens ("-"), braces ("{", "}"), and parentheses ("(", ")") appear as shown.  
  
|Specifier|Format of the `input` parameter|  
|---------------|-------------------------------------|  
|N|32 digits:<br /><br /> 00000000000000000000000000000000|  
|D|32 digits separated by hyphens:<br /><br /> 00000000-0000-0000-0000-000000000000|  
|B|32 digits separated by hyphens, enclosed in braces:<br /><br /> {00000000-0000-0000-0000-000000000000}|  
|P|32 digits separated by hyphens, enclosed in parentheses:<br /><br /> (00000000-0000-0000-0000-000000000000)|  
|X|Four hexadecimal values enclosed in braces, where the fourth value is a subset of eight hexadecimal values that is also enclosed in braces:<br /><br /> {0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}|  
  
   
  
## Examples  
 The following example calls the <xref:System.Guid.ToString%28System.String%29> method with each of the supported format specifiers to generate an array of strings that represent a single GUID. These are then passed to the ParseExact method, which successfully parses only the string that conforms to the "B" format specifier.  
  
 [!code-cs[System.Guid.Parse#4](~/add/codesnippet/csharp/m-system.guid.parseexact_1.cs)]
 [!code-vb[System.Guid.Parse#4](~/add/codesnippet/visualbasic/m-system.guid.parseexact_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> or <paramref name="format" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" /> is not in the format specified by <paramref name="format" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToByteArray">
      <MemberSignature Language="C#" Value="public byte[] ToByteArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] ToByteArray() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a 16-element byte array that contains the value of this instance.</summary>
        <returns>A 16-element byte array.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can use the byte array returned by this method to round-trip a <xref:System.Guid> value by calling the [Guid(Byte\[\])](assetId:///M:System.Guid.#ctor(System.Byte[])?qualifyHint=False&autoUpgrade=False) constructor.  
  
 Note that the order of bytes in the returned byte array is different from the string representation of a <xref:System.Guid> value. The order of the beginning four-byte group and the next two two-byte groups is reversed, whereas the order of the last two-byte group and the closing six-byte group is the same. The example provides an illustration.  
  
   
  
## Examples  
 The following example calls the <xref:System.Guid.NewGuid%2A> method to create a <xref:System.Guid> value, and then calls the ToByteArray method to represent the <xref:System.Guid> value as a byte array. It then displays both values to the console. Finally, it instantiates a new <xref:System.Guid> value from the byte array and calls its <xref:System.Guid.Equals%28System.Guid%29> method to show that the two <xref:System.Guid> values are identical.  
  
 [!code-vb[System.Guid.ToByteArray#1](~/add/codesnippet/visualbasic/m-system.guid.tobytearray_1.vb)]
 [!code-cs[System.Guid.ToByteArray#1](~/add/codesnippet/csharp/m-system.guid.tobytearray_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string representation of the value of this instance in registry format.</summary>
        <returns>The value of this <see cref="T:System.Guid" />, formatted by using the "D" format specifier as follows:  
  
 `xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx`  
  
 where the value of the GUID is represented as a series of lowercase hexadecimal digits in groups of 8, 4, 4, 4, and 12 digits and separated by hyphens. An example of a return value is "382c74c3-721d-4f34-80e5-57657b6cbc27". To convert the hexadecimal digits from a through f to uppercase, call the <see cref="System.String.ToUpper%2A" /> method on the returned string.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method provides a default GUID format that is sufficient for typical use; however, other versions of this method that take a `format` parameter provide a few common format variations.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">A single format specifier that indicates how to format the value of this <see cref="T:System.Guid" />. The `format` parameter can be "N", "D", "B", "P", or "X". If `format` is <see langword="null" /> or an empty string (""), "D" is used.</param>
        <summary>Returns a string representation of the value of this <see cref="T:System.Guid" /> instance, according to the provided format specifier.</summary>
        <returns>The value of this <see cref="T:System.Guid" />, represented as a series of lowercase hexadecimal digits in the specified format.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following table shows the accepted format specifiers for the `format` parameter. "0" represents a digit; hyphens ("-"), braces ("{", "}"), and parentheses ("(", ")") appear as shown.  
  
|Specifier|Format of return value|  
|---------------|----------------------------|  
|`N`|32 digits:<br /><br /> 00000000000000000000000000000000|  
|`D`|32 digits separated by hyphens:<br /><br /> 00000000-0000-0000-0000-000000000000|  
|`B`|32 digits separated by hyphens, enclosed in braces:<br /><br /> {00000000-0000-0000-0000-000000000000}|  
|`P`|32 digits separated by hyphens, enclosed in parentheses:<br /><br /> (00000000-0000-0000-0000-000000000000)|  
|`X`|Four hexadecimal values enclosed in braces, where the fourth value is a subset of eight hexadecimal values that is also enclosed in braces:<br /><br /> {0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}|  
  
 The hexadecimal digits a through f are lowercase in the returned string. To convert them to uppercase, call the <xref:System.String.ToUpper%2A?displayProperty=fullName> method on the returned string.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The value of <paramref name="format" /> is not <see langword="null" />, an empty string (""), "N", "D", "B", "P", or "X".</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">A single format specifier that indicates how to format the value of this <see cref="T:System.Guid" />. The `format` parameter can be "N", "D", "B", "P", or "X". If `format` is <see langword="null" /> or an empty string (""), "D" is used.</param>
        <param name="provider">(Reserved) An object that supplies culture-specific formatting information.</param>
        <summary>Returns a string representation of the value of this instance of the <see cref="T:System.Guid" /> class, according to the provided format specifier and culture-specific format information.</summary>
        <returns>The value of this <see cref="T:System.Guid" />, represented as a series of lowercase hexadecimal digits in the specified format.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `provider` parameter is reserved for future use and does not contribute to the execution of this method. You can pass `null` in the method call.  
  
 The following table shows the accepted format specifiers for the `format` parameter. "0" represents a digit; hyphens ("-"), braces ("{", "}"), and parentheses ("(", ")") appear as shown.  
  
|Specifier|Format of return value|  
|---------------|----------------------------|  
|`N`|32 digits:<br /><br /> 00000000000000000000000000000000|  
|`D`|32 digits separated by hyphens:<br /><br /> 00000000-0000-0000-0000-000000000000|  
|`B`|32 digits separated by hyphens, enclosed in braces:<br /><br /> {00000000-0000-0000-0000-000000000000}|  
|`P`|32 digits separated by hyphens, enclosed in parentheses:<br /><br /> (00000000-0000-0000-0000-000000000000)|  
|`X`|Four hexadecimal values enclosed in braces, where the fourth value is a subset of eight hexadecimal values that is also enclosed in braces:<br /><br /> {0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}|  
  
 The hexadecimal digits a through f are lowercase in the returned string. To convert them to uppercase, call the <xref:System.String.ToUpper%2A?displayProperty=fullName> method on the returned string.  
  
 Because the `provider` parameter is ignored, you cannot use it to provide a custom formatting solution. To represent a <xref:System.Guid> value as a string in a format that isn't supported by the standard GUID format strings, call the [String.Format(IFormatProvider, String, Object\[\])](assetId:///M:System.String.Format(System.IFormatProvider,System.String,System.Object[])?qualifyHint=True&autoUpgrade=False) method with a `provider` object that implements both the <xref:System.ICustomFormatter> and <xref:System.IFormatProvider> interfaces. For more information, see the "Custom Formatting with ICustomFormatter" section in the [Formatting Types](../Topic/Formatting%20Types%20in%20the%20.NET%20Framework.md) article.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">The value of <paramref name="format" /> is not <see langword="null" />, an empty string (""), "N", "D", "B", "P", or "X".</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, out Guid result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, valuetype System.Guid result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="result" Type="System.Guid&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">The GUID to convert.</param>
        <param name="result">The structure that will contain the parsed value. If the method returns <see langword="true" />, `result` contains a valid <see cref="T:System.Guid" />. If the method returns <see langword="false" />, `result` equals <see cref="T:System.Guid" />.</param>
        <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure.</summary>
        <returns>
          <see langword="true" /> if the parse operation was successful; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is like the <xref:System.Guid.Parse%2A> method, except that instead of returning the parsed GUID, it returns `false` if `input` is `null` or not in a recognized format, and doesn't throw an exception. It trims any leading or trailing white space from `input` and converts strings in any of the five formats recognized by the <xref:System.Guid.ToString%28System.String%29> and <xref:System.Guid.ToString%28System.String%2CSystem.IFormatProvider%29>methods, as shown in the following table.  
  
|Specifier|Description|Format|  
|---------------|-----------------|------------|  
|`N`|32 digits|00000000000000000000000000000000|  
|`D`|32 digits separated by hyphens|00000000-0000-0000-0000-000000000000|  
|`B`|32 digits separated by hyphens, enclosed in braces|{00000000-0000-0000-0000-000000000000}|  
|`P`|32 digits separated by hyphens, enclosed in parentheses|(00000000-0000-0000-0000-000000000000)|  
|`X`|Four hexadecimal values enclosed in braces, where the fourth value is a subset of eight hexadecimal values that is also enclosed in braces|{0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}|  
  
   
  
## Examples  
 The following example creates a new GUID, converts it to three separate string representations by calling the <xref:System.Guid.ToString%28System.String%29> method with the "B", "D", and "X" format specifiers, and then calls the TryParse method to convert the strings back to <xref:System.Guid> values.  
  
 [!code-cs[System.Guid.Parse#2](~/add/codesnippet/csharp/m-system.guid.tryparse-s_1.cs)]
 [!code-vb[System.Guid.Parse#2](~/add/codesnippet/visualbasic/m-system.guid.tryparse-s_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, out Guid result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, valuetype System.Guid result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="result" Type="System.Guid&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">The GUID to convert.</param>
        <param name="format">One of the following specifiers that indicates the exact format to use when interpreting `input`: "N", "D", "B", "P", or "X".</param>
        <param name="result">The structure that will contain the parsed value. If the method returns <see langword="true" />, `result` contains a valid <see cref="T:System.Guid" />. If the method returns <see langword="false" />, `result` equals <see cref="T:System.Guid" />.</param>
        <summary>Converts the string representation of a GUID to the equivalent <see cref="T:System.Guid" /> structure, provided that the string is in the specified format.</summary>
        <returns>
          <see langword="true" /> if the parse operation was successful; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method requires the string to convert to be exactly in the format specified by the `format` parameter, after leading and trailing white-space characters are removed. It returns `false` if `input` is `null` or is not in the format specified by `format`, and doesn't throw an exception.  
  
 The following table shows the accepted format specifiers for the `format` parameter. "0" represents a digit; hyphens ("-"), braces ("{", "}"), and parentheses ("(", ")") appear as shown.  
  
|Specifier|Format of the `input` parameter|  
|---------------|-------------------------------------|  
|N|32 digits:<br /><br /> 00000000000000000000000000000000|  
|D|32 digits separated by hyphens:<br /><br /> 00000000-0000-0000-0000-000000000000|  
|B|32 digits separated by hyphens, enclosed in braces:<br /><br /> {00000000-0000-0000-0000-000000000000}|  
|P|32 digits separated by hyphens, enclosed in parentheses:<br /><br /> (00000000-0000-0000-0000-000000000000)|  
|X|Four hexadecimal values enclosed in braces, where the fourth value is a subset of eight hexadecimal values that is also enclosed in braces:<br /><br /> {0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}|  
  
   
  
## Examples  
 The following example calls the <xref:System.Guid.ToString%28System.String%29> method with each of the supported format specifiers to generate an array of strings that represent a single GUID. These are then passed to the TryParseExact method, which successfully parses the string that conforms to the "B" format specifier.  
  
 [!code-cs[System.Guid.Parse#5](~/add/codesnippet/csharp/m-system.guid.tryparseex_1.cs)]
 [!code-vb[System.Guid.Parse#5](~/add/codesnippet/visualbasic/m-system.guid.tryparseex_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>