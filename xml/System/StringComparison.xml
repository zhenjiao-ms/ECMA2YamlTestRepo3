<Type Name="StringComparison" FullName="System.StringComparison">
  <TypeSignature Language="C#" Value="public enum StringComparison" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed StringComparison extends System.Enum" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies the culture, case, and sort rules to be used by certain overloads of the <see cref="System.String.Compare%2A" /> and <see cref="System.String.Equals%2A" /> methods.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The StringComparison enumeration is used to specify whether a string comparison should use the current culture or the invariant culture, word or ordinal sort rules, and be case-sensitive or case-insensitive.  
  
> [!IMPORTANT]
>  When you call a string comparison method such as <xref:System.String.Compare%2A?displayProperty=fullName>, <xref:System.String.Equals%2A?displayProperty=fullName>, or <xref:System.String.IndexOf%2A?displayProperty=fullName>, you should always call an overload that includes a parameter of type StringComparison so that you can specify the type of comparison that the method performs. For more information, see [Best Practices for Using Strings](../Topic/Best%20Practices%20for%20Using%20Strings%20in%20the%20.NET%20Framework.md).  
  
 An operation that uses word sort rules performs a culture-sensitive comparison wherein certain nonalphanumeric Unicode characters might have special weights assigned to them. Using word sort rules and the conventions of a specific culture, the hyphen ("-") might have a very small weight assigned to it so that "coop" and "co-op" appear next to each other in a sorted list.  
  
 An operation that uses ordinal sort rules performs a comparison based on the numeric value (Unicode code point) of each <xref:System.Char> in the string. An ordinal comparison is fast but culture-insensitive. When you use ordinal sort rules to sort strings that start with Unicode characters (U+), the string U+xxxx comes before the string U+yyyy if the value of xxxx is numerically less than yyyy.  
  
 For more information about comparisons, see the <xref:System.String?displayProperty=fullName> class remarks. For more information about culture, see the <xref:System.Globalization.CultureInfo?displayProperty=fullName> class remarks. For guidelines on when to use ordinal or culture-sensitive comparison rules or the rules of the invariant culture, see [Best Practices for Using Strings](../Topic/Best%20Practices%20for%20Using%20Strings%20in%20the%20.NET%20Framework.md).  
  
   
  
## Examples  
 The following example compares four sets of words by using each member of the StringComparison enumeration.  The comparisons use the conventions of the English (United States) and Sami, Nothern (Sweden) cultures. Note that the strings "encyclopÃ¦dia" and "encyclopedia" are considered equivalent in the en-US culture but not in the Sami, Northern (Sweden) culture.  
  
 [!code-vb[System.String.Equals#3](~/add/codesnippet/visualbasic/t-system.stringcomparison_1.vb)]
 [!code-cs[System.String.Equals#3](~/add/codesnippet/csharp/t-system.stringcomparison_1.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="CurrentCulture" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.StringComparison CurrentCulture = int32(0)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparison</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Compare strings using culture-sensitive sort rules and the current culture.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="CurrentCultureIgnoreCase">
      <MemberSignature Language="C#" Value="CurrentCultureIgnoreCase" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.StringComparison CurrentCultureIgnoreCase = int32(1)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparison</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Compare strings using culture-sensitive sort rules, the current culture, and ignoring the case of the strings being compared.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="InvariantCulture" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.StringComparison InvariantCulture = int32(2)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparison</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Compare strings using culture-sensitive sort rules and the invariant culture.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InvariantCultureIgnoreCase">
      <MemberSignature Language="C#" Value="InvariantCultureIgnoreCase" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.StringComparison InvariantCultureIgnoreCase = int32(3)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparison</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Compare strings using culture-sensitive sort rules, the invariant culture, and ignoring the case of the strings being compared.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Ordinal">
      <MemberSignature Language="C#" Value="Ordinal" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.StringComparison Ordinal = int32(4)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparison</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Compare strings using ordinal (binary) sort rules.</summary>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="OrdinalIgnoreCase">
      <MemberSignature Language="C#" Value="OrdinalIgnoreCase" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.StringComparison OrdinalIgnoreCase = int32(5)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparison</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Compare strings using ordinal (binary) sort rules and ignoring the case of the strings being compared.</summary>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>