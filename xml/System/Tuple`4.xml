<Type Name="Tuple&lt;T1,T2,T3,T4&gt;" FullName="System.Tuple&lt;T1,T2,T3,T4&gt;">
  <TypeSignature Language="C#" Value="public class Tuple&lt;T1,T2,T3,T4&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Tuple`4&lt;T1, T2, T3, T4&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
    <TypeParameter Name="T3" />
    <TypeParameter Name="T4" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T1">To be added.</typeparam>
    <typeparam name="T2">To be added.</typeparam>
    <typeparam name="T3">To be added.</typeparam>
    <typeparam name="T4">To be added.</typeparam>
    <summary>Represents a 4-tuple, or quadruple.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A tuple is a data structure that has a specific number and sequence of values. The Tuple(T1, class represents a 4-tuple, or quadruple, which is a tuple that has four components.  
  
 You can instantiate a Tuple(T1, object by calling either the <xref:System.Tuple%604.%23ctor%2A> constructor or the static <xref:System.Tuple.Create%60%604%28%60%600%2C%60%601%2C%60%602%2C%60%603%29?displayProperty=fullName> method. You can retrieve the value of the tuple's components by using the read-only <xref:System.Tuple%604.Item1%2A>, <xref:System.Tuple%604.Item2%2A>, <xref:System.Tuple%604.Item3%2A>, and <xref:System.Tuple%604.Item4%2A> instance properties.  
  
 Tuples are commonly used in four different ways:  
  
-   To represent a single set of data. For example, a tuple can represent a database record, and its components can represent individual fields of the record.  
  
-   To provide easy access to, and manipulation of, a data set. The following example defines an array of Tuple(T1, objects that contain the names of baseball pitchers, the number of innings they pitched, and the number of earned runs (runs that scored without fielding errors), and hits that they gave up. The array is passed to the `ComputeStatistics` method, which calculates each pitcher's earned run average (the average number of runs given up in a nine-inning game), and the average number of hits given up per inning. The method also uses these two averages to compute a hypothetical effectiveness average.  
  
     [!code-vb[System.Tuple`4.Class#1](~/add/codesnippet/visualbasic/t-system.tuple`4_1.vb)]
     [!code-cs[System.Tuple`4.Class#1](~/add/codesnippet/csharp/t-system.tuple`4_1.cs)]  
  
-   To return multiple values from a method without the use of `out` parameters (in C#) or `ByRef` parameters (in Visual Basic). For example, the previous example returns its computed statistics, along with the name of the pitcher, in an array of Tuple(T1, objects.  
  
-   To pass multiple values to a method through a single parameter. For example, the <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> method has a single parameter that lets you supply one value to the method that the thread executes at startup. If you supply a Tuple(T1, object as the method argument, you can supply the threadâ€™s startup routine with four items of data.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tuple (T1 item1, T2 item2, T3 item3, T4 item4);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T1 item1, !T2 item2, !T3 item3, !T4 item4) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
      </Parameters>
      <Docs>
        <param name="item1">The value of the tuple's first component.</param>
        <param name="item2">The value of the tuple's second component.</param>
        <param name="item3">The value of the tuple's third component.</param>
        <param name="item4">The value of the tuple's fourth component</param>
        <summary>Initializes a new instance of the <see cref="System.Tuple%604" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can also use the static <xref:System.Tuple.Create%60%604%28%60%600%2C%60%601%2C%60%602%2C%60%603%29?displayProperty=fullName> method to instantiate a 4-tuple object without having to explicitly specify the types of its components. The following example uses the <xref:System.Tuple.Create%60%604%28%60%600%2C%60%601%2C%60%602%2C%60%603%29?displayProperty=fullName> method to instantiate a 4-tuple whose components are of type <xref:System.String>, <xref:System.Double>, <xref:System.Double>, and <xref:System.Double>.  
  
 [!code-cs[System.Tuple.Create#7](~/add/codesnippet/csharp/m-system.tuple`4.sharpct_1.cs)]
 [!code-vb[System.Tuple.Create#7](~/add/codesnippet/visualbasic/m-system.tuple`4.sharpct_1.vb)]  
  
 This is equivalent to the following call to the Tuple(T1, class constructor.  
  
 [!code-cs[System.Tuple.Create#8](~/add/codesnippet/csharp/m-system.tuple`4.sharpct_2.cs)]
 [!code-vb[System.Tuple.Create#8](~/add/codesnippet/visualbasic/m-system.tuple`4.sharpct_2.vb)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare with this instance.</param>
        <summary>Returns a value that indicates whether the current <see cref="System.Tuple%604" /> object is equal to a specified object.</summary>
        <returns>
          <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `obj` parameter is considered to be equal to the current instance under the following conditions:  
  
-   It is a <xref:System.Tuple%604> object.  
  
-   Its four components are of the same types as the current instance.  
  
-   Its four components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component.  
  
   
  
## Examples  
 The following example defines an array of <xref:System.Tuple%604> objects that provide data on temperatures at three times during a particular day. The Equals method is called to compare every <xref:System.Tuple%604> object with every other <xref:System.Tuple%604> object. The output illustrates that the Equals method returns `true` only when all four components of the <xref:System.Tuple%604> objects have equal values.  
  
 [!code-cs[System.Tuple`4.Equals#1](~/add/codesnippet/csharp/m-system.tuple`4.equals-_1.cs)]
 [!code-vb[System.Tuple`4.Equals#1](~/add/codesnippet/visualbasic/m-system.tuple`4.equals-_1.vb)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the hash code for the current <see cref="System.Tuple%604" /> object.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item1">
      <MemberSignature Language="C#" Value="public T1 Item1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T1 Item1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T1</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the current <see cref="System.Tuple%604" /> object's first component.</summary>
        <value>The value of the current <see cref="System.Tuple%604" /> object's first component.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can dynamically determine the type of the Item1 component in one of two ways:  
  
-   By calling the `GetType` method on the value that is returned by the Item1 property.  
  
-   By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%604> object, and retrieving the first element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method.  
  
   
  
## Examples  
 The following example defines an array of <xref:System.Tuple%604> objects whose components contain the name of a city, a month of the year, and the average high and low temperatures for that month. It then retrieves and displays the value of each component.  
  
 [!code-cs[System.Tuple`4.Item1#1](~/add/codesnippet/csharp/p-system.tuple`4.item1_1.cs)]
 [!code-vb[System.Tuple`4.Item1#1](~/add/codesnippet/visualbasic/p-system.tuple`4.item1_1.vb)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item2">
      <MemberSignature Language="C#" Value="public T2 Item2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T2 Item2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the current <see cref="System.Tuple%604" /> object's second component.</summary>
        <value>The value of the current <see cref="System.Tuple%604" /> object's second component.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can dynamically determine the type of the Item2 component in one of two ways:  
  
-   By calling the `GetType` method on the value that is returned by the Item2 property.  
  
-   By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%604> object, and retrieving the second element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method.  
  
   
  
## Examples  
 The following example defines an array of <xref:System.Tuple%604> objects whose components contain the name of a city, a month of the year, and the average high and low temperatures for that month. It then retrieves and displays the value of each component.  
  
 [!code-cs[System.Tuple`4.Item1#1](~/add/codesnippet/csharp/p-system.tuple`4.item2_1.cs)]
 [!code-vb[System.Tuple`4.Item1#1](~/add/codesnippet/visualbasic/p-system.tuple`4.item2_1.vb)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item3">
      <MemberSignature Language="C#" Value="public T3 Item3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T3 Item3" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the current <see cref="System.Tuple%604" /> object's third component.</summary>
        <value>The value of the current <see cref="System.Tuple%604" /> object's third component.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can dynamically determine the type of the Item3 component in one of two ways:  
  
-   By calling the `GetType` method on the value that is returned by the Item3 property.  
  
-   By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%604> object, and retrieving the third element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method.  
  
   
  
## Examples  
 The following example defines an array of <xref:System.Tuple%604> objects whose components contain the name of a city, a month of the year, and the average high and low temperatures for that month. It then retrieves and displays the value of each component.  
  
 [!code-cs[System.Tuple`4.Item1#1](~/add/codesnippet/csharp/p-system.tuple`4.item3_1.cs)]
 [!code-vb[System.Tuple`4.Item1#1](~/add/codesnippet/visualbasic/p-system.tuple`4.item3_1.vb)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item4">
      <MemberSignature Language="C#" Value="public T4 Item4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T4 Item4" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value of the current <see cref="System.Tuple%604" /> object's fourth component.</summary>
        <value>The value of the current <see cref="System.Tuple%604" /> object's fourth component.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can dynamically determine the type of the Item4 component in one of two ways:  
  
-   By calling the `GetType` method on the value that is returned by the Item4 property.  
  
-   By retrieving the <xref:System.Type> object that represents the <xref:System.Tuple%604> object, and retrieving the fourth element from the array that is returned by its <xref:System.Type.GetGenericArguments%2A?displayProperty=fullName> method.  
  
   
  
## Examples  
 The following example defines an array of <xref:System.Tuple%604> objects whose components contain the name of a city, a month of the year, and the average high and low temperatures for that month. It then retrieves and displays the value of each component.  
  
 [!code-cs[System.Tuple`4.Item1#1](~/add/codesnippet/csharp/p-system.tuple`4.item4_1.cs)]
 [!code-vb[System.Tuple`4.Item1#1](~/add/codesnippet/visualbasic/p-system.tuple`4.item4_1.vb)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">An object to compare with the current instance.</param>
        <param name="comparer">An object that provides custom rules for comparison.</param>
        <summary>Compares the current <see cref="System.Tuple%604" /> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
        <returns>A signed integer that indicates the relative position of this instance and <paramref name="other" /> in the sort order, as shown in the following table.  
  
 <list type="table">  
<listheader>  
<term> Value  
  
 </term>  
<description> Description  
  
 </description>  
</listheader>  
<item>  
<term> A negative integer  
  
 </term>  
<description> This instance precedes <paramref name="other" />.  
  
 </description>  
</item>  
<item>  
<term> Zero  
  
 </term>  
<description> This instance and <paramref name="other" /> have the same position in the sort order.  
  
 </description>  
</item>  
<item>  
<term> A positive integer  
  
 </term>  
<description> This instance follows <paramref name="other" />.  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Tuple%604> instance is cast to an <xref:System.Collections.IStructuralComparable> interface.  
  
 Although this method can be called directly, it is most commonly called by collection sorting methods that include <xref:System.Collections.IComparer> parameters to order the members of a collection. For example, it is called by the <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=fullName> method and the <xref:System.Collections.SortedList.Add%2A> method of a <xref:System.Collections.SortedList> object that is instantiated by using the <xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=fullName> constructor.  
  
> [!CAUTION]
>  The IStructuralComparable.CompareTo method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <xref:System.Tuple%604.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> method.  
  
   
  
## Examples  
 The following example creates an array of <xref:System.Tuple%604> objects that contain statistical data about baseball pitchers. The data items include the name of the pitcher, the number of innings pitched, the pitcher's earned run average (the average number of runs a pitcher allows per game), and the number of hits the pitcher has given up. The example displays the component of each tuple in the array in unsorted order, sorts the array, and then calls <xref:System.Tuple%604.ToString%2A> to display the value of each tuple in sorted order. To sort the array, the example defines a generic `PitcherComparer` class that implements the <xref:System.Collections.IComparer> interface and sorts the <xref:System.Tuple%604> objects in ascending order by the value of their third component (the earned run average) rather than their first component. Note that the example does not directly call the IStructuralComparable.CompareTo method. This method is called implicitly by the <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=fullName> method for each element in the array.  
  
 [!code-vb[System.Tuple`4.CompareTo#2](~/add/codesnippet/visualbasic/c498a959-e867-48c7-8ac1-_1.vb)]
 [!code-cs[System.Tuple`4.CompareTo#2](~/add/codesnippet/csharp/c498a959-e867-48c7-8ac1-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="other" /> is not a <see cref="System.Tuple%604" /> object.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">The object to compare with this instance.</param>
        <param name="comparer">An object that defines the method to use to evaluate whether the two objects are equal.</param>
        <summary>Returns a value that indicates whether the current <see cref="System.Tuple%604" /> object is equal to a specified object based on a specified comparison method.</summary>
        <returns>
          <see langword="true" /> if the current instance is equal to the specified object; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Tuple%604> instance is cast to an <xref:System.Collections.IStructuralEquatable> interface.  
  
 The <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=fullName> implementation is called only if `other` is not `null`, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <xref:System.Tuple%604> object whose components are of the same types as the current instance. The IStructuralEquatable.Equals method first passes the <xref:System.Tuple%604.Item1%2A> values of the <xref:System.Tuple%604> objects to be compared to the <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=fullName> implementation. If this method call returns `true`, the method is called again and passed the <xref:System.Tuple%604.Item2%2A> values of the two <xref:System.Tuple%604> objects. If this method call returns `true` again, the method is called a third time and passed the <xref:System.Tuple%604.Item3%2A> values of the two <xref:System.Tuple%604> objects. If this method call returns `true` again, the method is called for the fourth and final time and passed the <xref:System.Tuple%604.Item4%2A> values of the two <xref:System.Tuple%604> objects.  
  
   
  
## Examples  
 The following example defines an `Item3And4Comparer` class that implements the <xref:System.Collections.IEqualityComparer> interface and changes the way in which <xref:System.Tuple%604> objects are evaluated for equality. The method always returns `true` when it is passed the <xref:System.Tuple%604.Item1%2A> and <xref:System.Tuple%604.Item2%2A> property values of two <xref:System.Tuple%604> objects, and it calls the `obj.Equals` method to evaluate their <xref:System.Tuple%604.Item3%2A> property values. It this method call returns true, it also calls the `obj.Equals` method to evaluate the tuples' <xref:System.Tuple%604.Item4%2A> property values. As a result, the method tests for equality based only on the values of the <xref:System.Tuple%604.Item3%2A> and <xref:System.Tuple%604.Item4%2A> properties. The output illustrates the result for a data set of <xref:System.Tuple%604> objects that record the name of a U.S. city, the month of a year, and the average high and low temperature for that month.  
  
 [!code-cs[System.Tuple`4.Equals#2](~/add/codesnippet/csharp/bcfdc815-6de7-416e-860e-_1.cs)]
 [!code-vb[System.Tuple`4.Equals#2](~/add/codesnippet/visualbasic/bcfdc815-6de7-416e-860e-_1.vb)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">An object whose <see cref="System.Collections.IEqualityComparer.GetHashCode%2A" /> method calculates the hash code of the current <see cref="System.Tuple%604" /> object.</param>
        <summary>Calculates the hash code for the current <see cref="System.Tuple%604" /> object by using a specified computation method.</summary>
        <returns>A 32-bit signed integer hash code.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Tuple%604> instance is cast to an <xref:System.Collections.IStructuralEquatable> interface.  
  
 The method simply wraps a call to the `comparer` object's <xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=fullName> implementation.  
  
 The algorithm used to compute the hash code should return the same hash code for two <xref:System.Tuple%604> objects that are considered to be equal.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">An object to compare with the current instance.</param>
        <summary>Compares the current <see cref="System.Tuple%604" /> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</summary>
        <returns>A signed integer that indicates the relative position of this instance and <paramref name="obj" /> in the sort order, as shown in the following table.  
  
 <list type="table">  
<listheader>  
<term> Value  
  
 </term>  
<description> Description  
  
 </description>  
</listheader>  
<item>  
<term> A negative integer  
  
 </term>  
<description> This instance precedes <paramref name="obj" />.  
  
 </description>  
</item>  
<item>  
<term> Zero  
  
 </term>  
<description> This instance and <paramref name="obj" /> have the same position in the sort order.  
  
 </description>  
</item>  
<item>  
<term> A positive integer  
  
 </term>  
<description> This instance follows <paramref name="obj" />.  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This member is an explicit interface member implementation. It can be used only when the <xref:System.Tuple%604> instance is cast to an <xref:System.IComparable> interface.  
  
 This method provides the <xref:System.IComparable.CompareTo%2A?displayProperty=fullName> implementation for the <xref:System.Tuple%604> class. Although the method can be called directly, it is most commonly called by the default overloads of collection sorting methods, such as <xref:System.Array.Sort%28System.Array%29?displayProperty=fullName> and <xref:System.Collections.SortedList.Add%2A?displayProperty=fullName>, to order the members of a collection.  
  
> [!CAUTION]
>  The IComparable.CompareTo method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <xref:System.Tuple%604.Equals%2A> method.  
  
 The IComparable.CompareTo method uses the default object comparer to compare each component.  
  
   
  
## Examples  
 The following example creates an array of <xref:System.Tuple%604> objects whose components consist of a baseball pitcher's name, number of innings pitched, and number of hits and earned runs given up. It displays the components of each tuple in the array in unsorted order, sorts the array, and then calls <xref:System.Tuple%604.ToString%2A> to display each tuple in sorted order. The output shows that the array has been sorted by name, which is the first component. Note that the example does not directly call the IComparable.CompareTo method. This method is called implicitly by the <xref:System.Array.Sort%28System.Array%29> method for each element in the array.  
  
 [!code-cs[System.Tuple`4.CompareTo#1](~/add/codesnippet/csharp/m-system.tuple`4.systems_1.cs)]
 [!code-vb[System.Tuple`4.CompareTo#1](~/add/codesnippet/visualbasic/m-system.tuple`4.systems_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="obj" /> is not a <see cref="System.Tuple%604" /> object.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string that represents the value of this <see cref="System.Tuple%604" /> instance.</summary>
        <returns>The string representation of this <see cref="System.Tuple%604" /> object.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The string returned by this method takes the form (*Item1*, *Item2*, *Item3*, *Item4*), where *Item1*, *Item2*, *Item3*, and *Item4* represent the values of the <xref:System.Tuple%604.Item1%2A>, <xref:System.Tuple%604.Item2%2A>, <xref:System.Tuple%604.Item3%2A>, and <xref:System.Tuple%604.Item4%2A> properties, respectively. If any of the property values is `null`, it is represented as <xref:System.String.Empty?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example illustrates the ToString method. It displays the components of an array of 4-tuple objects that contain the name of a city, a month of the year, and the high and low average temperature for that month.  
  
 [!code-cs[System.Tuple`4.ToString#1](~/add/codesnippet/csharp/m-system.tuple`4.tostring_1.cs)]
 [!code-vb[System.Tuple`4.ToString#1](~/add/codesnippet/visualbasic/m-system.tuple`4.tostring_1.vb)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>