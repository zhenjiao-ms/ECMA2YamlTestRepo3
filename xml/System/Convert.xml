<Type Name="Convert" FullName="System.Convert">
  <TypeSignature Language="C#" Value="public static class Convert" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Convert extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Converts a base data type to another base data type.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The static methods of the Convert class are primarily used to support conversion to and from the base data types in the .NET Framework. The supported base types are <xref:System.Boolean>, <xref:System.Char>, <xref:System.SByte>, <xref:System.Byte>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, <xref:System.DateTime> and <xref:System.String>. In addition, the Convert class includes methods to support  other kinds of conversions.  
  
 This topic consists of the following sections:  
  
 [Conversions to and from Base Types](#Base)   
 [Non-Decimal Numbers](#NonDecimal)   
 [Conversions from Custom Objects to Base Types](#Custom)   
 [Culture-Specific Formatting Information](#Culture)   
 [Base64 Encoding](#Base64)   
 [Other Common Conversions](#Other)  
  
<a name="Base"></a>   
## Conversions to and from Base Types  
 A conversion method exists to convert every base type to every other base type. However, the actual call to a particular conversion method can produce one of five outcomes, depending on the value of the base type at run time and the target base type. These five outcomes are:  
  
-   No conversion. This occurs when an attempt is made to convert from a type to itself (for example, by calling <xref:System.Convert.ToInt32%28System.Int32%29?displayProperty=fullName> with an argument of type <xref:System.Int32>). In this case, the method simply returns an instance of the original type.  
  
-   An <xref:System.InvalidCastException>. This occurs when a particular conversion is not supported. An <xref:System.InvalidCastException> is thrown for the following conversions:  
  
    -   Conversions from <xref:System.Char> to <xref:System.Boolean>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, or <xref:System.DateTime>.  
  
    -   Conversions from <xref:System.Boolean>, <xref:System.Single>, <xref:System.Double>, <xref:System.Decimal>, or <xref:System.DateTime> to <xref:System.Char>.  
  
    -   Conversions from <xref:System.DateTime> to any other type except <xref:System.String>.  
  
    -   Conversions from any other type, except <xref:System.String>, to <xref:System.DateTime>.  
  
-   A <xref:System.FormatException>. This occurs when the attempt to convert a string value to any other base type fails because the string is not in the proper format. The exception is thrown for the following conversions:  
  
    -   A string to be converted to a <xref:System.Boolean> value does not equal <xref:System.Boolean.TrueString?displayProperty=fullName> or <xref:System.Boolean.FalseString?displayProperty=fullName>.  
  
    -   A string to be converted to a <xref:System.Char> value consists of multiple characters.  
  
    -   A string to be converted to any numeric type is not recognized as a valid number.  
  
    -   A string to be converted to a <xref:System.DateTime> is not recognized as a valid date and time value.  
  
-   A successful conversion. For conversions between two different base types not listed in the previous outcomes, all widening conversions as well as all narrowing conversions that do not result in a loss of data will succeed and the method will return a value of the targeted base type.  
  
-   An <xref:System.OverflowException>. This occurs when a narrowing conversion results in a loss of data. For example, trying to convert a <xref:System.Int32> instance whose value is 10000 to a <xref:System.Byte> type throws an <xref:System.OverflowException> because 10000 is outside the range of the <xref:System.Byte> data type.  
  
 An exception will not be thrown if the conversion of a numeric type results in a loss of precision (that is, the loss of some least significant digits). However, an exception will be thrown if the result is larger than can be represented by the particular conversion method's return value type.  
  
 For example, when a <xref:System.Double> is converted to a <xref:System.Single>, a loss of precision might occur but no exception is thrown. However, if the magnitude of the <xref:System.Double> is too large to be represented by a <xref:System.Single>, an overflow exception is thrown.  
  
<a name="NonDecimal"></a>   
## Non-Decimal Numbers  
 The Convert class includes static methods that you can call to convert integral values to non-decimal string representations, and to convert strings that represent non-decimal numbers to integral values. Each of these conversion methods includes a `base` argument  that lets you specify  the number system; binary (base 2), octal (base 8), and hexadecimal (base 16), as well as decimal (base 10). There is a set of methods to convert each of the CLS-compliant primitive integral types to a string, and one to convert a string to each of the primitive integral types:  
  
-   <xref:System.Convert.ToString%28System.Byte%2CSystem.Int32%29> and <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29>, to convert a byte value to and from a string in a specified base.  
  
-   <xref:System.Convert.ToString%28System.Int16%2CSystem.Int32%29> and <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29>, to convert a 16-bit signed integer to and from a string in a specified base.  
  
-   <xref:System.Convert.ToString%28System.Int32%2CSystem.Int32%29> and <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29>, to convert a 32-bit signed integer to and from a string in a specified base.  
  
-   <xref:System.Convert.ToString%28System.Int64%2CSystem.Int32%29> and <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29>, to convert a 64-bit signed integer to and from a string in a specified base.  
  
-   <xref:System.Convert.ToSByte%28System.String%2CSystem.Int32%29>, to convert the string representation of a byte value in a specified format to a signed byte.  
  
-   <xref:System.Convert.ToUInt16%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 16-bit integer.  
  
-   <xref:System.Convert.ToUInt32%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 32-bit integer.  
  
-   <xref:System.Convert.ToUInt64%28System.String%2CSystem.Int32%29>, to convert the string representation of an integer in a specified format to an unsigned 64-bit integer.  
  
 The following example converts the value of <xref:System.Int16.MaxValue?displayProperty=fullName> to a string in all supported numeric formats. It then converts the string value back to a <xref:System.Int16> value.  
  
 [!code-cpp[System.Convert#2](~/add/codesnippet/cpp/t-system.convert_1.cpp)]
 [!code-cs[System.Convert#2](~/add/codesnippet/csharp/t-system.convert_1.cs)]
 [!code-vb[System.Convert#2](~/add/codesnippet/visualbasic/t-system.convert_1.vb)]  
  
<a name="Custom"></a>   
## Conversions from Custom Objects to Base Types  
 In addition to supporting conversions between the base types, the Convert method supports conversion of any custom type to any base type. To do this, the custom type must implement the <xref:System.IConvertible> interface, which defines methods for converting the implementing type to each of the base types. Conversions that are not supported by a particular type should throw an <xref:System.InvalidCastException>.  
  
 When the <xref:System.Convert.ChangeType%2A> method is passed a custom type as its first parameter, or when the `Convert.To`*Type* method (such as <xref:System.Convert.ToInt32%28System.Object%29?displayProperty=fullName> or <xref:System.Convert.ToDouble%28System.Object%2CSystem.IFormatProvider%29?displayProperty=fullName> is called and passed an instance of a custom type as its first parameter, the Convert method, in turn, calls the custom type's <xref:System.IConvertible> implementation to perform the conversion. For more information, see [Type Conversion in the .NET Framework](../Topic/Type%20Conversion%20in%20the%20.NET%20Framework.md).  
  
<a name="Culture"></a>   
## Culture-Specific Formatting Information  
 All the base type conversion methods and the <xref:System.Convert.ChangeType%2A> method include overloads that have a parameter of type <xref:System.IFormatProvider>. For example, the <xref:System.Convert.ToBoolean%2A?displayProperty=fullName> method has the following two overloads:  
  
-   <xref:System.Convert.ToBoolean%28System.Object%2CSystem.IFormatProvider%29?displayProperty=fullName>  
  
-   <xref:System.Convert.ToBoolean%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName>  
  
 The <xref:System.IFormatProvider> parameter can supply culture-specific formatting information to assist the conversion process. However, it is ignored by most of the base type conversion methods. It is used only by the following base type conversion methods.If a `null`<xref:System.IFormatProvider> argument is passed to these methods, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.  
  
-   By methods that convert a value to a numeric type. The <xref:System.IFormatProvider> parameter is used by the overload that has parameters of type <xref:System.String> and <xref:System.IFormatProvider>. It is also used by the overload that has parameters of type <xref:System.Object> and <xref:System.IFormatProvider> if the object's run-time type is a <xref:System.String>.  
  
-   By methods that convert a value to a date and time. The <xref:System.IFormatProvider> parameter is used by the overload that has parameters of type <xref:System.String> and <xref:System.IFormatProvider>. It is also used by the overload that has parameters of type <xref:System.Object> and <xref:System.IFormatProvider> if the object's run-time type is a <xref:System.String>.  
  
-   By the <xref:System.Convert.ToString%2A?displayProperty=fullName> overloads that include an <xref:System.IFormatProvider> parameter and that convert either a numeric value to a string or a <xref:System.DateTime> value to a string.  
  
 However, any user-defined type that implements <xref:System.IConvertible> can make use of the <xref:System.IFormatProvider> parameter.  
  
<a name="Base64"></a>   
## Base64 Encoding  
 Base64 encoding converts binary data to a string. Data expressed as base-64 digits can be easily conveyed over data channels that can only transmit 7-bit characters. The Convert class includes the following methods to support base64 encoding: A set of methods support converting an array of bytes to and from a <xref:System.String> or to and from an array of Unicode characters consisting of base-64 digit characters.  
  
-   <xref:System.Convert.ToBase64String%2A>, which converts a byte array to a base64-encoded string.  
  
-   <xref:System.Convert.ToBase64CharArray%2A>, which converts a byte array to a base64-encoded character array.  
  
-   <xref:System.Convert.FromBase64String%2A>, which converts a base64-encoded string to a byte array.  
  
-   <xref:System.Convert.FromBase64CharArray%2A>, which converts a base64-encoded character array to a byte array.  
  
<a name="Other"></a>   
## Other Common Conversions  
 You can use other classes in the NET Framework to perform some conversions that are not supported by the static methods of the Convert class.  These include:  
  
 Conversion to byte arrays  
 The <xref:System.BitConverter> class  provides methods that convert the primitive numeric types (including <xref:System.Boolean>) to byte arrays and from byte arrays back to primitive data types.  
  
 Character encoding and decoding  
 The <xref:System.Text.Encoding> class and its derived classes (such as <xref:System.Text.UnicodeEncoding> and <xref:System.Text.UTF8Encoding>) provide methods to encode a character array or a string (that is, to convert them to a byte array in a particular encoding) and to decode an encoded byte array (that is, convert a byte array back to UTF16-encoded Unicode characters. For more information, see [Character Encoding in the .NET Framework](../Topic/Character%20Encoding%20in%20the%20.NET%20Framework.md)  
  
   
  
## Examples  
 The following example demonstrates some of the conversion methods in the Convert class, including <xref:System.Convert.ToInt32%2A>, <xref:System.Convert.ToBoolean%2A>, and <xref:System.Convert.ToString%2A>.  
  
 [!code-vb[System.Convert#1](~/add/codesnippet/visualbasic/t-system.convert_2.vb)]
 [!code-cs[System.Convert#1](~/add/codesnippet/csharp/t-system.convert_2.cs)]
 [!code-cpp[System.Convert#1](~/add/codesnippet/cpp/t-system.convert_2.cpp)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public static object ChangeType (object value, Type conversionType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ChangeType(object value, class System.Type conversionType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="conversionType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface.</param>
        <param name="conversionType">The type of object to return.</param>
        <summary>Returns an object of the specified type and whose value is equivalent to the specified object.</summary>
        <returns>An object whose type is <paramref name="conversionType" /> and whose value is equivalent to <paramref name="value" />.  
  
 -or-  
  
 A null reference (<see langword="Nothing" /> in Visual Basic), if <paramref name="value" /> is <see langword="null" /> and <paramref name="conversionType" /> is not a value type.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Convert.ChangeType%2A> is a general-purpose conversion method that converts the object specified by `value` to `conversionType`. The `value` parameter can be an object of any type, and `conversionType` can also be a <xref:System.Type> object that represents any base or custom type. For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method. The method requires that conversion of `value` to `conversionType` be supported.  
  
 This method uses the current thread's culture for the conversion.  
  
   
  
## Examples  
 The following example illustrates the use of the <xref:System.Convert.ChangeType%2A> method.  
  
 [!code-cs[convertchangetype#1](~/add/codesnippet/csharp/m-system.convert.changet_1_3.cs)]
 [!code-cpp[convertchangetype#1](~/add/codesnippet/cpp/m-system.convert.changet_1_3.cpp)]
 [!code-vb[convertchangetype#1](~/add/codesnippet/visualbasic/m-system.convert.changet_1_3.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.  
  
 -or-  
  
 <paramref name="value" /> is <see langword="null" /> and <paramref name="conversionType" /> is a value type.  
  
 -or-  
  
 <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in a format recognized by <paramref name="conversionType" />.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is out of the range of <paramref name="conversionType" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="conversionType" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public static object ChangeType (object value, TypeCode typeCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ChangeType(object value, valuetype System.TypeCode typeCode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="typeCode" Type="System.TypeCode" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface.</param>
        <param name="typeCode">The type of object to return.</param>
        <summary>Returns an object of the specified type whose value is equivalent to the specified object.</summary>
        <returns>An object whose underlying type is <paramref name="typeCode" /> and whose value is equivalent to <paramref name="value" />.  
  
 -or-  
  
 A null reference (<see langword="Nothing" /> in Visual Basic), if <paramref name="value" /> is <see langword="null" /> and <paramref name="typeCode" /> is <see cref="T:System.TypeCode" />, <see cref="T:System.TypeCode" />, or <see cref="T:System.TypeCode" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ChangeType is a general-purpose conversion method that converts the object specified by `value` to a predefined type specified by `typeCode`. The `value` parameter can be an object of any type. For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method. The method also requires that conversion of `value` to `typeCode` be supported.  
  
 The ChangeType method does not support the conversion of `value` to a custom type. To perform such a conversion, call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%29> method.  
  
   
  
## Examples  
 The following example illustrates how to use the ChangeType method to change an <xref:System.Object> to the type specified by the <xref:System.TypeCode> parameter, if possible.  
  
 [!code-cpp[System.Convert.ChangeType#2](~/add/codesnippet/cpp/m-system.convert.changet_2_1.cpp)]
 [!code-vb[System.Convert.ChangeType#2](~/add/codesnippet/visualbasic/m-system.convert.changet_2_1.vb)]
 [!code-cs[System.Convert.ChangeType#2](~/add/codesnippet/csharp/m-system.convert.changet_2_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.  
  
 -or-  
  
 <paramref name="value" /> is <see langword="null" /> and <paramref name="typeCode" /> specifies a value type.  
  
 -or-  
  
 <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in a format recognized by the <paramref name="typeCode" /> type.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is out of the range of the <paramref name="typeCode" /> type.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeCode" /> is invalid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public static object ChangeType (object value, Type conversionType, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ChangeType(object value, class System.Type conversionType, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="conversionType" Type="System.Type" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface.</param>
        <param name="conversionType">The type of object to return.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.</summary>
        <returns>An object whose type is <paramref name="conversionType" /> and whose value is equivalent to <paramref name="value" />.  
  
 -or-  
  
 <paramref name="value" />, if the <see cref="T:System.Type" /> of <paramref name="value" /> and <paramref name="conversionType" /> are equal.  
  
 -or-  
  
 A null reference (<see langword="Nothing" /> in Visual Basic), if <paramref name="value" /> is <see langword="null" /> and <paramref name="conversionType" /> is not a value type.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Convert.ChangeType%2A> is a general-purpose conversion method that converts the object specified by `value` to `conversionType`. The `value` parameter can be an object of any type, and `conversionType` can also be a <xref:System.Type> object that represents any base or custom type. For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method. The method requires that conversion of `value` to `conversionType` be supported.  
  
 The `provider` parameter is an <xref:System.IFormatProvider> implementation that supplies formatting information for the conversion. Whether and how this parameter is used depends on the underlying <xref:System.IConvertible> implementation. If `value` is a base data type, `provider` is used only for the following conversions:  
  
-   Conversion from a number to a string, or from a string to a number. `provider` must be a <xref:System.Globalization.CultureInfo> object, a <xref:System.Globalization.NumberFormatInfo> object, or a custom <xref:System.IFormatProvider> implementation that returns a <xref:System.Globalization.NumberFormatInfo> object. However, because the <xref:System.Convert.ChangeType%28System.Object%2CSystem.TypeCode%2CSystem.IFormatProvider%29> method performs the conversion using the default "G" format specifier, the `provider` parameter has no effect if `value` or the target type is an unsigned integer. If `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.  
  
-   Conversion from a <xref:System.DateTime> value to a string, or from a string to a <xref:System.DateTime> value. `provider` must be a <xref:System.Globalization.CultureInfo> or <xref:System.Globalization.DateTimeFormatInfo> object. If `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.  
  
 If `value` is an application-defined type, its <xref:System.IConvertible> implementation may use the `provider` parameter.  
  
   
  
## Examples  
 The following example defines a `Temperature` class that implements the <xref:System.IConvertible> interface.  
  
 [!code-vb[System.Convert.ChangeType#3](~/add/codesnippet/visualbasic/m-system.convert.changet_0_3.vb)]
 [!code-cpp[System.Convert.ChangeType#3](~/add/codesnippet/cpp/m-system.convert.changet_0_3.cpp)]
 [!code-cs[System.Convert.ChangeType#3](~/add/codesnippet/csharp/m-system.convert.changet_0_3.cs)]  
  
 The following example creates an instance of the `Temperature` class and calls the ChangeType method to convert it to the basic numeric types supported by the .NET Framework and to a <xref:System.String>. It illustrates that the <xref:System.Convert.ChangeType%2A> method wraps a call to the source type's <xref:System.IConvertible> implementation.  
  
 [!code-vb[System.Convert.ChangeType#4](~/add/codesnippet/visualbasic/m-system.convert.changet_0_4.vb)]
 [!code-cpp[System.Convert.ChangeType#4](~/add/codesnippet/cpp/m-system.convert.changet_0_4.cpp)]
 [!code-cs[System.Convert.ChangeType#4](~/add/codesnippet/csharp/m-system.convert.changet_0_4.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.  
  
 -or-  
  
 <paramref name="value" /> is <see langword="null" /> and <paramref name="conversionType" /> is a value type.  
  
 -or-  
  
 <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in a format for <paramref name="conversionType" /> recognized by <paramref name="provider" />.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is out of the range of <paramref name="conversionType" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="conversionType" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ChangeType">
      <MemberSignature Language="C#" Value="public static object ChangeType (object value, TypeCode typeCode, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object ChangeType(object value, valuetype System.TypeCode typeCode, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="typeCode" Type="System.TypeCode" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface.</param>
        <param name="typeCode">The type of object to return.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Returns an object of the specified type whose value is equivalent to the specified object. A parameter supplies culture-specific formatting information.</summary>
        <returns>An object whose underlying type is <paramref name="typeCode" /> and whose value is equivalent to <paramref name="value" />.  
  
 -or-  
  
 A null reference (<see langword="Nothing" /> in Visual Basic), if <paramref name="value" /> is <see langword="null" /> and <paramref name="typeCode" /> is <see cref="T:System.TypeCode" />, <see cref="T:System.TypeCode" />, or <see cref="T:System.TypeCode" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ChangeType is a general-purpose conversion method that converts the object specified by `value` to a predefined type specified by `typeCode`. The `value` parameter can be an object of any type. For the conversion to succeed, `value` must implement the <xref:System.IConvertible> interface, because the method simply wraps a call to an appropriate <xref:System.IConvertible> method. The method also requires that conversion of `value` to `typeCode` be supported.  
  
 The ChangeType method does not support the conversion of `value` to a custom type. To perform such a conversion, call the <xref:System.Convert.ChangeType%28System.Object%2CSystem.Type%2CSystem.IFormatProvider%29> method.  
  
 The `provider` parameter is an <xref:System.IFormatProvider> implementation that supplies formatting information for the conversion. Whether and how this parameter is used depends on the underlying <xref:System.IConvertible> implementation. If `value` is a base data type, `provider` is used only for the following conversions. If a `null`<xref:System.IFormatProvider> argument is passed to these methods, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.  
  
-   Conversion from a number to a string, or from a string to a number. `provider` must be a <xref:System.Globalization.CultureInfo> object, a <xref:System.Globalization.NumberFormatInfo> object, or a custom <xref:System.IFormatProvider> implementation that returns a <xref:System.Globalization.NumberFormatInfo> object. However, because the ChangeType method performs the conversion using the default "G" format specifier, the `provider` parameter has no effect if `value` or the target type is an unsigned integer.  
  
-   Conversion from a <xref:System.DateTime> value to a string, or from a string to a <xref:System.DateTime> value. `provider` must be a <xref:System.Globalization.CultureInfo> or <xref:System.Globalization.DateTimeFormatInfo> object.  
  
 If `value` is an application-defined type, its <xref:System.IConvertible> implementation may use the `provider` parameter.  
  
   
  
## Examples  
 The following example defines a custom format provider named `InterceptProvider` that indicates when its <xref:System.IFormatProvider.GetFormat%2A> method is called and returns a <xref:System.Globalization.NumberFormatInfo> for the fr-FR culture and a <xref:System.Globalization.DateTimeFormatInfo> object for the en-US culture. This format provider is used in all calls to the ChangeType method. The example then creates an array with a <xref:System.Double> and a <xref:System.DateTime> value and makes repeated calls to ChangeType with each value and each member of the <xref:System.TypeCode> enumeration. The example illustrates when the method uses the <xref:System.IFormatProvider> parameter and also illustrates the use of the `provider` parameter to perform culture-sensitive formatting.  
  
 [!code-cpp[System.Convert.ChangeType#1](~/add/codesnippet/cpp/8b995f47-94a9-4014-b24e-_1.cpp)]
 [!code-vb[System.Convert.ChangeType#1](~/add/codesnippet/visualbasic/8b995f47-94a9-4014-b24e-_1.vb)]
 [!code-cs[System.Convert.ChangeType#1](~/add/codesnippet/csharp/8b995f47-94a9-4014-b24e-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.  
  
 -or-  
  
 <paramref name="value" /> is <see langword="null" /> and <paramref name="typeCode" /> specifies a value type.  
  
 -or-  
  
 <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in a format for the <paramref name="typeCode" /> type recognized by <paramref name="provider" />.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is out of the range of the <paramref name="typeCode" /> type.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="typeCode" /> is invalid.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DBNull">
      <MemberSignature Language="C#" Value="public static readonly object DBNull;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object DBNull" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A constant that represents a database column that is absent of data; that is, database null.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The DBNull field is equivalent to <xref:System.DBNull.Value?displayProperty=fullName>, as the following example shows.  
  
 [!code-vb[System.Convert.DBNull#1](~/add/codesnippet/visualbasic/f-system.convert.dbnull_1.vb)]
 [!code-cs[System.Convert.DBNull#1](~/add/codesnippet/csharp/f-system.convert.dbnull_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FromBase64CharArray">
      <MemberSignature Language="C#" Value="public static byte[] FromBase64CharArray (char[] inArray, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] FromBase64CharArray(char[] inArray, int32 offset, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Char[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="inArray">A Unicode character array.</param>
        <param name="offset">A position within `inArray`.</param>
        <param name="length">The number of elements in `inArray` to convert.</param>
        <summary>Converts a subset of a Unicode character array, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array. Parameters specify the subset in the input array and the number of elements to convert.</summary>
        <returns>An array of 8-bit unsigned integers equivalent to <paramref name="length" /> elements at position <paramref name="offset" /> in <paramref name="inArray" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `inArray` is composed of base-64 digits, white-space characters, and trailing padding characters. The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", lowercase characters "a" to "z", numerals "0" to "9", and the symbols "+" and "/".  
  
 The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020). An arbitrary number of white-space characters can appear in `inArray` because all white-space characters are ignored.  
  
 The valueless character, "=", is used for trailing padding. The end of `inArray` can consist of zero, one, or two padding characters.  
  
> [!IMPORTANT]
>  The FromBase64CharArray method is designed to process a single character array that contains all the data to be decoded. To decode base-64 character data from a stream, use the <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=fullName> class.  
  
   
  
## Examples  
 The following example demonstrates the use of the FromBase64CharArray method to decode UUencoded (base-64) data and save it as binary output.  
  
 [!code-cs[System.Convert UUEncodeDecode functions#3](~/add/codesnippet/csharp/m-system.convert.frombas_1_1.cs)]
 [!code-vb[System.Convert UUEncodeDecode functions#3](~/add/codesnippet/visualbasic/m-system.convert.frombas_1_1.vb)]
 [!code-cpp[System.Convert UUEncodeDecode functions#3](~/add/codesnippet/cpp/m-system.convert.frombas_1_1.cpp)]  
  
 The following example demonstrates the [ToBase64CharArray(Byte\[\], Int32, Int32, Char\[\], Int32, Base64FormattingOptions)](assetId:///M:System.Convert.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)?qualifyHint=False&autoUpgrade=False) and FromBase64CharArray methods. The input is divided into groups of three bytes (24 bits) each. Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63. In this example, there are 85 3-byte groups with one byte remaining. The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2. Those four values correspond to the base-64 digits, "A", "A", "E", and "C", at the beginning of the output.  
  
 If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group. In this example, the value of the last byte is hexadecimal FF. The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit "/" at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, "w". The last two 6-bit values are padding and correspond to the valueless padding character, "=".  
  
 [!code-cpp[convert.tobase64chararray#1](~/add/codesnippet/cpp/m-system.convert.frombas_1_2.cpp)]
 [!code-vb[convert.tobase64chararray#1](~/add/codesnippet/visualbasic/m-system.convert.frombas_1_2.vb)]
 [!code-cs[convert.tobase64chararray#1](~/add/codesnippet/csharp/m-system.convert.frombas_1_2.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inArray" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> or <paramref name="length" /> is less than 0.  
  
 -or-  
  
 <paramref name="offset" /> plus <paramref name="length" /> indicates a position not within <paramref name="inArray" />.</exception>
        <exception cref="T:System.FormatException">The length of <paramref name="inArray" />, ignoring white-space characters, is not zero or a multiple of 4.  
  
 -or-  
  
 The format of <paramref name="inArray" /> is invalid. <paramref name="inArray" /> contains a non-base-64 character, more than two padding characters, or a non-white-space character among the padding characters.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="FromBase64String">
      <MemberSignature Language="C#" Value="public static byte[] FromBase64String (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] FromBase64String(string s) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">The string to convert.</param>
        <summary>Converts the specified string, which encodes binary data as base-64 digits, to an equivalent 8-bit unsigned integer array.</summary>
        <returns>An array of 8-bit unsigned integers that is equivalent to <paramref name="s" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `s` is composed of base-64 digits, white-space characters, and trailing padding characters. The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", lowercase characters "a" to "z", numerals "0" to "9", and the symbols "+" and "/".  
  
 The white-space characters, and their Unicode names and hexadecimal code points, are tab (CHARACTER TABULATION, U+0009), newline (LINE FEED, U+000A), carriage return (CARRIAGE RETURN, U+000D), and blank (SPACE, U+0020). An arbitrary number of white-space characters can appear in `s` because all white-space characters are ignored.  
  
 The valueless character, "=", is used for trailing padding. The end of `s` can consist of zero, one, or two padding characters.  
  
> [!IMPORTANT]
>  The FromBase64Stringmethod is designed to process a single string that contains all the data to be decoded. To decode base-64 character data from a stream, use the <xref:System.Security.Cryptography.FromBase64Transform?displayProperty=fullName> class.  
  
   
  
## Examples  
 The following example uses the [ToBase64String(Byte\[\])](assetId:///M:System.Convert.ToBase64String(System.Byte[])?qualifyHint=False&autoUpgrade=False) method to convert a byte array to a UUencoded (base-64) string, and then calls the FromBase64String method to restore the original byte array.  
  
 [!code-cs[System.Convert.ToBase64String#1](~/add/codesnippet/csharp/m-system.convert.frombas_0_1.cs)]
 [!code-vb[System.Convert.ToBase64String#1](~/add/codesnippet/visualbasic/m-system.convert.frombas_0_1.vb)]  
  
 The following is a more complex example that creates a 20-element array of 32-bit integers. It then uses the <xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=fullName> method to convert each element into a byte array, which it stores in the appropriate position in a buffer by calling the <xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method. This buffer is then passed to the [ToBase64String(Byte\[\])](assetId:///M:System.Convert.ToBase64String(System.Byte[])?qualifyHint=False&autoUpgrade=False) method to create a UUencoded (base-64) string.  It then calls the FromBase64String method to decode the UUencoded string, and calls the <xref:System.BitConverter.ToInt32%2A?displayProperty=fullName> method to convert each set of four bytes (the size of a 32-bit integer) to an integer. The output from the example shows that the original array has been successfully restored.  
  
 [!code-cs[System.Convert.ToBase64String#2](~/add/codesnippet/csharp/m-system.convert.frombas_0_2.cs)]
 [!code-vb[System.Convert.ToBase64String#2](~/add/codesnippet/visualbasic/m-system.convert.frombas_0_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The length of <paramref name="s" />, ignoring white-space characters, is not zero or a multiple of 4.  
  
 -or-  
  
 The format of <paramref name="s" /> is invalid. <paramref name="s" /> contains a non-base-64 character, more than two padding characters, or a non-white space-character among the padding characters.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetTypeCode">
      <MemberSignature Language="C#" Value="public static TypeCode GetTypeCode (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TypeCode GetTypeCode(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TypeCode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface.</param>
        <summary>Returns the <see cref="T:System.TypeCode" /> for the specified object.</summary>
        <returns>The <see cref="T:System.TypeCode" /> for <paramref name="value" />, or <see cref="T:System.TypeCode" /> if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDBNull(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object.</param>
        <summary>Returns an indication whether the specified object is of type <see cref="T:System.DBNull" />.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is of type <see cref="T:System.DBNull" />; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IsDBNull method tests whether the `value` parameter is equal to <xref:System.DBNull.Value?displayProperty=fullName>. It is equivalent to the following code:  
  
 [!code-cs[System.Convert.IsDBNull#1](~/add/codesnippet/csharp/IsDBNull_To_NA_CS/Form1.cs#1)]
 [!code-vb[System.Convert.IsDBNull#1](~/add/codesnippet/visualbasic/IsDBNull_To_NA/Form1.vb#1)]  
  
> [!NOTE]
>  <xref:System.DBNull.Value?displayProperty=fullName> is used to indicate a value that is missing. It is not equivalent to `null` or to <xref:System.String.Empty?displayProperty=fullName>. Therefore, code such as `Convert.IsDBNull(null)` in C# or `Convert.IsDBNull(Nothing)` in Visual Basic returns`false`.  
  
   
  
## Examples  
 The following example uses a <xref:System.Data.SqlClient.SqlDataReader> object to retrieve survey data from a database. It assigns each row's field values to an array, and then passes each array element to the IsDBNull method. If the method returns `true`, the example assigns the string "NA" to the array element. The array is then added to the <xref:System.Windows.Forms.DataGridView.Rows%2A> collection of a <xref:System.Windows.Forms.DataGridView?displayProperty=fullName> control.  
  
 [!code-cs[System.Convert.IsDBNull#2](~/add/codesnippet/csharp/IsDBNull_To_NA_CS/Form1.cs#2)]
 [!code-vb[System.Convert.IsDBNull#2](~/add/codesnippet/visualbasic/IsDBNull_To_NA/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBase64CharArray">
      <MemberSignature Language="C#" Value="public static int ToBase64CharArray (byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToBase64CharArray(unsigned int8[] inArray, int32 offsetIn, int32 length, char[] outArray, int32 offsetOut) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
        <Parameter Name="offsetIn" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="outArray" Type="System.Char[]" />
        <Parameter Name="offsetOut" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="inArray">An input array of 8-bit unsigned integers.</param>
        <param name="offsetIn">A position within `inArray`.</param>
        <param name="length">The number of elements of `inArray` to convert.</param>
        <param name="outArray">An output array of Unicode characters.</param>
        <param name="offsetOut">A position within `outArray`.</param>
        <summary>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, and the number of elements in the input array to convert.</summary>
        <returns>A 32-bit signed integer containing the number of bytes in <paramref name="outArray" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The subset of `length` elements of `inArray` starting at position `offsetIn`, are taken as a numeric value and converted to a subset of elements in `outArray` starting at position `offsetOut`. The return value indicates the number of converted elements in `outArray`. The subset of `outArray` consists of base-64 digits.  
  
 The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/". The valueless character, "=", is used for trailing padding.  
  
 The `offset` and `length` parameters are 32-bit signed numbers. The `offsetIn` and `offsetOut` parameters are zero-based array positions.  
  
> [!IMPORTANT]
>  The ToBase64CharArraymethod is designed to process a single byte array that contains all the data to be encoded. To create a base-64 character array from a byte stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.  
  
   
  
## Examples  
 The following example demonstrates using the ToBase64CharArray method to UUencode (encode in base 64) a binary stream, then save the encoding to a file.  
  
 [!code-cs[System.Convert UUEncodeDecode functions#2](~/add/codesnippet/csharp/09ed64a6-c216-4c45-8b61-_1.cs)]
 [!code-vb[System.Convert UUEncodeDecode functions#2](~/add/codesnippet/visualbasic/09ed64a6-c216-4c45-8b61-_1.vb)]
 [!code-cpp[System.Convert UUEncodeDecode functions#2](~/add/codesnippet/cpp/09ed64a6-c216-4c45-8b61-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inArray" /> or <paramref name="outArray" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offsetIn" />, <paramref name="offsetOut" />, or <paramref name="length" /> is negative.  
  
 -or-  
  
 <paramref name="offsetIn" /> plus <paramref name="length" /> is greater than the length of <paramref name="inArray" />.  
  
 -or-  
  
 <paramref name="offsetOut" /> plus the number of elements to return is greater than the length of <paramref name="outArray" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBase64CharArray">
      <MemberSignature Language="C#" Value="public static int ToBase64CharArray (byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut, Base64FormattingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToBase64CharArray(unsigned int8[] inArray, int32 offsetIn, int32 length, char[] outArray, int32 offsetOut, valuetype System.Base64FormattingOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
        <Parameter Name="offsetIn" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="outArray" Type="System.Char[]" />
        <Parameter Name="offsetOut" Type="System.Int32" />
        <Parameter Name="options" Type="System.Base64FormattingOptions" />
      </Parameters>
      <Docs>
        <param name="inArray">An input array of 8-bit unsigned integers.</param>
        <param name="offsetIn">A position within `inArray`.</param>
        <param name="length">The number of elements of `inArray` to convert.</param>
        <param name="outArray">An output array of Unicode characters.</param>
        <param name="offsetOut">A position within `outArray`.</param>
        <param name="options">
          <see cref="T:System.Base64FormattingOptions" /> to insert a line break every 76 characters, or <see cref="T:System.Base64FormattingOptions" /> to not insert line breaks.</param>
        <summary>Converts a subset of an 8-bit unsigned integer array to an equivalent subset of a Unicode character array encoded with base-64 digits. Parameters specify the subsets as offsets in the input and output arrays, the number of elements in the input array to convert, and whether line breaks are inserted in the output array.</summary>
        <returns>A 32-bit signed integer containing the number of bytes in <paramref name="outArray" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The subset of `length` elements of the `inArray` parameter starting at position `offsetIn`, are taken as a numeric value and converted to a subset of elements in the `outArray` parameter starting at position `offsetOut`. The return value indicates the number of converted elements in `outArray`. The subset of `outArray` consists of base-64 digits.  
  
 The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/". The valueless character "=" is used for trailing padding.  
  
 The `offset` and `length` parameters are 32-bit signed numbers. The `offsetIn` and `offsetOut` parameters are zero-based array positions.  
  
> [!IMPORTANT]
>  The ToBase64CharArray method is designed to process a single byte array that contains all the data to be encoded. To create a base-64 character array from a byte stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.  
  
 If the `options` parameter is set to <xref:System.Base64FormattingOptions> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). For more information, see RFC 2045, "Multipurpose Internet Mail Extensions", at [http://www.rfc-editor.org/](http://www.rfc-editor.org/).  
  
   
  
## Examples  
 The following example demonstrates the ToBase64CharArray method. The input is divided into groups of three bytes (24 bits) each. Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63. In this example, there are 85 3-byte groups with one byte remaining. The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2. Those four values correspond to the base-64 digits "A", "A", "E", and "C" at the beginning of the output.  
  
 If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group. In this example, the value of the last byte is hexadecimal FF. The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit "/" at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, "w". The last two 6-bit values are padding and correspond to the valueless padding character, "=".  
  
 [!code-cpp[convert.tobase64chararray#1](~/add/codesnippet/cpp/b8d32330-9860-421f-aebb-_1.cpp)]
 [!code-vb[convert.tobase64chararray#1](~/add/codesnippet/visualbasic/b8d32330-9860-421f-aebb-_1.vb)]
 [!code-cs[convert.tobase64chararray#1](~/add/codesnippet/csharp/b8d32330-9860-421f-aebb-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inArray" /> or <paramref name="outArray" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offsetIn" />, <paramref name="offsetOut" />, or <paramref name="length" /> is negative.  
  
 -or-  
  
 <paramref name="offsetIn" /> plus <paramref name="length" /> is greater than the length of <paramref name="inArray" />.  
  
 -or-  
  
 <paramref name="offsetOut" /> plus the number of elements to return is greater than the length of <paramref name="outArray" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> is not a valid <see cref="T:System.Base64FormattingOptions" /> value.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBase64String">
      <MemberSignature Language="C#" Value="public static string ToBase64String (byte[] inArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToBase64String(unsigned int8[] inArray) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="inArray">An array of 8-bit unsigned integers.</param>
        <summary>Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits.</summary>
        <returns>The string representation, in base 64, of the contents of <paramref name="inArray" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The elements of `inArray` are taken as a numeric value and converted to a string representation that is encoded with base-64 digits.  
  
 The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/". The valueless character, "=", is used for trailing padding.  
  
> [!IMPORTANT]
>  The ToBase64String method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.  
  
 Ordinarily, the <xref:System.Convert.ToBase64String%2A> method is not used to round-trip a  UUEncoded (base-64 encoded) string.  That is, if you decode a string by calling the <xref:System.Convert.FromBase64String%2A> method, then encode the returned byte array by calling the <xref:System.Convert.ToBase64String%2A> method, the resulting string will not necessarily be identical to the original string. The string will round-trip only if the original string is a valid base-64 encoded string.  
  
   
  
## Examples  
 The following example uses the ToBase64String method to convert a byte array to a UUencoded (base-64) string, and then calls the <xref:System.Convert.FromBase64String%28System.String%29> method to restore the original byte array.  
  
 [!code-cs[System.Convert.ToBase64String#1](~/add/codesnippet/csharp/m-system.convert.tobase6_1_1.cs)]
 [!code-vb[System.Convert.ToBase64String#1](~/add/codesnippet/visualbasic/m-system.convert.tobase6_1_1.vb)]  
  
 The following is a more complex example that creates a 20-element array of 32-bit integers. It then uses the <xref:System.BitConverter.GetBytes%28System.Int32%29?displayProperty=fullName> method to convert each element into a byte array, which it stores in the appropriate position in a buffer by calling the <xref:System.Array.Copy%28System.Array%2CSystem.Int32%2CSystem.Array%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> method. This buffer is then passed to the ToBase64String method to create a UUencoded (base-64) string.  It then calls the <xref:System.Convert.FromBase64String%28System.String%29> method to decode the UUencoded string, and calls the <xref:System.BitConverter.ToInt32%2A?displayProperty=fullName> method to convert each set of four bytes (the size of a 32-bit integer) to an integer. The output from the example shows that the original array has been successfully restored.  
  
 [!code-cs[System.Convert.ToBase64String#2](~/add/codesnippet/csharp/m-system.convert.tobase6_1_2.cs)]
 [!code-vb[System.Convert.ToBase64String#2](~/add/codesnippet/visualbasic/m-system.convert.tobase6_1_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inArray" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBase64String">
      <MemberSignature Language="C#" Value="public static string ToBase64String (byte[] inArray, Base64FormattingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToBase64String(unsigned int8[] inArray, valuetype System.Base64FormattingOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
        <Parameter Name="options" Type="System.Base64FormattingOptions" />
      </Parameters>
      <Docs>
        <param name="inArray">An array of 8-bit unsigned integers.</param>
        <param name="options">
          <see cref="T:System.Base64FormattingOptions" /> to insert a line break every 76 characters, or <see cref="T:System.Base64FormattingOptions" /> to not insert line breaks.</param>
        <summary>Converts an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. A parameter specifies whether to insert line breaks in the return value.</summary>
        <returns>The string representation in base 64 of the elements in <paramref name="inArray" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The elements of the `inArray` parameter are taken as a numeric value and converted to a string representation in base 64.  
  
 The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/". The valueless character "=" is used for trailing padding.  
  
> [!IMPORTANT]
>  The ToBase64String method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.  
  
 If the `options` parameter is set to <xref:System.Base64FormattingOptions> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). Because line breaks are considered whitespace characters in a base-64 encoding, they are ignored when converting a base-64 encoded string back to a byte array. The line breaks are simply convenient when displaying the encoded string to a control or a device such as a console window. For more information, see RFC 2045, "Multipurpose Internet Mail Extensions", at [http://www.rfc-editor.org/](http://www.rfc-editor.org/).  
  
   
  
## Examples  
 The following example calls the ToBase64String with a <xref:System.Base64FormattingOptions?displayProperty=fullName> argument to insert line breaks in the string that is produced by encoding a 100-element byte array.  
  
 [!code-vb[System.Convert.ToBase64String#3](~/add/codesnippet/visualbasic/m-system.convert.tobase6_0_1.vb)]
 [!code-cs[System.Convert.ToBase64String#3](~/add/codesnippet/csharp/m-system.convert.tobase6_0_1.cs)]  
  
 As the output from the example shows, the <xref:System.Convert.FromBase64String%2A?displayProperty=fullName> succeeds in restoring the original byte array; the line break characters are ignored during the conversion.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inArray" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> is not a valid <see cref="T:System.Base64FormattingOptions" /> value.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBase64String">
      <MemberSignature Language="C#" Value="public static string ToBase64String (byte[] inArray, int offset, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToBase64String(unsigned int8[] inArray, int32 offset, int32 length) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="inArray">An array of 8-bit unsigned integers.</param>
        <param name="offset">An offset in `inArray`.</param>
        <param name="length">The number of elements of `inArray` to convert.</param>
        <summary>Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, and the number of elements in the array to convert.</summary>
        <returns>The string representation in base 64 of <paramref name="length" /> elements of <paramref name="inArray" />, starting at position <paramref name="offset" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The elements of `inArray` are taken as a numeric value and converted to a string representation in base 64.  
  
 The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/". The valueless character, "=", is used for trailing padding.  
  
 The `offset` and `length` parameters are 32-bit signed numbers. The `offset` parameter is zero-based.  
  
> [!IMPORTANT]
>  The ToBase64String method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inArray" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> or <paramref name="length" /> is negative.  
  
 -or-  
  
 <paramref name="offset" /> plus <paramref name="length" /> is greater than the length of <paramref name="inArray" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBase64String">
      <MemberSignature Language="C#" Value="public static string ToBase64String (byte[] inArray, int offset, int length, Base64FormattingOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToBase64String(unsigned int8[] inArray, int32 offset, int32 length, valuetype System.Base64FormattingOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inArray" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
        <Parameter Name="options" Type="System.Base64FormattingOptions" />
      </Parameters>
      <Docs>
        <param name="inArray">An array of 8-bit unsigned integers.</param>
        <param name="offset">An offset in `inArray`.</param>
        <param name="length">The number of elements of `inArray` to convert.</param>
        <param name="options">
          <see cref="T:System.Base64FormattingOptions" /> to insert a line break every 76 characters, or <see cref="T:System.Base64FormattingOptions" /> to not insert line breaks.</param>
        <summary>Converts a subset of an array of 8-bit unsigned integers to its equivalent string representation that is encoded with base-64 digits. Parameters specify the subset as an offset in the input array, the number of elements in the array to convert, and whether to insert line breaks in the return value.</summary>
        <returns>The string representation in base 64 of <paramref name="length" /> elements of <paramref name="inArray" />, starting at position <paramref name="offset" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The elements of the `inArray` parameter are taken as a numeric value and converted to a string representation in base 64.  
  
 The base-64 digits in ascending order from zero are the uppercase characters "A" to "Z", the lowercase characters "a" to "z", the numerals "0" to "9", and the symbols "+" and "/". The valueless character "=" is used for trailing padding.  
  
 The `offset` and `length` parameters are 32-bit signed numbers. The `offset` parameter is zero-based.  
  
> [!IMPORTANT]
>  The ToBase64String method is designed to process a single byte array that contains all the data to be encoded. To encode data from a stream, use the <xref:System.Security.Cryptography.ToBase64Transform?displayProperty=fullName> class.  
  
 If the `options` parameter is set to <xref:System.Base64FormattingOptions> and the output of the conversion is longer than 76 characters, a line break is inserted every 76 characters. A line break is defined as a carriage return character (U+000D) followed by a line feed character (U+000A). For more information, see RFC 2045, "Multipurpose Internet Mail Extensions", at [http://www.rfc-editor.org/](http://www.rfc-editor.org/).  
  
   
  
## Examples  
 The following example demonstrates the ToBase64String method. The input is divided into groups of three bytes (24 bits) each. Consequently, each group consists of four 6-bit numbers where each number ranges from decimal 0 to 63. In this example, there are 85 3-byte groups with one byte remaining. The first group consists of the hexadecimal values 00, 01, and 02, which yield four 6-bit values equal to decimal 0, 0, 4, and 2. Those four values correspond to the base-64 digits "A", "A", "E", and "C" at the beginning of the output.  
  
 If an integral number of 3-byte groups does not exist, the remaining bytes are effectively padded with zeros to form a complete group. In this example, the value of the last byte is hexadecimal FF. The first 6 bits are equal to decimal 63, which corresponds to the base-64 digit "/" at the end of the output, and the next 2 bits are padded with zeros to yield decimal 48, which corresponds to the base-64 digit, "w". The last two 6-bit values are padding and correspond to the valueless padding character, "=".  
  
 [!code-cs[convert.tobase64string#1](~/add/codesnippet/csharp/f10c0e6f-7828-45ef-a711-_1.cs)]
 [!code-vb[convert.tobase64string#1](~/add/codesnippet/visualbasic/f10c0e6f-7828-45ef-a711-_1.vb)]
 [!code-cpp[convert.tobase64string#1](~/add/codesnippet/cpp/f10c0e6f-7828-45ef-a711-_1.cpp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inArray" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> or <paramref name="length" /> is negative.  
  
 -or-  
  
 <paramref name="offset" /> plus <paramref name="length" /> is greater than the length of <paramref name="inArray" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> is not a valid <see cref="T:System.Base64FormattingOptions" /> value.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The Boolean value to return.</param>
        <summary>Returns the specified Boolean value; no actual conversion is performed.</summary>
        <returns>
          <paramref name="value" /> is returned unchanged.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(unsigned int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 8-bit unsigned integer to an equivalent Boolean value.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of <xref:System.Byte> values to <xref:System.Boolean> values.  
  
 [!code-cpp[System.Convert.ToBoolean#12](~/add/codesnippet/cpp/m-system.convert.toboole_7_1.cpp)]
 [!code-cs[System.Convert.ToBoolean#12](~/add/codesnippet/csharp/m-system.convert.toboole_7_1.cs)]
 [!code-vb[System.Convert.ToBoolean#12](~/add/codesnippet/visualbasic/m-system.convert.toboole_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The Unicode character to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(valuetype System.DateTime value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The date and time value to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example demonstrates that an attempt to convert a <xref:System.DateTime> value to a Boolean type throws <xref:System.InvalidCastException>.  
  
 [!code-cpp[System.Convert Snippets#20](~/add/codesnippet/cpp/m-system.convert.toboole_3_1.cpp)]
 [!code-cs[System.Convert Snippets#20](~/add/codesnippet/csharp/m-system.convert.toboole_3_1.cs)]
 [!code-vb[System.Convert Snippets#20](~/add/codesnippet/visualbasic/m-system.convert.toboole_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The number to convert.</param>
        <summary>Converts the value of the specified decimal number to an equivalent Boolean value.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of <xref:System.Decimal> values to <xref:System.Boolean> values.  
  
 [!code-cpp[System.Convert.ToBoolean#2](~/add/codesnippet/cpp/m-system.convert.toboole_11_1.cpp)]
 [!code-cs[System.Convert.ToBoolean#2](~/add/codesnippet/csharp/m-system.convert.toboole_11_1.cs)]
 [!code-vb[System.Convert.ToBoolean#2](~/add/codesnippet/visualbasic/m-system.convert.toboole_11_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The double-precision floating-point number to convert.</param>
        <summary>Converts the value of the specified double-precision floating-point number to an equivalent Boolean value.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts a Boolean to a <xref:System.Double> and a <xref:System.Double> to a Boolean value.  
  
 [!code-cpp[System.Convert Snippets#1](~/add/codesnippet/cpp/m-system.convert.toboole_10_1.cpp)]
 [!code-cs[System.Convert Snippets#1](~/add/codesnippet/csharp/m-system.convert.toboole_10_1.cs)]
 [!code-vb[System.Convert Snippets#1](~/add/codesnippet/visualbasic/m-system.convert.toboole_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 16-bit signed integer to an equivalent Boolean value.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of <xref:System.Int16> values to <xref:System.Boolean> values.  
  
 [!code-cpp[System.Convert.ToBoolean#3](~/add/codesnippet/cpp/m-system.convert.toboole_4_1.cpp)]
 [!code-cs[System.Convert.ToBoolean#3](~/add/codesnippet/csharp/m-system.convert.toboole_4_1.cs)]
 [!code-vb[System.Convert.ToBoolean#3](~/add/codesnippet/visualbasic/m-system.convert.toboole_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 32-bit signed integer to an equivalent Boolean value.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of <xref:System.Int32> values to <xref:System.Boolean> values.  
  
 [!code-cpp[System.Convert.ToBoolean#4](~/add/codesnippet/cpp/m-system.convert.toboole_14_1.cpp)]
 [!code-cs[System.Convert.ToBoolean#4](~/add/codesnippet/csharp/m-system.convert.toboole_14_1.cs)]
 [!code-vb[System.Convert.ToBoolean#4](~/add/codesnippet/visualbasic/m-system.convert.toboole_14_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 64-bit signed integer to an equivalent Boolean value.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of <xref:System.Int64> values to <xref:System.Boolean> values.  
  
 [!code-cpp[System.Convert.ToBoolean#5](~/add/codesnippet/cpp/m-system.convert.toboole_9_1.cpp)]
 [!code-cs[System.Convert.ToBoolean#5](~/add/codesnippet/csharp/m-system.convert.toboole_9_1.cs)]
 [!code-vb[System.Convert.ToBoolean#5](~/add/codesnippet/visualbasic/m-system.convert.toboole_9_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</param>
        <summary>Converts the value of a specified object to an equivalent Boolean value.</summary>
        <returns>
          <see langword="true" /> or <see langword="false" />, which reflects the value returned by invoking the <see cref="System.IConvertible.ToBoolean%2A" /> method for the underlying type of <paramref name="value" />. If <paramref name="value" /> is <see langword="null" />, the method returns <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of object values to <xref:System.Boolean> values.  
  
 [!code-cpp[System.Convert.ToBoolean#11](~/add/codesnippet/cpp/m-system.convert.toboole_12_1.cpp)]
 [!code-cs[System.Convert.ToBoolean#11](~/add/codesnippet/csharp/m-system.convert.toboole_12_1.cs)]
 [!code-vb[System.Convert.ToBoolean#11](~/add/codesnippet/visualbasic/m-system.convert.toboole_12_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is a string that does not equal <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.  
  
 -or-  
  
 The conversion of <paramref name="value" /> to a <see cref="T:System.Boolean" /> is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 8-bit signed integer to an equivalent Boolean value.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of <xref:System.SByte> values to <xref:System.Boolean> values.  
  
 [!code-cpp[System.Convert.ToBoolean#6](~/add/codesnippet/cpp/m-system.convert.toboole_0_1.cpp)]
 [!code-cs[System.Convert.ToBoolean#6](~/add/codesnippet/csharp/m-system.convert.toboole_0_1.cs)]
 [!code-vb[System.Convert.ToBoolean#6](~/add/codesnippet/visualbasic/m-system.convert.toboole_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The single-precision floating-point number to convert.</param>
        <summary>Converts the value of the specified single-precision floating-point number to an equivalent Boolean value.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of <xref:System.Single> values to <xref:System.Boolean> values.  
  
 [!code-cpp[System.Convert.ToBoolean#7](~/add/codesnippet/cpp/m-system.convert.toboole_6_1.cpp)]
 [!code-cs[System.Convert.ToBoolean#7](~/add/codesnippet/csharp/m-system.convert.toboole_6_1.cs)]
 [!code-vb[System.Convert.ToBoolean#7](~/add/codesnippet/visualbasic/m-system.convert.toboole_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the value of either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</param>
        <summary>Converts the specified string representation of a logical value to its Boolean equivalent.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> equals <see cref="T:System.Boolean" />, or <see langword="false" /> if <paramref name="value" /> equals <see cref="T:System.Boolean" /> or <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For a successful conversion to occur, the `value` parameter must equal either <xref:System.Boolean.TrueString?displayProperty=fullName>, a constant whose value is `True`, <xref:System.Boolean.FalseString?displayProperty=fullName>, a constant whose value is `False`, or it must be `null`. In comparing `value` with <xref:System.Boolean.TrueString?displayProperty=fullName> and <xref:System.Boolean.FalseString?displayProperty=fullName>, the method ignores case as well as leading and trailing white space.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Boolean.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example uses the ToBoolean method to convert various strings to Boolean values.  
  
 [!code-cpp[System.Convert.ToBoolean#1](~/add/codesnippet/cpp/m-system.convert.toboole_13_1.cpp)]
 [!code-cs[System.Convert.ToBoolean#1](~/add/codesnippet/csharp/m-system.convert.toboole_13_1.cs)]
 [!code-vb[System.Convert.ToBoolean#1](~/add/codesnippet/visualbasic/m-system.convert.toboole_13_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not equal to <see cref="T:System.Boolean" /> or <see cref="T:System.Boolean" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(unsigned int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 16-bit unsigned integer to an equivalent Boolean value.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of <xref:System.UInt16> values to <xref:System.Boolean> values.  
  
 [!code-cpp[System.Convert.ToBoolean#8](~/add/codesnippet/cpp/m-system.convert.toboole_2_1.cpp)]
 [!code-cs[System.Convert.ToBoolean#8](~/add/codesnippet/csharp/m-system.convert.toboole_2_1.cs)]
 [!code-vb[System.Convert.ToBoolean#8](~/add/codesnippet/visualbasic/m-system.convert.toboole_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent Boolean value.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of <xref:System.Int32> values to <xref:System.Boolean> values.  
  
 [!code-cpp[System.Convert.ToBoolean#9](~/add/codesnippet/cpp/m-system.convert.toboole_1_1.cpp)]
 [!code-cs[System.Convert.ToBoolean#9](~/add/codesnippet/csharp/m-system.convert.toboole_1_1.cs)]
 [!code-vb[System.Convert.ToBoolean#9](~/add/codesnippet/visualbasic/m-system.convert.toboole_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent Boolean value.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> is not zero; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of <xref:System.UInt64> values to <xref:System.Boolean> values.  
  
 [!code-cpp[System.Convert.ToBoolean#10](~/add/codesnippet/cpp/m-system.convert.toboole_5_1.cpp)]
 [!code-cs[System.Convert.ToBoolean#10](~/add/codesnippet/csharp/m-system.convert.toboole_5_1.cs)]
 [!code-vb[System.Convert.ToBoolean#10](~/add/codesnippet/visualbasic/m-system.convert.toboole_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(object value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified object to an equivalent Boolean value, using the specified culture-specific formatting information.</summary>
        <returns>
          <see langword="true" /> or <see langword="false" />, which reflects the value returned by invoking the <see cref="System.IConvertible.ToBoolean%2A" /> method for the underlying type of <paramref name="value" />. If <paramref name="value" /> is <see langword="null" />, the method returns <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `provider` enables the user to specify culture-specific conversion information about the contents of `value`. The base types ignore the `provider` parameter; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.  
  
   
  
## Examples  
 The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>. Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values. An object of each class is passed to the ToBoolean method. This method returns `true` if any of the non-discarded array values are non-zero. The <xref:System.IFormatProvider> object determines how elements are discarded for this calculation.  
  
 [!code-cs[System.Convert.ToXXX_Object_IFP#1](~/add/codesnippet/csharp/m-system.convert.toboole_8_1.cs)]
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/add/codesnippet/cpp/m-system.convert.toboole_8_1.cpp)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/add/codesnippet/visualbasic/m-system.convert.toboole_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is a string that does not equal <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.  
  
 -or-  
  
 The conversion of <paramref name="value" /> to a <see cref="T:System.Boolean" /> is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToBoolean">
      <MemberSignature Language="C#" Value="public static bool ToBoolean (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ToBoolean(string value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the value of either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</param>
        <param name="provider">An object that supplies culture-specific formatting information. This parameter is ignored.</param>
        <summary>Converts the specified string representation of a logical value to its Boolean equivalent, using the specified culture-specific formatting information.</summary>
        <returns>
          <see langword="true" /> if <paramref name="value" /> equals <see cref="T:System.Boolean" />, or <see langword="false" /> if <paramref name="value" /> equals <see cref="T:System.Boolean" /> or <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Boolean.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not equal to <see cref="T:System.Boolean" /> or <see cref="T:System.Boolean" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The Boolean value to convert.</param>
        <summary>Converts the specified Boolean value to the equivalent 8-bit unsigned integer.</summary>
        <returns>The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example illustrates the conversion of <xref:System.Boolean> to <xref:System.Byte> values.  
  
 [!code-cpp[System.Convert.ToByte#1](~/add/codesnippet/cpp/m-system.convert.tobyte-_6_1.cpp)]
 [!code-cs[System.Convert.ToByte#1](~/add/codesnippet/csharp/m-system.convert.tobyte-_6_1.cs)]
 [!code-vb[System.Convert.ToByte#1](~/add/codesnippet/visualbasic/m-system.convert.tobyte-_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(unsigned int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit unsigned integer to return.</param>
        <summary>Returns the specified 8-bit unsigned integer; no actual conversion is performed.</summary>
        <returns>
          <paramref name="value" /> is returned unchanged.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The Unicode character to convert.</param>
        <summary>Converts the value of the specified Unicode character to the equivalent 8-bit unsigned integer.</summary>
        <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method returns an unsigned byte value that represents the numeric code of the <xref:System.Char> object passed to it. In the .NET Framework, a <xref:System.Char> object is a 16-bit value. This means that the method is suitable for returning the numeric codes of characters in the ASCII character range or in the Unicode C0 Controls and Basic Latin, and C1 Controls and Latin-1 Supplement ranges, from U+0000 to U+00FF.  
  
   
  
## Examples  
 The following example converts an array of <xref:System.Char> values to <xref:System.Byte> values.  
  
 [!code-cs[System.Convert.ToByte#2](~/add/codesnippet/csharp/m-system.convert.tobyte-_5_1.cs)]
 [!code-vb[System.Convert.ToByte#2](~/add/codesnippet/visualbasic/m-system.convert.tobyte-_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is greater than <see cref="T:System.Byte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(valuetype System.DateTime value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The date and time value to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The number to convert.</param>
        <summary>Converts the value of the specified decimal number to an equivalent 8-bit unsigned integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 8-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The following example converts a <xref:System.Byte> value to a <xref:System.Decimal> and a <xref:System.Decimal> value to a <xref:System.Byte>.  
  
 [!code-cpp[System.Convert Snippets#18](~/add/codesnippet/cpp/m-system.convert.tobyte-_7_1.cpp)]
 [!code-cs[System.Convert Snippets#18](~/add/codesnippet/csharp/m-system.convert.tobyte-_7_1.cs)]
 [!code-vb[System.Convert Snippets#18](~/add/codesnippet/visualbasic/m-system.convert.tobyte-_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Byte" /> or less than <see cref="T:System.Byte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The double-precision floating-point number to convert.</param>
        <summary>Converts the value of the specified double-precision floating-point number to an equivalent 8-bit unsigned integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 8-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts a <xref:System.Byte> value to a <xref:System.Double> and a <xref:System.Double> value to a <xref:System.Byte>.  
  
 [!code-cpp[System.Convert Snippets#2](~/add/codesnippet/cpp/m-system.convert.tobyte-_1_1.cpp)]
 [!code-cs[System.Convert Snippets#2](~/add/codesnippet/csharp/m-system.convert.tobyte-_1_1.cs)]
 [!code-vb[System.Convert Snippets#2](~/add/codesnippet/visualbasic/m-system.convert.tobyte-_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Byte" /> or less than <see cref="T:System.Byte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 16-bit signed integer to an equivalent 8-bit unsigned integer.</summary>
        <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of <xref:System.Int16> values to <xref:System.Byte> values.  
  
 [!code-cs[System.Convert.ToByte#3](~/add/codesnippet/csharp/m-system.convert.tobyte-_8_1.cs)]
 [!code-vb[System.Convert.ToByte#3](~/add/codesnippet/visualbasic/m-system.convert.tobyte-_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than <see cref="T:System.Byte" /> or greater than <see cref="T:System.Byte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit unsigned integer.</summary>
        <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of <xref:System.Int32> values to <xref:System.Byte> values.  
  
 [!code-cs[System.Convert.ToByte#4](~/add/codesnippet/csharp/m-system.convert.tobyte-_0_1.cs)]
 [!code-vb[System.Convert.ToByte#4](~/add/codesnippet/visualbasic/m-system.convert.tobyte-_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than <see cref="T:System.Byte" /> or greater than <see cref="T:System.Byte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit unsigned integer.</summary>
        <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of <xref:System.Int64> values to <xref:System.Byte> values.  
  
 [!code-cs[System.Convert.ToByte#5](~/add/codesnippet/csharp/m-system.convert.tobyte-_4_1.cs)]
 [!code-vb[System.Convert.ToByte#5](~/add/codesnippet/visualbasic/m-system.convert.tobyte-_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than <see cref="T:System.Byte" /> or greater than <see cref="T:System.Byte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</param>
        <summary>Converts the value of the specified object to an 8-bit unsigned integer.</summary>
        <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToByte%2A?displayProperty=fullName>implementation of the underlying type of `value`.  
  
   
  
## Examples  
 The following example uses the ToByte method to convert an array of objects to <xref:System.Byte> values.  
  
 [!code-cs[System.Convert.ToByte#6](~/add/codesnippet/csharp/m-system.convert.tobyte-_10_1.cs)]
 [!code-vb[System.Convert.ToByte#6](~/add/codesnippet/visualbasic/m-system.convert.tobyte-_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in the property format for a <see cref="T:System.Byte" /> value.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />.  
  
 -or-  
  
 Conversion from <paramref name="value" /> to the <see cref="T:System.Byte" /> type is not supported.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit signed integer to be converted.</param>
        <summary>Converts the value of the specified 8-bit signed integer to an equivalent 8-bit unsigned integer.</summary>
        <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of <xref:System.SByte> values to <xref:System.Byte> values.  
  
 [!code-cs[System.Convert.ToByte#7](~/add/codesnippet/csharp/m-system.convert.tobyte-_3_1.cs)]
 [!code-vb[System.Convert.ToByte#7](~/add/codesnippet/visualbasic/m-system.convert.tobyte-_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than <see cref="T:System.Byte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">A single-precision floating-point number.</param>
        <summary>Converts the value of the specified single-precision floating-point number to an equivalent 8-bit unsigned integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 8-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts a <xref:System.Single> value to a <xref:System.Byte>.  
  
 [!code-cpp[System.Convert Snippets#19](~/add/codesnippet/cpp/m-system.convert.tobyte-_11_1.cpp)]
 [!code-cs[System.Convert Snippets#19](~/add/codesnippet/csharp/m-system.convert.tobyte-_11_1.cs)]
 [!code-vb[System.Convert Snippets#19](~/add/codesnippet/visualbasic/m-system.convert.tobyte-_11_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Byte" /> or less than <see cref="T:System.Byte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <summary>Converts the specified string representation of a number to an equivalent 8-bit unsigned integer.</summary>
        <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Using the ToByte method is equivalent to passing `value` to the <xref:System.Byte.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Byte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example defines a string array and attempts to convert each string to a <xref:System.Byte>.  Note that while a `null` string parses to zero, <xref:System.String.Empty?displayProperty=fullName> throws a <xref:System.FormatException>. Also note that while leading and trailing spaces parse successfully, formatting symbols, such as currency symbols, group separators, or decimal separators, do not.  
  
 [!code-vb[System.Convert.ToByte#15](~/add/codesnippet/visualbasic/m-system.convert.tobyte-_12_1.vb)]
 [!code-cs[System.Convert.ToByte#15](~/add/codesnippet/csharp/m-system.convert.tobyte-_12_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="T:System.Byte" /> or greater than <see cref="T:System.Byte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(unsigned int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 16-bit unsigned integer to an equivalent 8-bit unsigned integer.</summary>
        <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of unsigned 16-bit integers to <xref:System.Byte> values.  
  
 [!code-cs[System.Convert.ToByte#8](~/add/codesnippet/csharp/m-system.convert.tobyte-_14_1.cs)]
 [!code-vb[System.Convert.ToByte#8](~/add/codesnippet/visualbasic/m-system.convert.tobyte-_14_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Byte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit unsigned integer.</summary>
        <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of unsigned integers to <xref:System.Byte> values.  
  
 [!code-cs[System.Convert.ToByte#9](~/add/codesnippet/csharp/m-system.convert.tobyte-_16_1.cs)]
 [!code-vb[System.Convert.ToByte#9](~/add/codesnippet/visualbasic/m-system.convert.tobyte-_16_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Byte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit unsigned integer.</summary>
        <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of unsigned long integers to <xref:System.Byte> values.  
  
 [!code-cs[System.Convert.ToByte#10](~/add/codesnippet/csharp/m-system.convert.tobyte-_2_1.cs)]
 [!code-vb[System.Convert.ToByte#10](~/add/codesnippet/visualbasic/m-system.convert.tobyte-_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Byte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(object value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified object to an 8-bit unsigned integer, using the specified culture-specific formatting information.</summary>
        <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `provider` enables the user to specify culture-specific conversion information about the contents of `value`. The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.  
  
   
  
## Examples  
 The following example defines a `ByteString` class that implements the <xref:System.IConvertible> interface. The class stores the string representation of a byte value along with a sign field, so that it is able to represent both signed and unsigned byte values.  
  
 [!code-cs[System.Convert.ToByte#12](~/add/codesnippet/csharp/m-system.convert.tobyte-_15_1.cs)]
 [!code-vb[System.Convert.ToByte#12](~/add/codesnippet/visualbasic/m-system.convert.tobyte-_15_1.vb)]  
  
 The following example instantiates several `ByteString` objects and calls the ToByte method to convert them to byte values. It illustrates that the ToByte method wraps a call to the <xref:System.IConvertible.ToByte%2A?displayProperty=fullName> method of the object to be converted.  
  
 [!code-cs[System.Convert.ToByte#13](~/add/codesnippet/csharp/m-system.convert.tobyte-_15_2.cs)]
 [!code-vb[System.Convert.ToByte#13](~/add/codesnippet/visualbasic/m-system.convert.tobyte-_15_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in the property format for a <see cref="T:System.Byte" /> value.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />.  
  
 -or-  
  
 Conversion from <paramref name="value" /> to the <see cref="T:System.Byte" /> type is not supported.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(string value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the specified string representation of a number to an equivalent 8-bit unsigned integer, using specified culture-specific formatting information.</summary>
        <returns>An 8-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Byte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example creates a custom <xref:System.Globalization.NumberFormatInfo> object that defines the positive sign as "pos" and the negative sign as "neg", which it uses in calls to the ToByte method. It then calls the ToByte method repeatedly to convert each element in a string array to a <xref:System.Byte> value.  
  
 [!code-vb[System.Convert.ToByte#14](~/add/codesnippet/visualbasic/m-system.convert.tobyte-_13_1.vb)]
 [!code-cs[System.Convert.ToByte#14](~/add/codesnippet/csharp/m-system.convert.tobyte-_13_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="T:System.Byte" /> or greater than <see cref="T:System.Byte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToByte">
      <MemberSignature Language="C#" Value="public static byte ToByte (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ToByte(string value, int32 fromBase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <param name="fromBase">The base of the number in `value`, which must be 2, 8, 10, or 16.</param>
        <summary>Converts the string representation of a number in a specified base to an equivalent 8-bit unsigned integer.</summary>
        <returns>An 8-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".  
  
 Because the <xref:System.Byte> data type supports unsigned values only, the ToByte method assumes that `value` is expressed using unsigned binary representation. In other words, all eight bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed byte value that is out of the range of the <xref:System.Byte> data type is converted to a <xref:System.Byte> value without the method throwing an exception. The following example converts <xref:System.SByte.MinValue> to its hexadecimal string representation, and then calls the ToByte method. Instead of throwing an exception, the method displays the message, "0x80 converts to 128."  
  
 [!code-vb[System.Convert.BaseConversion#3](~/add/codesnippet/visualbasic/m-system.convert.tobyte-_9_1.vb)]
 [!code-cs[System.Convert.BaseConversion#3](~/add/codesnippet/csharp/m-system.convert.tobyte-_9_1.cs)]  
  
 When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use unsigned binary representation when it converts a hexadecimal string representation to a <xref:System.Byte> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value back to a <xref:System.Byte> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the value is negative and that it uses two's complement instead of unsigned binary representation), the method throws an exception.  
  
 [!code-vb[System.Convert.BaseConversion#4](~/add/codesnippet/visualbasic/m-system.convert.tobyte-_9_2.vb)]
 [!code-cs[System.Convert.BaseConversion#4](~/add/codesnippet/csharp/m-system.convert.tobyte-_9_2.cs)]  
  
   
  
## Examples  
 The following example alternately attempts to interpret an array of strings as the representation of binary, octal, decimal, and hexadecimal values.  
  
 [!code-vb[System.Convert.ToByte#11](~/add/codesnippet/visualbasic/m-system.convert.tobyte-_9_3.vb)]
 [!code-cs[System.Convert.ToByte#11](~/add/codesnippet/csharp/m-system.convert.tobyte-_9_3.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="fromBase" /> is not 2, 8, 10, or 16.  
  
 -or-  
  
 <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> is <see cref="T:System.String" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" />, which represents a base 10 unsigned number, is prefixed with a negative sign.  
  
 -or-  
  
 <paramref name="value" /> represents a number that is less than <see cref="T:System.Byte" /> or greater than <see cref="T:System.Byte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The Boolean value to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(unsigned int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 8-bit unsigned integer to its equivalent Unicode character.</summary>
        <returns>A Unicode character that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of unsigned bytes to <xref:System.Char> values.  
  
 [!code-cs[System.Convert.ToChar#1](~/add/codesnippet/csharp/m-system.convert.tochar-_12_1.cs)]
 [!code-vb[System.Convert.ToChar#1](~/add/codesnippet/visualbasic/m-system.convert.tochar-_12_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The Unicode character to return.</param>
        <summary>Returns the specified Unicode character value; no actual conversion is performed.</summary>
        <returns>
          <paramref name="value" /> is returned unchanged.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(valuetype System.DateTime value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The date and time value to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The decimal number to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert a <xref:System.Decimal> to <xref:System.Char>, and throws <xref:System.InvalidCastException> on failure.  
  
 [!code-cpp[System.Convert Snippets#17](~/add/codesnippet/cpp/m-system.convert.tochar-_10_1.cpp)]
 [!code-cs[System.Convert Snippets#17](~/add/codesnippet/csharp/m-system.convert.tochar-_10_1.cs)]
 [!code-vb[System.Convert Snippets#17](~/add/codesnippet/visualbasic/m-system.convert.tochar-_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The double-precision floating-point number to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 16-bit signed integer to its equivalent Unicode character.</summary>
        <returns>A Unicode character that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of signed 16-bit integers to <xref:System.Char> values.  
  
 [!code-cs[System.Convert.ToChar#2](~/add/codesnippet/csharp/m-system.convert.tochar-_3_1.cs)]
 [!code-vb[System.Convert.ToChar#2](~/add/codesnippet/visualbasic/m-system.convert.tochar-_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than <see cref="T:System.Char" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 32-bit signed integer to its equivalent Unicode character.</summary>
        <returns>A Unicode character that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of signed integers to <xref:System.Char> values.  
  
 [!code-cs[System.Convert.ToChar#3](~/add/codesnippet/csharp/m-system.convert.tochar-_9_1.cs)]
 [!code-vb[System.Convert.ToChar#3](~/add/codesnippet/visualbasic/m-system.convert.tochar-_9_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than <see cref="T:System.Char" /> or greater than <see cref="T:System.Char" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 64-bit signed integer to its equivalent Unicode character.</summary>
        <returns>A Unicode character that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert a long integer to a <xref:System.Char>, and throws a <xref:System.OverflowException> on failure.  
  
 [!code-cpp[System.Convert Snippets#8](~/add/codesnippet/cpp/m-system.convert.tochar-_7_1.cpp)]
 [!code-cs[System.Convert Snippets#8](~/add/codesnippet/csharp/m-system.convert.tochar-_7_1.cs)]
 [!code-vb[System.Convert Snippets#8](~/add/codesnippet/visualbasic/m-system.convert.tochar-_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than <see cref="T:System.Char" /> or greater than <see cref="T:System.Char" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface.</param>
        <summary>Converts the value of the specified object to a Unicode character.</summary>
        <returns>A Unicode character that is equivalent to value, or <see cref="T:System.Char" /> if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToChar%2A?displayProperty=fullName>implementation of the underlying type of `value`.  
  
   
  
## Examples  
 The following example attempts to convert each element in an object array to a <xref:System.Char> value.  
  
 [!code-cs[System.Convert.ToChar#9](~/add/codesnippet/csharp/m-system.convert.tochar-_5_1.cs)]
 [!code-vb[System.Convert.ToChar#9](~/add/codesnippet/visualbasic/m-system.convert.tochar-_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is a null string.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.  
  
 -or-  
  
 The conversion of <paramref name="value" /> to a <see cref="T:System.Char" /> is not supported.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 8-bit signed integer to its equivalent Unicode character.</summary>
        <returns>A Unicode character that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of signed bytes to <xref:System.Char> values.  
  
 [!code-cs[System.Convert.ToChar#4](~/add/codesnippet/csharp/m-system.convert.tochar-_11_1.cs)]
 [!code-vb[System.Convert.ToChar#4](~/add/codesnippet/visualbasic/m-system.convert.tochar-_11_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than <see cref="T:System.Char" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The single-precision floating-point number to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">A string of length 1.</param>
        <summary>Converts the first character of a specified string to a Unicode character.</summary>
        <returns>A Unicode character that is equivalent to the first and only character in <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` must be a string that contains a single character.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Char.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example converts each element in a string array to a <xref:System.Char> value.  
  
 [!code-cs[System.Convert.ToChar#5](~/add/codesnippet/csharp/m-system.convert.tochar-_4_1.cs)]
 [!code-vb[System.Convert.ToChar#5](~/add/codesnippet/visualbasic/m-system.convert.tochar-_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The length of <paramref name="value" /> is not 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(unsigned int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 16-bit unsigned integer to its equivalent Unicode character.</summary>
        <returns>A Unicode character that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of unsigned 16-bit integers to a <xref:System.Char> value.  
  
 [!code-cs[System.Convert.ToChar#6](~/add/codesnippet/csharp/m-system.convert.tochar-_6_1.cs)]
 [!code-vb[System.Convert.ToChar#6](~/add/codesnippet/visualbasic/m-system.convert.tochar-_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 32-bit unsigned integer to its equivalent Unicode character.</summary>
        <returns>A Unicode character that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of unsigned integers to a <xref:System.Char> value.  
  
 [!code-cs[System.Convert.ToChar#7](~/add/codesnippet/csharp/m-system.convert.tochar-_1_1.cs)]
 [!code-vb[System.Convert.ToChar#7](~/add/codesnippet/visualbasic/m-system.convert.tochar-_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Char" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 64-bit unsigned integer to its equivalent Unicode character.</summary>
        <returns>A Unicode character that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of unsigned long integers to a <xref:System.Char> value.  
  
 [!code-cs[System.Convert.ToChar#8](~/add/codesnippet/csharp/m-system.convert.tochar-_8_1.cs)]
 [!code-vb[System.Convert.ToChar#8](~/add/codesnippet/visualbasic/m-system.convert.tochar-_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Char" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(object value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified object to its equivalent Unicode character, using the specified culture-specific formatting information.</summary>
        <returns>A Unicode character that is equivalent to <paramref name="value" />, or <see cref="T:System.Char" /> if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking the <xref:System.IConvertible.ToChar%2A?displayProperty=fullName> method of the underlying type of `value`.  
  
 `provider` enables the user to specify culture-specific conversion information about the contents of `value`. The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.  
  
   
  
## Examples  
 The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>. Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values. An object of each class is passed to the `ToChar` method. This method returns a character whose Unicode value is the average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.  
  
 [!code-cs[System.Convert.ToXXX_Object_IFP#1](~/add/codesnippet/csharp/m-system.convert.tochar-_0_1.cs)]
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/add/codesnippet/cpp/m-system.convert.tochar-_0_1.cpp)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/add/codesnippet/visualbasic/m-system.convert.tochar-_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is a null string.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.  
  
 -or-  
  
 The conversion of <paramref name="value" /> to a <see cref="T:System.Char" /> is not supported.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than <see cref="F:System.Char.MinValue" /> or greater than <see cref="F:System.Char.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToChar">
      <MemberSignature Language="C#" Value="public static char ToChar (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char ToChar(string value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">A string of length 1 or <see langword="null" />.</param>
        <param name="provider">An object that supplies culture-specific formatting information. This parameter is ignored.</param>
        <summary>Converts the first character of a specified string to a Unicode character, using specified culture-specific formatting information.</summary>
        <returns>A Unicode character that is equivalent to the first and only character in <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value` must be a string that contains a single character.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Char.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example converts a string representation of a <xref:System.Char> value with the `ToChar` method, using an <xref:System.IFormatProvider> object that displays the type of the format provider for which it is called. The example shows that the format provider is not referenced.  
  
 [!code-cpp[System.Convert.ToNonNum_String#2](~/add/codesnippet/cpp/m-system.convert.tochar-_2_1.cpp)]
 [!code-cs[System.Convert.ToNonNum_String#2](~/add/codesnippet/csharp/m-system.convert.tochar-_2_1.cs)]
 [!code-vb[System.Convert.ToNonNum_String#2](~/add/codesnippet/visualbasic/m-system.convert.tochar-_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">The length of <paramref name="value" /> is not 1.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The Boolean value to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(unsigned int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit unsigned integer to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The Unicode character to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(valuetype System.DateTime value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">A date and time value.</param>
        <summary>Returns the specified <see cref="T:System.DateTime" /> object; no actual conversion is performed.</summary>
        <returns>
          <paramref name="value" /> is returned unchanged.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The number to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The double-precision floating-point value to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit signed integer to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit signed integer to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit signed integer to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</param>
        <summary>Converts the value of the specified object to a <see cref="T:System.DateTime" /> object.</summary>
        <returns>The date and time equivalent of the value of <paramref name="value" />, or a date and time equivalent of <see cref="T:System.DateTime" /> if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For the conversion to succeed, the runtime type of the `value` parameter must be either a <xref:System.DateTime> or a <xref:System.String>, or `value` must be `null`. Otherwise, the method throws an <xref:System.InvalidCastException>. In addition, if `value` is a string, it must contain a valid representation of a date and time value in the current culture or a <xref:System.FormatException> is thrown.  
  
 The return value is the result of invoking the <xref:System.IConvertible.ToDateTime%2A?displayProperty=fullName> method of the underlying type of `value`.  
  
   
  
## Examples  
 The following example calls the ToDateTime method with a variety of <xref:System.Object> variables.  
  
 [!code-cs[System.Convert.ToDateTime#1](~/add/codesnippet/csharp/m-system.convert.todatet_0_1.cs)]
 [!code-vb[System.Convert.ToDateTime#1](~/add/codesnippet/visualbasic/m-system.convert.todatet_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not a valid date and time value.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.  
  
 -or-  
  
 The conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit signed integer to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The single-precision floating-point value to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The string representation of a date and time.</param>
        <summary>Converts the specified string representation of a date and time to an equivalent date and time value.</summary>
        <returns>The date and time equivalent of the value of <paramref name="value" />, or the date and time equivalent of <see cref="T:System.DateTime" /> if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `value` is not `null`, the return value is the result of invoking the <xref:System.DateTime.Parse%2A?displayProperty=fullName> method on `value` using the formatting information in a <xref:System.Globalization.DateTimeFormatInfo> object that is initialized for the current culture. The `value` argument must contain the representation of a date and time in one of the formats described in the <xref:System.Globalization.DateTimeFormatInfo> topic. If `value` is `null`, the method returns <xref:System.DateTime.MinValue?displayProperty=fullName>.  
  
 This method tries to parse `value` completely and avoid throwing a <xref:System.FormatException>. It completes missing month, day, and year information with the current date. If `value` contains only a date and no time, this method assumes a time of midnight. Any leading, inner, or trailing white-space characters in `value` are ignored.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.DateTime.TryParse%2A?displayProperty=fullName>method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example uses the ToDateTime method to convert various string representations of dates and times to <xref:System.DateTime> values.  
  
 [!code-vb[System.Convert.ToDateTime#2](~/add/codesnippet/visualbasic/m-system.convert.todatet_3_1.vb)]
 [!code-cs[System.Convert.ToDateTime#2](~/add/codesnippet/csharp/m-system.convert.todatet_3_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not a properly formatted date and time string.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(unsigned int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit unsigned integer to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit unsigned integer to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit unsigned integer to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(object value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified object to a <see cref="T:System.DateTime" /> object, using the specified culture-specific formatting information.</summary>
        <returns>The date and time equivalent of the value of <paramref name="value" />, or the date and time equivalent of <see cref="T:System.DateTime" /> if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking the <xref:System.IConvertible.ToDateTime%2A?displayProperty=fullName> method of the underlying type of `value`.  
  
 `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a date, `provider` could supply culture-specific information about the notation used to represent that date. `provider` is involved in the conversion of `value` if the runtime type of `value` is a <xref:System.String>, or if `value` is a user-defined type whose <xref:System.IConvertible.ToDateTime%2A?displayProperty=fullName> implementation makes use of `provider`. If the runtime type of `value` is <xref:System.String> and `provider` is `null`, the <xref:System.Globalization.CultureInfo> object that represents the current thread culture is used.  
  
   
  
## Examples  
 The following example defines a custom format provider, `CustomProvider`, whose <xref:System.IFormatProvider.GetFormat%2A> method outputs a message to the console that it has been invoked, and then returns the <xref:System.Globalization.DateTimeFormatInfo> object of the culture whose name was passed as a parameter to its class constructor. Each of these `CustomProvider` objects is used to convert the elements in an object array to date and time values. The output indicates that the `CustomProvider` object is used in the conversion only when the type of the `value` parameter is a <xref:System.String>.  
  
 [!code-cs[System.Convert.ToDateTime#4](~/add/codesnippet/csharp/m-system.convert.todatet_2_1.cs)]
 [!code-vb[System.Convert.ToDateTime#4](~/add/codesnippet/visualbasic/m-system.convert.todatet_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not a valid date and time value.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.  
  
 -or-  
  
 The conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDateTime">
      <MemberSignature Language="C#" Value="public static DateTime ToDateTime (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ToDateTime(string value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains a date and time to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the specified string representation of a number to an equivalent date and time, using the specified culture-specific formatting information.</summary>
        <returns>The date and time equivalent of the value of <paramref name="value" />, or the date and time equivalent of <see cref="T:System.DateTime" /> if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking the <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName> method on `value`.  
  
 `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.DateTimeFormatInfo> object. The <xref:System.Globalization.DateTimeFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.DateTimeFormatInfo> for the current culture is used.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.DateTime.TryParse%2A?displayProperty=fullName>method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example converts string representations of date values with the `ToDateTime` method, using an <xref:System.IFormatProvider> object.  
  
 [!code-cs[System.Convert.ToDateTime#3](~/add/codesnippet/csharp/m-system.convert.todatet_1_1.cs)]
 [!code-vb[System.Convert.ToDateTime#3](~/add/codesnippet/visualbasic/m-system.convert.todatet_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not a properly formatted date and time string.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The Boolean value to convert.</param>
        <summary>Converts the specified Boolean value to the equivalent decimal number.</summary>
        <returns>The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example illustrates the conversion of <xref:System.Boolean> to <xref:System.Decimal> values.  
  
 [!code-cs[System.Convert.ToDecimal2#1](~/add/codesnippet/csharp/m-system.convert.todecim_11_1.cs)]
 [!code-vb[System.Convert.ToDecimal2#1](~/add/codesnippet/visualbasic/m-system.convert.todecim_11_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(unsigned int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent decimal number.</summary>
        <returns>The decimal number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts a <xref:System.Byte> value to a <xref:System.Decimal> value.  
  
 [!code-cpp[System.Convert Snippets#18](~/add/codesnippet/cpp/m-system.convert.todecim_8_1.cpp)]
 [!code-cs[System.Convert Snippets#18](~/add/codesnippet/csharp/m-system.convert.todecim_8_1.cs)]
 [!code-vb[System.Convert Snippets#18](~/add/codesnippet/visualbasic/m-system.convert.todecim_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The Unicode character to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert a <xref:System.Char> value to <xref:System.Decimal>, and throws <xref:System.InvalidCastException> upon failure.  
  
 [!code-cpp[System.Convert Snippets#17](~/add/codesnippet/cpp/m-system.convert.todecim_4_1.cpp)]
 [!code-cs[System.Convert Snippets#17](~/add/codesnippet/csharp/m-system.convert.todecim_4_1.cs)]
 [!code-vb[System.Convert Snippets#17](~/add/codesnippet/visualbasic/m-system.convert.todecim_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(valuetype System.DateTime value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The date and time value to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">A decimal number.</param>
        <summary>Returns the specified decimal number; no actual conversion is performed.</summary>
        <returns>
          <paramref name="value" /> is returned unchanged.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The double-precision floating-point number to convert.</param>
        <summary>Converts the value of the specified double-precision floating-point number to an equivalent decimal number.</summary>
        <returns>A decimal number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Decimal> value returned by this method contains a maximum of 15 significant digits. If the `value` parameter contains more than 15 significant digits, it is rounded using rounding to nearest. The following example illustrates how the ToDecimal method uses rounding to nearest to return a <xref:System.Decimal> value with 15 significant digits.  
  
 [!code-vb[System.Convert.ToDecimal#2](~/add/codesnippet/visualbasic/m-system.convert.todecim_15_1.vb)]
 [!code-cs[System.Convert.ToDecimal#2](~/add/codesnippet/csharp/m-system.convert.todecim_15_1.cs)]  
  
   
  
## Examples  
 The following example converts a <xref:System.Double> value to a <xref:System.Decimal> value.  
  
 [!code-cpp[System.Convert Snippets#5](~/add/codesnippet/cpp/m-system.convert.todecim_15_2.cpp)]
 [!code-cs[System.Convert Snippets#5](~/add/codesnippet/csharp/m-system.convert.todecim_15_2.cs)]
 [!code-vb[System.Convert Snippets#5](~/add/codesnippet/visualbasic/m-system.convert.todecim_15_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Decimal" /> or less than <see cref="T:System.Decimal" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 16-bit signed integer to an equivalent decimal number.</summary>
        <returns>A decimal number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of 16-bit signed integers to <xref:System.Decimal> values.  
  
 [!code-cs[System.Convert.ToDecimal2#2](~/add/codesnippet/csharp/m-system.convert.todecim_2_1.cs)]
 [!code-vb[System.Convert.ToDecimal2#2](~/add/codesnippet/visualbasic/m-system.convert.todecim_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 32-bit signed integer to an equivalent decimal number.</summary>
        <returns>A decimal number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of signed integers to <xref:System.Decimal> values.  
  
 [!code-cs[System.Convert.ToDecimal2#3](~/add/codesnippet/csharp/m-system.convert.todecim_13_1.cs)]
 [!code-vb[System.Convert.ToDecimal2#3](~/add/codesnippet/visualbasic/m-system.convert.todecim_13_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 64-bit signed integer to an equivalent decimal number.</summary>
        <returns>A decimal number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an <xref:System.Int64> value to a <xref:System.Decimal> value.  
  
 [!code-cpp[System.Convert Snippets#10](~/add/codesnippet/cpp/m-system.convert.todecim_6_1.cpp)]
 [!code-cs[System.Convert Snippets#10](~/add/codesnippet/csharp/m-system.convert.todecim_6_1.cs)]
 [!code-vb[System.Convert Snippets#10](~/add/codesnippet/visualbasic/m-system.convert.todecim_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</param>
        <summary>Converts the value of the specified object to an equivalent decimal number.</summary>
        <returns>A decimal number that is equivalent to <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking the <xref:System.IConvertible.ToDecimal%2A?displayProperty=fullName> method of the underlying type of `value`.  
  
   
  
## Examples  
 The following example tries to convert each element in an object array to a <xref:System.Decimal> value.  
  
 [!code-cs[System.Convert.ToDecimal2#4](~/add/codesnippet/csharp/m-system.convert.todecim_1_1.cs)]
 [!code-vb[System.Convert.ToDecimal2#4](~/add/codesnippet/visualbasic/m-system.convert.todecim_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Decimal" /> type.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.  
  
 -or-  
  
 The conversion is not supported.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 8-bit signed integer to the equivalent decimal number.</summary>
        <returns>A decimal number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of signed bytes to a <xref:System.Decimal> value.  
  
 [!code-cs[System.Convert.ToDecimal2#5](~/add/codesnippet/csharp/m-system.convert.todecim_12_1.cs)]
 [!code-vb[System.Convert.ToDecimal2#5](~/add/codesnippet/visualbasic/m-system.convert.todecim_12_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The single-precision floating-point number to convert.</param>
        <summary>Converts the value of the specified single-precision floating-point number to the equivalent decimal number.</summary>
        <returns>A decimal number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Decimal> value returned by this method contains a maximum of seven significant digits. If the `value` parameter contains more than seven significant digits, it is rounded using rounding to nearest. The following example illustrates how the ToDecimal method uses rounding to nearest to return a <xref:System.Decimal> value with seven significant digits.  
  
 [!code-vb[System.Convert.ToDecimal#1](~/add/codesnippet/visualbasic/m-system.convert.todecim_3_1.vb)]
 [!code-cs[System.Convert.ToDecimal#1](~/add/codesnippet/csharp/m-system.convert.todecim_3_1.cs)]  
  
   
  
## Examples  
 The following example tries to convert each element in an array of <xref:System.Single> values to a <xref:System.Decimal> value.  
  
 [!code-cs[System.Convert.ToDecimal2#6](~/add/codesnippet/csharp/m-system.convert.todecim_3_2.cs)]
 [!code-vb[System.Convert.ToDecimal2#6](~/add/codesnippet/visualbasic/m-system.convert.todecim_3_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Decimal" /> or less than <see cref="T:System.Decimal" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains a number to convert.</param>
        <summary>Converts the specified string representation of a number to an equivalent decimal number.</summary>
        <returns>A decimal number that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Using the ToDecimal method is equivalent to passing `value` to the <xref:System.Decimal.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Decimal.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example illustrates the use of `ToDecimal`. It attempts to convert a <xref:System.String>to a <xref:System.Decimal>, and throws the possible exceptions that may arise during the conversion.  
  
 [!code-cpp[System.Convert Snippets#15](~/add/codesnippet/cpp/m-system.convert.todecim_10_1.cpp)]
 [!code-cs[System.Convert Snippets#15](~/add/codesnippet/csharp/m-system.convert.todecim_10_1.cs)]
 [!code-vb[System.Convert Snippets#15](~/add/codesnippet/visualbasic/m-system.convert.todecim_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not a number in a valid format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="T:System.Decimal" /> or greater than <see cref="T:System.Decimal" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(unsigned int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 16-bit unsigned integer to an equivalent decimal number.</summary>
        <returns>The decimal number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of 16-bit unsigned integers to <xref:System.Decimal> values.  
  
 [!code-cs[System.Convert.ToDecimal2#7](~/add/codesnippet/csharp/m-system.convert.todecim_5_1.cs)]
 [!code-vb[System.Convert.ToDecimal2#7](~/add/codesnippet/visualbasic/m-system.convert.todecim_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent decimal number.</summary>
        <returns>A decimal number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of unsigned integers to <xref:System.Decimal> values.  
  
 [!code-cs[System.Convert.ToDecimal2#8](~/add/codesnippet/csharp/m-system.convert.todecim_9_1.cs)]
 [!code-vb[System.Convert.ToDecimal2#8](~/add/codesnippet/visualbasic/m-system.convert.todecim_9_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent decimal number.</summary>
        <returns>A decimal number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an array of unsigned long integers to <xref:System.Decimal> values.  
  
 [!code-cs[System.Convert.ToDecimal2#9](~/add/codesnippet/csharp/m-system.convert.todecim_7_1.cs)]
 [!code-vb[System.Convert.ToDecimal2#9](~/add/codesnippet/visualbasic/m-system.convert.todecim_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(object value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified object to an equivalent decimal number, using the specified culture-specific formatting information.</summary>
        <returns>A decimal number that is equivalent to <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking the <xref:System.IConvertible.ToDecimal%2A?displayProperty=fullName> method of the underlying type of `value`.  
  
 `provider` enables the user to specify culture-specific conversion information about the contents of `value`. The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.  
  
   
  
## Examples  
 The following example defines a `Temperature` class that implements the <xref:System.IConvertible> interface.  
  
 [!code-vb[System.Convert.ToDecimal2#10](~/add/codesnippet/visualbasic/m-system.convert.todecim_0_1.vb)]
 [!code-cs[System.Convert.ToDecimal2#10](~/add/codesnippet/csharp/m-system.convert.todecim_0_1.cs)]  
  
 The following example shows that when a `Temperature` object is passed as a parameter to the ToDecimal method, the <xref:System.IConvertible.ToDecimal%2A?displayProperty=fullName> implementation of the `Temperature` class is called to perform the conversion.  
  
 [!code-vb[System.Convert.ToDecimal2#11](~/add/codesnippet/visualbasic/m-system.convert.todecim_0_2.vb)]
 [!code-cs[System.Convert.ToDecimal2#11](~/add/codesnippet/csharp/m-system.convert.todecim_0_2.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Decimal" /> type.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.  
  
 -or-  
  
 The conversion is not supported.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDecimal">
      <MemberSignature Language="C#" Value="public static decimal ToDecimal (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal ToDecimal(string value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains a number to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the specified string representation of a number to an equivalent decimal number, using the specified culture-specific formatting information.</summary>
        <returns>A decimal number that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking the <xref:System.Decimal.Parse%2A?displayProperty=fullName> method on `value`.  
  
 `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Decimal.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example attempts to convert an array of strings to <xref:System.Decimal> values by using <xref:System.Globalization.NumberFormatInfo> objects that represent two different cultures.  
  
 [!code-cs[System.Convert.ToDecimal2#12](~/add/codesnippet/csharp/m-system.convert.todecim_14_1.cs)]
 [!code-vb[System.Convert.ToDecimal2#12](~/add/codesnippet/visualbasic/m-system.convert.todecim_14_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not a number in a valid format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="T:System.Decimal" /> or greater than <see cref="T:System.Decimal" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The Boolean value to convert.</param>
        <summary>Converts the specified Boolean value to the equivalent double-precision floating-point number.</summary>
        <returns>The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts a <xref:System.Boolean> value to a <xref:System.Double> value.  
  
 [!code-cpp[System.Convert Snippets#1](~/add/codesnippet/cpp/m-system.convert.todoubl_13_1.cpp)]
 [!code-cs[System.Convert Snippets#1](~/add/codesnippet/csharp/m-system.convert.todoubl_13_1.cs)]
 [!code-vb[System.Convert Snippets#1](~/add/codesnippet/visualbasic/m-system.convert.todoubl_13_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(unsigned int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent double-precision floating-point number.</summary>
        <returns>The double-precision floating-point number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts a <xref:System.Byte> value to a <xref:System.Double> value.  
  
 [!code-cpp[System.Convert Snippets#2](~/add/codesnippet/cpp/m-system.convert.todoubl_12_1.cpp)]
 [!code-cs[System.Convert Snippets#2](~/add/codesnippet/csharp/m-system.convert.todoubl_12_1.cs)]
 [!code-vb[System.Convert Snippets#2](~/add/codesnippet/visualbasic/m-system.convert.todoubl_12_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The Unicode character to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(valuetype System.DateTime value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The date and time value to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The decimal number to convert.</param>
        <summary>Converts the value of the specified decimal number to an equivalent double-precision floating-point number.</summary>
        <returns>A double-precision floating-point number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts a <xref:System.Decimal> value to a <xref:System.Double> value.  
  
 [!code-cpp[System.Convert Snippets#5](~/add/codesnippet/cpp/m-system.convert.todoubl_7_1.cpp)]
 [!code-cs[System.Convert Snippets#5](~/add/codesnippet/csharp/m-system.convert.todoubl_7_1.cs)]
 [!code-vb[System.Convert Snippets#5](~/add/codesnippet/visualbasic/m-system.convert.todoubl_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The double-precision floating-point number to return.</param>
        <summary>Returns the specified double-precision floating-point number; no actual conversion is performed.</summary>
        <returns>
          <paramref name="value" /> is returned unchanged.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 16-bit signed integer to an equivalent double-precision floating-point number.</summary>
        <returns>A double-precision floating-point number equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of 16-bit signed integers to a <xref:System.Double> value.  
  
 [!code-cs[System.Convert.ToDouble#1](~/add/codesnippet/csharp/m-system.convert.todoubl_2_1.cs)]
 [!code-vb[System.Convert.ToDouble#1](~/add/codesnippet/visualbasic/m-system.convert.todoubl_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 32-bit signed integer to an equivalent double-precision floating-point number.</summary>
        <returns>A double-precision floating-point number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts an <xref:System.Int32> value to a <xref:System.Double> value.  
  
 [!code-cpp[System.Convert Snippets#3](~/add/codesnippet/cpp/m-system.convert.todoubl_14_1.cpp)]
 [!code-cs[System.Convert Snippets#3](~/add/codesnippet/csharp/m-system.convert.todoubl_14_1.cs)]
 [!code-vb[System.Convert Snippets#3](~/add/codesnippet/visualbasic/m-system.convert.todoubl_14_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 64-bit signed integer to an equivalent double-precision floating-point number.</summary>
        <returns>A double-precision floating-point number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of signed long integers to a <xref:System.Double> value.  
  
 [!code-cs[System.Convert.ToDouble#2](~/add/codesnippet/csharp/m-system.convert.todoubl_4_1.cs)]
 [!code-vb[System.Convert.ToDouble#2](~/add/codesnippet/visualbasic/m-system.convert.todoubl_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</param>
        <summary>Converts the value of the specified object to a double-precision floating-point number.</summary>
        <returns>A double-precision floating-point number that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToDouble%2A?displayProperty=fullName>implementation of the underlying type of `value`.  
  
   
  
## Examples  
 The following example attempts to convert each value in an object array to a <xref:System.Double>.  
  
 [!code-cs[System.Convert.ToDouble#3](~/add/codesnippet/csharp/m-system.convert.todoubl_8_1.cs)]
 [!code-vb[System.Convert.ToDouble#3](~/add/codesnippet/visualbasic/m-system.convert.todoubl_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.  
  
 -or-  
  
 The conversion is not supported.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 8-bit signed integer to the equivalent double-precision floating-point number.</summary>
        <returns>The 8-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of <xref:System.SByte> values to a <xref:System.Double> value.  
  
 [!code-cs[System.Convert.ToDouble#4](~/add/codesnippet/csharp/m-system.convert.todoubl_5_1.cs)]
 [!code-vb[System.Convert.ToDouble#4](~/add/codesnippet/visualbasic/m-system.convert.todoubl_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The single-precision floating-point number.</param>
        <summary>Converts the value of the specified single-precision floating-point number to an equivalent double-precision floating-point number.</summary>
        <returns>A double-precision floating-point number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts a <xref:System.Single> value to a <xref:System.Double> value.  
  
 [!code-cpp[System.Convert Snippets#6](~/add/codesnippet/cpp/m-system.convert.todoubl_11_1.cpp)]
 [!code-cs[System.Convert Snippets#6](~/add/codesnippet/csharp/m-system.convert.todoubl_11_1.cs)]
 [!code-vb[System.Convert Snippets#6](~/add/codesnippet/visualbasic/m-system.convert.todoubl_11_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <summary>Converts the specified string representation of a number to an equivalent double-precision floating-point number.</summary>
        <returns>A double-precision floating-point number that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Using the ToDouble method is equivalent to passing `value` to the <xref:System.Double.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Double.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example attempts to convert each element in an array of numeric strings to a <xref:System.Double>. The example's output is from a system whose current culture is en-US.  
  
 [!code-vb[System.Convert.ToDouble#8](~/add/codesnippet/visualbasic/m-system.convert.todoubl_10_1.vb)]
 [!code-cs[System.Convert.ToDouble#8](~/add/codesnippet/csharp/m-system.convert.todoubl_10_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not a number in a valid format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="T:System.Double" /> or greater than <see cref="T:System.Double" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(unsigned int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent double-precision floating-point number.</summary>
        <returns>A double-precision floating-point number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of <xref:System.UInt16> values to a <xref:System.Double> value.  
  
 [!code-cs[System.Convert.ToDouble#5](~/add/codesnippet/csharp/m-system.convert.todoubl_0_1.cs)]
 [!code-vb[System.Convert.ToDouble#5](~/add/codesnippet/visualbasic/m-system.convert.todoubl_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent double-precision floating-point number.</summary>
        <returns>A double-precision floating-point number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of <xref:System.UInt32> values to a <xref:System.Double> value.  
  
 [!code-cs[System.Convert.ToDouble#6](~/add/codesnippet/csharp/m-system.convert.todoubl_9_1.cs)]
 [!code-vb[System.Convert.ToDouble#6](~/add/codesnippet/visualbasic/m-system.convert.todoubl_9_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent double-precision floating-point number.</summary>
        <returns>A double-precision floating-point number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of <xref:System.UInt64> values to a <xref:System.Double> value.  
  
 [!code-cs[System.Convert.ToDouble#7](~/add/codesnippet/csharp/m-system.convert.todoubl_1_1.cs)]
 [!code-vb[System.Convert.ToDouble#7](~/add/codesnippet/visualbasic/m-system.convert.todoubl_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(object value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified object to an double-precision floating-point number, using the specified culture-specific formatting information.</summary>
        <returns>A double-precision floating-point number that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking the <xref:System.IConvertible.ToDouble%2A?displayProperty=fullName> method of the underlying type of `value`.  
  
 `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  
  
 The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.  
  
   
  
## Examples  
 The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>. Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values. An object of each class is passed to the `ToDouble` method. This method returns an average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.  
  
 [!code-cs[System.Convert.ToXXX_Object_IFP#1](~/add/codesnippet/csharp/m-system.convert.todoubl_6_1.cs)]
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/add/codesnippet/cpp/m-system.convert.todoubl_6_1.cpp)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/add/codesnippet/visualbasic/m-system.convert.todoubl_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in an appropriate format for a <see cref="T:System.Double" /> type.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToDouble">
      <MemberSignature Language="C#" Value="public static double ToDouble (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 ToDouble(string value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the specified string representation of a number to an equivalent double-precision floating-point number, using the specified culture-specific formatting information.</summary>
        <returns>A double-precision floating-point number that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking the <xref:System.Double.Parse%2A?displayProperty=fullName> method on `value`.  
  
 `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Double.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example converts string representations of <xref:System.Double> values with the `ToDouble` method, using an <xref:System.IFormatProvider> object.  
  
 [!code-vb[System.Convert.ToReals_String#2](~/add/codesnippet/visualbasic/m-system.convert.todoubl_3_1.vb)]
 [!code-cs[System.Convert.ToReals_String#2](~/add/codesnippet/csharp/m-system.convert.todoubl_3_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not a number in a valid format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="T:System.Double" /> or greater than <see cref="T:System.Double" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The Boolean value to convert.</param>
        <summary>Converts the specified Boolean value to the equivalent 16-bit signed integer.</summary>
        <returns>The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts the Boolean values `true` and `false` to <xref:System.Int16> values.  
  
 [!code-cs[System.Convert.ToInt16#1](~/add/codesnippet/csharp/m-system.convert.toint16_11_1.cs)]
 [!code-vb[System.Convert.ToInt16#1](~/add/codesnippet/visualbasic/m-system.convert.toint16_11_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(unsigned int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit signed integer.</summary>
        <returns>A 16-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of <xref:System.Byte> values to a 16-bit signed integer.  
  
 [!code-cs[System.Convert.ToInt16#2](~/add/codesnippet/csharp/m-system.convert.toint16_5_1.cs)]
 [!code-vb[System.Convert.ToInt16#2](~/add/codesnippet/visualbasic/m-system.convert.toint16_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The Unicode character to convert.</param>
        <summary>Converts the value of the specified Unicode character to the equivalent 16-bit signed integer.</summary>
        <returns>A 16-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of <xref:System.Char> values to a 16-bit signed integer.  
  
 [!code-cs[System.Convert.ToInt16#3](~/add/codesnippet/csharp/m-system.convert.toint16_14_1.cs)]
 [!code-vb[System.Convert.ToInt16#3](~/add/codesnippet/visualbasic/m-system.convert.toint16_14_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Int16" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(valuetype System.DateTime value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The date and time value to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The decimal number to convert.</param>
        <summary>Converts the value of the specified decimal number to an equivalent 16-bit signed integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 16-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of <xref:System.Decimal> values to a 16-bit signed integer. The example illustrates that any fractional part of a <xref:System.Decimal> value is rounded when performing the conversion.  
  
 [!code-cs[System.Convert.ToInt16#4](~/add/codesnippet/csharp/m-system.convert.toint16_4_1.cs)]
 [!code-vb[System.Convert.ToInt16#4](~/add/codesnippet/visualbasic/m-system.convert.toint16_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Int16" /> or less than <see cref="T:System.Int16" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The double-precision floating-point number to convert.</param>
        <summary>Converts the value of the specified double-precision floating-point number to an equivalent 16-bit signed integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 16-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of <xref:System.Double> values to a 16-bit signed integer. The example illustrates that any fractional part of a <xref:System.Double> value is rounded before performing the conversion.  
  
 [!code-cs[System.Convert.ToInt16#5](~/add/codesnippet/csharp/m-system.convert.toint16_12_1.cs)]
 [!code-vb[System.Convert.ToInt16#5](~/add/codesnippet/visualbasic/m-system.convert.toint16_12_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Int16" /> or less than <see cref="T:System.Int16" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit signed integer to return.</param>
        <summary>Returns the specified 16-bit signed integer; no actual conversion is performed.</summary>
        <returns>
          <paramref name="value" /> is returned unchanged.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit signed integer.</summary>
        <returns>The 16-bit signed integer equivalent of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of integers to a 16-bit signed integer.  
  
 [!code-cs[System.Convert.ToInt16#6](~/add/codesnippet/csharp/m-system.convert.toint16_1_1.cs)]
 [!code-vb[System.Convert.ToInt16#6](~/add/codesnippet/visualbasic/m-system.convert.toint16_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Int16" /> or less than <see cref="T:System.Int16" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 64-bit signed integer to an equivalent 16-bit signed integer.</summary>
        <returns>A 16-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of long integers to a 16-bit signed integer.  
  
 [!code-cs[System.Convert.ToInt16#7](~/add/codesnippet/csharp/m-system.convert.toint16_13_1.cs)]
 [!code-vb[System.Convert.ToInt16#7](~/add/codesnippet/visualbasic/m-system.convert.toint16_13_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Int16" /> or less than <see cref="T:System.Int16" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</param>
        <summary>Converts the value of the specified object to a 16-bit signed integer.</summary>
        <returns>A 16-bit signed integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToInt16%2A?displayProperty=fullName> implementation of the underlying type of `value`.  
  
   
  
## Examples  
 The following example attempts to convert each element in an object array to a 16-bit signed integer.  
  
 [!code-cs[System.Convert.ToInt16#8](~/add/codesnippet/csharp/m-system.convert.toint16_10_1.cs)]
 [!code-vb[System.Convert.ToInt16#8](~/add/codesnippet/visualbasic/m-system.convert.toint16_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in an appropriate format for an <see cref="T:System.Int16" /> type.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.  
  
 -or-  
  
 The conversion is not supported.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit signed integer.</summary>
        <returns>A 8-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of signed bytes to a 16-bit signed integer.  
  
 [!code-cs[System.Convert.ToInt16#9](~/add/codesnippet/csharp/m-system.convert.toint16_2_1.cs)]
 [!code-vb[System.Convert.ToInt16#9](~/add/codesnippet/visualbasic/m-system.convert.toint16_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The single-precision floating-point number to convert.</param>
        <summary>Converts the value of the specified single-precision floating-point number to an equivalent 16-bit signed integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 16-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of <xref:System.Single> values to a 16-bit signed integer.  
  
 [!code-cs[System.Convert.ToInt16#10](~/add/codesnippet/csharp/m-system.convert.toint16_3_1.cs)]
 [!code-vb[System.Convert.ToInt16#10](~/add/codesnippet/visualbasic/m-system.convert.toint16_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Int16" /> or less than <see cref="T:System.Int16" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <summary>Converts the specified string representation of a number to an equivalent 16-bit signed integer.</summary>
        <returns>A 16-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Using the ToInt16 method is equivalent to passing `value` to the <xref:System.Int16.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example converts string representations of 16-bit integers with the `ToInt16` method, using default formatting.  
  
 [!code-cpp[System.Convert.ToSInts_String#3](~/add/codesnippet/cpp/m-system.convert.toint16_0_1.cpp)]
 [!code-cs[System.Convert.ToSInts_String#3](~/add/codesnippet/csharp/m-system.convert.toint16_0_1.cs)]
 [!code-vb[System.Convert.ToSInts_String#3](~/add/codesnippet/visualbasic/m-system.convert.toint16_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="T:System.Int16" /> or greater than <see cref="T:System.Int16" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(unsigned int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 16-bit signed integer.</summary>
        <returns>A 16-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of unsigned 16-bit integers to a 16-bit signed integer.  
  
 [!code-cs[System.Convert.ToInt16#11](~/add/codesnippet/csharp/m-system.convert.toint16_9_1.cs)]
 [!code-vb[System.Convert.ToInt16#11](~/add/codesnippet/visualbasic/m-system.convert.toint16_9_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Int16" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit signed integer.</summary>
        <returns>A 16-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of unsigned integers to a 16-bit signed integer.  
  
 [!code-cs[System.Convert.ToInt16#12](~/add/codesnippet/csharp/m-system.convert.toint16_6_1.cs)]
 [!code-vb[System.Convert.ToInt16#12](~/add/codesnippet/visualbasic/m-system.convert.toint16_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Int16" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit signed integer.</summary>
        <returns>A 16-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of unsigned long integers to a 16-bit signed integer.  
  
 [!code-cs[System.Convert.ToInt16#13](~/add/codesnippet/csharp/m-system.convert.toint16_8_1.cs)]
 [!code-vb[System.Convert.ToInt16#13](~/add/codesnippet/visualbasic/m-system.convert.toint16_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Int16" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(object value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified object to a 16-bit signed integer, using the specified culture-specific formatting information.</summary>
        <returns>A 16-bit signed integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  
  
 The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.  
  
   
  
## Examples  
 The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>. Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values. An object of each class is passed to the `ToInt16` method. This method returns an average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.  
  
 [!code-cs[System.Convert.ToXXX_Object_IFP#1](~/add/codesnippet/csharp/m-system.convert.toint16_15_1.cs)]
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/add/codesnippet/cpp/m-system.convert.toint16_15_1.cpp)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/add/codesnippet/visualbasic/m-system.convert.toint16_15_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in an appropriate format for an <see cref="T:System.Int16" /> type.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(string value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the specified string representation of a number to an equivalent 16-bit signed integer, using the specified culture-specific formatting information.</summary>
        <returns>A 16-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example converts string representations of 16-bit integers with the `ToInt16` method, using an <xref:System.IFormatProvider> object.  
  
 [!code-cpp[System.Convert.ToSInts_String#3](~/add/codesnippet/cpp/m-system.convert.toint16_16_1.cpp)]
 [!code-cs[System.Convert.ToSInts_String#3](~/add/codesnippet/csharp/m-system.convert.toint16_16_1.cs)]
 [!code-vb[System.Convert.ToSInts_String#3](~/add/codesnippet/visualbasic/m-system.convert.toint16_16_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="T:System.Int16" /> or greater than <see cref="T:System.Int16" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt16">
      <MemberSignature Language="C#" Value="public static short ToInt16 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ToInt16(string value, int32 fromBase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <param name="fromBase">The base of the number in `value`, which must be 2, 8, 10, or 16.</param>
        <summary>Converts the string representation of a number in a specified base to an equivalent 16-bit signed integer.</summary>
        <returns>A 16-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".  
  
 Because the negative sign is not supported for non-base 10 numeric representations, the ToInt16 method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of an integer (bit 15) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int16> data type is converted to an <xref:System.Int16> value without the method throwing an exception. The following example increments <xref:System.Int16.MaxValue?displayProperty=fullName> by one, converts the resulting number to its hexadecimal string representation, and then calls the ToInt16 method. Instead of throwing an exception, the method displays the message, "0x8000 converts to -32768."  
  
 [!code-vb[System.Convert.BaseConversion#5](~/add/codesnippet/visualbasic/m-system.convert.toint16_7_1.vb)]
 [!code-cs[System.Convert.BaseConversion#5](~/add/codesnippet/csharp/m-system.convert.toint16_7_1.cs)]  
  
 When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation. Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.  
  
 [!code-vb[System.Convert.BaseConversion#6](~/add/codesnippet/visualbasic/m-system.convert.toint16_7_2.vb)]
 [!code-cs[System.Convert.BaseConversion#6](~/add/codesnippet/csharp/m-system.convert.toint16_7_2.cs)]  
  
   
  
## Examples  
 The following example attempts to interpret each element in a string array as a hexadecimal string and to convert it to a 16-bit signed integer.  
  
 [!code-cs[System.Convert.ToInt16#14](~/add/codesnippet/csharp/m-system.convert.toint16_7_3.cs)]
 [!code-vb[System.Convert.ToInt16#14](~/add/codesnippet/visualbasic/m-system.convert.toint16_7_3.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="fromBase" /> is not 2, 8, 10, or 16.  
  
 -or-  
  
 <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> is <see cref="T:System.String" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.  
  
 -or-  
  
 <paramref name="value" /> represents a number that is less than <see cref="T:System.Int16" /> or greater than <see cref="T:System.Int16" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The Boolean value to convert.</param>
        <summary>Converts the specified Boolean value to the equivalent 32-bit signed integer.</summary>
        <returns>The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts the <xref:System.Boolean> values `true` and `false` to integers.  
  
 [!code-cs[System.Convert.ToInt32#1](~/add/codesnippet/csharp/m-system.convert.toint32_5_1.cs)]
 [!code-vb[System.Convert.ToInt32#1](~/add/codesnippet/visualbasic/m-system.convert.toint32_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(unsigned int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit signed integer.</summary>
        <returns>A 32-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of bytes to an integer.  
  
 [!code-cs[System.Convert.ToInt32#2](~/add/codesnippet/csharp/m-system.convert.toint32_4_1.cs)]
 [!code-vb[System.Convert.ToInt32#2](~/add/codesnippet/visualbasic/m-system.convert.toint32_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The Unicode character to convert.</param>
        <summary>Converts the value of the specified Unicode character to the equivalent 32-bit signed integer.</summary>
        <returns>A 32-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The ToInt32 method returns a 32-bit signed integer that represents the UTF-16 encoded code unit of the `value` argument. If `value` is not a low surrogate or a high surrogate, this return value also represents the Unicode code point of value.  
  
   
  
## Examples  
 The following example converts each element in an array of <xref:System.Char> values to an integer.  
  
 [!code-cs[System.Convert.ToInt32#3](~/add/codesnippet/csharp/m-system.convert.toint32_8_1.cs)]
 [!code-vb[System.Convert.ToInt32#3](~/add/codesnippet/visualbasic/m-system.convert.toint32_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(valuetype System.DateTime value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The date and time value to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The decimal number to convert.</param>
        <summary>Converts the value of the specified decimal number to an equivalent 32-bit signed integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 32-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of <xref:System.Decimal> values to an integer.  
  
 [!code-cs[System.Convert.ToInt32#4](~/add/codesnippet/csharp/m-system.convert.toint32_1_1.cs)]
 [!code-vb[System.Convert.ToInt32#4](~/add/codesnippet/visualbasic/m-system.convert.toint32_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Int32" /> or less than <see cref="T:System.Int32" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The double-precision floating-point number to convert.</param>
        <summary>Converts the value of the specified double-precision floating-point number to an equivalent 32-bit signed integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 32-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of <xref:System.Double> values to aninteger.  
  
 [!code-cs[System.Convert.ToInt32#5](~/add/codesnippet/csharp/m-system.convert.toint32_11_1.cs)]
 [!code-vb[System.Convert.ToInt32#5](~/add/codesnippet/visualbasic/m-system.convert.toint32_11_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Int32" /> or less than <see cref="T:System.Int32" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 16-bit signed integer to an equivalent 32-bit signed integer.</summary>
        <returns>A 32-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of 16-bit signed integers to an integer.  
  
 [!code-cs[System.Convert.ToInt32#6](~/add/codesnippet/csharp/m-system.convert.toint32_7_1.cs)]
 [!code-vb[System.Convert.ToInt32#6](~/add/codesnippet/visualbasic/m-system.convert.toint32_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit signed integer to return.</param>
        <summary>Returns the specified 32-bit signed integer; no actual conversion is performed.</summary>
        <returns>
          <paramref name="value" /> is returned unchanged.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 64-bit signed integer to an equivalent 32-bit signed integer.</summary>
        <returns>A 32-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of long integers to an integer.  
  
 [!code-cs[System.Convert.ToInt32#7](~/add/codesnippet/csharp/m-system.convert.toint32_14_1.cs)]
 [!code-vb[System.Convert.ToInt32#7](~/add/codesnippet/visualbasic/m-system.convert.toint32_14_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Int32" /> or less than <see cref="T:System.Int32" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</param>
        <summary>Converts the value of the specified object to a 32-bit signed integer.</summary>
        <returns>A 32-bit signed integer equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If`value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToInt32%2A?displayProperty=fullName>implementation of the underlying type of `value`.  
  
   
  
## Examples  
 The following example attempts to convert each element in an object array to an integer.  
  
 [!code-cs[System.Convert.ToInt32#8](~/add/codesnippet/csharp/m-system.convert.toint32_2_1.cs)]
 [!code-vb[System.Convert.ToInt32#8](~/add/codesnippet/visualbasic/m-system.convert.toint32_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in an appropriate format.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the  <see cref="T:System.IConvertible" /> interface.  
  
 -or-  
  
 The conversion is not supported.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit signed integer.</summary>
        <returns>A 8-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of signed bytes to an integer.  
  
 [!code-cs[System.Convert.ToInt32#9](~/add/codesnippet/csharp/m-system.convert.toint32_15_1.cs)]
 [!code-vb[System.Convert.ToInt32#9](~/add/codesnippet/visualbasic/m-system.convert.toint32_15_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The single-precision floating-point number to convert.</param>
        <summary>Converts the value of the specified single-precision floating-point number to an equivalent 32-bit signed integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 32-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of <xref:System.Single> values to an integer.  
  
 [!code-cs[System.Convert.ToInt32#10](~/add/codesnippet/csharp/m-system.convert.toint32_9_1.cs)]
 [!code-vb[System.Convert.ToInt32#10](~/add/codesnippet/visualbasic/m-system.convert.toint32_9_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Int32" /> or less than <see cref="T:System.Int32" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <summary>Converts the specified string representation of a number to an equivalent 32-bit signed integer.</summary>
        <returns>A 32-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Using the ToInt32 method is equivalent to passing `value` to the <xref:System.Int32.Parse%28System.String%29?displayProperty=fullName> method.`value` is interpreted by using the formatting conventions of the current thread culture.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example attempts to convert each element in a numeric string array to an integer.  
  
 [!code-cs[System.Convert.ToInt32#11](~/add/codesnippet/csharp/m-system.convert.toint32_13_1.cs)]
 [!code-vb[System.Convert.ToInt32#11](~/add/codesnippet/visualbasic/m-system.convert.toint32_13_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="T:System.Int32" /> or greater than <see cref="T:System.Int32" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(unsigned int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit signed integer.</summary>
        <returns>A 32-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of 16-bit unsigned integers to an integer.  
  
 [!code-cs[System.Convert.ToInt32#12](~/add/codesnippet/csharp/m-system.convert.toint32_12_1.cs)]
 [!code-vb[System.Convert.ToInt32#12](~/add/codesnippet/visualbasic/m-system.convert.toint32_12_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 32-bit signed integer.</summary>
        <returns>A 32-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of unsigned integers to a signed integer.  
  
 [!code-cs[System.Convert.ToInt32#13](~/add/codesnippet/csharp/m-system.convert.toint32_16_1.cs)]
 [!code-vb[System.Convert.ToInt32#13](~/add/codesnippet/visualbasic/m-system.convert.toint32_16_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Int32" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit signed integer.</summary>
        <returns>A 32-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of unsigned long integers to a signed integer.  
  
 [!code-cs[System.Convert.ToInt32#14](~/add/codesnippet/csharp/m-system.convert.toint32_0_1.cs)]
 [!code-vb[System.Convert.ToInt32#14](~/add/codesnippet/visualbasic/m-system.convert.toint32_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Int32" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(object value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified object to a 32-bit signed integer, using the specified culture-specific formatting information.</summary>
        <returns>A 32-bit signed integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking the <xref:System.IConvertible.ToInt32%2A?displayProperty=fullName> method of the underlying type of `value`.  
  
 `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  
  
 The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.  
  
   
  
## Examples  
 The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>. Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values. An object of each class is passed to the `ToInt32` method. This method returns an average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.  
  
 [!code-cs[System.Convert.ToXXX_Object_IFP#1](~/add/codesnippet/csharp/m-system.convert.toint32_10_1.cs)]
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/add/codesnippet/cpp/m-system.convert.toint32_10_1.cpp)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/add/codesnippet/visualbasic/m-system.convert.toint32_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in an appropriate format.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(string value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the specified string representation of a number to an equivalent 32-bit signed integer, using the specified culture-specific formatting information.</summary>
        <returns>A 32-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking the <xref:System.Int32.Parse%2A?displayProperty=fullName> method on `value`.  
  
 `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign. It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.  
  
 [!code-cs[System.Convert.ToInt32#15](~/add/codesnippet/csharp/m-system.convert.toint32_6_1.cs)]
 [!code-vb[System.Convert.ToInt32#15](~/add/codesnippet/visualbasic/m-system.convert.toint32_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="T:System.Int32" /> or greater than <see cref="T:System.Int32" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt32">
      <MemberSignature Language="C#" Value="public static int ToInt32 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ToInt32(string value, int32 fromBase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <param name="fromBase">The base of the number in `value`, which must be 2, 8, 10, or 16.</param>
        <summary>Converts the string representation of a number in a specified base to an equivalent 32-bit signed integer.</summary>
        <returns>A 32-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".  
  
 Because the negative sign is not supported for non-base 10 numeric representations, the ToInt32 method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of an integer (bit 31) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int32> data type is converted to an <xref:System.Int32> value without the method throwing an exception. The following example increments <xref:System.Int32?displayProperty=fullName> by one, converts the resulting number to its hexadecimal string representation, and then calls the ToInt32 method. Instead of throwing an exception, the method displays the message, "0x80000000 converts to -2147483648."  
  
 [!code-cpp[System.Convert.BaseConversion#1](~/add/codesnippet/cpp/m-system.convert.toint32_3_1.cpp)]
 [!code-vb[System.Convert.BaseConversion#1](~/add/codesnippet/visualbasic/m-system.convert.toint32_3_1.vb)]
 [!code-cs[System.Convert.BaseConversion#1](~/add/codesnippet/csharp/m-system.convert.toint32_3_1.cs)]  
  
 When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first retrieving the sign of the numeric value before converting it to its hexadecimal string representation. Throw an exception if the original value was positive but the conversion back to an integer yields a negative value.  
  
 [!code-cpp[System.Convert.BaseConversion#2](~/add/codesnippet/cpp/m-system.convert.toint32_3_2.cpp)]
 [!code-vb[System.Convert.BaseConversion#2](~/add/codesnippet/visualbasic/m-system.convert.toint32_3_2.vb)]
 [!code-cs[System.Convert.BaseConversion#2](~/add/codesnippet/csharp/m-system.convert.toint32_3_2.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="fromBase" /> is not 2, 8, 10, or 16.  
  
 -or-  
  
 <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> is <see cref="T:System.String" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.  
  
 -or-  
  
 <paramref name="value" /> represents a number that is less than <see cref="T:System.Int32" /> or greater than <see cref="T:System.Int32" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The Boolean value to convert.</param>
        <summary>Converts the specified Boolean value to the equivalent 64-bit signed integer.</summary>
        <returns>The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts the <xref:System.Boolean> values `true` and `false` to long integers.  
  
 [!code-cs[System.Convert.ToInt64#1](~/add/codesnippet/csharp/m-system.convert.toint64_9_1.cs)]
 [!code-vb[System.Convert.ToInt64#1](~/add/codesnippet/visualbasic/m-system.convert.toint64_9_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(unsigned int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit signed integer.</summary>
        <returns>A 64-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of bytes to a long integer.  
  
 [!code-cs[System.Convert.ToInt64#2](~/add/codesnippet/csharp/m-system.convert.toint64_2_1.cs)]
 [!code-vb[System.Convert.ToInt64#2](~/add/codesnippet/visualbasic/m-system.convert.toint64_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The Unicode character to convert.</param>
        <summary>Converts the value of the specified Unicode character to the equivalent 64-bit signed integer.</summary>
        <returns>A 64-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in a <xref:System.Char> array to a long integer.  
  
 [!code-cs[System.Convert.ToInt64#3](~/add/codesnippet/csharp/m-system.convert.toint64_15_1.cs)]
 [!code-vb[System.Convert.ToInt64#3](~/add/codesnippet/visualbasic/m-system.convert.toint64_15_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(valuetype System.DateTime value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The date and time value to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The decimal number to convert.</param>
        <summary>Converts the value of the specified decimal number to an equivalent 64-bit signed integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 64-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of <xref:System.Decimal> values to a long integer.  
  
 [!code-cs[System.Convert.ToInt64#4](~/add/codesnippet/csharp/m-system.convert.toint64_0_1.cs)]
 [!code-vb[System.Convert.ToInt64#4](~/add/codesnippet/visualbasic/m-system.convert.toint64_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Int64" /> or less than <see cref="T:System.Int64" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The double-precision floating-point number to convert.</param>
        <summary>Converts the value of the specified double-precision floating-point number to an equivalent 64-bit signed integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 64-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of <xref:System.Double> values to a long integer.  
  
 [!code-cs[System.Convert.ToInt64#5](~/add/codesnippet/csharp/m-system.convert.toint64_6_1.cs)]
 [!code-vb[System.Convert.ToInt64#5](~/add/codesnippet/visualbasic/m-system.convert.toint64_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Int64" /> or less than <see cref="T:System.Int64" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 16-bit signed integer to an equivalent 64-bit signed integer.</summary>
        <returns>A 64-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of 16-bit integers to a long integer.  
  
 [!code-cs[System.Convert.ToInt64#6](~/add/codesnippet/csharp/m-system.convert.toint64_1_1.cs)]
 [!code-vb[System.Convert.ToInt64#6](~/add/codesnippet/visualbasic/m-system.convert.toint64_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit signed integer.</summary>
        <returns>A 64-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">A 64-bit signed integer.</param>
        <summary>Returns the specified 64-bit signed integer; no actual conversion is performed.</summary>
        <returns>
          <paramref name="value" /> is returned unchanged.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of integers to a long integer.  
  
 [!code-cs[System.Convert.ToInt64#7](~/add/codesnippet/csharp/m-system.convert.toint64_5_1.cs)]
 [!code-vb[System.Convert.ToInt64#7](~/add/codesnippet/visualbasic/m-system.convert.toint64_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</param>
        <summary>Converts the value of the specified object to a 64-bit signed integer.</summary>
        <returns>A 64-bit signed integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `value` is not `null`, this method wraps a call to the <xref:System.IConvertible.ToInt64%2A?displayProperty=fullName> implementation of the underlying type of `value`.  
  
   
  
## Examples  
 The following example attempts to convert each element in an object array to a long integer.  
  
 [!code-cs[System.Convert.ToInt64#8](~/add/codesnippet/csharp/m-system.convert.toint64_4_1.cs)]
 [!code-vb[System.Convert.ToInt64#8](~/add/codesnippet/visualbasic/m-system.convert.toint64_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in an appropriate format.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.  
  
 -or-  
  
 The conversion is not supported.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit signed integer.</summary>
        <returns>A 64-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in a signed byte array to a long integer.  
  
 [!code-cs[System.Convert.ToInt64#9](~/add/codesnippet/csharp/m-system.convert.toint64_11_1.cs)]
 [!code-vb[System.Convert.ToInt64#9](~/add/codesnippet/visualbasic/m-system.convert.toint64_11_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The single-precision floating-point number to convert.</param>
        <summary>Converts the value of the specified single-precision floating-point number to an equivalent 64-bit signed integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 64-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of <xref:System.Single> values to a long integer.  
  
 [!code-cs[System.Convert.ToInt64#10](~/add/codesnippet/csharp/m-system.convert.toint64_14_1.cs)]
 [!code-vb[System.Convert.ToInt64#10](~/add/codesnippet/visualbasic/m-system.convert.toint64_14_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Int64" /> or less than <see cref="T:System.Int64" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains a number to convert.</param>
        <summary>Converts the specified string representation of a number to an equivalent 64-bit signed integer.</summary>
        <returns>A 64-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Using the ToInt64 method is equivalent to passing `value` to the <xref:System.Int64.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example attempts to convert each element in an array of numeric strings to a long integer.  
  
 [!code-cs[System.Convert.ToInt64#11](~/add/codesnippet/csharp/m-system.convert.toint64_8_1.cs)]
 [!code-vb[System.Convert.ToInt64#11](~/add/codesnippet/visualbasic/m-system.convert.toint64_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="T:System.Int64" /> or greater than <see cref="T:System.Int64" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(unsigned int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit signed integer.</summary>
        <returns>A 64-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of 16-bit unsigned integers to a long integer.  
  
 [!code-cs[System.Convert.ToInt64#12](~/add/codesnippet/csharp/m-system.convert.toint64_3_1.cs)]
 [!code-vb[System.Convert.ToInt64#12](~/add/codesnippet/visualbasic/m-system.convert.toint64_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit signed integer.</summary>
        <returns>A 64-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of unsigned integers to a long integer.  
  
 [!code-cs[System.Convert.ToInt64#13](~/add/codesnippet/csharp/m-system.convert.toint64_16_1.cs)]
 [!code-vb[System.Convert.ToInt64#13](~/add/codesnippet/visualbasic/m-system.convert.toint64_16_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 64-bit signed integer.</summary>
        <returns>A 64-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of unsigned long integers to a long integer.  
  
 [!code-cs[System.Convert.ToInt64#14](~/add/codesnippet/csharp/m-system.convert.toint64_13_1.cs)]
 [!code-vb[System.Convert.ToInt64#14](~/add/codesnippet/visualbasic/m-system.convert.toint64_13_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.Int64" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(object value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified object to a 64-bit signed integer, using the specified culture-specific formatting information.</summary>
        <returns>A 64-bit signed integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking the <xref:System.IConvertible.ToInt64%2A?displayProperty=fullName> method of the underlying type of `value`.  
  
 `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  
  
 The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.  
  
   
  
## Examples  
 The following example defines a class that implements <xref:System.IConvertible> and a class that implements <xref:System.IFormatProvider>. Objects of the class that implements <xref:System.IConvertible> hold an array of <xref:System.Double> values. An object of each class is passed to the `ToInt64` method. This method returns an average of the array of <xref:System.Double> values, using the object that implements <xref:System.IFormatProvider> to determine how to calculate the average.  
  
 [!code-cs[System.Convert.ToXXX_Object_IFP#1](~/add/codesnippet/csharp/m-system.convert.toint64_12_1.cs)]
 [!code-cpp[System.Convert.ToXXX_Object_IFP#1](~/add/codesnippet/cpp/m-system.convert.toint64_12_1.cpp)]
 [!code-vb[System.Convert.ToXXX_Object_IFP#1](~/add/codesnippet/visualbasic/m-system.convert.toint64_12_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in an appropriate format.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.  
  
 -or-  
  
 The conversion is not supported.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(string value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the specified string representation of a number to an equivalent 64-bit signed integer, using the specified culture-specific formatting information.</summary>
        <returns>A 64-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking the <xref:System.Int64.Parse%2A?displayProperty=fullName> method on `value`.  
  
 `provider` is an `IFormatProvider` instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The `NumberFormatInfo` object provides culture-specific information about the format of `value`. If `provider` is `null`, the `NumberFormatInfo` for the current culture is used.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Int64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign. It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.  
  
 [!code-cs[System.Convert.ToInt64#16](~/add/codesnippet/csharp/m-system.convert.toint64_10_1.cs)]
 [!code-vb[System.Convert.ToInt64#16](~/add/codesnippet/visualbasic/m-system.convert.toint64_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="T:System.Int64" /> or greater than <see cref="T:System.Int64" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToInt64">
      <MemberSignature Language="C#" Value="public static long ToInt64 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ToInt64(string value, int32 fromBase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <param name="fromBase">The base of the number in `value`, which must be 2, 8, 10, or 16.</param>
        <summary>Converts the string representation of a number in a specified base to an equivalent 64-bit signed integer.</summary>
        <returns>A 64-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".  
  
 Because the negative sign is not supported for non-base 10 numeric representations, the ToInt64 method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the highest-order binary bit of a long integer (bit 63) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.Int64> data type is converted to an <xref:System.Int64> value without the method throwing an exception. The following example converts <xref:System.UInt64.MaxValue> to its hexadecimal string representation, and then calls the ToInt64 method. Instead of throwing an exception, the method displays the message, "0xFFFFFFFFFFFFFFFF converts to -1."  
  
 [!code-vb[System.Convert.BaseConversion#7](~/add/codesnippet/visualbasic/m-system.convert.toint64_7_1.vb)]
 [!code-cs[System.Convert.BaseConversion#7](~/add/codesnippet/csharp/m-system.convert.toint64_7_1.cs)]  
  
 When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation. Throw an exception if the original value was an unsigned type but the conversion back to an integer yields a value whose sign bit is on.  
  
 [!code-vb[System.Convert.BaseConversion#8](~/add/codesnippet/visualbasic/m-system.convert.toint64_7_2.vb)]
 [!code-cs[System.Convert.BaseConversion#8](~/add/codesnippet/csharp/m-system.convert.toint64_7_2.cs)]  
  
 The following example attempts to interpret each element in a string array as a hexadecimal string and convert it to a long integer.  
  
 [!code-cs[System.Convert.ToInt64#15](~/add/codesnippet/csharp/m-system.convert.toint64_7_3.cs)]
 [!code-vb[System.Convert.ToInt64#15](~/add/codesnippet/visualbasic/m-system.convert.toint64_7_3.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="fromBase" /> is not 2, 8, 10, or 16.  
  
 -or-  
  
 <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> is <see cref="T:System.String" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.  
  
 -or-  
  
 <paramref name="value" /> represents a number that is less than <see cref="T:System.Int64" /> or greater than <see cref="T:System.Int64" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The Boolean value to convert.</param>
        <summary>Converts the specified Boolean value to the equivalent 8-bit signed integer.</summary>
        <returns>The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts the Boolean values `true` and `false` to signed byte values.  
  
 [!code-cs[System.Convert.ToSByte#1](~/add/codesnippet/csharp/m-system.convert.tosbyte_6_1.cs)]
 [!code-vb[System.Convert.ToSByte#1](~/add/codesnippet/visualbasic/m-system.convert.tosbyte_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(unsigned int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 8-bit signed integer.</summary>
        <returns>An 8-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in a byte array to a signed byte.  
  
 [!code-cs[System.Convert.ToSByte#2](~/add/codesnippet/csharp/m-system.convert.tosbyte_11_1.cs)]
 [!code-vb[System.Convert.ToSByte#2](~/add/codesnippet/visualbasic/m-system.convert.tosbyte_11_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.SByte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The Unicode character to convert.</param>
        <summary>Converts the value of the specified Unicode character to the equivalent 8-bit signed integer.</summary>
        <returns>An 8-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of <xref:System.Char> values to a signed byte.  
  
 [!code-cs[System.Convert.ToSByte#3](~/add/codesnippet/csharp/m-system.convert.tosbyte_3_1.cs)]
 [!code-vb[System.Convert.ToSByte#3](~/add/codesnippet/visualbasic/m-system.convert.tosbyte_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.SByte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(valuetype System.DateTime value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The date and time value to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The decimal number to convert.</param>
        <summary>Converts the value of the specified decimal number to an equivalent 8-bit signed integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 8-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of <xref:System.Decimal> values to a signed byte.  
  
 [!code-cs[System.Convert.ToSByte#4](~/add/codesnippet/csharp/m-system.convert.tosbyte_8_1.cs)]
 [!code-vb[System.Convert.ToSByte#4](~/add/codesnippet/visualbasic/m-system.convert.tosbyte_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.SByte" /> or less than <see cref="T:System.SByte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The double-precision floating-point number to convert.</param>
        <summary>Converts the value of the specified double-precision floating-point number to an equivalent 8-bit signed integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 8-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of <xref:System.Double> values to a signed byte.  
  
 [!code-cs[System.Convert.ToSByte#5](~/add/codesnippet/csharp/m-system.convert.tosbyte_5_1.cs)]
 [!code-vb[System.Convert.ToSByte#5](~/add/codesnippet/visualbasic/m-system.convert.tosbyte_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.SByte" /> or less than <see cref="T:System.SByte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 16-bit signed integer to the equivalent 8-bit signed integer.</summary>
        <returns>An 8-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of signed 16-bit integers to a signed byte.  
  
 [!code-cs[System.Convert.ToSByte#6](~/add/codesnippet/csharp/m-system.convert.tosbyte_7_1.cs)]
 [!code-vb[System.Convert.ToSByte#6](~/add/codesnippet/visualbasic/m-system.convert.tosbyte_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.SByte" /> or less than <see cref="T:System.SByte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 32-bit signed integer to an equivalent 8-bit signed integer.</summary>
        <returns>An 8-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of signed integers to a signed byte.  
  
 [!code-cs[System.Convert.ToSByte#7](~/add/codesnippet/csharp/m-system.convert.tosbyte_9_1.cs)]
 [!code-vb[System.Convert.ToSByte#7](~/add/codesnippet/visualbasic/m-system.convert.tosbyte_9_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.SByte" /> or less than <see cref="T:System.SByte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 64-bit signed integer to an equivalent 8-bit signed integer.</summary>
        <returns>An 8-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of long integers to a signed byte.  
  
 [!code-cs[System.Convert.ToSByte#8](~/add/codesnippet/csharp/m-system.convert.tosbyte_13_1.cs)]
 [!code-vb[System.Convert.ToSByte#8](~/add/codesnippet/visualbasic/m-system.convert.tosbyte_13_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.SByte" /> or less than <see cref="T:System.SByte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</param>
        <summary>Converts the value of the specified object to an 8-bit signed integer.</summary>
        <returns>An 8-bit signed integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking the <xref:System.IConvertible.ToSByte%2A?displayProperty=fullName> method of the underlying type of `value`.  
  
   
  
## Examples  
 The following example attempts to convert each element in an object array to a signed byte.  
  
 [!code-cs[System.Convert.ToSByte#9](~/add/codesnippet/csharp/m-system.convert.tosbyte_14_1.cs)]
 [!code-vb[System.Convert.ToSByte#9](~/add/codesnippet/visualbasic/m-system.convert.tosbyte_14_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in an appropriate format.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.  
  
 -or-  
  
 The conversion is not supported.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit signed integer to return.</param>
        <summary>Returns the specified 8-bit signed integer; no actual conversion is performed.</summary>
        <returns>
          <paramref name="value" /> is returned unchanged.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The single-precision floating-point number to convert.</param>
        <summary>Converts the value of the specified single-precision floating-point number to an equivalent 8-bit signed integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 8-bit signed integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of <xref:System.Single> values to a signed byte.  
  
 [!code-cs[System.Convert.ToSByte#9](~/add/codesnippet/csharp/m-system.convert.tosbyte_0_1.cs)]
 [!code-vb[System.Convert.ToSByte#9](~/add/codesnippet/visualbasic/m-system.convert.tosbyte_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.SByte" /> or less than <see cref="T:System.SByte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <summary>Converts the specified string representation of a number to an equivalent 8-bit signed integer.</summary>
        <returns>An 8-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if value is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Using the ToSByte method is equivalent to passing `value` to the <xref:System.SByte.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.SByte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example converts string representations of <xref:System.SByte> values with the `ToSByte` method, using default formatting.  
  
 [!code-cpp[System.Convert.ToSInts_String#4](~/add/codesnippet/cpp/m-system.convert.tosbyte_15_1.cpp)]
 [!code-cs[System.Convert.ToSInts_String#4](~/add/codesnippet/csharp/m-system.convert.tosbyte_15_1.cs)]
 [!code-vb[System.Convert.ToSInts_String#4](~/add/codesnippet/visualbasic/m-system.convert.tosbyte_15_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="T:System.SByte" /> or greater than <see cref="T:System.SByte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(unsigned int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 8-bit signed integer.</summary>
        <returns>An 8-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of unsigned 16-bit integers to a signed byte.  
  
 [!code-cs[System.Convert.ToSByte#11](~/add/codesnippet/csharp/m-system.convert.tosbyte_12_1.cs)]
 [!code-vb[System.Convert.ToSByte#11](~/add/codesnippet/visualbasic/m-system.convert.tosbyte_12_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.SByte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 8-bit signed integer.</summary>
        <returns>An 8-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an integer array to a signed byte.  
  
 [!code-cs[System.Convert.ToSByte#12](~/add/codesnippet/csharp/m-system.convert.tosbyte_1_1.cs)]
 [!code-vb[System.Convert.ToSByte#12](~/add/codesnippet/visualbasic/m-system.convert.tosbyte_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.SByte" /> or less than <see cref="T:System.SByte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 8-bit signed integer.</summary>
        <returns>An 8-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of long integers to a signed byte.  
  
 [!code-cs[System.Convert.ToSByte#13](~/add/codesnippet/csharp/m-system.convert.tosbyte_4_1.cs)]
 [!code-vb[System.Convert.ToSByte#13](~/add/codesnippet/visualbasic/m-system.convert.tosbyte_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.SByte" /> or less than <see cref="T:System.SByte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(object value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified object to an 8-bit signed integer, using the specified culture-specific formatting information.</summary>
        <returns>An 8-bit signed integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  
  
 The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.  
  
   
  
## Examples  
 The following example defines a `ByteString` class that stores both signed and unsigned bytes as hexadecimal strings along with a field that indicates the sign of the byte. The `ByteString` class implements the <xref:System.IConvertible> interface. Its <xref:System.IConvertible.ToSByte%2A?displayProperty=fullName> method calls the <xref:System.SByte.Parse%28System.String%2CSystem.IFormatProvider%29> method to perform the conversion. If it fails, it throws an <xref:System.OverflowException>.  
  
 [!code-cs[System.Convert.ToSByte#14](~/add/codesnippet/csharp/m-system.convert.tosbyte_10_1.cs)]
 [!code-vb[System.Convert.ToSByte#14](~/add/codesnippet/visualbasic/m-system.convert.tosbyte_10_1.vb)]  
  
 The following example shows how the <xref:System.IConvertible.ToSByte%2A?displayProperty=fullName> implementation of the `ByteString` class is called by the ToSByte method.  
  
 [!code-cs[System.Convert.ToSByte#15](~/add/codesnippet/csharp/m-system.convert.tosbyte_10_2.cs)]
 [!code-vb[System.Convert.ToSByte#15](~/add/codesnippet/visualbasic/m-system.convert.tosbyte_10_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in an appropriate format.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.  
  
 -or-  
  
 The conversion is not supported.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(string value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the specified string representation of a number to an equivalent 8-bit signed integer, using the specified culture-specific formatting information.</summary>
        <returns>An 8-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.SByte.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example converts string representations of <xref:System.SByte> values with the `ToSByte` method, using an <xref:System.IFormatProvider> object.  
  
 [!code-cpp[System.Convert.ToSInts_String#4](~/add/codesnippet/cpp/m-system.convert.tosbyte_16_1.cpp)]
 [!code-cs[System.Convert.ToSInts_String#4](~/add/codesnippet/csharp/m-system.convert.tosbyte_16_1.cs)]
 [!code-vb[System.Convert.ToSInts_String#4](~/add/codesnippet/visualbasic/m-system.convert.tosbyte_16_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> is <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="T:System.SByte" /> or greater than <see cref="T:System.SByte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSByte">
      <MemberSignature Language="C#" Value="public static sbyte ToSByte (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 ToSByte(string value, int32 fromBase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <param name="fromBase">The base of the number in `value`, which must be 2, 8, 10, or 16.</param>
        <summary>Converts the string representation of a number in a specified base to an equivalent 8-bit signed integer.</summary>
        <returns>An 8-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".  
  
 Because the negative sign is not supported for non-base 10 numeric representations, the ToSByte method assumes that negative numbers use two’s complement representation. In other words, the method always interprets the high-order bit of a byte (bit 7) as its sign bit. As a result, it is possible to write code in which a non-base 10 number that is out of the range of the <xref:System.SByte> data type is converted to an <xref:System.SByte> value without the method throwing an exception. The following example converts <xref:System.Byte.MaxValue> to its hexadecimal string representation, and then calls the ToSByte method. Instead of throwing an exception, the method displays the message, "0xff converts to -1."  
  
 [!code-vb[System.Convert.BaseConversion#9](~/add/codesnippet/visualbasic/m-system.convert.tosbyte_2_1.vb)]
 [!code-cs[System.Convert.BaseConversion#9](~/add/codesnippet/csharp/m-system.convert.tosbyte_2_1.cs)]  
  
 When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method is using the appropriate numeric representation to interpret a particular value. As the following example illustrates, you can ensure that the method handles overflows appropriately by first determining whether a value represents an unsigned or a signed type when converting it to its hexadecimal string representation. Throw an exception if the original value was an unsigned type but the conversion back to a signed byte yields a value whose sign bit is on.  
  
 [!code-vb[System.Convert.BaseConversion#10](~/add/codesnippet/visualbasic/m-system.convert.tosbyte_2_2.vb)]
 [!code-cs[System.Convert.BaseConversion#10](~/add/codesnippet/csharp/m-system.convert.tosbyte_2_2.cs)]  
  
   
  
## Examples  
 The following example attempts to interpret the elements in a string array as the binary, octal, and hexadecimal representation of numeric values in order to convert them to unsigned bytes.  
  
 [!code-cs[System.Convert.ToSByte#16](~/add/codesnippet/csharp/m-system.convert.tosbyte_2_3.cs)]
 [!code-vb[System.Convert.ToSByte#16](~/add/codesnippet/visualbasic/m-system.convert.tosbyte_2_3.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="fromBase" /> is not 2, 8, 10, or 16.  
  
 -or-  
  
 <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> is <see cref="T:System.String" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" />, which represents a non-base 10 signed number, is prefixed with a negative sign.  
  
 -or-  
  
 <paramref name="value" /> represents a number that is less than <see cref="T:System.SByte" /> or greater than <see cref="T:System.SByte" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The Boolean value to convert.</param>
        <summary>Converts the specified Boolean value to the equivalent single-precision floating-point number.</summary>
        <returns>The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts the Boolean values `true` and `false` to <xref:System.Single> values.  
  
 [!code-cs[System.Convert.ToSingle#1](~/add/codesnippet/csharp/m-system.convert.tosingl_11_1.cs)]
 [!code-vb[System.Convert.ToSingle#1](~/add/codesnippet/visualbasic/m-system.convert.tosingl_11_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(unsigned int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent single-precision floating-point number.</summary>
        <returns>A single-precision floating-point number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of byte values to a <xref:System.Single> value.  
  
 [!code-cs[System.Convert.ToSingle#2](~/add/codesnippet/csharp/m-system.convert.tosingl_6_1.cs)]
 [!code-vb[System.Convert.ToSingle#2](~/add/codesnippet/visualbasic/m-system.convert.tosingl_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The Unicode character to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(valuetype System.DateTime value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The date and time value to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The decimal number to convert.</param>
        <summary>Converts the value of the specified decimal number to an equivalent single-precision floating-point number.</summary>
        <returns>A single-precision floating-point number that is equivalent to <paramref name="value" />.  
  
 <paramref name="value" /> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of <xref:System.Decimal> values to a <xref:System.Single> value.  
  
 [!code-cs[System.Convert.ToSingle#3](~/add/codesnippet/csharp/m-system.convert.tosingl_10_1.cs)]
 [!code-vb[System.Convert.ToSingle#3](~/add/codesnippet/visualbasic/m-system.convert.tosingl_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The double-precision floating-point number to convert.</param>
        <summary>Converts the value of the specified double-precision floating-point number to an equivalent single-precision floating-point number.</summary>
        <returns>A single-precision floating-point number that is equivalent to <paramref name="value" />.  
  
 <paramref name="value" /> is rounded using rounding to nearest. For example, when rounded to two decimals, the value 2.345 becomes 2.34 and the value 2.355 becomes 2.36.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of <xref:System.Double> values to a <xref:System.Single> value.  
  
 [!code-cs[System.Convert.ToSingle#4](~/add/codesnippet/csharp/m-system.convert.tosingl_5_1.cs)]
 [!code-vb[System.Convert.ToSingle#4](~/add/codesnippet/visualbasic/m-system.convert.tosingl_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 16-bit signed integer to an equivalent single-precision floating-point number.</summary>
        <returns>A single-precision floating-point number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of 16-bit integers to a <xref:System.Single> value.  
  
 [!code-cs[System.Convert.ToSingle#5](~/add/codesnippet/csharp/m-system.convert.tosingl_9_1.cs)]
 [!code-vb[System.Convert.ToSingle#5](~/add/codesnippet/visualbasic/m-system.convert.tosingl_9_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 32-bit signed integer to an equivalent single-precision floating-point number.</summary>
        <returns>A single-precision floating-point number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an integer array to a <xref:System.Single> value.  
  
 [!code-cs[System.Convert.ToSingle#6](~/add/codesnippet/csharp/m-system.convert.tosingl_3_1.cs)]
 [!code-vb[System.Convert.ToSingle#6](~/add/codesnippet/visualbasic/m-system.convert.tosingl_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 64-bit signed integer to an equivalent single-precision floating-point number.</summary>
        <returns>A single-precision floating-point number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of long integers to a <xref:System.Single> value.  
  
 [!code-cs[System.Convert.ToSingle#7](~/add/codesnippet/csharp/m-system.convert.tosingl_13_1.cs)]
 [!code-vb[System.Convert.ToSingle#7](~/add/codesnippet/visualbasic/m-system.convert.tosingl_13_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</param>
        <summary>Converts the value of the specified object to a single-precision floating-point number.</summary>
        <returns>A single-precision floating-point number that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking the <xref:System.IConvertible.ToSingle%2A?displayProperty=fullName> method of the underlying type of `value`.  
  
   
  
## Examples  
 The following example attempts to convert each element in an object array to a <xref:System.Single> value.  
  
 [!code-cs[System.Convert.ToSingle#8](~/add/codesnippet/csharp/m-system.convert.tosingl_8_1.cs)]
 [!code-vb[System.Convert.ToSingle#8](~/add/codesnippet/visualbasic/m-system.convert.tosingl_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in an appropriate format.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.  
  
 -or-  
  
 The conversion is not supported.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 8-bit signed integer to the equivalent single-precision floating-point number.</summary>
        <returns>An 8-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in a signed byte array to a <xref:System.Single> value.  
  
 [!code-cs[System.Convert.ToSingle#9](~/add/codesnippet/csharp/m-system.convert.tosingl_0_1.cs)]
 [!code-vb[System.Convert.ToSingle#9](~/add/codesnippet/visualbasic/m-system.convert.tosingl_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The single-precision floating-point number to return.</param>
        <summary>Returns the specified single-precision floating-point number; no actual conversion is performed.</summary>
        <returns>
          <paramref name="value" /> is returned unchanged.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <summary>Converts the specified string representation of a number to an equivalent single-precision floating-point number.</summary>
        <returns>A single-precision floating-point number that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Using the ToSingle method is equivalent to passing `value` to the <xref:System.Single.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Single.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example attempts to convert each element in an array of numeric strings to a <xref:System.Single> value.  
  
 [!code-cs[System.Convert.ToSingle#10](~/add/codesnippet/csharp/m-system.convert.tosingl_7_1.cs)]
 [!code-vb[System.Convert.ToSingle#10](~/add/codesnippet/visualbasic/m-system.convert.tosingl_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not a number in a valid format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="T:System.Single" /> or greater than <see cref="T:System.Single" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(unsigned int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent single-precision floating-point number.</summary>
        <returns>A single-precision floating-point number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of unsigned 16-bit integers to a <xref:System.Single> value.  
  
 [!code-cs[System.Convert.ToSingle#11](~/add/codesnippet/csharp/m-system.convert.tosingl_1_1.cs)]
 [!code-vb[System.Convert.ToSingle#11](~/add/codesnippet/visualbasic/m-system.convert.tosingl_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent single-precision floating-point number.</summary>
        <returns>A single-precision floating-point number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of unsigned integers to a <xref:System.Single> value.  
  
 [!code-cs[System.Convert.ToSingle#12](~/add/codesnippet/csharp/m-system.convert.tosingl_12_1.cs)]
 [!code-vb[System.Convert.ToSingle#12](~/add/codesnippet/visualbasic/m-system.convert.tosingl_12_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent single-precision floating-point number.</summary>
        <returns>A single-precision floating-point number that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of unsigned long integers to a <xref:System.Single> value.  
  
 [!code-cs[System.Convert.ToSingle#13](~/add/codesnippet/csharp/m-system.convert.tosingl_14_1.cs)]
 [!code-vb[System.Convert.ToSingle#13](~/add/codesnippet/visualbasic/m-system.convert.tosingl_14_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(object value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified object to an single-precision floating-point number, using the specified culture-specific formatting information.</summary>
        <returns>A single-precision floating-point number that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking the <xref:System.IConvertible.ToSingle%2A?displayProperty=fullName> method of the underlying type of `value`.  
  
 `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  
  
 The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.  
  
   
  
## Examples  
 The following example defines a `Temperature` class that implements the <xref:System.IConvertible> interface. Its implementation of the <xref:System.IConvertible.ToSingle%2A?displayProperty=fullName> method returns the internal value of a private <xref:System.Single> variable that represents the temperature.  
  
 [!code-cs[System.Convert.ToSingle#14](~/add/codesnippet/csharp/m-system.convert.tosingl_2_1.cs)]
 [!code-vb[System.Convert.ToSingle#14](~/add/codesnippet/visualbasic/m-system.convert.tosingl_2_1.vb)]  
  
 The following example illustrates how a call to the ToSingle method, in turn, calls the <xref:System.IConvertible.ToSingle%2A?displayProperty=fullName> implementation of the `Temperature` class.  
  
 [!code-cs[System.Convert.ToSingle#15](~/add/codesnippet/csharp/m-system.convert.tosingl_2_2.cs)]
 [!code-vb[System.Convert.ToSingle#15](~/add/codesnippet/visualbasic/m-system.convert.tosingl_2_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in an appropriate format.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement <see cref="T:System.IConvertible" />.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToSingle">
      <MemberSignature Language="C#" Value="public static float ToSingle (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 ToSingle(string value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the specified string representation of a number to an equivalent single-precision floating-point number, using the specified culture-specific formatting information.</summary>
        <returns>A single-precision floating-point number that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking the <xref:System.Single.Parse%2A?displayProperty=fullName> method on `value`.  
  
 `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.Single.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example uses <xref:System.IFormatProvider> objects that represent the en-US and fr-FR cultures when it converts the elements in an array of numeric strings to <xref:System.Single> values.  
  
 [!code-vb[System.Convert.ToSingle#16](~/add/codesnippet/visualbasic/m-system.convert.tosingl_4_1.vb)]
 [!code-cs[System.Convert.ToSingle#16](~/add/codesnippet/csharp/m-system.convert.tosingl_4_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not a number in a valid format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="T:System.Single" /> or greater than <see cref="T:System.Single" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The Boolean value to convert.</param>
        <summary>Converts the specified Boolean value to its equivalent string representation.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.Boolean.ToString%2A?displayProperty=fullName>. It returns <xref:System.Boolean.TrueString?displayProperty=fullName> for `true` values and <xref:System.Boolean.FalseString?displayProperty=fullName> for `false` values.  
  
   
  
## Examples  
 The following example illustrates the conversion of a <xref:System.Boolean> to a <xref:System.String>, using `ToString`. It also illustrates that the string returned by the conversion equals either <xref:System.Boolean.TrueString?displayProperty=fullName> or <xref:System.Boolean.FalseString?displayProperty=fullName>.  
  
 [!code-cs[System.Convert.ToString#1](~/add/codesnippet/csharp/m-system.convert.tostrin_0_1.cs)]
 [!code-vb[System.Convert.ToString#1](~/add/codesnippet/visualbasic/m-system.convert.tostrin_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 8-bit unsigned integer to its equivalent string representation.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.Byte.ToString?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example converts each value in a <xref:System.Byte> array to a string.  
  
 [!code-cs[System.Convert.ToString#3](~/add/codesnippet/csharp/m-system.convert.tostrin_26_1.cs)]
 [!code-vb[System.Convert.ToString#3](~/add/codesnippet/visualbasic/m-system.convert.tostrin_26_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The Unicode character to convert.</param>
        <summary>Converts the value of the specified Unicode character to its equivalent string representation.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.Char.ToString%2A?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example converts a <xref:System.Char> to a <xref:System.String>.  
  
 [!code-cpp[System.Convert Snippets#14](~/add/codesnippet/cpp/m-system.convert.tostrin_14_1.cpp)]
 [!code-cs[System.Convert Snippets#14](~/add/codesnippet/csharp/m-system.convert.tostrin_14_1.cs)]
 [!code-vb[System.Convert Snippets#14](~/add/codesnippet/visualbasic/m-system.convert.tostrin_14_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.DateTime value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The date and time value to convert.</param>
        <summary>Converts the value of the specified <see cref="T:System.DateTime" /> to its equivalent string representation.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.DateTime.ToString?displayProperty=fullName>. It uses the formatting conventions of the current culture and the "G" format specifier to convert a <xref:System.DateTime> value to its string representation.  
  
   
  
## Examples  
 The following example converts each element in an array of a <xref:System.DateTime> value to a <xref:System.String> value.  
  
 [!code-cs[System.Convert.ToString2#1](~/add/codesnippet/csharp/m-system.convert.tostrin_12_1.cs)]
 [!code-vb[System.Convert.ToString2#1](~/add/codesnippet/visualbasic/m-system.convert.tostrin_12_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The decimal number to convert.</param>
        <summary>Converts the value of the specified decimal number to its equivalent string representation.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.Decimal.ToString?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example converts a <xref:System.Decimal> to a <xref:System.String>.  
  
 [!code-cpp[System.Convert Snippets#15](~/add/codesnippet/cpp/m-system.convert.tostrin_19_1.cpp)]
 [!code-cs[System.Convert Snippets#15](~/add/codesnippet/csharp/m-system.convert.tostrin_19_1.cs)]
 [!code-vb[System.Convert Snippets#15](~/add/codesnippet/visualbasic/m-system.convert.tostrin_19_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The double-precision floating-point number to convert.</param>
        <summary>Converts the value of the specified double-precision floating-point number to its equivalent string representation.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.Double.ToString?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example converts a <xref:System.Double> to a <xref:System.String>.  
  
 [!code-cpp[System.Convert Snippets#7](~/add/codesnippet/cpp/m-system.convert.tostrin_31_1.cpp)]
 [!code-cs[System.Convert Snippets#7](~/add/codesnippet/csharp/m-system.convert.tostrin_31_1.cs)]
 [!code-vb[System.Convert Snippets#7](~/add/codesnippet/visualbasic/m-system.convert.tostrin_31_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 16-bit signed integer to its equivalent string representation.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.Int16.ToString?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example converts each element in an array of 16-bit integers to its equivalent string representation.  
  
 [!code-cs[System.Convert.ToString2#2](~/add/codesnippet/csharp/m-system.convert.tostrin_29_1.cs)]
 [!code-vb[System.Convert.ToString2#2](~/add/codesnippet/visualbasic/m-system.convert.tostrin_29_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 32-bit signed integer to its equivalent string representation.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.Int32.ToString?displayProperty=fullName>. It formats `value` by using the formatting conventions of the current thread culture.  
  
   
  
## Examples  
 The following example compares the ToString method with the <xref:System.Convert.ToString%28System.UInt16%2CSystem.IFormatProvider%29> method. It defines a custom <xref:System.Globalization.NumberFormatInfo> object that uses the sting "minus" to represent the negative sign. It converts each element in an integer array to its equivalent string representation using default formatting (the formatting conventions of the current culture) and the custom format provider.  
  
 [!code-cs[System.Convert.ToString2#27](~/add/codesnippet/csharp/m-system.convert.tostrin_35_1.cs)]
 [!code-vb[System.Convert.ToString2#27](~/add/codesnippet/visualbasic/m-system.convert.tostrin_35_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 64-bit signed integer to its equivalent string representation.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.Int64.ToString?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example converts each element in a long integer array to its equivalent string representation.  
  
 [!code-vb[System.Convert.ToString2#28](~/add/codesnippet/visualbasic/m-system.convert.tostrin_4_1.vb)]
 [!code-cs[System.Convert.ToString2#28](~/add/codesnippet/csharp/m-system.convert.tostrin_4_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object that supplies the value to convert, or <see langword="null" />.</param>
        <summary>Converts the value of the specified object to its equivalent string representation.</summary>
        <returns>The string representation of <paramref name="value" />, or <see cref="T:System.String" /> if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To convert `value` to its string representation, the method tries to call the <xref:System.IConvertible.ToString%2A?displayProperty=fullName> implementation of `value`. If `value` does not implement the <xref:System.IConvertible> interface, the method tries to call the <xref:System.IFormattable.ToString%2A?displayProperty=fullName> implementation of `value`. If value does not implement the <xref:System.IFormattable> interface, the method calls the `ToString` method of the underlying type of `value`.  
  
   
  
## Examples  
 The following example converts each element in an object array to its equivalent string representation.  
  
 [!code-cs[System.Convert.ToString2#3](~/add/codesnippet/csharp/m-system.convert.tostrin_22_1.cs)]
 [!code-vb[System.Convert.ToString2#3](~/add/codesnippet/visualbasic/m-system.convert.tostrin_22_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 8-bit signed integer to its equivalent string representation.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.SByte.ToString?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example converts each element in a signed byte array to its equivalent string representation.  
  
 [!code-cs[System.Convert.ToString2#4](~/add/codesnippet/csharp/m-system.convert.tostrin_21_1.cs)]
 [!code-vb[System.Convert.ToString2#4](~/add/codesnippet/visualbasic/m-system.convert.tostrin_21_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The single-precision floating-point number to convert.</param>
        <summary>Converts the value of the specified single-precision floating-point number to its equivalent string representation.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.Single.ToString?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example converts each element in an array of <xref:System.Single> values to its equivalent string representation.  
  
 [!code-cs[System.Convert.ToString2#5](~/add/codesnippet/csharp/m-system.convert.tostrin_2_1.cs)]
 [!code-vb[System.Convert.ToString2#5](~/add/codesnippet/visualbasic/m-system.convert.tostrin_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The string to return.</param>
        <summary>Returns the specified string instance; no actual conversion is performed.</summary>
        <returns>
          <paramref name="value" /> is returned unchanged.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example passes a string to the ToString method and calls the <xref:System.Object.ReferenceEquals%2A?displayProperty=fullName> method to confirm that the method returns the original string. The example also calls the <xref:System.String.IsInterned%2A?displayProperty=fullName> method to ensure that the two strings are not identical because the original string is interned.  
  
 [!code-cs[System.Convert.ToString#2](~/add/codesnippet/csharp/m-system.convert.tostrin_6_1.cs)]
 [!code-vb[System.Convert.ToString#2](~/add/codesnippet/visualbasic/m-system.convert.tostrin_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 16-bit unsigned integer to its equivalent string representation.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.UInt16.ToString?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example converts each element in an array of unsigned 16-bit integer values to its equivalent string representation.  
  
 [!code-cs[System.Convert.ToString2#6](~/add/codesnippet/csharp/m-system.convert.tostrin_7_1.cs)]
 [!code-vb[System.Convert.ToString2#6](~/add/codesnippet/visualbasic/m-system.convert.tostrin_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 32-bit unsigned integer to its equivalent string representation.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.UInt32.ToString?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example converts each element in an unsigned integer array to its equivalent string representation.  
  
 [!code-cs[System.Convert.ToString2#7](~/add/codesnippet/csharp/m-system.convert.tostrin_3_1.cs)]
 [!code-vb[System.Convert.ToString2#7](~/add/codesnippet/visualbasic/m-system.convert.tostrin_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 64-bit unsigned integer to its equivalent string representation.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.UInt64.ToString?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example converts each element in an unsigned long integer array to its equivalent string representation.  
  
 [!code-cs[System.Convert.ToString2#8](~/add/codesnippet/csharp/m-system.convert.tostrin_9_1.cs)]
 [!code-vb[System.Convert.ToString2#8](~/add/codesnippet/visualbasic/m-system.convert.tostrin_9_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (bool value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(bool value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">The Boolean value to convert.</param>
        <param name="provider">An instance of an object. This parameter is ignored.</param>
        <summary>Converts the specified Boolean value to its equivalent string representation.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.Boolean.ToString%2A?displayProperty=fullName>. It returns <xref:System.Boolean.TrueString?displayProperty=fullName> for `true` values and <xref:System.Boolean.FalseString?displayProperty=fullName> for `false` values.  
  
   
  
## Examples  
 The following example converts a <xref:System.Boolean> value to a <xref:System.String> with the `ToString` method, using an <xref:System.IFormatProvider> object that displays the type of the format provider for which it is called. The example shows that the <xref:System.IFormatProvider> object is not referenced.  
  
 [!code-cpp[System.Convert.ToString.IFormatProvider#2](~/add/codesnippet/cpp/m-system.convert.tostrin_17_1.cpp)]
 [!code-vb[System.Convert.ToString.IFormatProvider#2](~/add/codesnippet/visualbasic/m-system.convert.tostrin_17_1.vb)]
 [!code-cs[System.Convert.ToString.IFormatProvider#2](~/add/codesnippet/csharp/m-system.convert.tostrin_17_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (byte value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int8 value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit unsigned integer to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified 8-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.Byte.ToString%2A?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example converts each element in an unsigned byte array to its equivalent string representation using the formatting conventions of the en-US and fr-FR cultures. Because the "G" specifier by default outputs only decimal digits in a byte value's string representation, the `provider` parameter does not affect the formatting of the returned string.  
  
 [!code-cs[System.Convert.ToString2#16](~/add/codesnippet/csharp/m-system.convert.tostrin_24_1.cs)]
 [!code-vb[System.Convert.ToString2#16](~/add/codesnippet/visualbasic/m-system.convert.tostrin_24_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (byte value, int toBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int8 value, int32 toBase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
        <Parameter Name="toBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit unsigned integer to convert.</param>
        <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16.</param>
        <summary>Converts the value of an 8-bit unsigned integer to its equivalent string representation in a specified base.</summary>
        <returns>The string representation of <paramref name="value" /> in base <paramref name="toBase" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `toBase` does not equal 10, the string that is returned by the ToString method represents `value` by its magnitude only. If the method is called to create a string that will later be converted back to a number, a corresponding method that assumes a magnitude-only numeric representation should be called to perform the conversion. Such methods include <xref:System.Convert.ToByte%28System.String%2CSystem.Int32%29?displayProperty=fullName> or <xref:System.Byte.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example converts each element in a byte array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.  
  
 [!code-cs[System.Convert.ToString2#9](~/add/codesnippet/csharp/m-system.convert.tostrin_28_1.cs)]
 [!code-vb[System.Convert.ToString2#9](~/add/codesnippet/visualbasic/m-system.convert.tostrin_28_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="toBase" /> is not 2, 8, 10, or 16.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (char value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(char value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">The Unicode character to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information. This parameter is ignored.</param>
        <summary>Converts the value of the specified Unicode character to its equivalent string representation, using the specified culture-specific formatting information.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.Char.ToString?displayProperty=fullName>. The `provider` parameter is ignored.  
  
   
  
## Examples  
 The following example converts a <xref:System.Char> value to a <xref:System.String> with the `ToString` method, using an <xref:System.IFormatProvider> object that displays the type of the format provider for which it is called. The example shows that the <xref:System.IFormatProvider> object is not referenced.  
  
 [!code-cpp[System.Convert.ToString.IFormatProvider#2](~/add/codesnippet/cpp/m-system.convert.tostrin_27_1.cpp)]
 [!code-vb[System.Convert.ToString.IFormatProvider#2](~/add/codesnippet/visualbasic/m-system.convert.tostrin_27_1.vb)]
 [!code-cs[System.Convert.ToString.IFormatProvider#2](~/add/codesnippet/csharp/m-system.convert.tostrin_27_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (DateTime value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.DateTime value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">The date and time value to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified <see cref="T:System.DateTime" /> to its equivalent string representation, using the specified culture-specific formatting information.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.DateTime.ToString%28System.IFormatProvider%29?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example converts a <xref:System.DateTime> value to its equivalent string representation in eight different cultures.  
  
 [!code-cs[System.Convert.ToString2#13](~/add/codesnippet/csharp/m-system.convert.tostrin_11_1.cs)]
 [!code-vb[System.Convert.ToString2#13](~/add/codesnippet/visualbasic/m-system.convert.tostrin_11_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (decimal value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(valuetype System.Decimal value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">The decimal number to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified decimal number to its equivalent string representation, using the specified culture-specific formatting information.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example converts each element in an array of <xref:System.Decimal> values to its equivalent string representation in four different cultures.  
  
 [!code-cs[System.Convert.ToString2#14](~/add/codesnippet/csharp/m-system.convert.tostrin_8_1.cs)]
 [!code-vb[System.Convert.ToString2#14](~/add/codesnippet/visualbasic/m-system.convert.tostrin_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (double value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(float64 value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">The double-precision floating-point number to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified double-precision floating-point number to its equivalent string representation.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.Double.ToString%28System.IFormatProvider%29?displayProperty=fullName>  
  
   
  
## Examples  
 The following example converts each element in an array of <xref:System.Double> values to its equivalent string representation in four different cultures.  
  
 [!code-cs[System.Convert.ToString2#15](~/add/codesnippet/csharp/m-system.convert.tostrin_33_1.cs)]
 [!code-vb[System.Convert.ToString2#15](~/add/codesnippet/visualbasic/m-system.convert.tostrin_33_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (short value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int16 value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit signed integer to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified 16-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.Int16.ToString%28System.IFormatProvider%29?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string "~" and its positive sign as the string "!". It then calls the ToString method to convert each element in an array of 16-bit integers to its equivalent string representation. The conversion uses the invariant culture as well as the custom <xref:System.Globalization.NumberFormatInfo> object.  
  
 [!code-cs[System.Convert.ToString2#19](~/add/codesnippet/csharp/m-system.convert.tostrin_13_1.cs)]
 [!code-vb[System.Convert.ToString2#19](~/add/codesnippet/visualbasic/m-system.convert.tostrin_13_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (short value, int toBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int16 value, int32 toBase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
        <Parameter Name="toBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit signed integer to convert.</param>
        <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16.</param>
        <summary>Converts the value of a 16-bit signed integer to its equivalent string representation in a specified base.</summary>
        <returns>The string representation of <paramref name="value" /> in base <paramref name="toBase" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `value` is positive and `toBase` is 2, 8, or 16, the returned string uses sign-and-magnitude representation. If `value` is negative and `toBase` is 2, 8, or 16, the returned string uses two's complement representation. This means that the high-order bit of the high-order byte (bit 15) is interpreted as the sign bit. If the ToString method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion. Such methods include <xref:System.Convert.ToInt16%28System.String%2CSystem.Int32%29?displayProperty=fullName> and <xref:System.Int16.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example converts each element in an array of 16-bit signed integers to its equivalent binary, octal, decimal, and hexadecimal string representations.  
  
 [!code-cs[System.Convert.ToString2#10](~/add/codesnippet/csharp/m-system.convert.tostrin_32_1.cs)]
 [!code-vb[System.Convert.ToString2#10](~/add/codesnippet/visualbasic/m-system.convert.tostrin_32_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="toBase" /> is not 2, 8, 10, or 16.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (int value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int32 value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit signed integer to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified 32-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.Int32.ToString%28System.IFormatProvider%29?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string "~" and its positive sign as the string "!". It then calls the ToString method to convert each element in an array of integers to its equivalent string representation. The conversion uses the invariant culture as well as the custom <xref:System.Globalization.NumberFormatInfo> object.  
  
 [!code-cs[System.Convert.ToString2#20](~/add/codesnippet/csharp/m-system.convert.tostrin_34_1.cs)]
 [!code-vb[System.Convert.ToString2#20](~/add/codesnippet/visualbasic/m-system.convert.tostrin_34_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (int value, int toBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int32 value, int32 toBase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="toBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit signed integer to convert.</param>
        <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16.</param>
        <summary>Converts the value of a 32-bit signed integer to its equivalent string representation in a specified base.</summary>
        <returns>The string representation of <paramref name="value" /> in base <paramref name="toBase" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `value` is positive and `toBase` is 2, 8, or 16, the returned string uses sign-and-magnitude representation. If `value` is negative and `toBase` is 2, 8, or 16, the returned string uses two's complement representation. This means that the high-order bit of the highest-order byte (bit 31) is interpreted as the sign bit. If the ToString method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion. Such methods include <xref:System.Convert.ToInt32%28System.String%2CSystem.Int32%29?displayProperty=fullName> and <xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example converts each element in an integer array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.  
  
 [!code-cs[System.Convert.ToString2#11](~/add/codesnippet/csharp/m-system.convert.tostrin_20_1.cs)]
 [!code-vb[System.Convert.ToString2#11](~/add/codesnippet/visualbasic/m-system.convert.tostrin_20_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="toBase" /> is not 2, 8, 10, or 16.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (long value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int64 value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit signed integer to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified 64-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.Int64.ToString%28System.IFormatProvider%29?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string "~" and its positive sign as the string "!". It then calls the ToString method to convert each element in a long integer array to its equivalent string representation. The conversion uses the invariant culture as well as the custom <xref:System.Globalization.NumberFormatInfo> object.  
  
 [!code-cs[System.Convert.ToString2#21](~/add/codesnippet/csharp/m-system.convert.tostrin_5_1.cs)]
 [!code-vb[System.Convert.ToString2#21](~/add/codesnippet/visualbasic/m-system.convert.tostrin_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (long value, int toBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int64 value, int32 toBase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
        <Parameter Name="toBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit signed integer to convert.</param>
        <param name="toBase">The base of the return value, which must be 2, 8, 10, or 16.</param>
        <summary>Converts the value of a 64-bit signed integer to its equivalent string representation in a specified base.</summary>
        <returns>The string representation of <paramref name="value" /> in base <paramref name="toBase" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `value` is positive and `toBase` is not 10, the returned string uses sign-and-magnitude representation. If `value` is negative and `toBase` is not 10, the returned string uses two's complement representation. This means that the high-order bit of the highest-order byte (bit 63) is interpreted as the sign bit. If the ToString method is called to create a string that will later be converted back to a number, a corresponding method that assumes a similar numeric representation should be called to perform the conversion. Such methods include <xref:System.Convert.ToInt64%28System.String%2CSystem.Int32%29?displayProperty=fullName> and <xref:System.Int64.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example converts each element in a long integer array to its equivalent binary, hexadecimal, decimal, and hexadecimal string representations.  
  
 [!code-cs[System.Convert.ToString2#12](~/add/codesnippet/csharp/m-system.convert.tostrin_18_1.cs)]
 [!code-vb[System.Convert.ToString2#12](~/add/codesnippet/visualbasic/m-system.convert.tostrin_18_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="toBase" /> is not 2, 8, 10, or 16.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(object value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">An object that supplies the value to convert, or <see langword="null" />.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified object to its equivalent string representation using the specified culture-specific formatting information.</summary>
        <returns>The string representation of <paramref name="value" />, or <see cref="T:System.String" /> if <paramref name="value" /> is an object whose value is <see langword="null" />. If <paramref name="value" /> is <see langword="null" />, the method returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the `value` parameter implements the <xref:System.IConvertible> interface, the method calls the <xref:System.IConvertible.ToString%28System.IFormatProvider%29?displayProperty=fullName>implementation of `value`. Otherwise, if the `value` parameter implements the <xref:System.IFormattable> interface, the method calls its <xref:System.IFormattable.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName>implementation. If `value` implements neither interface, the method calls the `value` parameter's `ToString()` method, and the `provider` parameter is ignored.  
  
 The `provider` parameter is used if the `value` parameter implements the <xref:System.IConvertible> or <xref:System.IFormattable> interface. The most common use of the `provider` parameter is to specify culture-specific information used in the conversion of `value`. For example, if the `value` parameter is a negative decimal number, the `provider` parameter can supply culture-specific information about the notation used for the negative sign and decimal separator. The second example in the next section illustrates a format provider that does not supply culture-sensitive formatting information.  
  
   
  
## Examples  
 The following example defines a `Temperature` class that overrides the <xref:System.Object.ToString%2A?displayProperty=fullName> method but does not implement the <xref:System.IConvertible> interface. The example illustrates how calls to the ToString method, in turn, call the `Temperature.ToString` method.  
  
 [!code-cs[System.Convert.ToString2#26](~/add/codesnippet/csharp/m-system.convert.tostrin_25_1.cs)]
 [!code-vb[System.Convert.ToString2#26](~/add/codesnippet/visualbasic/m-system.convert.tostrin_25_1.vb)]  
  
 The following example defines a `Temperature` class that implements the <xref:System.IFormattable> interface but does not implement the <xref:System.IConvertible> interface. Its <xref:System.IFormattable.ToString%2A?displayProperty=fullName>implementation represents the `Temperature` value in Celsius, Fahrenheit, or Kelvin, depending on the format  string. The example also defines a `TemperatureProvider` class that implements <xref:System.IFormatProvider> and provides a randomly generated format string that is used by the <xref:System.IFormattable> implementation of the `Temperature` class.  
  
 [!code-cs[System.Convert.ToString2#30](~/add/codesnippet/csharp/m-system.convert.tostrin_25_2.cs)]
 [!code-vb[System.Convert.ToString2#30](~/add/codesnippet/visualbasic/m-system.convert.tostrin_25_2.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (sbyte value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(int8 value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit signed integer to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified 8-bit signed integer to its equivalent string representation, using the specified culture-specific formatting information.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.SByte.ToString%28System.IFormatProvider%29?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string "~" and its positive sign as the string "!". It then calls the ToString method to convert each element in signed byte array to its equivalent string representation. The conversion uses the invariant culture as well as the custom <xref:System.Globalization.NumberFormatInfo> object.  
  
 [!code-cs[System.Convert.ToString2#17](~/add/codesnippet/csharp/m-system.convert.tostrin_23_1.cs)]
 [!code-vb[System.Convert.ToString2#17](~/add/codesnippet/visualbasic/m-system.convert.tostrin_23_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (float value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(float32 value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">The single-precision floating-point number to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified single-precision floating-point number to its equivalent string representation, using the specified culture-specific formatting information.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.Single.ToString%28System.IFormatProvider%29?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example converts each element in an array of <xref:System.Single> values to its equivalent string representation in four different cultures.  
  
 [!code-cs[System.Convert.ToString2#18](~/add/codesnippet/csharp/m-system.convert.tostrin_15_1.cs)]
 [!code-vb[System.Convert.ToString2#18](~/add/codesnippet/visualbasic/m-system.convert.tostrin_15_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(string value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">The string to return.</param>
        <param name="provider">An object that supplies culture-specific formatting information. This parameter is ignored.</param>
        <summary>Returns the specified string instance; no actual conversion is performed.</summary>
        <returns>
          <paramref name="value" /> is returned unchanged.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example calls the `ToString` method with a <xref:System.String> parameter. The method returns the unmodified <xref:System.String> without referencing the <xref:System.IFormatProvider> object.  
  
 [!code-cpp[System.Convert.ToString.IFormatProvider#2](~/add/codesnippet/cpp/m-system.convert.tostrin_30_1.cpp)]
 [!code-vb[System.Convert.ToString.IFormatProvider#2](~/add/codesnippet/visualbasic/m-system.convert.tostrin_30_1.vb)]
 [!code-cs[System.Convert.ToString.IFormatProvider#2](~/add/codesnippet/csharp/m-system.convert.tostrin_30_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (ushort value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int16 value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit unsigned integer to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified 16-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.UInt16.ToString%28System.IFormatProvider%29?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string "~" and its positive sign as the string "!". It then calls the ToString method to convert a 16-bit unsigned integer value to its equivalent string representation. The conversion uses both the invariant culture and the custom <xref:System.Globalization.NumberFormatInfo> object. The output indicates that this formatting information is not used, because by default the "G" format specifier does not include a positive sign with positive values.  
  
 [!code-cs[System.Convert.ToString2#22](~/add/codesnippet/csharp/m-system.convert.tostrin_1_1.cs)]
 [!code-vb[System.Convert.ToString2#22](~/add/codesnippet/visualbasic/m-system.convert.tostrin_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (uint value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int32 value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit unsigned integer to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified 32-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.UInt32.ToString%28System.IFormatProvider%29?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string "~" and its positive sign as the string "!". It then calls the ToString method to convert an unsigned integer value to its equivalent string representation. The conversion uses both the invariant culture and the custom <xref:System.Globalization.NumberFormatInfo> object. The output indicates that this formatting information is not used, because by default the "G" format specifier does not include a positive sign with positive values.  
  
 [!code-cs[System.Convert.ToString2#23](~/add/codesnippet/csharp/m-system.convert.tostrin_16_1.cs)]
 [!code-vb[System.Convert.ToString2#23](~/add/codesnippet/visualbasic/m-system.convert.tostrin_16_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public static string ToString (ulong value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ToString(unsigned int64 value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit unsigned integer to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified 64-bit unsigned integer to its equivalent string representation, using the specified culture-specific formatting information.</summary>
        <returns>The string representation of <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This implementation is identical to <xref:System.UInt64.ToString%28System.IFormatProvider%29?displayProperty=fullName>.  
  
   
  
## Examples  
 The following example defines a custom <xref:System.Globalization.NumberFormatInfo> class that defines its negative sign as the string "~" and its positive sign as the string "!". It then calls the ToString method to convert an unsigned long integer value to its equivalent string representation. The conversion uses both the invariant culture and the custom <xref:System.Globalization.NumberFormatInfo> object. The output indicates that this formatting information is not used, because by default the "G" format specifier does not include a positive sign with positive values.  
  
 [!code-cs[System.Convert.ToString2#24](~/add/codesnippet/csharp/m-system.convert.tostrin_10_1.cs)]
 [!code-vb[System.Convert.ToString2#24](~/add/codesnippet/visualbasic/m-system.convert.tostrin_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The Boolean value to convert.</param>
        <summary>Converts the specified Boolean value to the equivalent 16-bit unsigned integer.</summary>
        <returns>The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts the Boolean values `true` and `false` to unsigned 16-bit integers.  
  
 [!code-vb[System.Convert.ToUInt16#1](~/add/codesnippet/visualbasic/m-system.convert.touint1_3_1.vb)]
 [!code-cs[System.Convert.ToUInt16#1](~/add/codesnippet/csharp/m-system.convert.touint1_3_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(unsigned int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 16-bit unsigned integer.</summary>
        <returns>A 16-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in a byte array to an unsigned 16-bit integer.  
  
 [!code-vb[System.Convert.ToUInt16#2](~/add/codesnippet/visualbasic/m-system.convert.touint1_7_1.vb)]
 [!code-cs[System.Convert.ToUInt16#2](~/add/codesnippet/csharp/m-system.convert.touint1_7_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The Unicode character to convert.</param>
        <summary>Converts the value of the specified Unicode character to the equivalent 16-bit unsigned integer.</summary>
        <returns>The 16-bit unsigned integer equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in a character array to an unsigned 16-bit integer.  
  
 [!code-vb[System.Convert.ToUInt16#3](~/add/codesnippet/visualbasic/m-system.convert.touint1_16_1.vb)]
 [!code-cs[System.Convert.ToUInt16#3](~/add/codesnippet/csharp/m-system.convert.touint1_16_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(valuetype System.DateTime value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The date and time value to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The decimal number to convert.</param>
        <summary>Converts the value of the specified decimal number to an equivalent 16-bit unsigned integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 16-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of <xref:System.Decimal> values to an unsigned 16-bit integer.  
  
 [!code-vb[System.Convert.ToUInt16#4](~/add/codesnippet/visualbasic/m-system.convert.touint1_2_1.vb)]
 [!code-cs[System.Convert.ToUInt16#4](~/add/codesnippet/csharp/m-system.convert.touint1_2_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than zero or greater than <see cref="T:System.UInt16" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The double-precision floating-point number to convert.</param>
        <summary>Converts the value of the specified double-precision floating-point number to an equivalent 16-bit unsigned integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 16-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of <xref:System.Double> values to an unsigned 16-bit integer.  
  
 [!code-vb[System.Convert.ToUInt16#5](~/add/codesnippet/visualbasic/m-system.convert.touint1_11_1.vb)]
 [!code-cs[System.Convert.ToUInt16#5](~/add/codesnippet/csharp/m-system.convert.touint1_11_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than zero or greater than <see cref="T:System.UInt16" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 16-bit signed integer to the equivalent 16-bit unsigned integer.</summary>
        <returns>A 16-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in a 16-bit integer array to an unsigned 16-bit integer.  
  
 [!code-vb[System.Convert.ToUInt16#6](~/add/codesnippet/visualbasic/m-system.convert.touint1_12_1.vb)]
 [!code-cs[System.Convert.ToUInt16#6](~/add/codesnippet/csharp/m-system.convert.touint1_12_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than zero.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 32-bit signed integer to an equivalent 16-bit unsigned integer.</summary>
        <returns>A 16-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an integer array to an unsigned 16-bit integer.  
  
 [!code-vb[System.Convert.ToUInt16#7](~/add/codesnippet/visualbasic/m-system.convert.touint1_5_1.vb)]
 [!code-cs[System.Convert.ToUInt16#7](~/add/codesnippet/csharp/m-system.convert.touint1_5_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than zero or greater than <see cref="T:System.UInt16" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 64-bit signed integer to an equivalent 16-bit unsigned integer.</summary>
        <returns>A 16-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in a long integer array to an unsigned 16-bit integer.  
  
 [!code-vb[System.Convert.ToUInt16#8](~/add/codesnippet/visualbasic/m-system.convert.touint1_4_1.vb)]
 [!code-cs[System.Convert.ToUInt16#8](~/add/codesnippet/csharp/m-system.convert.touint1_4_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than zero or greater than <see cref="T:System.UInt16" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</param>
        <summary>Converts the value of the specified object to a 16-bit unsigned integer.</summary>
        <returns>A 16-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking the <xref:System.IConvertible.ToUInt16%2A?displayProperty=fullName> method of the underlying type of `value`.  
  
   
  
## Examples  
 The following example attempts to convert each element in an object array to an unsigned 16-bit integer.  
  
 [!code-vb[System.Convert.ToUInt16#9](~/add/codesnippet/visualbasic/m-system.convert.touint1_10_1.vb)]
 [!code-cs[System.Convert.ToUInt16#9](~/add/codesnippet/csharp/m-system.convert.touint1_10_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in an appropriate format.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the  <see cref="T:System.IConvertible" /> interface.  
  
 -or-  
  
 The conversion is not supported.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 8-bit signed integer to the equivalent 16-bit unsigned integer.</summary>
        <returns>A 16-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in a signed byte array to an unsigned 16-bit integer.  
  
 [!code-vb[System.Convert.ToUInt16#10](~/add/codesnippet/visualbasic/m-system.convert.touint1_8_1.vb)]
 [!code-cs[System.Convert.ToUInt16#10](~/add/codesnippet/csharp/m-system.convert.touint1_8_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than zero.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The single-precision floating-point number to convert.</param>
        <summary>Converts the value of the specified single-precision floating-point number to an equivalent 16-bit unsigned integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 16-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of <xref:System.String> values to an unsigned 16-bit integer.  
  
 [!code-vb[System.Convert.ToUInt16#11](~/add/codesnippet/visualbasic/m-system.convert.touint1_1_1.vb)]
 [!code-cs[System.Convert.ToUInt16#11](~/add/codesnippet/csharp/m-system.convert.touint1_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than zero or greater than <see cref="T:System.UInt16" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <summary>Converts the specified string representation of a number to an equivalent 16-bit unsigned integer.</summary>
        <returns>A 16-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Using the ToUInt16 method is equivalent to passing `value` to the <xref:System.UInt16.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example attempts to convert each element in a numeric string array to a 16-bit unsigned integer.  
  
 [!code-vb[System.Convert.ToUInt16#12](~/add/codesnippet/visualbasic/m-system.convert.touint1_6_1.vb)]
 [!code-cs[System.Convert.ToUInt16#12](~/add/codesnippet/csharp/m-system.convert.touint1_6_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="T:System.UInt16" /> or greater than <see cref="T:System.UInt16" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(unsigned int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit unsigned integer to return.</param>
        <summary>Returns the specified 16-bit unsigned integer; no actual conversion is performed.</summary>
        <returns>
          <paramref name="value" /> is returned unchanged.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 16-bit unsigned integer.</summary>
        <returns>A 16-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of unsigned integers to an unsigned 16-bit integer.  
  
 [!code-vb[System.Convert.ToUInt16#13](~/add/codesnippet/visualbasic/m-system.convert.touint1_15_1.vb)]
 [!code-cs[System.Convert.ToUInt16#13](~/add/codesnippet/csharp/m-system.convert.touint1_15_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.UInt16" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 16-bit unsigned integer.</summary>
        <returns>A 16-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of unsigned long integers to an unsigned 16-bit integer.  
  
 [!code-vb[System.Convert.ToUInt16#14](~/add/codesnippet/visualbasic/m-system.convert.touint1_14_1.vb)]
 [!code-cs[System.Convert.ToUInt16#14](~/add/codesnippet/csharp/m-system.convert.touint1_14_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.UInt16" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(object value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified object to a 16-bit unsigned integer, using the specified culture-specific formatting information.</summary>
        <returns>A 16-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking the <xref:System.IConvertible.ToUInt16%2A?displayProperty=fullName> method of the underlying type of `value`.  
  
 `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  
  
 The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.  
  
   
  
## Examples  
 The following example defines a `HexString` class that implements the <xref:System.IConvertible> interface and that is designed to hold the string representation of both 16-bit signed and 16-bit unsigned values. The class includes a `Sign` property that indicates the sign of its hexadecimal value.  
  
 [!code-vb[System.Convert.ToUInt16#16](~/add/codesnippet/visualbasic/m-system.convert.touint1_0_1.vb)]
 [!code-cs[System.Convert.ToUInt16#16](~/add/codesnippet/csharp/m-system.convert.touint1_0_1.cs)]  
  
 The following example shows that a call to the ToUInt16 method that passes a `HexString` object as a parameter, in turn, calls the <xref:System.IConvertible.ToUInt16%2A?displayProperty=fullName> implementation of the `HexString` class.  
  
 [!code-vb[System.Convert.ToUInt16#17](~/add/codesnippet/visualbasic/m-system.convert.touint1_0_2.vb)]
 [!code-cs[System.Convert.ToUInt16#17](~/add/codesnippet/csharp/m-system.convert.touint1_0_2.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in an appropriate format.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the  <see cref="T:System.IConvertible" /> interface.  
  
 -or-  
  
 The conversion is not supported.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(string value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the specified string representation of a number to an equivalent 16-bit unsigned integer, using the specified culture-specific formatting information.</summary>
        <returns>A 16-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking <xref:System.UInt16.Parse%2A?displayProperty=fullName> on `value`.  
  
 `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt16.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign. It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.  
  
 [!code-vb[System.Convert.ToUInt16#18](~/add/codesnippet/visualbasic/m-system.convert.touint1_13_1.vb)]
 [!code-cs[System.Convert.ToUInt16#18](~/add/codesnippet/csharp/m-system.convert.touint1_13_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="T:System.UInt16" /> or greater than <see cref="T:System.UInt16" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt16">
      <MemberSignature Language="C#" Value="public static ushort ToUInt16 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int16 ToUInt16(string value, int32 fromBase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <param name="fromBase">The base of the number in `value`, which must be 2, 8, 10, or 16.</param>
        <summary>Converts the string representation of a number in a specified base to an equivalent 16-bit unsigned integer.</summary>
        <returns>A 16-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".  
  
 Because the <xref:System.UInt16> data type supports unsigned values only, the ToUInt16 method assumes that `value` is expressed using unsigned binary representation. In other words, all 16 bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed integer value that is out of the range of the <xref:System.UInt16> data type is converted to a <xref:System.UInt16> value without the method throwing an exception. The following example converts <xref:System.Int16.MinValue?displayProperty=fullName> to its hexadecimal string representation, and then calls the ToUInt16 method. Instead of throwing an exception, the method displays the message, "0x8000 converts to 32768."  
  
 [!code-vb[System.Convert.BaseConversion#11](~/add/codesnippet/visualbasic/m-system.convert.touint1_9_1.vb)]
 [!code-cs[System.Convert.BaseConversion#11](~/add/codesnippet/csharp/m-system.convert.touint1_9_1.cs)]  
  
 When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt16> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <xref:System.UInt16> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.  
  
 [!code-vb[System.Convert.BaseConversion#12](~/add/codesnippet/visualbasic/m-system.convert.touint1_9_2.vb)]
 [!code-cs[System.Convert.BaseConversion#12](~/add/codesnippet/csharp/m-system.convert.touint1_9_2.cs)]  
  
   
  
## Examples  
 The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned 16-bit integer.  
  
 [!code-vb[System.Convert.ToUInt16#15](~/add/codesnippet/visualbasic/m-system.convert.touint1_9_3.vb)]
 [!code-cs[System.Convert.ToUInt16#15](~/add/codesnippet/csharp/m-system.convert.touint1_9_3.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="fromBase" /> is not 2, 8, 10, or 16.  
  
 -or-  
  
 <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> is <see cref="T:System.String" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.  
  
 -or-  
  
 <paramref name="value" /> represents a number that is less than <see cref="T:System.UInt16" /> or greater than <see cref="T:System.UInt16" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The Boolean value to convert.</param>
        <summary>Converts the specified Boolean value to the equivalent 32-bit unsigned integer.</summary>
        <returns>The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts the Boolean values `true` and `false` to unsigned integers.  
  
 [!code-cs[System.Convert.ToUInt32#1](~/add/codesnippet/csharp/m-system.convert.touint3_14_1.cs)]
 [!code-vb[System.Convert.ToUInt32#1](~/add/codesnippet/visualbasic/m-system.convert.touint3_14_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(unsigned int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 32-bit unsigned integer.</summary>
        <returns>A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in a byte array to an unsigned integer.  
  
 [!code-cs[System.Convert.ToUInt32#2](~/add/codesnippet/csharp/m-system.convert.touint3_3_1.cs)]
 [!code-vb[System.Convert.ToUInt32#2](~/add/codesnippet/visualbasic/m-system.convert.touint3_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The Unicode character to convert.</param>
        <summary>Converts the value of the specified Unicode character to the equivalent 32-bit unsigned integer.</summary>
        <returns>A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in a character array to an unsigned integer.  
  
 [!code-cs[System.Convert.ToUInt32#3](~/add/codesnippet/csharp/m-system.convert.touint3_1_1.cs)]
 [!code-vb[System.Convert.ToUInt32#3](~/add/codesnippet/visualbasic/m-system.convert.touint3_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(valuetype System.DateTime value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The date and time value to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The decimal number to convert.</param>
        <summary>Converts the value of the specified decimal number to an equivalent 32-bit unsigned integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 32-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of <xref:System.Decimal> values to an unsigned integer.  
  
 [!code-cs[System.Convert.ToUInt32#4](~/add/codesnippet/csharp/m-system.convert.touint3_5_1.cs)]
 [!code-vb[System.Convert.ToUInt32#4](~/add/codesnippet/visualbasic/m-system.convert.touint3_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than zero or greater than <see cref="T:System.UInt32" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The double-precision floating-point number to convert.</param>
        <summary>Converts the value of the specified double-precision floating-point number to an equivalent 32-bit unsigned integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 32-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of <xref:System.Double> values to an unsigned integer.  
  
 [!code-cs[System.Convert.ToUInt32#5](~/add/codesnippet/csharp/m-system.convert.touint3_6_1.cs)]
 [!code-vb[System.Convert.ToUInt32#5](~/add/codesnippet/visualbasic/m-system.convert.touint3_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than zero or greater than <see cref="T:System.UInt32" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 16-bit signed integer to the equivalent 32-bit unsigned integer.</summary>
        <returns>A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in a 16-bit integer array to an unsigned integer.  
  
 [!code-cs[System.Convert.ToUInt32#6](~/add/codesnippet/csharp/m-system.convert.touint3_13_1.cs)]
 [!code-vb[System.Convert.ToUInt32#6](~/add/codesnippet/visualbasic/m-system.convert.touint3_13_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than zero.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 32-bit signed integer to an equivalent 32-bit unsigned integer.</summary>
        <returns>A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an integer array to an unsigned integer.  
  
 [!code-cs[System.Convert.ToUInt32#7](~/add/codesnippet/csharp/m-system.convert.touint3_15_1.cs)]
 [!code-vb[System.Convert.ToUInt32#7](~/add/codesnippet/visualbasic/m-system.convert.touint3_15_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than zero.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 64-bit signed integer to an equivalent 32-bit unsigned integer.</summary>
        <returns>A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in a long integer array to an unsigned integer.  
  
 [!code-cs[System.Convert.ToUInt32#8](~/add/codesnippet/csharp/m-system.convert.touint3_16_1.cs)]
 [!code-vb[System.Convert.ToUInt32#8](~/add/codesnippet/visualbasic/m-system.convert.touint3_16_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than zero or greater than <see cref="T:System.UInt32" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</param>
        <summary>Converts the value of the specified object to a 32-bit unsigned integer.</summary>
        <returns>A 32-bit unsigned integer that is equivalent to <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking the <xref:System.IConvertible.ToUInt32%2A?displayProperty=fullName> method of the underlying type of `value`.  
  
   
  
## Examples  
 The following example attempts to convert each element in an object array to an unsigned integer.  
  
 [!code-cs[System.Convert.ToUInt32#9](~/add/codesnippet/csharp/m-system.convert.touint3_12_1.cs)]
 [!code-vb[System.Convert.ToUInt32#9](~/add/codesnippet/visualbasic/m-system.convert.touint3_12_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in an appropriate format.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.  
  
 -or-  
  
 The conversion is not supported.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 8-bit signed integer to the equivalent 32-bit unsigned integer.</summary>
        <returns>A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in a signed byte array to an unsigned integer.  
  
 [!code-cs[System.Convert.ToUInt32#10](~/add/codesnippet/csharp/m-system.convert.touint3_9_1.cs)]
 [!code-vb[System.Convert.ToUInt32#10](~/add/codesnippet/visualbasic/m-system.convert.touint3_9_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than zero.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The single-precision floating-point number to convert.</param>
        <summary>Converts the value of the specified single-precision floating-point number to an equivalent 32-bit unsigned integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 32-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of <xref:System.Single> values to an unsigned integer.  
  
 [!code-cs[System.Convert.ToUInt32#11](~/add/codesnippet/csharp/m-system.convert.touint3_8_1.cs)]
 [!code-vb[System.Convert.ToUInt32#11](~/add/codesnippet/visualbasic/m-system.convert.touint3_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than zero or greater than <see cref="T:System.UInt32" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <summary>Converts the specified string representation of a number to an equivalent 32-bit unsigned integer.</summary>
        <returns>A 32-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Using the ToUInt32 method is equivalent to passing `value` to the <xref:System.UInt32.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example interprets the elements in a string array as numeric strings and attempts to convert them to unsigned integers.  
  
 [!code-cs[System.Convert.ToUInt32#12](~/add/codesnippet/csharp/m-system.convert.touint3_4_1.cs)]
 [!code-vb[System.Convert.ToUInt32#12](~/add/codesnippet/visualbasic/m-system.convert.touint3_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="T:System.UInt32" /> or greater than <see cref="T:System.UInt32" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(unsigned int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 32-bit unsigned integer.</summary>
        <returns>A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an unsigned 16-bit integer array to an unsigned integer value.  
  
 [!code-cs[System.Convert.ToUInt32#13](~/add/codesnippet/csharp/m-system.convert.touint3_7_1.cs)]
 [!code-vb[System.Convert.ToUInt32#13](~/add/codesnippet/visualbasic/m-system.convert.touint3_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit unsigned integer to return.</param>
        <summary>Returns the specified 32-bit unsigned integer; no actual conversion is performed.</summary>
        <returns>
          <paramref name="value" /> is returned unchanged.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 64-bit unsigned integer to an equivalent 32-bit unsigned integer.</summary>
        <returns>A 32-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an unsigned long integer array to an unsigned integer value.  
  
 [!code-cs[System.Convert.ToUInt32#14](~/add/codesnippet/csharp/m-system.convert.touint3_10_1.cs)]
 [!code-vb[System.Convert.ToUInt32#14](~/add/codesnippet/visualbasic/m-system.convert.touint3_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is greater than <see cref="T:System.UInt32" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(object value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified object to a 32-bit unsigned integer, using the specified culture-specific formatting information.</summary>
        <returns>A 32-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking the <xref:System.IConvertible.ToUInt32%2A?displayProperty=fullName> method of the underlying type of `value`.  
  
 `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  
  
 The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.  
  
   
  
## Examples  
 The following example defines a `HexString` class that implements the <xref:System.IConvertible> interface and that is designed to hold the string representation of both 32-bit signed and 32-bit unsigned values. The class includes a `Sign` property that indicates the sign of its hexadecimal value.  
  
 [!code-cs[System.Convert.ToUInt32#17](~/add/codesnippet/csharp/m-system.convert.touint3_0_1.cs)]
 [!code-vb[System.Convert.ToUInt32#17](~/add/codesnippet/visualbasic/m-system.convert.touint3_0_1.vb)]  
  
 The following example shows that a call to the ToUInt32 method that passes a `HexString` object as a parameter, in turn, calls the <xref:System.IConvertible.ToUInt32%2A?displayProperty=fullName> implementation of the `HexString` class.  
  
 [!code-cs[System.Convert.ToUInt32#18](~/add/codesnippet/csharp/m-system.convert.touint3_0_2.cs)]
 [!code-vb[System.Convert.ToUInt32#18](~/add/codesnippet/visualbasic/m-system.convert.touint3_0_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in an appropriate format.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.  
  
 -or-  
  
 The conversion is not supported.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(string value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the specified string representation of a number to an equivalent 32-bit unsigned integer, using the specified culture-specific formatting information.</summary>
        <returns>A 32-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking <xref:System.UInt32.Parse%2A?displayProperty=fullName> on `value`.  
  
 `provider` is an <xref:System.IFormatProvider> instance that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> for the current culture is used.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt32.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign. It then attempts to convert each element of a numeric string array to an integer using both this provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.  
  
 [!code-cs[System.Convert.ToUInt32#15](~/add/codesnippet/csharp/m-system.convert.touint3_2_1.cs)]
 [!code-vb[System.Convert.ToUInt32#15](~/add/codesnippet/visualbasic/m-system.convert.touint3_2_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="T:System.UInt32" /> or greater than <see cref="T:System.UInt32" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt32">
      <MemberSignature Language="C#" Value="public static uint ToUInt32 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int32 ToUInt32(string value, int32 fromBase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <param name="fromBase">The base of the number in `value`, which must be 2, 8, 10, or 16.</param>
        <summary>Converts the string representation of a number in a specified base to an equivalent 32-bit unsigned integer.</summary>
        <returns>A 32-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".  
  
 Because the <xref:System.UInt32> data type supports unsigned values only, the ToUInt32 method assumes that `value` is expressed using unsigned binary representation. In other words, all 32 bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed integer value that is out of the range of the <xref:System.UInt32> data type is converted to a <xref:System.UInt32> value without the method throwing an exception. The following example converts <xref:System.Int32.MinValue> to its hexadecimal string representation, and then calls the ToUInt32 method. Instead of throwing an exception, the method displays the message, "0x80000000 converts to 2147483648."  
  
 [!code-vb[System.Convert.BaseConversion#13](~/add/codesnippet/visualbasic/m-system.convert.touint3_11_1.vb)]
 [!code-cs[System.Convert.BaseConversion#13](~/add/codesnippet/csharp/m-system.convert.touint3_11_1.cs)]  
  
 When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt32> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <xref:System.UInt32> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.  
  
 [!code-vb[System.Convert.BaseConversion#14](~/add/codesnippet/visualbasic/m-system.convert.touint3_11_2.vb)]
 [!code-cs[System.Convert.BaseConversion#14](~/add/codesnippet/csharp/m-system.convert.touint3_11_2.cs)]  
  
   
  
## Examples  
 The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned integer.  
  
 [!code-cs[System.Convert.ToUInt32#16](~/add/codesnippet/csharp/m-system.convert.touint3_11_3.cs)]
 [!code-vb[System.Convert.ToUInt32#16](~/add/codesnippet/visualbasic/m-system.convert.touint3_11_3.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="fromBase" /> is not 2, 8, 10, or 16.  
  
 -or-  
  
 <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> is <see cref="T:System.String" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.  
  
 -or-  
  
 <paramref name="value" /> represents a number that is less than <see cref="T:System.UInt32" /> or greater than <see cref="T:System.UInt32" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">The Boolean value to convert.</param>
        <summary>Converts the specified Boolean value to the equivalent 64-bit unsigned integer.</summary>
        <returns>The number 1 if <paramref name="value" /> is <see langword="true" />; otherwise, 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts Boolean `true` and `false` values to unsigned long integers.  
  
 [!code-cs[System.Convert.ToUInt64#1](~/add/codesnippet/csharp/m-system.convert.touint6_5_1.cs)]
 [!code-vb[System.Convert.ToUInt64#1](~/add/codesnippet/visualbasic/m-system.convert.touint6_5_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(unsigned int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 8-bit unsigned integer to the equivalent 64-bit unsigned integer.</summary>
        <returns>A 64-bit signed integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in a byte array to an unsigned long integer.  
  
 [!code-cs[System.Convert.ToUInt64#2](~/add/codesnippet/csharp/m-system.convert.touint6_0_1.cs)]
 [!code-vb[System.Convert.ToUInt64#2](~/add/codesnippet/visualbasic/m-system.convert.touint6_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (char value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(char value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="value">The Unicode character to convert.</param>
        <summary>Converts the value of the specified Unicode character to the equivalent 64-bit unsigned integer.</summary>
        <returns>A 64-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in a character array to an unsigned long integer.  
  
 [!code-cs[System.Convert.ToUInt64#3](~/add/codesnippet/csharp/m-system.convert.touint6_11_1.cs)]
 [!code-vb[System.Convert.ToUInt64#3](~/add/codesnippet/visualbasic/m-system.convert.touint6_11_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(valuetype System.DateTime value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">The date and time value to convert.</param>
        <summary>Calling this method always throws <see cref="T:System.InvalidCastException" />.</summary>
        <returns>This conversion is not supported. No value is returned.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidCastException">This conversion is not supported.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(valuetype System.Decimal value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">The decimal number to convert.</param>
        <summary>Converts the value of the specified decimal number to an equivalent 64-bit unsigned integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 64-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of <xref:System.Decimal> values to an unsigned long integer.  
  
 [!code-cs[System.Convert.ToUInt64#4](~/add/codesnippet/csharp/m-system.convert.touint6_12_1.cs)]
 [!code-vb[System.Convert.ToUInt64#4](~/add/codesnippet/visualbasic/m-system.convert.touint6_12_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than zero or greater than <see cref="T:System.UInt64" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(float64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">The double-precision floating-point number to convert.</param>
        <summary>Converts the value of the specified double-precision floating-point number to an equivalent 64-bit unsigned integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 64-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of <xref:System.Double> values to an unsigned long integer.  
  
 [!code-cs[System.Convert.ToUInt64#5](~/add/codesnippet/csharp/m-system.convert.touint6_8_1.cs)]
 [!code-vb[System.Convert.ToUInt64#5](~/add/codesnippet/visualbasic/m-system.convert.touint6_8_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than zero or greater than <see cref="T:System.UInt64" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (short value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 16-bit signed integer to the equivalent 64-bit unsigned integer.</summary>
        <returns>A 64-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of 16-bit integers to an unsigned long integer.  
  
 [!code-cs[System.Convert.ToUInt64#6](~/add/codesnippet/csharp/m-system.convert.touint6_7_1.cs)]
 [!code-vb[System.Convert.ToUInt64#6](~/add/codesnippet/visualbasic/m-system.convert.touint6_7_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than zero.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 32-bit signed integer to an equivalent 64-bit unsigned integer.</summary>
        <returns>A 64-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of integers to an unsigned long integer.  
  
 [!code-cs[System.Convert.ToUInt64#7](~/add/codesnippet/csharp/m-system.convert.touint6_6_1.cs)]
 [!code-vb[System.Convert.ToUInt64#7](~/add/codesnippet/visualbasic/m-system.convert.touint6_6_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than zero.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 64-bit signed integer to an equivalent 64-bit unsigned integer.</summary>
        <returns>A 64-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of long integers to an unsigned long integer.  
  
 [!code-cs[System.Convert.ToUInt64#8](~/add/codesnippet/csharp/m-system.convert.touint6_14_1.cs)]
 [!code-vb[System.Convert.ToUInt64#8](~/add/codesnippet/visualbasic/m-system.convert.touint6_14_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than zero.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface, or <see langword="null" />.</param>
        <summary>Converts the value of the specified object to a 64-bit unsigned integer.</summary>
        <returns>A 64-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking the <xref:System.IConvertible.ToUInt64%2A?displayProperty=fullName> method of the underlying type of `value`.  
  
   
  
## Examples  
 The following example attempts to convert each element in an object array to an unsigned long integer.  
  
 [!code-cs[System.Convert.ToUInt64#9](~/add/codesnippet/csharp/m-system.convert.touint6_1_1.cs)]
 [!code-vb[System.Convert.ToUInt64#9](~/add/codesnippet/visualbasic/m-system.convert.touint6_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in an appropriate format.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.  
  
 -or-  
  
 The conversion is not supported.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="value">The 8-bit signed integer to convert.</param>
        <summary>Converts the value of the specified 8-bit signed integer to the equivalent 64-bit unsigned integer.</summary>
        <returns>A 64-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in a signed byte array to an unsigned long integer.  
  
 [!code-cs[System.Convert.ToUInt64#10](~/add/codesnippet/csharp/m-system.convert.touint6_10_1.cs)]
 [!code-vb[System.Convert.ToUInt64#10](~/add/codesnippet/visualbasic/m-system.convert.touint6_10_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than zero.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The single-precision floating-point number to convert.</param>
        <summary>Converts the value of the specified single-precision floating-point number to an equivalent 64-bit unsigned integer.</summary>
        <returns>
          <paramref name="value" />, rounded to the nearest 64-bit unsigned integer. If <paramref name="value" /> is halfway between two whole numbers, the even number is returned; that is, 4.5 is converted to 4, and 5.5 is converted to 6.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example attempts to convert each element in an array of <xref:System.Single> values to an unsigned long integer. The output shows that fractional values are rounded before the conversion is performed.  
  
 [!code-cs[System.Convert.ToUInt64#11](~/add/codesnippet/csharp/m-system.convert.touint6_4_1.cs)]
 [!code-vb[System.Convert.ToUInt64#11](~/add/codesnippet/visualbasic/m-system.convert.touint6_4_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> is less than zero or greater than <see cref="T:System.UInt64" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(string value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <summary>Converts the specified string representation of a number to an equivalent 64-bit unsigned integer.</summary>
        <returns>A 64-bit signed integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Using the <xref:System.Convert.ToInt64%28System.String%29> method is equivalent to passing `value` to the <xref:System.Int64.Parse%28System.String%29?displayProperty=fullName> method. `value` is interpreted by using the formatting conventions of the current thread culture.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example interprets the elements of a string array as numeric strings and attempts to convert them to unsigned long integers.  
  
 [!code-cs[System.Convert.ToUInt64#12](~/add/codesnippet/csharp/m-system.convert.touint6_9_1.cs)]
 [!code-vb[System.Convert.ToUInt64#12](~/add/codesnippet/visualbasic/m-system.convert.touint6_9_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="T:System.UInt64" /> or greater than <see cref="T:System.UInt64" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(unsigned int16 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">The 16-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 16-bit unsigned integer to the equivalent 64-bit unsigned integer.</summary>
        <returns>A 64-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an array of unsigned 16-bit integers to an unsigned long integer.  
  
 [!code-cs[System.Convert.ToUInt64#13](~/add/codesnippet/csharp/m-system.convert.touint6_16_1.cs)]
 [!code-vb[System.Convert.ToUInt64#13](~/add/codesnippet/visualbasic/m-system.convert.touint6_16_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(unsigned int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">The 32-bit unsigned integer to convert.</param>
        <summary>Converts the value of the specified 32-bit unsigned integer to an equivalent 64-bit unsigned integer.</summary>
        <returns>A 64-bit unsigned integer that is equivalent to <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 The following example converts each element in an unsigned integer array to an unsigned long integer.  
  
 [!code-cs[System.Convert.ToUInt64#14](~/add/codesnippet/csharp/m-system.convert.touint6_15_1.cs)]
 [!code-vb[System.Convert.ToUInt64#14](~/add/codesnippet/visualbasic/m-system.convert.touint6_15_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(unsigned int64 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">The 64-bit unsigned integer to return.</param>
        <summary>Returns the specified 64-bit unsigned integer; no actual conversion is performed.</summary>
        <returns>
          <paramref name="value" /> is returned unchanged.</returns>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (object value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(object value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">An object that implements the <see cref="T:System.IConvertible" /> interface.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the value of the specified object to a 64-bit unsigned integer, using the specified culture-specific formatting information.</summary>
        <returns>A 64-bit unsigned integer that is equivalent to <paramref name="value" />, or zero if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking the <xref:System.IConvertible.ToUInt64%2A?displayProperty=fullName> method of the underlying type of `value`.  
  
 `provider` enables the user to specify culture-specific conversion information about the contents of `value`. For example, if `value` is a <xref:System.String> that represents a number, `provider` could supply culture-specific information about the notation used to represent that number.  
  
 The base types ignore `provider`; however, the parameter may be used if `value` is a user-defined type that implements the <xref:System.IConvertible> interface.  
  
   
  
## Examples  
 The following example defines a `HexString` class that implements the <xref:System.IConvertible> interface and that is designed to hold the string representation of both 64-bit signed and 64-bit unsigned values. The class includes a `Sign` property that indicates the sign of its hexadecimal value.  
  
 [!code-cs[System.Convert.ToUInt64#17](~/add/codesnippet/csharp/m-system.convert.touint6_2_1.cs)]
 [!code-vb[System.Convert.ToUInt64#17](~/add/codesnippet/visualbasic/m-system.convert.touint6_2_1.vb)]  
  
 The following example shows that a call to the ToUInt64 method that passes a `HexString` object as a parameter, in turn, calls the <xref:System.IConvertible.ToUInt64%2A?displayProperty=fullName> implementation of the `HexString` class.  
  
 [!code-cs[System.Convert.ToUInt64#18](~/add/codesnippet/csharp/m-system.convert.touint6_2_2.cs)]
 [!code-vb[System.Convert.ToUInt64#18](~/add/codesnippet/visualbasic/m-system.convert.touint6_2_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> is not in an appropriate format.</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="value" /> does not implement the <see cref="T:System.IConvertible" /> interface.  
  
 -or-  
  
 The conversion is not supported.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (string value, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(string value, class System.IFormatProvider provider) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <param name="provider">An object that supplies culture-specific formatting information.</param>
        <summary>Converts the specified string representation of a number to an equivalent 64-bit unsigned integer, using the specified culture-specific formatting information.</summary>
        <returns>A 64-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The return value is the result of invoking <xref:System.UInt64.Parse%2A?displayProperty=fullName> on `value`.  
  
 `provider` is an <xref:System.IFormatProvider> implementation that obtains a <xref:System.Globalization.NumberFormatInfo> object. The <xref:System.Globalization.NumberFormatInfo> object provides culture-specific information about the format of `value`. If `provider` is `null`, the <xref:System.Globalization.NumberFormatInfo> object for the current culture is used.  
  
 If you prefer not to handle an exception if the conversion fails, you can call the <xref:System.UInt64.TryParse%2A?displayProperty=fullName> method instead. It returns a <xref:System.Boolean> value that indicates whether the conversion succeeded or failed.  
  
   
  
## Examples  
 The following example defines a custom <xref:System.Globalization.NumberFormatInfo> object that recognizes the string "pos" as the positive sign and the string "neg" as the negative sign. It then attempts to convert each element of a numeric string array to an unsigned long integer. The conversion uses both the custom provider and the <xref:System.Globalization.NumberFormatInfo> provider for the invariant culture.  
  
 [!code-cs[System.Convert.ToUInt64#15](~/add/codesnippet/csharp/m-system.convert.touint6_3_1.cs)]
 [!code-vb[System.Convert.ToUInt64#15](~/add/codesnippet/visualbasic/m-system.convert.touint6_3_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> does not consist of an optional sign followed by a sequence of digits (0 through 9).</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> represents a number that is less than <see cref="T:System.UInt64" /> or greater than <see cref="T:System.UInt64" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ToUInt64">
      <MemberSignature Language="C#" Value="public static ulong ToUInt64 (string value, int fromBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int64 ToUInt64(string value, int32 fromBase) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="fromBase" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">A string that contains the number to convert.</param>
        <param name="fromBase">The base of the number in `value`, which must be 2, 8, 10, or 16.</param>
        <summary>Converts the string representation of a number in a specified base to an equivalent 64-bit unsigned integer.</summary>
        <returns>A 64-bit unsigned integer that is equivalent to the number in <paramref name="value" />, or 0 (zero) if <paramref name="value" /> is <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `fromBase` is 16, you can prefix the number specified by the `value` parameter with "0x" or "0X".  
  
 Because the <xref:System.UInt64> data type supports unsigned values only, the ToUInt64 method assumes that `value` is expressed using unsigned binary representation. In other words, all 64 bits are used to represent the numeric value, and a sign bit is absent. As a result, it is possible to write code in which a signed long integer value that is out of the range of the <xref:System.UInt64> data type is converted to a <xref:System.UInt64> value without the method throwing an exception. The following example converts <xref:System.Int64.MinValue> to its hexadecimal string representation, and then calls the ToUInt64 method. Instead of throwing an exception, the method displays the message, "0x8000000000000000 converts to 9223372036854775808."  
  
 [!code-vb[System.Convert.BaseConversion#15](~/add/codesnippet/visualbasic/m-system.convert.touint6_13_1.vb)]
 [!code-cs[System.Convert.BaseConversion#15](~/add/codesnippet/csharp/m-system.convert.touint6_13_1.cs)]  
  
 When performing binary operations or numeric conversions, it is always the responsibility of the developer to verify that a method or operator is using the appropriate numeric representation to interpret a particular value. The following example illustrates one technique for ensuring that the method does not inappropriately use binary representation to interpret a value that uses two's complement representation when converting a hexadecimal string to a <xref:System.UInt64> value. The example determines whether a value represents a signed or an unsigned integer while it is converting that value to its string representation. When the example converts the value to a <xref:System.UInt64> value, it checks whether the original value was a signed integer. If so, and if its high-order bit is set (which indicates that the original value was negative), the method throws an exception.  
  
 [!code-vb[System.Convert.BaseConversion#16](~/add/codesnippet/visualbasic/m-system.convert.touint6_13_2.vb)]
 [!code-cs[System.Convert.BaseConversion#16](~/add/codesnippet/csharp/m-system.convert.touint6_13_2.cs)]  
  
   
  
## Examples  
 The following example attempts to interpret each element in an array of numeric strings as a hexadecimal value and to convert it to an unsigned long integer.  
  
 [!code-cs[System.Convert.ToUInt64#16](~/add/codesnippet/csharp/m-system.convert.touint6_13_3.cs)]
 [!code-vb[System.Convert.ToUInt64#16](~/add/codesnippet/visualbasic/m-system.convert.touint6_13_3.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="fromBase" /> is not 2, 8, 10, or 16.  
  
 -or-  
  
 <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> is <see cref="T:System.String" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="value" /> contains a character that is not a valid digit in the base specified by <paramref name="fromBase" />. The exception message indicates that there are no digits to convert if the first character in <paramref name="value" /> is invalid; otherwise, the message indicates that <paramref name="value" /> contains invalid trailing characters.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="value" />, which represents a non-base 10 unsigned number, is prefixed with a negative sign.  
  
 -or-  
  
 <paramref name="value" /> represents a number that is less than <see cref="T:System.UInt64" /> or greater than <see cref="T:System.UInt64" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>