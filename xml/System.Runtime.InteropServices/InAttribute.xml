<Type Name="InAttribute" FullName="System.Runtime.InteropServices.InAttribute">
  <TypeSignature Language="C#" Value="public sealed class InAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InAttribute extends System.Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Parameter, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Indicates that data should be marshaled from the caller to the callee, but not back to the caller.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can apply this attribute to parameters.  
  
 The InAttribute is optional. The attribute is supported for COM interop and platform invoke only. In the absence of explicit settings, the interop marshaler assumes rules based on the parameter type, whether the parameter is passed by reference or by value, and whether the type is blittable or non-blittable. For example, the <xref:System.Text.StringBuilder> class is always assumed to be In/Out and an array of strings passed by value is assumed to be In.  
  
 You cannot apply the InAttribute to a parameter modified with the C#-styled `out` keyword. To avoid confusing the `In` keyword in Visual Basic with the InAttribute, minus Attribute, use the `<[In]>` form with brackets around the attribute.  
  
 Combining the InAttribute and <xref:System.Runtime.InteropServices.OutAttribute> is particularly useful when applied to arrays and formatted, non-blittable types. Callers see the changes a callee makes to these types only when you apply both attributes. Since these types require copying during marshaling, you can use InAttribute and <xref:System.Runtime.InteropServices.OutAttribute> to reduce unnecessary copies.  
  
 For more information on the effect of InAttribute on marshaling behavior, see [Directional Attributes](http://msdn.microsoft.com/en-us/241ac5b5-928e-4969-8f58-1dbc048f9ea2).  
  
   
  
## Examples  
 The following example shows how to apply the InAttribute and <xref:System.Runtime.InteropServices.OutAttribute> to a platform invoke prototype that passes an array as a parameter. The combination of directional attributes allows the caller to see the changes made by the callee.  
  
 [!code-cpp[Interop InOutParameters#1](~/add/codesnippet/cpp/t-system.runtime.interop_16_1.cpp)]
 [!code-cs[Interop InOutParameters#1](~/add/codesnippet/csharp/t-system.runtime.interop_16_1.cs)]
 [!code-vb[Interop InOutParameters#1](~/add/codesnippet/visualbasic/t-system.runtime.interop_16_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.InAttribute" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>