<Type Name="ContractArgumentValidatorAttribute" FullName="System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
  <TypeSignature Language="C#" Value="public sealed class ContractArgumentValidatorAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ContractArgumentValidatorAttribute extends System.Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.Conditional("CONTRACTS_FULL")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Enables the factoring of legacy <see langword="if-then-throw" /> code into separate methods for reuse, and provides full control over thrown exceptions and arguments.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If your code uses explicit `if-then-throw` code to validate parameters, you may be employing helper methods that perform checks and throw particular exceptions on failure, as shown in the following example.  
  
 [!code-cs[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#1](~/add/codesnippet/csharp/t-system.diagnostics.con_3_1.cs)]
 [!code-vb[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#1](~/add/codesnippet/visualbasic/t-system.diagnostics.con_3_1.vb)]  
  
 In this example, `Execute` has an elective precondition specifying that the parameter value should not be `null`. To enable the contract tools to recognize that the call to `ValidationHelper.NotNull` represents a contract, you can mark the called method with the  ContractArgumentValidatorAttribute attribute. The <xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A?displayProperty=fullName> method call should be used to enable the tools to extract the proper specifications for document generation and static checking, as follows.  
  
 [!code-cs[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#2](~/add/codesnippet/csharp/t-system.diagnostics.con_3_2.cs)]
 [!code-vb[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#2](~/add/codesnippet/visualbasic/t-system.diagnostics.con_3_2.vb)]  
  
 In addition to `if-then-throw` statements, the contract section of contract validator methods may contain calls to other contract validator methods. However, no other contracts (such as <xref:System.Diagnostics.Contracts.Contract.Requires%2A?displayProperty=fullName>, or <xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=fullName>) are allowed. Code that follows the <xref:System.Diagnostics.Contracts.Contract.EndContractBlock%2A?displayProperty=fullName> call is ignored by all contract tools.  
  
 The following example shows a range argument validator written in terms of an existing `NotNull` validator method.  
  
 [!code-cs[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#3](~/add/codesnippet/csharp/t-system.diagnostics.con_3_3.cs)]
 [!code-vb[System.Diagnostics.Contracts.ContractArgumentValidatorAttribute#3](~/add/codesnippet/visualbasic/t-system.diagnostics.con_3_3.vb)]  
  
 From a specification point of view, the `Execute` method has the following three contracts:  
  
```  
Contract.Requires<ArgumentNullException>(data != null);  
Contract.Requires<ArgumentOutOfRangeException>(position >= 0);  
Contract.Requires<ArgumentOutOfRangeException>(position < data.Length);  
  
```  
  
 In standard methods, calls to contract validator methods can be freely mixed with other contracts such as <xref:System.Diagnostics.Contracts.Contract.Ensures%2A?displayProperty=fullName> or <xref:System.Diagnostics.Contracts.Contract.Requires%2A?displayProperty=fullName>.  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContractArgumentValidatorAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>