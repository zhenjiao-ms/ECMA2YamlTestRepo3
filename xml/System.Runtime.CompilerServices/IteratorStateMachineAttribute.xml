<Type Name="IteratorStateMachineAttribute" FullName="System.Runtime.CompilerServices.IteratorStateMachineAttribute">
  <TypeSignature Language="C#" Value="public sealed class IteratorStateMachineAttribute : System.Runtime.CompilerServices.StateMachineAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit IteratorStateMachineAttribute extends System.Runtime.CompilerServices.StateMachineAttribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.CompilerServices.StateMachineAttribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=false, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Indicates whether a method in Visual Basic is marked with the <see langword="Iterator" /> modifier.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You shouldn't apply the `IteratorStateMachine` attribute to methods in your code. For methods in Visual Basic that have the [Iterator](../Topic/Iterator%20\(Visual%20Basic\).md) modifier, the compiler will apply the `IteratorStateMachine` attribute in the IL that it emits.  
  
 When a method (*MethodName*) in Visual Basic has the `Iterator` modifier, the compiler emits IL that includes a state machine structure. That structure contains the code in the method. That IL also contains a stub method (*MethodName*) that calls into the state machine. The compiler adds the `IteratorStateMachine` attribute to the stub method so that tools can identify the corresponding state machine. Details of the emitted IL might change in future releases of the compilers.  
  
 An iterator method performs a custom iteration over a collection by using the `Yield` (Visual Basic) statement to return each element one at a time. For more information, see [Iterators](../Topic/Iterators%20\(C%23%20and%20Visual%20Basic\).md).  
  
> [!NOTE]
>  You can't use `IteratorStateMachineAttribute` to test whether a method is an iterator method in C#.  
  
   
  
## Examples  
 The following example shows how to determine whether a method is an iterator method. In the example, `IsIteratorMethod` performs the following steps:  
  
-   Obtains a <xref:System.Reflection.MethodInfo> object for the method name by using <xref:System.Type.GetMethod%2A?displayProperty=fullName>.  
  
-   Obtains a <xref:System.Type> object for the attribute by using [GetType Operator](../Topic/GetType%20Operator%20\(Visual%20Basic\).md).  
  
-   Obtains an attribute object for the method and attribute type by using `MethodInfo.GetCustomAttribute`. If `GetCustomAttribute` returns `Nothing` (Visual Basic), the method doesn't contain the attribute.  
  
 [!code-vb[Runtime.CompilerServices.AsyncStateMachineAttribute#2](~/add/codesnippet/visualbasic/t-system.runtime.compile_10_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IteratorStateMachineAttribute (Type stateMachineType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type stateMachineType) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stateMachineType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="stateMachineType">The type object for the underlying state machine type that's used to implement a state machine method.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.IteratorStateMachineAttribute" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>