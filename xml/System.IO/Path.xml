<Type Name="Path" FullName="System.IO.Path">
  <TypeSignature Language="C#" Value="public static class Path" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Path extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Performs operations on <see cref="T:System.String" /> instances that contain file or directory path information. These operations are performed in a cross-platform manner.  
  
 To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/path.cs#090eca8621a248ee).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/io/path.cs#090eca8621a248ee). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  
  
 The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\\\.\PHYSICALDRIVE0 ".  
  
 A path is a string that provides the location of a file or directory. A path does not necessarily point to a location on disk; for example, a path might map to a location in memory or on a device. The exact format of a path is determined by the current platform. For example, on some systems, a path can start with a drive or volume letter, while this element is not present in other systems. On some systems, file paths can contain extensions, which indicate the type of information stored in the file. The format of a file name extension is platform-dependent; for example, some systems limit extensions to three characters, and others do not. The current platform also determines the set of characters used to separate the elements of a path, and the set of characters that cannot be used when specifying paths. Because of these differences, the fields of the `Path` class as well as the exact behavior of some members of the `Path` class are platform-dependent.  
  
 A path can contain absolute or relative location information. Absolute paths fully specify a location: the file or directory can be uniquely identified regardless of the current location. Relative paths specify a partial location: the current location is used as the starting point when locating a file specified with a relative path. To determine the current directory, call <xref:System.IO.Directory.GetCurrentDirectory%2A?displayProperty=fullName>.  
  
 Most members of the `Path` class do not interact with the file system and do not verify the existence of the file specified by a path string. `Path` class members that modify a path string, such as <xref:System.IO.Path.ChangeExtension%2A>, have no effect on names of files in the file system. `Path` members do, however, validate the contents of a specified path string, and throw an <xref:System.ArgumentException> exception if the string contains characters that are not valid in path strings, as defined in the characters returned from the <xref:System.IO.Path.GetInvalidPathChars%2A> method. For example, on Windows-based desktop platforms, invalid path characters might include quote ("), less than (\<), greater than (>), pipe (&#124;), backspace (\b), null (\0), and Unicode characters 16 through 18 and 20 through 25.  
  
 The members of the `Path` class enable you to quickly and easily perform common operations such as determining whether a file name extension is part of a path, and combining two strings into one path name.  
  
 All members of the `Path` class are static and can therefore be called without having an instance of a path.  
  
> [!NOTE]
>  In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, "c:\temp c:\windows" also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.  
  
 In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths:  
  
-   "c:\\\MyDir\\\MyFile.txt" in C#, or "c:\MyDir\MyFile.txt" in Visual Basic.  
  
-   "c:\\\MyDir" in C#, or "c:\MyDir" in Visual Basic.  
  
-   "MyDir\\\MySubdir" in C#, or "MyDir\MySubDir" in Visual Basic.  
  
-   "\\\\\\\MyServer\\\MyShare" in C#, or "\\\MyServer\MyShare" in Visual Basic.  
  
 Because all these operations are performed on strings, it is impossible to verify that the results are valid in all scenarios. For example, the <xref:System.IO.Path.GetExtension%2A> method parses a string that you pass to it and returns the extension from that string. However, this does not mean that a file with that extension exists on the disk.  
  
 For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md).  
  
   
  
## Examples  
 The following code example demonstrates some of the main members of the `Path` class.  
  
 [!code-cs[path class#1](~/add/codesnippet/csharp/t-system.io.path_1.cs)]
 [!code-vb[path class#1](~/add/codesnippet/visualbasic/t-system.io.path_1.vb)]
 [!code-cpp[path class#1](~/add/codesnippet/cpp/t-system.io.path_1.cpp)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName="AltDirectorySeparatorChar">
      <MemberSignature Language="C#" Value="public static readonly char AltDirectorySeparatorChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char AltDirectorySeparatorChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The character stored in this field cannot be in <xref:System.IO.Path.InvalidPathChars>. This field can be set to the same value as <xref:System.IO.Path.DirectorySeparatorChar>. `AltDirectorySeparatorChar` and `DirectorySeparatorChar` are both valid for separating directory levels in a path string.  
  
 The value of this field is a backslash ('\\') on UNIX, and a slash ('/') on Windows and Macintosh operating systems.  
  
   
  
## Examples  
 The following code example demonstrates a use of the `AltDirectorySeparatorChar` field.  
  
 [!code-vb[System.IO.Path Members#13](~/add/codesnippet/visualbasic/f-system.io.path.altdire_1.vb)]
 [!code-cpp[System.IO.Path Members#13](~/add/codesnippet/cpp/f-system.io.path.altdire_1.cpp)]
 [!code-cs[System.IO.Path Members#13](~/add/codesnippet/csharp/f-system.io.path.altdire_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="ChangeExtension">
      <MemberSignature Language="C#" Value="public static string ChangeExtension (string path, string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string ChangeExtension(string path, string extension) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="extension" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path information to modify. The path cannot contain any of the characters defined in &lt;xref:System.IO.Path.GetInvalidPathChars%2A&gt;.</param>
        <param name="extension">The new extension (with or without a leading period). Specify <see langword="null" /> to remove an existing extension from `path`.</param>
        <summary>Changes the extension of a path string.</summary>
        <returns>The modified path information.  
  
 On Windows-based desktop platforms, if <paramref name="path" /> is <see langword="null" /> or an empty string (""), the path information is returned unmodified. If <paramref name="extension" /> is <see langword="null" />, the returned string contains the specified path with its extension removed. If <paramref name="path" /> has no extension, and <paramref name="extension" /> is not <see langword="null" />, the returned path string contains <paramref name="extension" /> appended to the end of <paramref name="path" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If neither `path` nor `extension` contains a period (.), `ChangeExtension` adds the period.  
  
 The `extension` parameter can contain multiple periods and any valid path characters, and can be any length. If `extension` is `null`, the returned string contains the contents of `path` with the last period and all characters following it removed.  
  
 If `extension` is an empty string, the returned path string contains the contents of `path` with any characters following the last period removed.  
  
 If `path` does not have an extension and `extension` is not `null`, the returned string contains `path` followed by `extension`.  
  
 If `extension` is not `null` and does not contain a leading period, the period is added.  
  
 If `path` contains a multiple extension separated by multiple periods, the returned string contains the contents of `path` with the last period and all characters following it replaced by `extension`. For example, if `path` is "\Dir1\examples\pathtests.csx.txt" and `extension` is "cs", the modified path is "\Dir1\examples\pathtests.csx.cs".  
  
 It is not possible to verify that the returned results are valid in all scenarios. For example, if `path` is empty, `extension` is appended.  
  
 For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md).  
  
   
  
## Examples  
 The following code example demonstrates a use of the `ChangeExtension` method.  
  
 [!code-vb[System.IO.Path Members#1](~/add/codesnippet/visualbasic/m-system.io.path.changee_1.vb)]
 [!code-cpp[System.IO.Path Members#1](~/add/codesnippet/cpp/m-system.io.path.changee_1.cpp)]
 [!code-cs[System.IO.Path Members#1](~/add/codesnippet/csharp/m-system.io.path.changee_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> contains one or more of the invalid characters defined in &lt;xref:System.IO.Path.GetInvalidPathChars%2A&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (string[] paths);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string[] paths) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paths" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="paths">An array of parts of the path.</param>
        <summary>Combines an array of strings into a path.</summary>
        <returns>The combined paths.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `paths` should be an array of the parts of the path to combine. If the one of the subsequent paths is an absolute path, then the combine operation resets starting with that absolute path, discarding all previous combined paths.  
  
 Zero-length strings are omitted from the combined path.  
  
 The parameters are not parsed if they have white space.  
  
 Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters. For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string. It is therefore successfully interpreted by the `Combine` method.  
  
   
  
## Examples  
 The following example combines an array of strings into a path.  
  
 [!code-vb[System.IO.Path.Combine#3](~/add/codesnippet/visualbasic/m-system.io.path.combine_1_1.vb)]
 [!code-cs[System.IO.Path.Combine#3](~/add/codesnippet/csharp/m-system.io.path.combine_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">One of the strings in the array contains one or more of the invalid characters defined in &lt;xref:System.IO.Path.GetInvalidPathChars%2A&gt;.</exception>
        <exception cref="T:System.ArgumentNullException">One of the strings in the array is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (string path1, string path2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string path1, string path2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" />
        <Parameter Name="path2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path1">The first path to combine.</param>
        <param name="path2">The second path to combine.</param>
        <summary>Combines two strings into a path.</summary>
        <returns>The combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If <paramref name="path2" /> contains an absolute path, this method returns <paramref name="path2" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If `path1` is not a drive reference (that is, "C:" or "D:") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` before concatenation.  
  
 If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character. If `path2` includes a root, `path2` is returned.  
  
 The parameters are not parsed if they have white space. Therefore, if `path2` includes white space (for example, " \file.txt "), the Combine method appends `path2` to `path1` instead of returning only `path2`.  
  
 Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters. For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string. It is therefore successfully interpreted by the `Combine` method.  
  
 For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md).  
  
   
  
## Examples  
 The following code example demonstrates using the `Combine` method on a Windows-based desktop platform.  
  
 [!code-cpp[pathcombine#1](~/add/codesnippet/cpp/m-system.io.path.combine_0_1.cpp)]
 [!code-cs[pathcombine#1](~/add/codesnippet/csharp/m-system.io.path.combine_0_1.cs)]
 [!code-vb[pathcombine#1](~/add/codesnippet/visualbasic/m-system.io.path.combine_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path1" /> or <paramref name="path2" /> contains one or more of the invalid characters defined in &lt;xref:System.IO.Path.GetInvalidPathChars%2A&gt;.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path1" /> or <paramref name="path2" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (string path1, string path2, string path3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string path1, string path2, string path3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" />
        <Parameter Name="path2" Type="System.String" />
        <Parameter Name="path3" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path1">The first path to combine.</param>
        <param name="path2">The second path to combine.</param>
        <param name="path3">The third path to combine.</param>
        <summary>Combines three strings into a path.</summary>
        <returns>The combined paths.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path1` should be an absolute path (for example, "d:\archives" or "\\\archives\public"). If `path2` or `path3` is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path.  
  
 Zero-length strings are omitted from the combined path.  
  
 If `path1` is not a drive reference (that is, "C:" or "D:") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` before concatenation.  
  
 If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character. If `path2` includes a root, `path2` is returned.  
  
 The parameters are not parsed if they have white space. Therefore, if `path2` includes white space (for example, " \file.txt "), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1`.  
  
 Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters. For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string. It is therefore successfully interpreted by the `Combine` method.  
  
   
  
## Examples  
 The following example combines three paths.  
  
 [!code-vb[System.IO.Path.Combine#1](~/add/codesnippet/visualbasic/m-system.io.path.combine_2_1.vb)]
 [!code-cs[System.IO.Path.Combine#1](~/add/codesnippet/csharp/m-system.io.path.combine_2_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path1" />, <paramref name="path2" />, or <paramref name="path3" /> contains one or more of the invalid characters defined in &lt;xref:System.IO.Path.GetInvalidPathChars%2A&gt;.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path1" />, <paramref name="path2" />, or <paramref name="path3" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Combine">
      <MemberSignature Language="C#" Value="public static string Combine (string path1, string path2, string path3, string path4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Combine(string path1, string path2, string path3, string path4) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path1" Type="System.String" />
        <Parameter Name="path2" Type="System.String" />
        <Parameter Name="path3" Type="System.String" />
        <Parameter Name="path4" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path1">The first path to combine.</param>
        <param name="path2">The second path to combine.</param>
        <param name="path3">The third path to combine.</param>
        <param name="path4">The fourth path to combine.</param>
        <summary>Combines four strings into a path.</summary>
        <returns>The combined paths.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `path1` should be an absolute path (for example, "d:\archives" or "\\\archives\public").If one of the subsequent paths is also an absolute path, the combine operation discards all previously combined paths and resets to that absolute path.  
  
 Zero-length strings are omitted from the combined path.  
  
 If `path1` is not a drive reference (that is, "C:" or "D:") and does not end with a valid separator character as defined in <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar>, <xref:System.IO.Path.DirectorySeparatorChar> is appended to `path1` before concatenation.  
  
 If `path2` does not include a root (for example, if `path2` does not start with a separator character or a drive specification), the result is a concatenation of the two paths, with an intervening separator character. If `path2` includes a root, `path2` is returned.  
  
 The parameters are not parsed if they have white space. Therefore, if `path2` includes white space (for example, " \file.txt "), the <xref:System.IO.Path.Combine%2A> method appends `path2` to `path1`.  
  
 Not all invalid characters for directory and file names are interpreted as unacceptable by the `Combine` method, because you can use these characters for search wildcard characters. For example, while `Path.Combine("c:\\", "*.txt")` might be invalid if you were to create a file from it, it is valid as a search string. It is therefore successfully interpreted by the `Combine` method.  
  
   
  
## Examples  
 The following example combines four paths.  
  
 [!code-vb[System.IO.Path.Combine#2](~/add/codesnippet/visualbasic/b2d94758-4325-451d-879a-_1.vb)]
 [!code-cs[System.IO.Path.Combine#2](~/add/codesnippet/csharp/b2d94758-4325-451d-879a-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" />, or <paramref name="path4" /> contains one or more of the invalid characters defined in &lt;xref:System.IO.Path.GetInvalidPathChars%2A&gt;.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path1" />, <paramref name="path2" />, <paramref name="path3" />, or <paramref name="path4" /> is <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="DirectorySeparatorChar">
      <MemberSignature Language="C#" Value="public static readonly char DirectorySeparatorChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char DirectorySeparatorChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The character stored in this field cannot be in <xref:System.IO.Path.InvalidPathChars>. <xref:System.IO.Path.AltDirectorySeparatorChar> and `DirectorySeparatorChar` are both valid for separating directory levels in a path string.  
  
   
  
## Examples  
 The following code example demonstrates the use of the `DirectorySeparatorChar` field.  
  
 [!code-vb[System.IO.Path Members#13](~/add/codesnippet/visualbasic/f-system.io.path.directo_1.vb)]
 [!code-cpp[System.IO.Path Members#13](~/add/codesnippet/cpp/f-system.io.path.directo_1.cpp)]
 [!code-cs[System.IO.Path Members#13](~/add/codesnippet/csharp/f-system.io.path.directo_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetDirectoryName">
      <MemberSignature Language="C#" Value="public static string GetDirectoryName (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetDirectoryName(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of a file or directory.</param>
        <summary>Returns the directory information for the specified path string.</summary>
        <returns>Directory information for <paramref name="path" />, or <see langword="null" /> if <paramref name="path" /> denotes a root directory or is null. Returns <see cref="T:System.String" /> if <paramref name="path" /> does not contain directory information.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In most cases, the string returned by this method consists of all characters in the path up to but not including the last <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>. If the path consists of a root directory, such as "c:\\", null is returned. Note that this method does not support paths using "file:". Because the returned path does not include the <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar>, passing the returned path back into the GetDirectoryName method will result in the truncation of one folder level per subsequent call on the result string. For example, passing the path "C:\Directory\SubDirectory\test.txt" into the GetDirectoryName method will return "C:\Directory\SubDirectory". Passing that string, "C:\Directory\SubDirectory", into GetDirectoryName will result in "C:\Directory".  
  
 For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md).  
  
   
  
## Examples  
 The following code example demonstrates using the `GetDirectoryName` method on a Windows-based desktop platform.  
  
 [!code-vb[System.IO.Path Members#3](~/add/codesnippet/visualbasic/m-system.io.path.getdire_1.vb)]
 [!code-cpp[System.IO.Path Members#3](~/add/codesnippet/cpp/m-system.io.path.getdire_1.cpp)]
 [!code-cs[System.IO.Path Members#3](~/add/codesnippet/csharp/m-system.io.path.getdire_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">The <paramref name="path" /> parameter contains invalid characters, is empty, or contains only white spaces.</exception>
        <exception cref="T:System.IO.PathTooLongException">
          <block subset="none" type="note">  
 In the [.NET for Windows Store apps](http://go.microsoft.com/fwlink/?LinkID=247912) or the [Portable Class Library](../Topic/Cross-Platform%20Development%20with%20the%20Portable%20Class%20Library.md), catch the base class exception, <see cref="T:System.IO.IOException" />, instead.  
  
</block>  
  
 The <paramref name="path" /> parameter is longer than the system-defined maximum length.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetExtension">
      <MemberSignature Language="C#" Value="public static string GetExtension (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetExtension(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path string from which to get the extension.</param>
        <summary>Returns the extension of the specified path string.</summary>
        <returns>The extension of the specified path (including the period "."), or <see langword="null" />, or <see cref="T:System.String" />. If <paramref name="path" /> is <see langword="null" />, GetExtension returns <see langword="null" />. If <paramref name="path" /> does not have extension information, GetExtension returns <see cref="T:System.String" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The extension of `path` is obtained by searching `path` for a period (.), starting with the last character in path and continuing toward the start of path. If a period is found before a <xref:System.IO.Path.DirectorySeparatorChar> or <xref:System.IO.Path.AltDirectorySeparatorChar> character, the returned string contains the period and the characters after it; otherwise, <xref:System.String.Empty> is returned.  
  
 For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md).  
  
   
  
## Examples  
 The following code example demonstrates using the `GetExtension` method on a Windows-based desktop platform.  
  
 [!code-vb[System.IO.Path Members#4](~/add/codesnippet/visualbasic/m-system.io.path.getexte_1.vb)]
 [!code-cpp[System.IO.Path Members#4](~/add/codesnippet/cpp/m-system.io.path.getexte_1.cpp)]
 [!code-cs[System.IO.Path Members#4](~/add/codesnippet/csharp/m-system.io.path.getexte_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> contains one or more of the invalid characters defined in &lt;xref:System.IO.Path.GetInvalidPathChars%2A&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetFileName">
      <MemberSignature Language="C#" Value="public static string GetFileName (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFileName(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path string from which to obtain the file name and extension.</param>
        <summary>Returns the file name and extension of the specified path string.</summary>
        <returns>The characters after the last directory character in <paramref name="path" />. If the last character of <paramref name="path" /> is a directory or volume separator character, this method returns <see cref="T:System.String" />. If <paramref name="path" /> is <see langword="null" />, this method returns <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The returned value is `null` if the file path is `null`.  
  
 The separator characters used to determine the start of the file name are <xref:System.IO.Path.DirectorySeparatorChar> and <xref:System.IO.Path.AltDirectorySeparatorChar>.  
  
 For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md).  
  
   
  
## Examples  
 The following code example demonstrates the behavior of the `GetFileName` method on a Windows-based desktop platform.  
  
 [!code-vb[System.IO.Path Members#5](~/add/codesnippet/visualbasic/m-system.io.path.getfile_1_1.vb)]
 [!code-cpp[System.IO.Path Members#5](~/add/codesnippet/cpp/m-system.io.path.getfile_1_1.cpp)]
 [!code-cs[System.IO.Path Members#5](~/add/codesnippet/csharp/m-system.io.path.getfile_1_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> contains one or more of the invalid characters defined in &lt;xref:System.IO.Path.GetInvalidPathChars%2A&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetFileNameWithoutExtension">
      <MemberSignature Language="C#" Value="public static string GetFileNameWithoutExtension (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFileNameWithoutExtension(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path of the file.</param>
        <summary>Returns the file name of the specified path string without the extension.</summary>
        <returns>The string returned by &lt;xref:System.IO.Path.GetFileName%2A&gt;, minus the last period (.) and all characters following it.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method does not verify that the path or file name exists.  
  
 For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md).  
  
   
  
## Examples  
 The following code example demonstrates a use of the `GetFileNameWithoutExtension` method.  
  
 [!code-vb[System.IO.Path Members#6](~/add/codesnippet/visualbasic/m-system.io.path.getfile_0_1.vb)]
 [!code-cpp[System.IO.Path Members#6](~/add/codesnippet/cpp/m-system.io.path.getfile_0_1.cpp)]
 [!code-cs[System.IO.Path Members#6](~/add/codesnippet/csharp/m-system.io.path.getfile_0_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> contains one or more of the invalid characters defined in &lt;xref:System.IO.Path.GetInvalidPathChars%2A&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetFullPath">
      <MemberSignature Language="C#" Value="public static string GetFullPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFullPath(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The file or directory for which to obtain absolute path information.</param>
        <summary>Returns the absolute path for the specified path string.</summary>
        <returns>The fully qualified location of <paramref name="path" />, such as "C:\MyFile.txt".</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\\\.\PHYSICALDRIVE0 ".  
  
 The absolute path includes all information required to locate a file or directory on a system.  
  
 The file or directory specified by `path` is not required to exist. For example, if c:\temp\newdir is the current directory, calling `GetFullPath` on a file name such as test.txt returns c:\temp\newdir\test.txt. The file need not exist.  
  
 However, if `path` does exist, the caller must have permission to obtain path information for `path`. Note that unlike most members of the <xref:System.IO.Path> class, this method accesses the file system.  
  
 This method uses current directory and current volume information to fully qualify `path`. If you specify a file name only in `path`, `GetFullPath` returns the fully qualified path of the current directory.  
  
 If you pass in a short file name, it is expanded to a long file name.  
  
 If a path contains no significant characters it is invalid unless it contains one or more "." characters followed by any number of spaces, then it will be parsed as either "." or "..".  
  
 For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md).  
  
   
  
## Examples  
 The following code example demonstrates the `GetFullPath` method on a Windows-based desktop platform.  
  
 [!code-vb[System.IO.Path Members#7](~/add/codesnippet/visualbasic/m-system.io.path.getfull_1.vb)]
 [!code-cpp[System.IO.Path Members#7](~/add/codesnippet/cpp/m-system.io.path.getfull_1.cpp)]
 [!code-cs[System.IO.Path Members#7](~/add/codesnippet/csharp/m-system.io.path.getfull_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in &lt;xref:System.IO.Path.GetInvalidPathChars%2A&gt;.  
  
 -or-  
  
 The system could not retrieve the absolute path.</exception>
        <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="path" /> is <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="path" /> contains a colon (":") that is not part of a volume identifier (for example, "c:\\").</exception>
        <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for access to the path.</permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetInvalidFileNameChars">
      <MemberSignature Language="C#" Value="public static char[] GetInvalidFileNameChars ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char[] GetInvalidFileNameChars() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets an array containing the characters that are not allowed in file names.</summary>
        <returns>An array containing the characters that are not allowed in file names.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names. The full set of invalid characters can vary by file system. For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote ("), less than (\<), greater than (>), pipe (&#124;), backspace (\b), null (\0) and tab (\t).  
  
   
  
## Examples  
 The following code example demonstrates the GetInvalidFileNameChars method and the <xref:System.IO.Path.GetInvalidPathChars%2A> method to retrieve invalid characters.  
  
 [!code-cs[IO.Path.GetInvalidFile-PathChars#1](~/add/codesnippet/csharp/m-system.io.path.getinva_1_1.cs)]
 [!code-vb[IO.Path.GetInvalidFile-PathChars#1](~/add/codesnippet/visualbasic/m-system.io.path.getinva_1_1.vb)]
 [!code-cpp[IO.Path.GetInvalidFile-PathChars#1](~/add/codesnippet/cpp/m-system.io.path.getinva_1_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetInvalidPathChars">
      <MemberSignature Language="C#" Value="public static char[] GetInvalidPathChars ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig char[] GetInvalidPathChars() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets an array containing the characters that are not allowed in path names.</summary>
        <returns>An array containing the characters that are not allowed in path names.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names. The full set of invalid characters can vary by file system. For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote ("), less than (\<), greater than (>), pipe (&#124;), backspace (\b), null (\0) and tab (\t).  
  
   
  
## Examples  
 The following code example demonstrates the <xref:System.IO.Path.GetInvalidFileNameChars%2A> method and the GetInvalidPathChars method to retrieve invalid characters.  
  
 [!code-cs[IO.Path.GetInvalidFile-PathChars#1](~/add/codesnippet/csharp/m-system.io.path.getinva_0_1.cs)]
 [!code-vb[IO.Path.GetInvalidFile-PathChars#1](~/add/codesnippet/visualbasic/m-system.io.path.getinva_0_1.vb)]
 [!code-cpp[IO.Path.GetInvalidFile-PathChars#1](~/add/codesnippet/cpp/m-system.io.path.getinva_0_1.cpp)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetPathRoot">
      <MemberSignature Language="C#" Value="public static string GetPathRoot (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetPathRoot(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path from which to obtain root directory information.</param>
        <summary>Gets the root directory information of the specified path.</summary>
        <returns>The root directory of <paramref name="path" />, such as "C:\\", or <see langword="null" /> if <paramref name="path" /> is <see langword="null" />, or an empty string if <paramref name="path" /> does not contain root directory information.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method does not verify that the path or file name exists.  
  
 Possible patterns for the string returned by this method are as follows:  
  
-   An empty string (`path` specified a relative path on the current drive or volume).  
  
-   "/" (`path` specified an absolute path on the current drive).  
  
-   "X:" (`path` specified a relative path on a drive, where X represents a drive or volume letter).  
  
-   "X:/" (`path` specified an absolute path on a given drive).  
  
-   "\\\ComputerName\SharedFolder" (a UNC path).  
  
 The .NET Framework does not support direct access to physical disks through paths that are device names, such as "\\\\.\PHYSICALDRIVE0 ".  
  
 For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md).  
  
   
  
## Examples  
 The following code example demonstrates a use of the `GetPathRoot` method.  
  
 [!code-vb[System.IO.Path Members#8](~/add/codesnippet/visualbasic/m-system.io.path.getpath_1.vb)]
 [!code-cpp[System.IO.Path Members#8](~/add/codesnippet/cpp/m-system.io.path.getpath_1.cpp)]
 [!code-cs[System.IO.Path Members#8](~/add/codesnippet/csharp/m-system.io.path.getpath_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> contains one or more of the invalid characters defined in &lt;xref:System.IO.Path.GetInvalidPathChars%2A&gt;.  
  
 -or-  
  
 <see cref="F:System.String.Empty" /> was passed to <paramref name="path" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetRandomFileName">
      <MemberSignature Language="C#" Value="public static string GetRandomFileName ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetRandomFileName() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a random folder name or file name.</summary>
        <returns>A random folder name or file name.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The GetRandomFileName method returns a cryptographically strong, random string that can be used as either a folder name or a file name. Unlike <xref:System.IO.Path.GetTempFileName%2A>, GetRandomFileName does not create a file. When the security of your file system is paramount, this method should be used instead of <xref:System.IO.Path.GetTempFileName%2A>.  
  
   
  
## Examples  
 The following example show output from the GetRandomFileName method.  
  
 [!code-cs[System.IO.Path Members#20](~/add/codesnippet/csharp/m-system.io.path.getrand_1.cs)]
 [!code-vb[System.IO.Path Members#20](~/add/codesnippet/visualbasic/m-system.io.path.getrand_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetTempFileName">
      <MemberSignature Language="C#" Value="public static string GetTempFileName ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTempFileName() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</summary>
        <returns>The full path of the temporary file.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method creates a temporary file with a .TMP file extension. The temporary file is created within the user’s temporary folder, which is the path returned by the <xref:System.IO.Path.GetTempPath%2A> method.  
  
 The GetTempFileName method will raise an <xref:System.IO.IOException> if it is used to create more than 65535 files without deleting previous temporary files.  
  
 The GetTempFileName method will raise an <xref:System.IO.IOException> if no unique temporary file name is available. To resolve this error, delete all unneeded temporary files.  
  
 For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">An I/O error occurs, such as no unique temporary file name is available.  
  
 \- or -  
  
 This method was unable to create a temporary file.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for writing to the temporary directory. Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="GetTempPath">
      <MemberSignature Language="C#" Value="public static string GetTempPath ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTempPath() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the path of the current user's temporary folder.</summary>
        <returns>The path to the temporary folder, ending with a backslash.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method checks for the existence of environment variables in the following order and uses the first path found:  
  
1.  The path specified by the TMP environment variable.  
  
2.  The path specified by the TEMP environment variable.  
  
3.  The path specified by the USERPROFILE environment variable.  
  
4.  The Windows directory.  
  
   
  
## Examples  
 The following code shows how to call the GetTempPath method.  
  
```vb  
result As String = Path.GetTempPath()  
Console.WriteLine(result)  
```  
  
```c#  
string result = Path.GetTempPath();  
Console.WriteLine(result);  
```  
  
 This example produces output similar to the following.  
  
```  
C:\Users\UserName\AppData\Local\Temp\  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions.</exception>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">for unrestricted access to environment variables. Associated enumeration: <see cref="T:System.Security.Permissions.PermissionState" /></permission>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="HasExtension">
      <MemberSignature Language="C#" Value="public static bool HasExtension (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasExtension(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path to search for an extension.</param>
        <summary>Determines whether a path includes a file name extension.</summary>
        <returns>
          <see langword="true" /> if the characters that follow the last directory separator (\\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Starting from the end of `path`, this method searches for a period (.) followed by at least one character. If this pattern is found before a <xref:System.IO.Path.DirectorySeparatorChar>, <xref:System.IO.Path.AltDirectorySeparatorChar>, or <xref:System.IO.Path.VolumeSeparatorChar> character is encountered, this method returns `true`.  
  
 For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md).  
  
   
  
## Examples  
 The following code example demonstrates the use of the `HasExtension` method.  
  
 [!code-vb[System.IO.Path Members#11](~/add/codesnippet/visualbasic/m-system.io.path.hasexte_1.vb)]
 [!code-cpp[System.IO.Path Members#11](~/add/codesnippet/cpp/m-system.io.path.hasexte_1.cpp)]
 [!code-cs[System.IO.Path Members#11](~/add/codesnippet/csharp/m-system.io.path.hasexte_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> contains one or more of the invalid characters defined in &lt;xref:System.IO.Path.GetInvalidPathChars%2A&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="InvalidPathChars">
      <MemberSignature Language="C#" Value="public static readonly char[] InvalidPathChars;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char[] InvalidPathChars" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Please use GetInvalidPathChars or GetInvalidFileNameChars instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides a platform-specific array of characters that cannot be specified in path string arguments passed to members of the <see cref="T:System.IO.Path" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The array returned from this method is not guaranteed to contain the complete set of characters that are invalid in file and directory names. The full set of invalid characters can vary by file system. For example, on Windows-based desktop platforms, invalid path characters might include ASCII/Unicode characters 1 through 31, as well as quote ("), less than (\<), greater than (>), pipe (&#124;), backspace (\b), null (\0) and tab (\t).  
  
> [!CAUTION]
>  Do not useInvalidPathChars if you think your code might execute in the same application domain as untrusted code. InvalidPathChars is an array, so its elements can be overwritten. If untrusted code overwrites elements of InvalidPathChars, it might cause your code to malfunction in ways that could be exploited.  
  
   
  
## Examples  
 The following code example demonstrates the use of the `InvalidPathChars` property.  
  
 [!code-vb[System.IO.Path Members#13](~/add/codesnippet/visualbasic/f-system.io.path.invalid_1.vb)]
 [!code-cpp[System.IO.Path Members#13](~/add/codesnippet/cpp/f-system.io.path.invalid_1.cpp)]
 [!code-cs[System.IO.Path Members#13](~/add/codesnippet/csharp/f-system.io.path.invalid_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="IsPathRooted">
      <MemberSignature Language="C#" Value="public static bool IsPathRooted (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsPathRooted(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The path to test.</param>
        <summary>Gets a value indicating whether the specified path string contains a root.</summary>
        <returns>
          <see langword="true" /> if <paramref name="path" /> contains a root; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The IsPathRooted method returns `true` if the first character is a directory separator character such as "\\", or if the path starts with a drive letter and colon (:). For example, it returns `true` for `path` strings such as "\\\MyDir\\\MyFile.txt", "C:\\\MyDir", or "C:MyDir". It returns `false` for `path` strings such as "MyDir".  
  
 This method does not verify that the path or file name exists.  
  
 For a list of common I/O tasks, see [Common I/O Tasks](../Topic/Common%20I-O%20Tasks.md).  
  
   
  
## Examples  
 The following code example demonstrates how the `IsPathRooted` method can be used to test three strings.  
  
 [!code-vb[System.IO.Path Members#12](~/add/codesnippet/visualbasic/m-system.io.path.ispathr_1.vb)]
 [!code-cpp[System.IO.Path Members#12](~/add/codesnippet/cpp/m-system.io.path.ispathr_1.cpp)]
 [!code-cs[System.IO.Path Members#12](~/add/codesnippet/csharp/m-system.io.path.ispathr_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="path" /> contains one or more of the invalid characters defined in &lt;xref:System.IO.Path.GetInvalidPathChars%2A&gt;.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="PathSeparator">
      <MemberSignature Language="C#" Value="public static readonly char PathSeparator;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char PathSeparator" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A platform-specific separator character used to separate path strings in environment variables.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 On Windows-based desktop platforms, the value of this field is the semicolon (;) by default, but might vary on other platforms.  
  
   
  
## Examples  
 The following code example demonstrates the use of the `PathSeparator` field.  
  
 [!code-vb[System.IO.Path Members#13](~/add/codesnippet/visualbasic/f-system.io.path.pathsep_1.vb)]
 [!code-cpp[System.IO.Path Members#13](~/add/codesnippet/cpp/f-system.io.path.pathsep_1.cpp)]
 [!code-cs[System.IO.Path Members#13](~/add/codesnippet/csharp/f-system.io.path.pathsep_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="VolumeSeparatorChar">
      <MemberSignature Language="C#" Value="public static readonly char VolumeSeparatorChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly char VolumeSeparatorChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides a platform-specific volume separator character.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value of this field is a colon (:) on Windows and Macintosh, and a slash (/) on UNIX operating systems. This is most useful for parsing paths such as "c:\windows" or "MacVolume:System Folder".  
  
   
  
## Examples  
 The following code example demonstrates the use of the `VolumeSeparatorChar` field.  
  
 [!code-vb[System.IO.Path Members#13](~/add/codesnippet/visualbasic/f-system.io.path.volumes_1.vb)]
 [!code-cpp[System.IO.Path Members#13](~/add/codesnippet/cpp/f-system.io.path.volumes_1.cpp)]
 [!code-cs[System.IO.Path Members#13](~/add/codesnippet/csharp/f-system.io.path.volumes_1.cs)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>