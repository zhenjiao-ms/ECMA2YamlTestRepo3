<Type Name="DebuggerDisplayAttribute" FullName="System.Diagnostics.DebuggerDisplayAttribute">
  <TypeSignature Language="C#" Value="public sealed class DebuggerDisplayAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DebuggerDisplayAttribute extends System.Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Delegate, AllowMultiple=true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Determines how a class or field is displayed in the debugger variable windows.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Diagnostics.DebuggerDisplayAttribute.%23ctor%2A> constructor has a single argument: a string to be displayed in the value column for instances of the type. This string can contain braces ({ and }). The text within a pair of braces is evaluated as the name of a field, property, or method. For example, the following C# code causes "Count = 4" to be displayed when the plus sign (+) is selected to expand the debugger display for an instance of `MyHashtable`.  
  
```  
[DebuggerDisplay("Count = {count}")]  
class MyHashtable  
{  
    public int count = 4;  
}  
```  
  
 For information about using this attribute in Visual Studio, see [Using the DebuggerDisplay Attribute](../Topic/Using%20the%20DebuggerDisplay%20Attribute.md).  
  
   
  
## Examples  
 View the following example in Visual Studio to see the results of applying the DebuggerDisplayAttribute.  
  
 [!code-cs[System.Diagnostics.DebuggerBrowsableAttribute#1](~/add/codesnippet/csharp/t-system.diagnostics.deb_0_1.cs)]
 [!code-cpp[System.Diagnostics.DebuggerBrowsableAttribute#1](~/add/codesnippet/cpp/t-system.diagnostics.deb_0_1.cpp)]
 [!code-vb[System.Diagnostics.DebuggerBrowsableAttribute#1](~/add/codesnippet/visualbasic/t-system.diagnostics.deb_0_1.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DebuggerDisplayAttribute (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string value) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The string to be displayed in the value column for instances of the type; an empty string ("") causes the value column to be hidden.</param>
        <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.DebuggerDisplayAttribute" /> class.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The `value` parameter can contain braces ({ and }). The text within a pair of braces is evaluated as the name of a field, property, or method. For example, the following C# code causes "Count = 4" to be displayed when the plus sign (+) is selected to expand the debugger display for an instance of `MyTable`.  
  
```  
[DebuggerDisplay("Count = {count}")]  
class MyTable  
{  
    public int count = 4;  
}  
```  
  
   
  
## Examples  
 The following code example causes the value of the <xref:System.Collections.Hashtable.Count%2A> property from the inherited <xref:System.Collections.Hashtable> class to be displayed when the plus sign (+) is selected to expand the debugger display for an instance of `MyHashtable`. You must run the complete example, which is provided in the <xref:System.Diagnostics.DebuggerDisplayAttribute> class, to see the results.  
  
 [!code-cs[System.Diagnostics.DebuggerBrowsableAttribute#4](~/add/codesnippet/csharp/m-system.diagnostics.deb_1_1.cs)]
 [!code-cpp[System.Diagnostics.DebuggerBrowsableAttribute#4](~/add/codesnippet/cpp/m-system.diagnostics.deb_1_1.cpp)]
 [!code-vb[System.Diagnostics.DebuggerBrowsableAttribute#4](~/add/codesnippet/visualbasic/m-system.diagnostics.deb_1_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name to display in the debugger variable windows.</summary>
        <value>The name to display in the debugger variable windows.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The value can contain curly braces ({ and }). Text within a pair of braces is evaluated as the name of a field, property, or method.  
  
   
  
## Examples  
 The following code example causes the name and value of each key to be displayed in the debugger variable windows. When the attribute is not applied, the index and value type are displayed (for example: "[0] {KeyValuePairs}"). When the attribute is applied, the name of the key and its value are displayed (for example, if the first key is "one" and its value is 1, the display is: "one 1"). This code example is part of a larger example provided for the <xref:System.Diagnostics.DebuggerDisplayAttribute> class.  
  
 [!code-cs[System.Diagnostics.DebuggerBrowsableAttribute#3](~/add/codesnippet/csharp/p-system.diagnostics.deb_1.cs)]
 [!code-cpp[System.Diagnostics.DebuggerBrowsableAttribute#3](~/add/codesnippet/cpp/p-system.diagnostics.deb_1.cpp)]
 [!code-vb[System.Diagnostics.DebuggerBrowsableAttribute#3](~/add/codesnippet/visualbasic/p-system.diagnostics.deb_1.vb)]  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public Type Target { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the type of the attribute's target.</summary>
        <value>The attribute's target type.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this property to specify the target type when the attribute is used at the assembly level.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Target is set to <see langword="null" />.</exception>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="TargetTypeName">
      <MemberSignature Language="C#" Value="public string TargetTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TargetTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the type name of the attribute's target.</summary>
        <value>The name of the attribute's target type.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this property to specify the name of the target type when the attribute is used at the assembly level.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public string Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the string to display in the type column of the debugger variable windows.</summary>
        <value>The string to display in the type column of the debugger variable windows.</value>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the string to display in the value column of the debugger variable windows.</summary>
        <value>The string to display in the value column of the debugger variable.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property contains the string passed in by the `value` parameter of the constructor.  
  
 ]]></format>
        </remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>