<Type Name="OnSerializingAttribute" FullName="System.Runtime.Serialization.OnSerializingAttribute">
  <TypeSignature Language="C#" Value="public sealed class OnSerializingAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OnSerializingAttribute extends System.Attribute" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>When applied to a method, specifies that the method is during serialization of an object in an object graph. The order of serialization relative to other objects in the graph is non-deterministic.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use the OnSerializingAttribute to manipulate the object before serialization occurs.  
  
 To use the OnSerializingAttribute, the method must contain a <xref:System.Runtime.Serialization.StreamingContext> parameter. The attribute marks the method to be called by the serialization infrastructure and the <xref:System.Runtime.Serialization.StreamingContext> provides additional data about the type of serialization taking place.  The usage is shown in the following code:  
  
 [!code-vb[System.Runtime.Serialization.OnSerialization#2](~/add/codesnippet/visualbasic/t-system.runtime.seriali_10_1.vb)]
 [!code-cs[System.Runtime.Serialization.OnSerialization#2](~/add/codesnippet/csharp/t-system.runtime.seriali_10_1.cs)]  
  
> [!NOTE]
>  In your code, you can use the word `OnSerializing` instead of the longer OnSerializingAttribute.  
  
 When using binary serialization, the binary serialization process omits the call to the `onSerializing` method when the serialized  objects are equal. Therefore, when using the <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter> type with the `equals` method (or `Object.GetHashCode`) for example, the result may be undefined behavior.  
  
   
  
## Examples  
 The following example applies the <xref:System.Runtime.Serialization.OnDeserializedAttribute>, OnSerializingAttribute, <xref:System.Runtime.Serialization.OnSerializedAttribute>, and <xref:System.Runtime.Serialization.OnDeserializingAttribute> attributes to methods in a class.  
  
 [!code-vb[System.Runtime.Serialization.OnSerialization#1](~/add/codesnippet/visualbasic/t-system.runtime.seriali_10_2.vb)]
 [!code-cs[System.Runtime.Serialization.OnSerialization#1](~/add/codesnippet/csharp/t-system.runtime.seriali_10_2.cs)]  
  
 ]]></format>
    </remarks>
    <threadsafe />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OnSerializingAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.OnSerializingAttribute" /> class.</summary>
        <remarks>To be added.</remarks>
        <threadsafe />
      </Docs>
    </Member>
  </Members>
</Type>