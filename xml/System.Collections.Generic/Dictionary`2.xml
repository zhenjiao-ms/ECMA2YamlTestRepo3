<Type Name="Dictionary&lt;TKey,TValue&gt;" FullName="System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;">
  <TypeSignature Language="C#" Value="public class Dictionary&lt;TKey,TValue&gt; : System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;, System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;, System.Collections.IDictionary, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Dictionary`2&lt;TKey, TValue&gt; extends System.Object implements class System.Collections.Generic.ICollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IDictionary`2&lt;!TKey, !TValue&gt;, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt;, class System.Collections.Generic.IReadOnlyDictionary`2&lt;!TKey, !TValue&gt;, class System.Collections.ICollection, class System.Collections.IDictionary, class System.Collections.IEnumerable, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IDictionary</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_DictionaryDebugView`2))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey">To be added.</typeparam>
    <typeparam name="TValue">To be added.</typeparam>
    <summary>Represents a collection of keys and values.  
  
 To browse the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/generic/dictionary.cs#d3599058f8d79be0).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/collections/generic/dictionary.cs#d3599058f8d79be0). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  
  
 The Dictionary(TKey, generic class provides a mapping from a set of keys to a set of values. Each addition to the dictionary consists of a value and its associated key. Retrieving a value by using its key is very fast, close to O(1), because the Dictionary(TKey, class is implemented as a hash table.  
  
> [!NOTE]
>  The speed of retrieval depends on the quality of the hashing algorithm of the type specified for `TKey`.  
  
 As long as an object is used as a key in the Dictionary(TKey,, it must not change in any way that affects its hash value. Every key in a Dictionary(TKey, must be unique according to the dictionary's equality comparer. A key cannot be `null`, but a value can be, if the value type `TValue` is a reference type.  
  
 Dictionary(TKey, requires an equality implementation to determine whether keys are equal. You can specify an implementation of the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface by using a constructor that accepts a `comparer` parameter; if you do not specify an implementation, the default generic equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> is used. If type `TKey` implements the <xref:System.IEquatable%601?displayProperty=fullName> generic interface, the default equality comparer uses that implementation.  
  
> [!NOTE]
>  For example, you can use the case-insensitive string comparers provided by the <xref:System.StringComparer> class to create dictionaries with case-insensitive string keys.  
  
 The capacity of a Dictionary(TKey, is the number of elements the Dictionary(TKey, can hold. As elements are added to a Dictionary(TKey,, the capacity is automatically increased as required by reallocating the internal array.  
  
 For very large Dictionary(TKey, objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the `enabled` attribute of the  configuration element to `true` in the run-time environment.  
  
 For purposes of enumeration, each item in the dictionary is treated as a <xref:System.Collections.Generic.KeyValuePair%602> structure representing a value and its key. The order in which the items are returned is undefined.  
  
 The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) returns an object of the type of the elements in the collection. Since the Dictionary(TKey, is a collection of keys and values, the element type is not the type of the key or the type of the value. Instead, the element type is a <xref:System.Collections.Generic.KeyValuePair%602> of the key type and the value type. For example:  
  
 [!code-cpp[Generic.Dictionary#11](~/add/codesnippet/cpp/t-system.collections.gen_4_1.cpp)]
 [!code-vb[Generic.Dictionary#11](~/add/codesnippet/visualbasic/t-system.collections.gen_4_1.vb)]
 [!code-cs[Generic.Dictionary#11](~/add/codesnippet/csharp/t-system.collections.gen_4_1.cs)]  
  
 The `foreach` statement is a wrapper around the enumerator, which allows only reading from the collection, not writing to it.  
  
> [!NOTE]
>  Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <xref:System.Type.Equals%2A> method.  
  
   
  
## Examples  
 The following code example creates an empty Dictionary(TKey, of strings with string keys and uses the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to add some elements. The example demonstrates that the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.  
  
 The example uses the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.  
  
 The example shows how to use the <xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary, and it shows how to use the <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> method to test whether a key exists before calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method.  
  
 The example shows how to enumerate the keys and values in the dictionary and how to enumerate the keys and values alone using the <xref:System.Collections.Generic.Dictionary%602.Keys%2A> property and the <xref:System.Collections.Generic.Dictionary%602.Values%2A> property.  
  
 Finally, the example demonstrates the <xref:System.Collections.Generic.Dictionary%602.Remove%2A> method.  
  
 [!code-cpp[Generic.Dictionary#1](~/add/codesnippet/cpp/t-system.collections.gen_4_2.cpp)]
 [!code-cs[Generic.Dictionary#1](~/add/codesnippet/csharp/t-system.collections.gen_4_2.cs)]
 [!code-vb[Generic.Dictionary#1](~/add/codesnippet/visualbasic/t-system.collections.gen_4_2.vb)]  
  
 ]]></format>
    </remarks>
    <threadsafe>A Dictionary(TKey, can support multiple readers concurrently, as long as the collection is not modified. Even so, enumerating through a collection is intrinsically not a thread-safe procedure. In the rare case where an enumeration contends with write accesses, the collection must be locked during the entire enumeration. To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  
  
 For thread-safe alternatives, see the <see cref="System.Collections.Concurrent.ConcurrentDictionary%602" /> class or <see cref="System.Collections.Immutable.ImmutableDictionary%602" /> class.  
  
 Public static (<see langword="Shared" /> in Visual Basic) members of this type are thread safe.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Dictionary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of the <see cref="System.Collections.Generic.Dictionary%602" /> class that is empty, has the default initial capacity, and uses the default equality comparer for the key type.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Every key in a <xref:System.Collections.Generic.Dictionary%602> must be unique according to the default equality comparer.  
  
 <xref:System.Collections.Generic.Dictionary%602> requires an equality implementation to determine whether keys are equal. This constructor uses the default generic equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName>. If type `TKey` implements the <xref:System.IEquatable%601?displayProperty=fullName> generic interface, the default equality comparer uses that implementation. Alternatively, you can specify an implementation of the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface by using a constructor that accepts a `comparer` parameter.  
  
> [!NOTE]
>  If you can estimate the size of the collection, using a constructor that specifies the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Dictionary%602>.  
  
 This constructor is an O(1) operation.  
  
   
  
## Examples  
 The following code example creates an empty <xref:System.Collections.Generic.Dictionary%602> of strings with string keys and uses the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to add some elements. The example demonstrates that the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.  
  
 This code example is part of a larger example provided for the <xref:System.Collections.Generic.Dictionary%602> class.  
  
 [!code-cpp[Generic.Dictionary#2](~/add/codesnippet/cpp/m-system.collections.gen_13_1.cpp)]
 [!code-cs[Generic.Dictionary#2](~/add/codesnippet/csharp/m-system.collections.gen_13_1.cs)]
 [!code-vb[Generic.Dictionary#2](~/add/codesnippet/visualbasic/m-system.collections.gen_13_1.vb)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Dictionary (System.Collections.Generic.IDictionary&lt;TKey,TValue&gt; dictionary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IDictionary`2&lt;!TKey, !TValue&gt; dictionary) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="dictionary">The <see cref="System.Collections.Generic.IDictionary%602" /> whose elements are copied to the new <see cref="System.Collections.Generic.Dictionary%602" />.</param>
        <summary>Initializes a new instance of the <see cref="System.Collections.Generic.Dictionary%602" /> class that contains elements copied from the specified <see cref="System.Collections.Generic.IDictionary%602" /> and uses the default equality comparer for the key type.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Every key in a <xref:System.Collections.Generic.Dictionary%602> must be unique according to the default equality comparer; likewise, every key in the source `dictionary` must also be unique according to the default equality comparer.  
  
 The initial capacity of the new <xref:System.Collections.Generic.Dictionary%602> is large enough to contain all the elements in `dictionary`.  
  
 <xref:System.Collections.Generic.Dictionary%602> requires an equality implementation to determine whether keys are equal. This constructor uses the default generic equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName>. If type `TKey` implements the <xref:System.IEquatable%601?displayProperty=fullName> generic interface, the default equality comparer uses that implementation. Alternatively, you can specify an implementation of the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface by using a constructor that accepts a `comparer` parameter.  
  
 This constructor is an O(`n`) operation, where `n` is the number of elements in `dictionary`.  
  
   
  
## Examples  
 The following code example shows how to use the <xref:System.Collections.Generic.Dictionary%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29> constructor to initialize a <xref:System.Collections.Generic.Dictionary%602> with sorted content from another dictionary. The code example creates a <xref:System.Collections.Generic.SortedDictionary%602> and populates it with data in random order, then passes the <xref:System.Collections.Generic.SortedDictionary%602> to the <xref:System.Collections.Generic.Dictionary%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29> constructor, creating a <xref:System.Collections.Generic.Dictionary%602> that is sorted. This is useful if you need to build a sorted dictionary that at some point becomes static; copying the data from a <xref:System.Collections.Generic.SortedDictionary%602> to a <xref:System.Collections.Generic.Dictionary%602> improves retrieval speed.  
  
 [!code-cs[Generic.Dictionary.ctor_IDic#1](~/add/codesnippet/csharp/06345b5d-2c5f-46ab-8797-_1.cs)]
 [!code-vb[Generic.Dictionary.ctor_IDic#1](~/add/codesnippet/visualbasic/06345b5d-2c5f-46ab-8797-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dictionary" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="dictionary" /> contains one or more duplicate keys.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Dictionary (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">The <see cref="System.Collections.Generic.IEqualityComparer%601" /> implementation to use when comparing keys, or <see langword="null" /> to use the default <see cref="System.Collections.Generic.EqualityComparer%601" /> for the type of the key.</param>
        <summary>Initializes a new instance of the <see cref="System.Collections.Generic.Dictionary%602" /> class that is empty, has the default initial capacity, and uses the specified <see cref="System.Collections.Generic.IEqualityComparer%601" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor with the case-insensitive string comparers provided by the <xref:System.StringComparer> class to create dictionaries with case-insensitive string keys.  
  
 Every key in a <xref:System.Collections.Generic.Dictionary%602> must be unique according to the specified comparer.  
  
 <xref:System.Collections.Generic.Dictionary%602> requires an equality implementation to determine whether keys are equal. If `comparer` is `null`, this constructor uses the default generic equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName>. If type `TKey` implements the <xref:System.IEquatable%601?displayProperty=fullName> generic interface, the default equality comparer uses that implementation.  
  
> [!NOTE]
>  If you can estimate the size of the collection, using a constructor that specifies the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Dictionary%602>.  
  
 This constructor is an O(1) operation.  
  
   
  
## Examples  
 The following code example creates a <xref:System.Collections.Generic.Dictionary%602> with a case-insensitive equality comparer for the current culture. The example adds four elements, some with lower-case keys and some with upper-case keys. The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message. Finally, the example displays the elements in the dictionary.  
  
 [!code-vb[Generic.Dictionary.ctor_IEqC#1](~/add/codesnippet/visualbasic/3d52a6d9-5580-49c2-945a-_1.vb)]
 [!code-cs[Generic.Dictionary.ctor_IEqC#1](~/add/codesnippet/csharp/3d52a6d9-5580-49c2-945a-_1.cs)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Dictionary (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">The initial number of elements that the <see cref="System.Collections.Generic.Dictionary%602" /> can contain.</param>
        <summary>Initializes a new instance of the <see cref="System.Collections.Generic.Dictionary%602" /> class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Every key in a <xref:System.Collections.Generic.Dictionary%602> must be unique according to the default equality comparer.  
  
 The capacity of a <xref:System.Collections.Generic.Dictionary%602> is the number of elements that can be added to the <xref:System.Collections.Generic.Dictionary%602> before resizing is necessary. As elements are added to a <xref:System.Collections.Generic.Dictionary%602>, the capacity is automatically increased as required by reallocating the internal array.  
  
 If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Dictionary%602>.  
  
 <xref:System.Collections.Generic.Dictionary%602> requires an equality implementation to determine whether keys are equal. This constructor uses the default generic equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName>. If type `TKey` implements the <xref:System.IEquatable%601?displayProperty=fullName> generic interface, the default equality comparer uses that implementation. Alternatively, you can specify an implementation of the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface by using a constructor that accepts a `comparer` parameter.  
  
 This constructor is an O(1) operation.  
  
   
  
## Examples  
 The following code example creates a dictionary with an initial capacity of 4 and populates it with 4 entries.  
  
 [!code-cs[Generic.Dictionary.ctor_Int32#1](~/add/codesnippet/csharp/m-system.collections.gen_0_1.cs)]
 [!code-vb[Generic.Dictionary.ctor_Int32#1](~/add/codesnippet/visualbasic/m-system.collections.gen_0_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="capacity" /> is less than 0.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Dictionary (System.Collections.Generic.IDictionary&lt;TKey,TValue&gt; dictionary, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IDictionary`2&lt;!TKey, !TValue&gt; dictionary, class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dictionary" Type="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="dictionary">The <see cref="System.Collections.Generic.IDictionary%602" /> whose elements are copied to the new <see cref="System.Collections.Generic.Dictionary%602" />.</param>
        <param name="comparer">The <see cref="System.Collections.Generic.IEqualityComparer%601" /> implementation to use when comparing keys, or <see langword="null" /> to use the default <see cref="System.Collections.Generic.EqualityComparer%601" /> for the type of the key.</param>
        <summary>Initializes a new instance of the <see cref="System.Collections.Generic.Dictionary%602" /> class that contains elements copied from the specified <see cref="System.Collections.Generic.IDictionary%602" /> and uses the specified <see cref="System.Collections.Generic.IEqualityComparer%601" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor with the case-insensitive string comparers provided by the <xref:System.StringComparer> class to create dictionaries with case-insensitive string keys.  
  
 Every key in a <xref:System.Collections.Generic.Dictionary%602> must be unique according to the specified comparer; likewise, every key in the source `dictionary` must also be unique according to the specified comparer.  
  
> [!NOTE]
>  For example, duplicate keys can occur if `comparer` is one of the case-insensitive string comparers provided by the <xref:System.StringComparer> class and `dictionary` does not use a case-insensitive comparer key.  
  
 The initial capacity of the new <xref:System.Collections.Generic.Dictionary%602> is large enough to contain all the elements in `dictionary`.  
  
 <xref:System.Collections.Generic.Dictionary%602> requires an equality implementation to determine whether keys are equal. If `comparer` is `null`, this constructor uses the default generic equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName>. If type `TKey` implements the <xref:System.IEquatable%601?displayProperty=fullName> generic interface, the default equality comparer uses that implementation.  
  
 This constructor is an O(`n`) operation, where `n` is the number of elements in `dictionary`.  
  
   
  
## Examples  
 The following code example shows how to use the Dictionary(TKey, constructor to initialize a <xref:System.Collections.Generic.Dictionary%602> with case-insensitive sorted content from another dictionary. The code example creates a <xref:System.Collections.Generic.SortedDictionary%602> with a case-insensitive comparer and populates it with data in random order, then passes the <xref:System.Collections.Generic.SortedDictionary%602> to the Dictionary(TKey, constructor, along with a case-insensitive equality comparer, creating a <xref:System.Collections.Generic.Dictionary%602> that is sorted. This is useful if you need to build a sorted dictionary that at some point becomes static; copying the data from a <xref:System.Collections.Generic.SortedDictionary%602> to a <xref:System.Collections.Generic.Dictionary%602> improves retrieval speed.  
  
> [!NOTE]
>  When you create a new dictionary with a case-insensitive comparer and populate it with entries from a dictionary that uses a case-sensitive comparer, as in this example, an exception occurs if the input dictionary has keys that differ only by case.  
  
 [!code-vb[Generic.Dictionary.ctor_IDicIEqC#1](~/add/codesnippet/visualbasic/bb87ac2c-30fe-4f1c-8d2c-_1.vb)]
 [!code-cs[Generic.Dictionary.ctor_IDicIEqC#1](~/add/codesnippet/csharp/bb87ac2c-30fe-4f1c-8d2c-_1.cs)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dictionary" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="dictionary" /> contains one or more duplicate keys.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Dictionary (int capacity, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity, class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="capacity">The initial number of elements that the <see cref="System.Collections.Generic.Dictionary%602" /> can contain.</param>
        <param name="comparer">The <see cref="System.Collections.Generic.IEqualityComparer%601" /> implementation to use when comparing keys, or <see langword="null" /> to use the default <see cref="System.Collections.Generic.EqualityComparer%601" /> for the type of the key.</param>
        <summary>Initializes a new instance of the <see cref="System.Collections.Generic.Dictionary%602" /> class that is empty, has the specified initial capacity, and uses the specified <see cref="System.Collections.Generic.IEqualityComparer%601" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Use this constructor with the case-insensitive string comparers provided by the <xref:System.StringComparer> class to create dictionaries with case-insensitive string keys.  
  
 Every key in a <xref:System.Collections.Generic.Dictionary%602> must be unique according to the specified comparer.  
  
 The capacity of a <xref:System.Collections.Generic.Dictionary%602> is the number of elements that can be added to the <xref:System.Collections.Generic.Dictionary%602> before resizing is necessary. As elements are added to a <xref:System.Collections.Generic.Dictionary%602>, the capacity is automatically increased as required by reallocating the internal array.  
  
 If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref:System.Collections.Generic.Dictionary%602>.  
  
 <xref:System.Collections.Generic.Dictionary%602> requires an equality implementation to determine whether keys are equal. If `comparer` is `null`, this constructor uses the default generic equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName>. If type `TKey` implements the <xref:System.IEquatable%601?displayProperty=fullName> generic interface, the default equality comparer uses that implementation.  
  
 This constructor is an O(1) operation.  
  
   
  
## Examples  
 The following code example creates a <xref:System.Collections.Generic.Dictionary%602> with an initial capacity of 5 and a case-insensitive equality comparer for the current culture. The example adds four elements, some with lower-case keys and some with upper-case keys. The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message. Finally, the example displays the elements in the dictionary.  
  
 [!code-cs[Generic.Dictionary.ctor_Int32IEqC#1](~/add/codesnippet/csharp/9847a566-11b6-4334-96a2-_1.cs)]
 [!code-vb[Generic.Dictionary.ctor_Int32IEqC#1](~/add/codesnippet/visualbasic/9847a566-11b6-4334-96a2-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="capacity" /> is less than 0.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Dictionary (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object containing the information required to serialize the <see cref="System.Collections.Generic.Dictionary%602" />.</param>
        <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure containing the source and destination of the serialized stream associated with the <see cref="System.Collections.Generic.Dictionary%602" />.</param>
        <summary>Initializes a new instance of the <see cref="System.Collections.Generic.Dictionary%602" /> class with serialized data.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This constructor is called during deserialization to reconstitute an object transmitted over a stream. For more information, see [XML and SOAP Serialization](../Topic/XML%20and%20SOAP%20Serialization.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TKey key, TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(!TKey key, !TValue value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="key">The key of the element to add.</param>
        <param name="value">The value of the element to add. The value can be <see langword="null" /> for reference types.</param>
        <summary>Adds the specified key and value to the dictionary.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can also use the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Generic.Dictionary%602>; for example, `myCollection[myKey] = myValue` (in Visual Basic, `myCollection(myKey) = myValue`). However, if the specified key already exists in the <xref:System.Collections.Generic.Dictionary%602>, setting the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property overwrites the old value. In contrast, the Addmethod throws an exception if a value with the specified key already exists.  
  
 If the <xref:System.Collections.Generic.Dictionary%602.Count%2A> property value already equals the capacity, the capacity of the <xref:System.Collections.Generic.Dictionary%602> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.  
  
 A key cannot be `null`, but a value can be, if `TValue` is a reference type.  
  
 If <xref:System.Collections.Generic.Dictionary%602.Count%2A> is less than the capacity, this method approaches an O(1) operation. If the capacity must be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Dictionary%602.Count%2A>.  
  
   
  
## Examples  
 The following code example creates an empty <xref:System.Collections.Generic.Dictionary%602> of strings with string keys and uses the Add method to add some elements. The example demonstrates that the Add method throws an <xref:System.ArgumentException> when attempting to add a duplicate key.  
  
 This code example is part of a larger example provided for the <xref:System.Collections.Generic.Dictionary%602> class.  
  
 [!code-cpp[Generic.Dictionary#2](~/add/codesnippet/cpp/m-system.collections.gen_32_1.cpp)]
 [!code-cs[Generic.Dictionary#2](~/add/codesnippet/csharp/m-system.collections.gen_32_1.cs)]
 [!code-vb[Generic.Dictionary#2](~/add/codesnippet/visualbasic/m-system.collections.gen_32_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="System.Collections.Generic.Dictionary%602" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all keys and values from the <see cref="System.Collections.Generic.Dictionary%602" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The <xref:System.Collections.Generic.Dictionary%602.Count%2A> property is set to 0, and references to other objects from elements of the collection are also released. The capacity remains unchanged.  
  
 This method is an O(`n`) operation, where `n` is the capacity of the dictionary.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEqualityComparer&lt;TKey&gt; Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; Comparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="System.Collections.Generic.IEqualityComparer%601" /> that is used to determine equality of keys for the dictionary.</summary>
        <value>The <see cref="System.Collections.Generic.IEqualityComparer%601" /> generic interface implementation that is used to determine equality of keys for the current <see cref="System.Collections.Generic.Dictionary%602" /> and to provide hash values for the keys.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Collections.Generic.Dictionary%602> requires an equality implementation to determine whether keys are equal. You can specify an implementation of the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface by using a constructor that accepts a `comparer` parameter; if you do not specify one, the default generic equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> is used.  
  
 Getting the value of this property is an O(1) operation.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public bool ContainsKey (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(!TKey key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">The key to locate in the <see cref="System.Collections.Generic.Dictionary%602" />.</param>
        <summary>Determines whether the <see cref="System.Collections.Generic.Dictionary%602" /> contains the specified key.</summary>
        <returns>
          <see langword="true" /> if the <see cref="System.Collections.Generic.Dictionary%602" /> contains an element with the specified key; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method approaches an O(1) operation.  
  
   
  
## Examples  
 The following code example shows how to use the ContainsKey method to test whether a key exists prior to calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method. It also shows how to use the <xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A> method to retrieve values, which is an efficient way to retrieve values when a program frequently tries keys that are not in the dictionary. Finally, it shows the least efficient way to test whether keys exist, by using the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property (the indexer in C#).  
  
 This code example is part of a larger example provided for the <xref:System.Collections.Generic.Dictionary%602> class (`openWith` is the name of the Dictionary used in this example).  
  
 [!code-cpp[Generic.Dictionary#6](~/add/codesnippet/cpp/m-system.collections.gen_1_1.cpp)]
 [!code-cs[Generic.Dictionary#6](~/add/codesnippet/csharp/m-system.collections.gen_1_1.cs)]
 [!code-vb[Generic.Dictionary#6](~/add/codesnippet/visualbasic/m-system.collections.gen_1_1.vb)]  
[!code-cpp[Generic.Dictionary#5](~/add/codesnippet/cpp/m-system.collections.gen_1_2.cpp)]
[!code-cs[Generic.Dictionary#5](~/add/codesnippet/csharp/m-system.collections.gen_1_2.cs)]
[!code-vb[Generic.Dictionary#5](~/add/codesnippet/visualbasic/m-system.collections.gen_1_2.vb)]  
[!code-cpp[Generic.Dictionary#4](~/add/codesnippet/cpp/m-system.collections.gen_1_3.cpp)]
[!code-cs[Generic.Dictionary#4](~/add/codesnippet/csharp/m-system.collections.gen_1_3.cs)]
[!code-vb[Generic.Dictionary#4](~/add/codesnippet/visualbasic/m-system.collections.gen_1_3.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ContainsValue">
      <MemberSignature Language="C#" Value="public bool ContainsValue (TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ContainsValue(!TValue value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="TValue" />
      </Parameters>
      <Docs>
        <param name="value">The value to locate in the <see cref="System.Collections.Generic.Dictionary%602" />. The value can be <see langword="null" /> for reference types.</param>
        <summary>Determines whether the <see cref="System.Collections.Generic.Dictionary%602" /> contains a specific value.</summary>
        <returns>
          <see langword="true" /> if the <see cref="System.Collections.Generic.Dictionary%602" /> contains an element with the specified value; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method determines equality using the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName> for `TValue`, the type of values in the dictionary.  
  
 This method performs a linear search; therefore, the average execution time is proportional to <xref:System.Collections.Generic.Dictionary%602.Count%2A>. That is, this method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Dictionary%602.Count%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of key/value pairs contained in the <see cref="System.Collections.Generic.Dictionary%602" />.</summary>
        <value>The number of key/value pairs contained in the <see cref="System.Collections.Generic.Dictionary%602" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The capacity of a <xref:System.Collections.Generic.Dictionary%602> is the number of elements that the <xref:System.Collections.Generic.Dictionary%602> can store. The Count property is the number of elements that are actually in the <xref:System.Collections.Generic.Dictionary%602>.  
  
 The capacity is always greater than or equal to Count. If Count exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.  
  
 Getting the value of this property is an O(1) operation.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;.Enumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Collections.Generic.Dictionary`2/Enumerator&lt;!TKey, !TValue&gt; GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;+Enumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that iterates through the <see cref="System.Collections.Generic.Dictionary%602" />.</summary>
        <returns>A <see cref="System.Collections.Generic.Dictionary%602.Enumerator" /> structure for the <see cref="System.Collections.Generic.Dictionary%602" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For purposes of enumeration, each item is a <xref:System.Collections.Generic.KeyValuePair%602> structure representing a value and its key.  
  
 The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  
  
 Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  
  
 Initially, the enumerator is positioned before the first element in the collection. At this position, the <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A>.  
  
> [!NOTE]
>  For better performance, the enumerator returned by this property does not throw an exception if it is positioned before the first element or after the last element and the <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> property is accessed; the value of the <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> property is undefined.  
  
 The <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> property returns the same element until the <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> method is called. <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> sets <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> to the next element.  
  
 If <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.Generic.Dictionary%602.Enumerator.MoveNext%2A> returned `false`, <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> is undefined. You cannot set <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> to the first element of the collection again; you must create a new enumerator instance instead.  
  
 An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  
  
 The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  
  
 Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  
  
 This method is an O(1) operation.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the information required to serialize the <see cref="System.Collections.Generic.Dictionary%602" /> instance.</param>
        <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the source and destination of the serialized stream associated with the <see cref="System.Collections.Generic.Dictionary%602" /> instance.</param>
        <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data needed to serialize the <see cref="System.Collections.Generic.Dictionary%602" /> instance.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Dictionary%602.Count%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="info" /> is <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for providing serialization services. Associated enumeration:   <see cref="T:System.Security.Permissions.SecurityPermissionFlag" /> Security action: <see cref="T:System.Security.Permissions.SecurityAction" /></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TValue this[TKey key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue Item(!TKey)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">The key of the value to get or set.</param>
        <summary>Gets or sets the value associated with the specified key.</summary>
        <value>The value associated with the specified key. If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException" />, and a set operation creates a new element with the specified key.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property provides the ability to access a specific element in the collection by using the following C# syntax: `myCollection[key]` (`myCollection(key)` in Visual Basic).  
  
 You can also use the Item property to add new elements by setting the value of a key that does not exist in the <xref:System.Collections.Generic.Dictionary%602>. When you set the property value, if the key is in the <xref:System.Collections.Generic.Dictionary%602>, the value associated with that key is replaced by the assigned value. If the key is not in the <xref:System.Collections.Generic.Dictionary%602>, the key and value are added to the dictionary. In contrast, the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method does not modify existing elements.  
  
 A key cannot be `null`, but a value can be, if the value type `TValue` is a reference type.  
  
 The C# language uses the  keyword to define the indexers instead of implementing the Item property. Visual Basic implements Item as a default property, which provides the same indexing functionality.  
  
 Getting or setting the value of this property approaches an O(1) operation.  
  
   
  
## Examples  
 The following code example uses the Item property (the indexer in C#) to retrieve values, demonstrating that a <xref:System.Collections.Generic.KeyNotFoundException> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced.  
  
 The example also shows how to use the <xref:System.Collections.Generic.Dictionary%602.TryGetValue%2A> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary.  
  
 This code example is part of a larger example provided for the <xref:System.Collections.Generic.Dictionary%602> class. `openWith` is the name of the Dictionary used in this example.  
  
 [!code-cpp[Generic.Dictionary#2](~/add/codesnippet/cpp/p-system.collections.gen_3_1.cpp)]
 [!code-cs[Generic.Dictionary#2](~/add/codesnippet/csharp/p-system.collections.gen_3_1.cs)]
 [!code-vb[Generic.Dictionary#2](~/add/codesnippet/visualbasic/p-system.collections.gen_3_1.vb)]  
[!code-cpp[Generic.Dictionary#3](~/add/codesnippet/cpp/p-system.collections.gen_3_2.cpp)]
[!code-cs[Generic.Dictionary#3](~/add/codesnippet/csharp/p-system.collections.gen_3_2.cs)]
[!code-vb[Generic.Dictionary#3](~/add/codesnippet/visualbasic/p-system.collections.gen_3_2.vb)]  
[!code-cpp[Generic.Dictionary#4](~/add/codesnippet/cpp/p-system.collections.gen_3_3.cpp)]
[!code-cs[Generic.Dictionary#4](~/add/codesnippet/csharp/p-system.collections.gen_3_3.cs)]
[!code-vb[Generic.Dictionary#4](~/add/codesnippet/visualbasic/p-system.collections.gen_3_3.vb)]  
[!code-cpp[Generic.Dictionary#5](~/add/codesnippet/cpp/p-system.collections.gen_3_4.cpp)]
[!code-cs[Generic.Dictionary#5](~/add/codesnippet/csharp/p-system.collections.gen_3_4.cs)]
[!code-vb[Generic.Dictionary#5](~/add/codesnippet/visualbasic/p-system.collections.gen_3_4.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is <see langword="null" />.</exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> does not exist in the collection.</exception>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;.KeyCollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.Dictionary`2/KeyCollection&lt;!TKey, !TValue&gt; Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;+KeyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection containing the keys in the <see cref="System.Collections.Generic.Dictionary%602" />.</summary>
        <value>A <see cref="System.Collections.Generic.Dictionary%602.KeyCollection" /> containing the keys in the <see cref="System.Collections.Generic.Dictionary%602" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The order of the keys in the <xref:System.Collections.Generic.Dictionary%602.KeyCollection> is unspecified, but it is the same order as the associated values in the <xref:System.Collections.Generic.Dictionary%602.ValueCollection> returned by the <xref:System.Collections.Generic.Dictionary%602.Values%2A> property.  
  
 The returned <xref:System.Collections.Generic.Dictionary%602.KeyCollection> is not a static copy; instead, the <xref:System.Collections.Generic.Dictionary%602.KeyCollection> refers back to the keys in the original <xref:System.Collections.Generic.Dictionary%602>. Therefore, changes to the <xref:System.Collections.Generic.Dictionary%602> continue to be reflected in the <xref:System.Collections.Generic.Dictionary%602.KeyCollection>.  
  
 Getting the value of this property is an O(1) operation.  
  
   
  
## Examples  
 The following code example shows how to enumerate the keys in the dictionary using the Keys property, and how to enumerate the keys and values in the dictionary.  
  
 This code is part of a larger example that can be compiled and executed (`openWith` is the name of the Dictionary used in this example). See <xref:System.Collections.Generic.Dictionary%602>.  
  
 [!code-cpp[Generic.Dictionary#9](~/add/codesnippet/cpp/p-system.collections.gen_11_1.cpp)]
 [!code-cs[Generic.Dictionary#9](~/add/codesnippet/csharp/p-system.collections.gen_11_1.cs)]
 [!code-vb[Generic.Dictionary#9](~/add/codesnippet/visualbasic/p-system.collections.gen_11_1.vb)]  
[!code-cpp[Generic.Dictionary#7](~/add/codesnippet/cpp/p-system.collections.gen_11_2.cpp)]
[!code-cs[Generic.Dictionary#7](~/add/codesnippet/csharp/p-system.collections.gen_11_2.cs)]
[!code-vb[Generic.Dictionary#7](~/add/codesnippet/visualbasic/p-system.collections.gen_11_2.vb)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDeserialization">
      <MemberSignature Language="C#" Value="public virtual void OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnDeserialization(object sender) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">The source of the deserialization event.</param>
        <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and raises the deserialization event when the deserialization is complete.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Dictionary%602.Count%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object associated with the current <see cref="System.Collections.Generic.Dictionary%602" /> instance is invalid.</exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(!TKey key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">The key of the element to remove.</param>
        <summary>Removes the value with the specified key from the <see cref="System.Collections.Generic.Dictionary%602" />.</summary>
        <returns>
          <see langword="true" /> if the element is successfully found and removed; otherwise, <see langword="false" />.  This method returns <see langword="false" /> if <paramref name="key" /> is not found in the <see cref="System.Collections.Generic.Dictionary%602" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 If the <xref:System.Collections.Generic.Dictionary%602> does not contain an element with the specified key, the <xref:System.Collections.Generic.Dictionary%602> remains unchanged. No exception is thrown.  
  
 This method approaches an O(1) operation.  
  
   
  
## Examples  
 The following code example shows how to remove a key/value pair from a dictionary using the Remove method.  
  
 This code example is part of a larger example provided for the <xref:System.Collections.Generic.Dictionary%602> class (`openWith` is the name of the Dictionary used in this example).  
  
 [!code-cpp[Generic.Dictionary#10](~/add/codesnippet/cpp/m-system.collections.gen_16_1.cpp)]
 [!code-cs[Generic.Dictionary#10](~/add/codesnippet/csharp/m-system.collections.gen_16_1.cs)]
 [!code-vb[Generic.Dictionary#10](~/add/codesnippet/visualbasic/m-system.collections.gen_16_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Add">
      <MemberSignature Language="C#" Value="void ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Add (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; keyValuePair);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Add(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt; keyValuePair) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValuePair" Type="System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="keyValuePair">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains">
      <MemberSignature Language="C#" Value="bool ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; keyValuePair);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt; keyValuePair) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValuePair" Type="System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="keyValuePair">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;[] array, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove">
      <MemberSignature Language="C#" Value="bool ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; keyValuePair);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove(valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt; keyValuePair) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyValuePair" Type="System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="keyValuePair">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys">
      <MemberSignature Language="C#" Value="System.Collections.Generic.ICollection&lt;TKey&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TKey&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values">
      <MemberSignature Language="C#" Value="System.Collections.Generic.ICollection&lt;TValue&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.ICollection`1&lt;!TValue&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt; IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;!TKey, !TValue&gt;&gt; System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;TKey&gt; System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;!TKey&gt; System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Values">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerable&lt;TValue&gt; System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;!TValue&gt; System.Collections.Generic.IReadOnlyDictionary&lt;TKey,TValue&gt;.Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">The one-dimensional array that is the destination of the elements copied from <see cref="System.Collections.Generic.ICollection%601" />. The array must have zero-based indexing.</param>
        <param name="index">The zero-based index in `array` at which copying begins.</param>
        <summary>Copies the elements of the <see cref="System.Collections.Generic.ICollection%601" /> to an array, starting at the specified array index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Each element copied from a <xref:System.Collections.Generic.Dictionary%602> is a <xref:System.Collections.Generic.KeyValuePair%602> structure representing a value and its key.  
  
> [!NOTE]
>  If the type of the source <xref:System.Collections.ICollection> cannot be cast automatically to the type of the destination `array`, the nongeneric implementations of <xref:System.Collections.ICollection.CopyTo%2A?displayProperty=fullName> throw an <xref:System.InvalidCastException>, whereas the generic implementations throw an <xref:System.ArgumentException>.  
  
 This method is an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Dictionary%602.Count%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> is less than 0.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="array" /> is multidimensional.  
  
 -or-  
  
 <paramref name="array" /> does not have zero-based indexing.  
  
 -or-  
  
 The number of elements in the source <see cref="System.Collections.Generic.ICollection%601" /> is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.  
  
 -or-  
  
 The type of the source <see cref="System.Collections.Generic.ICollection%601" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).</summary>
        <value>
          <see langword="true" /> if access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe); otherwise, <see langword="false" />.  In the default implementation of <see cref="System.Collections.Generic.Dictionary%602" />, this property always returns <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  
  
 Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which can cause the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.  
  
 The <xref:System.Collections.ICollection.SyncRoot%2A> property returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock the object before accessing the collection.  
  
 Getting the value of this property is an O(1) operation.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</summary>
        <value>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  
  
 Enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  
  
 The <xref:System.Collections.ICollection.SyncRoot%2A> property returns an object that can be used to synchronize access to the <xref:System.Collections.ICollection>. Synchronization is effective only if all threads lock the object before accessing the collection. The following code shows the use of the <xref:System.Collections.ICollection.SyncRoot%2A> property for C#, C++, and Visual Basic.  
  
```c#  
ICollection ic = ...;  
lock (ic.SyncRoot) {  
   // Access the collection.  
}  
```  
  
```vb#  
Dim ic As ICollection = ...  
SyncLock ic.SyncRoot  
   ' Access the collection.  
End SyncLock  
```  
  
```cpp#  
ICollection^ ic = ...;  
try {  
   Monitor::Enter(ic->SyncRoot);  
   // Access the collection.  
}  
finally {  
   Monitor::Exit(ic->SyncRoot);  
}  
```  
  
 Getting the value of this property is an O(1) operation.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Add">
      <MemberSignature Language="C#" Value="void IDictionary.Add (object key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IDictionary.Add(object key, object value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">The object to use as the key.</param>
        <param name="value">The object to use as the value.</param>
        <summary>Adds the specified key and value to the dictionary.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection["myNonexistentKey"] = myValue`. However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method throws an exception if the specified key already exists.  
  
 If <xref:System.Collections.Generic.Dictionary%602.Count%2A> is less than the capacity, this method approaches an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(`n`) operation, where `n` is <xref:System.Collections.Generic.Dictionary%602.Count%2A>.  
  
   
  
## Examples  
 The following code example shows how to access the <xref:System.Collections.Generic.Dictionary%602> class through the <xref:System.Collections.IDictionary?displayProperty=fullName> interface. The code example creates an empty <xref:System.Collections.Generic.Dictionary%602> of strings with string keys and uses the IDictionary.Add method to add some elements. The example demonstrates that the IDictionary.Add method throws an <xref:System.ArgumentException> when attempting to add a duplicate key, or when a key or value of the wrong data type is supplied.  
  
 The code example demonstrates the use of several other members of the <xref:System.Collections.IDictionary?displayProperty=fullName> interface.  
  
 [!code-cs[Generic.Dictionary.IDictionary#1](~/add/codesnippet/csharp/156f6ebb-9a9f-44b2-8f9b-_1.cs)]
 [!code-vb[Generic.Dictionary.IDictionary#1](~/add/codesnippet/visualbasic/156f6ebb-9a9f-44b2-8f9b-_1.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="System.Collections.Generic.Dictionary%602" />.  
  
 -or-  
  
 <paramref name="value" /> is of a type that is not assignable to <paramref name="TValue" />, the type of values in the <see cref="System.Collections.Generic.Dictionary%602" />.  
  
 -or-  
  
 A value with the same key already exists in the <see cref="System.Collections.Generic.Dictionary%602" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Contains">
      <MemberSignature Language="C#" Value="bool IDictionary.Contains (object key);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IDictionary.Contains(object key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary" />.</param>
        <summary>Determines whether the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified key.</summary>
        <returns>
          <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> contains an element with the specified key; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method returns `false` if `key` is of a type that is not assignable to the key type `TKey` of the <xref:System.Collections.Generic.Dictionary%602>.  
  
 This method approaches an O(1) operation.  
  
   
  
## Examples  
 The following code example shows how to use the IDictionary.Contains method of the <xref:System.Collections.IDictionary?displayProperty=fullName> interface with a <xref:System.Collections.Generic.Dictionary%602>. The example demonstrates that the method returns `false` if a key of the wrong data type is supplied.  
  
 The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A> method.  
  
 [!code-cs[Generic.Dictionary.IDictionary#31](~/add/codesnippet/csharp/afcc80dd-2182-4450-a976-_1.cs)]
 [!code-vb[Generic.Dictionary.IDictionary#31](~/add/codesnippet/visualbasic/afcc80dd-2182-4450-a976-_1.vb)]  
[!code-cs[Generic.Dictionary.IDictionary#6](~/add/codesnippet/csharp/afcc80dd-2182-4450-a976-_2.cs)]
[!code-vb[Generic.Dictionary.IDictionary#6](~/add/codesnippet/visualbasic/afcc80dd-2182-4450-a976-_2.vb)]  
[!code-cs[Generic.Dictionary.IDictionary#32](~/add/codesnippet/csharp/afcc80dd-2182-4450-a976-_3.cs)]
[!code-vb[Generic.Dictionary.IDictionary#32](~/add/codesnippet/visualbasic/afcc80dd-2182-4450-a976-_3.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IDictionaryEnumerator IDictionary.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</summary>
        <returns>An <see cref="T:System.Collections.IDictionaryEnumerator" /> for the <see cref="T:System.Collections.IDictionary" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For purposes of enumeration, each item is a <xref:System.Collections.Generic.KeyValuePair%602> structure representing a value and its key.  
  
 The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  
  
 Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  
  
 Initially, the enumerator is positioned before the first element in the collection. The <xref:System.Collections.IEnumerator.Reset%2A> method also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IDictionaryEnumerator.Entry%2A> property is undefined. Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IDictionaryEnumerator.Entry%2A>.  
  
 The <xref:System.Collections.IDictionaryEnumerator.Entry%2A> property returns the same element until either the <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> method is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IDictionaryEnumerator.Entry%2A> to the next element.  
  
 If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IDictionaryEnumerator.Entry%2A> is undefined. To set <xref:System.Collections.IDictionaryEnumerator.Entry%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  
  
 An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  
  
 The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  
  
 Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  
  
 This method is an O(1) operation.  
  
   
  
## Examples  
 The following code example shows how to enumerate the key/value pairs in the dictionary by using the `foreach` statement (`For Each` in Visual Basic, `for each` in C++), which hides the use of the enumerator. In particular, note that the enumerator for the <xref:System.Collections.IDictionary?displayProperty=fullName> interface returns <xref:System.Collections.DictionaryEntry> objects rather than <xref:System.Collections.Generic.KeyValuePair%602> objects.  
  
 The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A> method.  
  
 [!code-cs[Generic.Dictionary.IDictionary#31](~/add/codesnippet/csharp/fabac81a-db70-4788-a642-_1.cs)]
 [!code-vb[Generic.Dictionary.IDictionary#31](~/add/codesnippet/visualbasic/fabac81a-db70-4788-a642-_1.vb)]  
[!code-cs[Generic.Dictionary.IDictionary#7](~/add/codesnippet/csharp/fabac81a-db70-4788-a642-_2.cs)]
[!code-vb[Generic.Dictionary.IDictionary#7](~/add/codesnippet/visualbasic/fabac81a-db70-4788-a642-_2.vb)]  
[!code-cs[Generic.Dictionary.IDictionary#32](~/add/codesnippet/csharp/fabac81a-db70-4788-a642-_3.cs)]
[!code-vb[Generic.Dictionary.IDictionary#32](~/add/codesnippet/visualbasic/fabac81a-db70-4788-a642-_3.vb)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IDictionary.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IDictionary.IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> has a fixed size.</summary>
        <value>
          <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> has a fixed size; otherwise, <see langword="false" />.  In the default implementation of <see cref="System.Collections.Generic.Dictionary%602" />, this property always returns <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.  
  
 A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.  
  
 Getting the value of this property is an O(1) operation.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IDictionary.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IDictionary.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value indicating whether the <see cref="T:System.Collections.IDictionary" /> is read-only.</summary>
        <value>
          <see langword="true" /> if the <see cref="T:System.Collections.IDictionary" /> is read-only; otherwise, <see langword="false" />.  In the default implementation of <see cref="System.Collections.Generic.Dictionary%602" />, this property always returns <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.  
  
 A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.  
  
 Getting the value of this property is an O(1) operation.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IDictionary.Item[object key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IDictionary.Item(object)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">The key of the value to get.</param>
        <summary>Gets or sets the value with the specified key.</summary>
        <value>The value associated with the specified key, or <see langword="null" /> if <paramref name="key" /> is not in the dictionary or <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="System.Collections.Generic.Dictionary%602" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This property provides the ability to access a specific value in the collection by using the following C# syntax: `myCollection[key]` (`myCollection(key)` in Visual Basic).  
  
 You can also use the <xref:System.Collections.IDictionary.Item%2A> property to add new elements by setting the value of a key that does not exist in the dictionary; for example, `myCollection["myNonexistentKey"] = myValue`. However, if the specified key already exists in the dictionary, setting the <xref:System.Collections.IDictionary.Item%2A> property overwrites the old value. In contrast, the <xref:System.Collections.IDictionary.Add%2A> method does not modify existing elements.  
  
 The C# language uses the [this](../Topic/this%20\(C%23%20Reference\).md) keyword to define the indexers instead of implementing the IDictionary.Item property. Visual Basic implements IDictionary.Item as a default property, which provides the same indexing functionality.  
  
 Getting or setting the value of this property approaches an O(1) operation.  
  
   
  
## Examples  
 The following code example shows how to use the IDictionary.Item property (the indexer in C#) of the <xref:System.Collections.IDictionary?displayProperty=fullName> interface with a <xref:System.Collections.Generic.Dictionary%602>, and ways the property differs from the <xref:System.Collections.Generic.Dictionary%602.Item%2A?displayProperty=fullName> property.  
  
 The example shows that, like the <xref:System.Collections.Generic.Dictionary%602.Item%2A?displayProperty=fullName> property, the IDictionary.Item property can change the value associated with an existing key and can be used to add a new key/value pair if the specified key is not in the dictionary. The example also shows that unlike the <xref:System.Collections.Generic.Dictionary%602.Item%2A?displayProperty=fullName> property, the IDictionary.Item property does not throw an exception if `key` is not in the dictionary, returning a null reference instead. Finally, the example demonstrates that getting the IDictionary.Item property returns a null reference if `key` is not the correct data type, and that setting the property throws an exception if `key` is not the correct data type.  
  
 The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A> method.  
  
 [!code-cs[Generic.Dictionary.IDictionary#31](~/add/codesnippet/csharp/2ac6677a-db3a-495f-b9d3-_1.cs)]
 [!code-vb[Generic.Dictionary.IDictionary#31](~/add/codesnippet/visualbasic/2ac6677a-db3a-495f-b9d3-_1.vb)]  
[!code-cs[Generic.Dictionary.IDictionary#3](~/add/codesnippet/csharp/2ac6677a-db3a-495f-b9d3-_2.cs)]
[!code-vb[Generic.Dictionary.IDictionary#3](~/add/codesnippet/visualbasic/2ac6677a-db3a-495f-b9d3-_2.vb)]  
[!code-cs[Generic.Dictionary.IDictionary#4](~/add/codesnippet/csharp/2ac6677a-db3a-495f-b9d3-_3.cs)]
[!code-vb[Generic.Dictionary.IDictionary#4](~/add/codesnippet/visualbasic/2ac6677a-db3a-495f-b9d3-_3.vb)]  
[!code-cs[Generic.Dictionary.IDictionary#32](~/add/codesnippet/csharp/2ac6677a-db3a-495f-b9d3-_4.cs)]
[!code-vb[Generic.Dictionary.IDictionary#32](~/add/codesnippet/visualbasic/2ac6677a-db3a-495f-b9d3-_4.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">A value is being assigned, and <paramref name="key" /> is of a type that is not assignable to the key type <paramref name="TKey" /> of the <see cref="System.Collections.Generic.Dictionary%602" />.  
  
 -or-  
  
 A value is being assigned, and <paramref name="value" /> is of a type that is not assignable to the value type <paramref name="TValue" /> of the <see cref="System.Collections.Generic.Dictionary%602" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Keys">
      <MemberSignature Language="C#" Value="System.Collections.ICollection System.Collections.IDictionary.Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection System.Collections.IDictionary.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:System.Collections.IDictionary" />.</summary>
        <value>An <see cref="T:System.Collections.ICollection" /> containing the keys of the <see cref="T:System.Collections.IDictionary" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The order of the keys in the returned <xref:System.Collections.ICollection> is unspecified, but it is guaranteed to be the same order as the corresponding values in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Values%2A> property.  
  
 Getting the value of this property is an O(1) operation.  
  
   
  
## Examples  
 The following code example shows how to use the IDictionary.Keys property of the <xref:System.Collections.IDictionary?displayProperty=fullName> interface with a <xref:System.Collections.Generic.Dictionary%602>, to list the keys in the dictionary. The example also shows how to enumerate the key/value pairs in the dictionary; note that the enumerator for the <xref:System.Collections.IDictionary?displayProperty=fullName> interface returns <xref:System.Collections.DictionaryEntry> objects rather than <xref:System.Collections.Generic.KeyValuePair%602> objects.  
  
 The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A> method.  
  
 [!code-cs[Generic.Dictionary.IDictionary#31](~/add/codesnippet/csharp/fb6406df-91e9-47d7-9a63-_1.cs)]
 [!code-vb[Generic.Dictionary.IDictionary#31](~/add/codesnippet/visualbasic/fb6406df-91e9-47d7-9a63-_1.vb)]  
[!code-cs[Generic.Dictionary.IDictionary#9](~/add/codesnippet/csharp/fb6406df-91e9-47d7-9a63-_2.cs)]
[!code-vb[Generic.Dictionary.IDictionary#9](~/add/codesnippet/visualbasic/fb6406df-91e9-47d7-9a63-_2.vb)]  
[!code-cs[Generic.Dictionary.IDictionary#7](~/add/codesnippet/csharp/fb6406df-91e9-47d7-9a63-_3.cs)]
[!code-vb[Generic.Dictionary.IDictionary#7](~/add/codesnippet/visualbasic/fb6406df-91e9-47d7-9a63-_3.vb)]  
[!code-cs[Generic.Dictionary.IDictionary#32](~/add/codesnippet/csharp/fb6406df-91e9-47d7-9a63-_4.cs)]
[!code-vb[Generic.Dictionary.IDictionary#32](~/add/codesnippet/visualbasic/fb6406df-91e9-47d7-9a63-_4.vb)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Remove">
      <MemberSignature Language="C#" Value="void IDictionary.Remove (object key);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IDictionary.Remove(object key) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key">The key of the element to remove.</param>
        <summary>Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method approaches an O(1) operation.  
  
   
  
## Examples  
 The following code example shows how to use the IDictionary.Remove of the <xref:System.Collections.IDictionary?displayProperty=fullName> interface with a <xref:System.Collections.Generic.Dictionary%602>.  
  
 The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A> method.  
  
 [!code-cs[Generic.Dictionary.IDictionary#31](~/add/codesnippet/csharp/f916ab44-b2f0-44be-9c1a-_1.cs)]
 [!code-vb[Generic.Dictionary.IDictionary#31](~/add/codesnippet/visualbasic/f916ab44-b2f0-44be-9c1a-_1.vb)]  
[!code-cs[Generic.Dictionary.IDictionary#10](~/add/codesnippet/csharp/f916ab44-b2f0-44be-9c1a-_2.cs)]
[!code-vb[Generic.Dictionary.IDictionary#10](~/add/codesnippet/visualbasic/f916ab44-b2f0-44be-9c1a-_2.vb)]  
[!code-cs[Generic.Dictionary.IDictionary#32](~/add/codesnippet/csharp/f916ab44-b2f0-44be-9c1a-_3.cs)]
[!code-vb[Generic.Dictionary.IDictionary#32](~/add/codesnippet/visualbasic/f916ab44-b2f0-44be-9c1a-_3.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IDictionary.Values">
      <MemberSignature Language="C#" Value="System.Collections.ICollection System.Collections.IDictionary.Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection System.Collections.IDictionary.Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.</summary>
        <value>An <see cref="T:System.Collections.ICollection" /> containing the values in the <see cref="T:System.Collections.IDictionary" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The order of the values in the returned <xref:System.Collections.ICollection> is unspecified, but it is guaranteed to be the same order as the corresponding keys in the <xref:System.Collections.ICollection> returned by the <xref:System.Collections.IDictionary.Keys%2A> property.  
  
 Getting the value of this property is an O(1) operation.  
  
   
  
## Examples  
 The following code example shows how to use the IDictionary.Values property of the <xref:System.Collections.IDictionary?displayProperty=fullName> interface with a <xref:System.Collections.Generic.Dictionary%602>, to list the values in the dictionary. The example also shows how to enumerate the key/value pairs in the dictionary; note that the enumerator for the <xref:System.Collections.IDictionary?displayProperty=fullName> interface returns <xref:System.Collections.DictionaryEntry> objects rather than <xref:System.Collections.Generic.KeyValuePair%602> objects.  
  
 The code example is part of a larger example, including output, provided for the <xref:System.Collections.Generic.Dictionary%602.System%23Collections%23IDictionary%23Add%2A> method.  
  
 [!code-cs[Generic.Dictionary.IDictionary#31](~/add/codesnippet/csharp/a62f4fbf-b8cb-4b78-b3dc-_1.cs)]
 [!code-vb[Generic.Dictionary.IDictionary#31](~/add/codesnippet/visualbasic/a62f4fbf-b8cb-4b78-b3dc-_1.vb)]  
[!code-cs[Generic.Dictionary.IDictionary#8](~/add/codesnippet/csharp/a62f4fbf-b8cb-4b78-b3dc-_2.cs)]
[!code-vb[Generic.Dictionary.IDictionary#8](~/add/codesnippet/visualbasic/a62f4fbf-b8cb-4b78-b3dc-_2.vb)]  
[!code-cs[Generic.Dictionary.IDictionary#7](~/add/codesnippet/csharp/a62f4fbf-b8cb-4b78-b3dc-_3.cs)]
[!code-vb[Generic.Dictionary.IDictionary#7](~/add/codesnippet/visualbasic/a62f4fbf-b8cb-4b78-b3dc-_3.vb)]  
[!code-cs[Generic.Dictionary.IDictionary#32](~/add/codesnippet/csharp/a62f4fbf-b8cb-4b78-b3dc-_4.cs)]
[!code-vb[Generic.Dictionary.IDictionary#32](~/add/codesnippet/visualbasic/a62f4fbf-b8cb-4b78-b3dc-_4.vb)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an enumerator that iterates through the collection.</summary>
        <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 For purposes of enumeration, each item is a <xref:System.Collections.Generic.KeyValuePair%602> structure representing a value and its key.  
  
 The `foreach` statement of the C# language (`for each` in C++, `For Each` in Visual Basic) hides the complexity of enumerators. Therefore, using `foreach` is recommended, instead of directly manipulating the enumerator.  
  
 Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.  
  
 Initially, the enumerator is positioned before the first element in the collection. The <xref:System.Collections.IEnumerator.Reset%2A> method also brings the enumerator back to this position.  At this position, the <xref:System.Collections.IEnumerator.Current%2A> property is undefined. Therefore, you must call the <xref:System.Collections.IEnumerator.MoveNext%2A> method to advance the enumerator to the first element of the collection before reading the value of <xref:System.Collections.IEnumerator.Current%2A>.  
  
> [!NOTE]
>  For better performance, the enumerator returned by this property does not throw an exception if it is positioned before the first element or after the last element and the <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> property is accessed; the value of the <xref:System.Collections.Generic.Dictionary%602.Enumerator.Current%2A> property is undefined.  
  
 The <xref:System.Collections.IEnumerator.Current%2A> property returns the same element until either the <xref:System.Collections.IEnumerator.MoveNext%2A> or <xref:System.Collections.IEnumerator.Reset%2A> method is called. <xref:System.Collections.IEnumerator.MoveNext%2A> sets <xref:System.Collections.IEnumerator.Current%2A> to the next element.  
  
 If <xref:System.Collections.IEnumerator.MoveNext%2A> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref:System.Collections.IEnumerator.MoveNext%2A> returns `false`. When the enumerator is at this position, subsequent calls to <xref:System.Collections.IEnumerator.MoveNext%2A> also return `false`. If the last call to <xref:System.Collections.IEnumerator.MoveNext%2A> returned `false`, <xref:System.Collections.IEnumerator.Current%2A> is undefined. To set <xref:System.Collections.IEnumerator.Current%2A> to the first element of the collection again, you can call <xref:System.Collections.IEnumerator.Reset%2A> followed by <xref:System.Collections.IEnumerator.MoveNext%2A>.  
  
 An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.  
  
 The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.  
  
 Default implementations of collections in the <xref:System.Collections.Generic?displayProperty=fullName> namespace are not synchronized.  
  
 This method is an O(1) operation.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TryGetValue(!TKey key, !TValue value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="value" Type="TValue&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">The key of the value to get.</param>
        <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the `value` parameter. This parameter is passed uninitialized.</param>
        <summary>Gets the value associated with the specified key.</summary>
        <returns>
          <see langword="true" /> if the <see cref="System.Collections.Generic.Dictionary%602" /> contains an element with the specified key; otherwise, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 This method combines the functionality of the <xref:System.Collections.Generic.Dictionary%602.ContainsKey%2A> method and the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property.  
  
 If the key is not found, then the `value` parameter gets the appropriate default value for the type `TValue`; for example, 0 (zero) for integer types, `false` for Boolean types, and `null` for reference types.  
  
 Use the TryGetValue method if your code frequently attempts to access keys that are not in the dictionary. Using this method is more efficient than catching the <xref:System.Collections.Generic.KeyNotFoundException> thrown by the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property.  
  
 This method approaches an O(1) operation.  
  
   
  
## Examples  
 The example shows how to use the TryGetValue method as a more efficient way to retrieve values in a program that frequently tries keys that are not in the dictionary. For contrast, the example also shows how the <xref:System.Collections.Generic.Dictionary%602.Item%2A> property (the indexer in C#) throws exceptions when attempting to retrieve nonexistent keys.  
  
 This code example is part of a larger example provided for the <xref:System.Collections.Generic.Dictionary%602> class (`openWith` is the name of the Dictionary used in this example).  
  
 [!code-cpp[Generic.Dictionary#5](~/add/codesnippet/cpp/m-system.collections.gen_3_1.cpp)]
 [!code-cs[Generic.Dictionary#5](~/add/codesnippet/csharp/m-system.collections.gen_3_1.cs)]
 [!code-vb[Generic.Dictionary#5](~/add/codesnippet/visualbasic/m-system.collections.gen_3_1.vb)]  
[!code-cpp[Generic.Dictionary#4](~/add/codesnippet/cpp/m-system.collections.gen_3_2.cpp)]
[!code-cs[Generic.Dictionary#4](~/add/codesnippet/csharp/m-system.collections.gen_3_2.cs)]
[!code-vb[Generic.Dictionary#4](~/add/codesnippet/visualbasic/m-system.collections.gen_3_2.vb)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> is <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Values">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;.ValueCollection Values { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.Dictionary`2/ValueCollection&lt;!TKey, !TValue&gt; Values" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;+ValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a collection containing the values in the <see cref="System.Collections.Generic.Dictionary%602" />.</summary>
        <value>A <see cref="System.Collections.Generic.Dictionary%602.ValueCollection" /> containing the values in the <see cref="System.Collections.Generic.Dictionary%602" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 The order of the values in the <xref:System.Collections.Generic.Dictionary%602.ValueCollection> is unspecified, but it is the same order as the associated keys in the <xref:System.Collections.Generic.Dictionary%602.KeyCollection> returned by the <xref:System.Collections.Generic.Dictionary%602.Keys%2A> property.  
  
 The returned <xref:System.Collections.Generic.Dictionary%602.ValueCollection> is not a static copy; instead, the <xref:System.Collections.Generic.Dictionary%602.ValueCollection> refers back to the values in the original <xref:System.Collections.Generic.Dictionary%602>. Therefore, changes to the <xref:System.Collections.Generic.Dictionary%602> continue to be reflected in the <xref:System.Collections.Generic.Dictionary%602.ValueCollection>.  
  
 Getting the value of this property is an O(1) operation.  
  
   
  
## Examples  
 This code example shows how to enumerate the values in the dictionary using the Values property, and how to enumerate the keys and values in the dictionary.  
  
 This code example is part of a larger example provided for the <xref:System.Collections.Generic.Dictionary%602> class (`openWith` is the name of the Dictionary used in this example).  
  
 [!code-cpp[Generic.Dictionary#8](~/add/codesnippet/cpp/p-system.collections.gen_6_1.cpp)]
 [!code-cs[Generic.Dictionary#8](~/add/codesnippet/csharp/p-system.collections.gen_6_1.cs)]
 [!code-vb[Generic.Dictionary#8](~/add/codesnippet/visualbasic/p-system.collections.gen_6_1.vb)]  
[!code-cpp[Generic.Dictionary#7](~/add/codesnippet/cpp/p-system.collections.gen_6_2.cpp)]
[!code-cs[Generic.Dictionary#7](~/add/codesnippet/csharp/p-system.collections.gen_6_2.cs)]
[!code-vb[Generic.Dictionary#7](~/add/codesnippet/visualbasic/p-system.collections.gen_6_2.vb)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>