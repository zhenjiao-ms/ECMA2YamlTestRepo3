<?xml version="1.0" encoding="utf-8"?>
<Framework Name="netframework-2.0">
  <Type Name="Microsoft.Win32.Registry">
    <Member Sig="public static object GetValue (string keyName, string valueName, object defaultValue);" />
    <Member Sig="public static readonly Microsoft.Win32.RegistryKey ClassesRoot;" />
    <Member Sig="public static readonly Microsoft.Win32.RegistryKey CurrentConfig;" />
    <Member Sig="public static readonly Microsoft.Win32.RegistryKey CurrentUser;" />
    <Member Sig="public static readonly Microsoft.Win32.RegistryKey DynData;" />
    <Member Sig="public static readonly Microsoft.Win32.RegistryKey LocalMachine;" />
    <Member Sig="public static readonly Microsoft.Win32.RegistryKey PerformanceData;" />
    <Member Sig="public static readonly Microsoft.Win32.RegistryKey Users;" />
    <Member Sig="public static void SetValue (string keyName, string valueName, object value);" />
    <Member Sig="public static void SetValue (string keyName, string valueName, object value, Microsoft.Win32.RegistryValueKind valueKind);" />
  </Type>
  <Type Name="Microsoft.Win32.RegistryHive">
    <Member Sig="ClassesRoot" />
    <Member Sig="CurrentConfig" />
    <Member Sig="CurrentUser" />
    <Member Sig="DynData" />
    <Member Sig="LocalMachine" />
    <Member Sig="PerformanceData" />
    <Member Sig="Users" />
  </Type>
  <Type Name="Microsoft.Win32.RegistryKey">
    <Member Sig="public int SubKeyCount { get; }" />
    <Member Sig="public int ValueCount { get; }" />
    <Member Sig="public Microsoft.Win32.RegistryKey CreateSubKey (string subkey);" />
    <Member Sig="public Microsoft.Win32.RegistryKey CreateSubKey (string subkey, Microsoft.Win32.RegistryKeyPermissionCheck permissionCheck);" />
    <Member Sig="public Microsoft.Win32.RegistryKey CreateSubKey (string subkey, Microsoft.Win32.RegistryKeyPermissionCheck permissionCheck, System.Security.AccessControl.RegistrySecurity registrySecurity);" />
    <Member Sig="public Microsoft.Win32.RegistryKey OpenSubKey (string name);" />
    <Member Sig="public Microsoft.Win32.RegistryKey OpenSubKey (string name, bool writable);" />
    <Member Sig="public Microsoft.Win32.RegistryKey OpenSubKey (string name, Microsoft.Win32.RegistryKeyPermissionCheck permissionCheck);" />
    <Member Sig="public Microsoft.Win32.RegistryKey OpenSubKey (string name, Microsoft.Win32.RegistryKeyPermissionCheck permissionCheck, System.Security.AccessControl.RegistryRights rights);" />
    <Member Sig="public Microsoft.Win32.RegistryValueKind GetValueKind (string name);" />
    <Member Sig="public object GetValue (string name);" />
    <Member Sig="public object GetValue (string name, object defaultValue);" />
    <Member Sig="public object GetValue (string name, object defaultValue, Microsoft.Win32.RegistryValueOptions options);" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static Microsoft.Win32.RegistryKey OpenRemoteBaseKey (Microsoft.Win32.RegistryHive hKey, string machineName);" />
    <Member Sig="public string Name { get; }" />
    <Member Sig="public string[] GetSubKeyNames ();" />
    <Member Sig="public string[] GetValueNames ();" />
    <Member Sig="public System.Security.AccessControl.RegistrySecurity GetAccessControl ();" />
    <Member Sig="public System.Security.AccessControl.RegistrySecurity GetAccessControl (System.Security.AccessControl.AccessControlSections includeSections);" />
    <Member Sig="public void Close ();" />
    <Member Sig="public void DeleteSubKey (string subkey);" />
    <Member Sig="public void DeleteSubKey (string subkey, bool throwOnMissingSubKey);" />
    <Member Sig="public void DeleteSubKeyTree (string subkey);" />
    <Member Sig="public void DeleteValue (string name);" />
    <Member Sig="public void DeleteValue (string name, bool throwOnMissingValue);" />
    <Member Sig="public void Flush ();" />
    <Member Sig="public void SetAccessControl (System.Security.AccessControl.RegistrySecurity registrySecurity);" />
    <Member Sig="public void SetValue (string name, object value);" />
    <Member Sig="public void SetValue (string name, object value, Microsoft.Win32.RegistryValueKind valueKind);" />
    <Member Sig="void IDisposable.Dispose ();" />
  </Type>
  <Type Name="Microsoft.Win32.RegistryKeyPermissionCheck">
    <Member Sig="Default" />
    <Member Sig="ReadSubTree" />
    <Member Sig="ReadWriteSubTree" />
  </Type>
  <Type Name="Microsoft.Win32.RegistryValueKind">
    <Member Sig="Binary" />
    <Member Sig="DWord" />
    <Member Sig="ExpandString" />
    <Member Sig="MultiString" />
    <Member Sig="QWord" />
    <Member Sig="String" />
    <Member Sig="Unknown" />
  </Type>
  <Type Name="Microsoft.Win32.RegistryValueOptions">
    <Member Sig="DoNotExpandEnvironmentNames" />
    <Member Sig="None" />
  </Type>
  <Type Name="Microsoft.Win32.SafeHandles.CriticalHandleMinusOneIsInvalid">
    <Member Sig="protected CriticalHandleMinusOneIsInvalid ();" />
    <Member Sig="public override bool IsInvalid { get; }" />
  </Type>
  <Type Name="Microsoft.Win32.SafeHandles.CriticalHandleZeroOrMinusOneIsInvalid">
    <Member Sig="protected CriticalHandleZeroOrMinusOneIsInvalid ();" />
    <Member Sig="public override bool IsInvalid { get; }" />
  </Type>
  <Type Name="Microsoft.Win32.SafeHandles.SafeFileHandle">
    <Member Sig="protected override bool ReleaseHandle ();" />
    <Member Sig="public SafeFileHandle (IntPtr preexistingHandle, bool ownsHandle);" />
  </Type>
  <Type Name="Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid">
    <Member Sig="protected SafeHandleMinusOneIsInvalid (bool ownsHandle);" />
    <Member Sig="public override bool IsInvalid { get; }" />
  </Type>
  <Type Name="Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid">
    <Member Sig="protected SafeHandleZeroOrMinusOneIsInvalid (bool ownsHandle);" />
    <Member Sig="public override bool IsInvalid { get; }" />
  </Type>
  <Type Name="Microsoft.Win32.SafeHandles.SafeWaitHandle">
    <Member Sig="protected override bool ReleaseHandle ();" />
    <Member Sig="public SafeWaitHandle (IntPtr existingHandle, bool ownsHandle);" />
  </Type>
  <Type Name="System._AppDomain">
    <Member Sig="public bool Equals (object other);" />
    <Member Sig="public bool ShadowCopyFiles { get; }" />
    <Member Sig="public event AssemblyLoadEventHandler AssemblyLoad;" />
    <Member Sig="public event EventHandler DomainUnload;" />
    <Member Sig="public event EventHandler ProcessExit;" />
    <Member Sig="public event ResolveEventHandler AssemblyResolve;" />
    <Member Sig="public event ResolveEventHandler ResourceResolve;" />
    <Member Sig="public event ResolveEventHandler TypeResolve;" />
    <Member Sig="public event UnhandledExceptionEventHandler UnhandledException;" />
    <Member Sig="public int ExecuteAssembly (string assemblyFile);" />
    <Member Sig="public int ExecuteAssembly (string assemblyFile, System.Security.Policy.Evidence assemblySecurity);" />
    <Member Sig="public int ExecuteAssembly (string assemblyFile, System.Security.Policy.Evidence assemblySecurity, string[] args);" />
    <Member Sig="public int GetHashCode ();" />
    <Member Sig="public object GetData (string name);" />
    <Member Sig="public object GetLifetimeService ();" />
    <Member Sig="public object InitializeLifetimeService ();" />
    <Member Sig="public string BaseDirectory { get; }" />
    <Member Sig="public string DynamicDirectory { get; }" />
    <Member Sig="public string FriendlyName { get; }" />
    <Member Sig="public string RelativeSearchPath { get; }" />
    <Member Sig="public string ToString ();" />
    <Member Sig="public System.Reflection.Assembly Load (byte[] rawAssembly);" />
    <Member Sig="public System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore);" />
    <Member Sig="public System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore, System.Security.Policy.Evidence securityEvidence);" />
    <Member Sig="public System.Reflection.Assembly Load (string assemblyString);" />
    <Member Sig="public System.Reflection.Assembly Load (string assemblyString, System.Security.Policy.Evidence assemblySecurity);" />
    <Member Sig="public System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef);" />
    <Member Sig="public System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef, System.Security.Policy.Evidence assemblySecurity);" />
    <Member Sig="public System.Reflection.Assembly[] GetAssemblies ();" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access);" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir);" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence);" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions, bool isSynchronized);" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.Policy.Evidence evidence);" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);" />
    <Member Sig="public System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName);" />
    <Member Sig="public System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
    <Member Sig="public System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, object[] activationAttributes);" />
    <Member Sig="public System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName);" />
    <Member Sig="public System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
    <Member Sig="public System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, object[] activationAttributes);" />
    <Member Sig="public System.Security.Policy.Evidence Evidence { get; }" />
    <Member Sig="public Type GetType ();" />
    <Member Sig="public void AppendPrivatePath (string path);" />
    <Member Sig="public void ClearPrivatePath ();" />
    <Member Sig="public void ClearShadowCopyPath ();" />
    <Member Sig="public void DoCallBack (CrossAppDomainDelegate theDelegate);" />
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
    <Member Sig="public void SetAppDomainPolicy (System.Security.Policy.PolicyLevel domainPolicy);" />
    <Member Sig="public void SetCachePath (string s);" />
    <Member Sig="public void SetData (string name, object data);" />
    <Member Sig="public void SetPrincipalPolicy (System.Security.Principal.PrincipalPolicy policy);" />
    <Member Sig="public void SetShadowCopyPath (string s);" />
    <Member Sig="public void SetThreadPrincipal (System.Security.Principal.IPrincipal principal);" />
  </Type>
  <Type Name="System.AccessViolationException">
    <Member Sig="protected AccessViolationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public AccessViolationException ();" />
    <Member Sig="public AccessViolationException (string message);" />
    <Member Sig="public AccessViolationException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.Action`1" />
  <Type Name="System.ActivationContext">
    <Member Sig="~ActivationContext ();" />
    <Member Sig="public ActivationContext.ContextForm Form { get; }" />
    <Member Sig="public ApplicationIdentity Identity { get; }" />
    <Member Sig="public byte[] ApplicationManifestBytes { get; }" />
    <Member Sig="public byte[] DeploymentManifestBytes { get; }" />
    <Member Sig="public static ActivationContext CreatePartialActivationContext (ApplicationIdentity identity);" />
    <Member Sig="public static ActivationContext CreatePartialActivationContext (ApplicationIdentity identity, string[] manifestPaths);" />
    <Member Sig="public void Dispose ();" />
    <Member Sig="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.ActivationContext/ContextForm">
    <Member Sig="Loose" />
    <Member Sig="StoreBounded" />
  </Type>
  <Type Name="System.Activator">
    <Member Sig="public static object CreateInstance (Type type);" />
    <Member Sig="public static object CreateInstance (Type type, bool nonPublic);" />
    <Member Sig="public static object CreateInstance (Type type, object[] args);" />
    <Member Sig="public static object CreateInstance (Type type, object[] args, object[] activationAttributes);" />
    <Member Sig="public static object CreateInstance (Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture);" />
    <Member Sig="public static object CreateInstance (Type type, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
    <Member Sig="public static object GetObject (Type type, string url);" />
    <Member Sig="public static object GetObject (Type type, string url, object state);" />
    <Member Sig="public static System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom (string assemblyName, string typeName);" />
    <Member Sig="public static System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom (string assemblyName, string typeName, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);" />
    <Member Sig="public static System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext);" />
    <Member Sig="public static System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext, string[] activationCustomData);" />
    <Member Sig="public static System.Runtime.Remoting.ObjectHandle CreateInstance (AppDomain domain, string assemblyName, string typeName);" />
    <Member Sig="public static System.Runtime.Remoting.ObjectHandle CreateInstance (AppDomain domain, string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
    <Member Sig="public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName);" />
    <Member Sig="public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityInfo);" />
    <Member Sig="public static System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, object[] activationAttributes);" />
    <Member Sig="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (AppDomain domain, string assemblyFile, string typeName);" />
    <Member Sig="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (AppDomain domain, string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
    <Member Sig="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName);" />
    <Member Sig="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityInfo);" />
    <Member Sig="public static System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, object[] activationAttributes);" />
    <Member Sig="public static T CreateInstance&lt;T&gt; ();" />
    <Member Sig="void _Activator.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _Activator.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _Activator.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _Activator.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.AppDomain">
    <Member Sig="public ActivationContext ActivationContext { get; }" />
    <Member Sig="public AppDomainManager DomainManager { get; }" />
    <Member Sig="public AppDomainSetup SetupInformation { get; }" />
    <Member Sig="public ApplicationIdentity ApplicationIdentity { get; }" />
    <Member Sig="public bool IsDefaultAppDomain ();" />
    <Member Sig="public bool IsFinalizingForUnload ();" />
    <Member Sig="public bool ShadowCopyFiles { get; }" />
    <Member Sig="public event AssemblyLoadEventHandler AssemblyLoad;" />
    <Member Sig="public event EventHandler DomainUnload;" />
    <Member Sig="public event EventHandler ProcessExit;" />
    <Member Sig="public event ResolveEventHandler AssemblyResolve;" />
    <Member Sig="public event ResolveEventHandler ReflectionOnlyAssemblyResolve;" />
    <Member Sig="public event ResolveEventHandler ResourceResolve;" />
    <Member Sig="public event ResolveEventHandler TypeResolve;" />
    <Member Sig="public event UnhandledExceptionEventHandler UnhandledException;" />
    <Member Sig="public int ExecuteAssembly (string assemblyFile);" />
    <Member Sig="public int ExecuteAssembly (string assemblyFile, System.Security.Policy.Evidence assemblySecurity);" />
    <Member Sig="public int ExecuteAssembly (string assemblyFile, System.Security.Policy.Evidence assemblySecurity, string[] args);" />
    <Member Sig="public int ExecuteAssembly (string assemblyFile, System.Security.Policy.Evidence assemblySecurity, string[] args, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);" />
    <Member Sig="public int ExecuteAssemblyByName (string assemblyName);" />
    <Member Sig="public int ExecuteAssemblyByName (string assemblyName, System.Security.Policy.Evidence assemblySecurity);" />
    <Member Sig="public int ExecuteAssemblyByName (string assemblyName, System.Security.Policy.Evidence assemblySecurity, string[] args);" />
    <Member Sig="public int ExecuteAssemblyByName (System.Reflection.AssemblyName assemblyName, System.Security.Policy.Evidence assemblySecurity, string[] args);" />
    <Member Sig="public int Id { get; }" />
    <Member Sig="public object CreateInstanceAndUnwrap (string assemblyName, string typeName);" />
    <Member Sig="public object CreateInstanceAndUnwrap (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
    <Member Sig="public object CreateInstanceAndUnwrap (string assemblyName, string typeName, object[] activationAttributes);" />
    <Member Sig="public object CreateInstanceFromAndUnwrap (string assemblyName, string typeName);" />
    <Member Sig="public object CreateInstanceFromAndUnwrap (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
    <Member Sig="public object CreateInstanceFromAndUnwrap (string assemblyName, string typeName, object[] activationAttributes);" />
    <Member Sig="public object GetData (string name);" />
    <Member Sig="public override object InitializeLifetimeService ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static AppDomain CreateDomain (string friendlyName);" />
    <Member Sig="public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo);" />
    <Member Sig="public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup info);" />
    <Member Sig="public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup info, System.Security.PermissionSet grantSet, System.Security.Policy.StrongName[] fullTrustAssemblies);" />
    <Member Sig="public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles);" />
    <Member Sig="public static AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, string appBasePath, string appRelativeSearchPath, bool shadowCopyFiles, AppDomainInitializer adInit, string[] adInitArgs);" />
    <Member Sig="public static AppDomain CurrentDomain { get; }" />
    <Member Sig="public static int GetCurrentThreadId ();" />
    <Member Sig="public static void Unload (AppDomain domain);" />
    <Member Sig="public string ApplyPolicy (string assemblyName);" />
    <Member Sig="public string BaseDirectory { get; }" />
    <Member Sig="public string DynamicDirectory { get; }" />
    <Member Sig="public string FriendlyName { get; }" />
    <Member Sig="public string RelativeSearchPath { get; }" />
    <Member Sig="public System.Reflection.Assembly Load (byte[] rawAssembly);" />
    <Member Sig="public System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore);" />
    <Member Sig="public System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore, System.Security.Policy.Evidence securityEvidence);" />
    <Member Sig="public System.Reflection.Assembly Load (string assemblyString);" />
    <Member Sig="public System.Reflection.Assembly Load (string assemblyString, System.Security.Policy.Evidence assemblySecurity);" />
    <Member Sig="public System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef);" />
    <Member Sig="public System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef, System.Security.Policy.Evidence assemblySecurity);" />
    <Member Sig="public System.Reflection.Assembly[] GetAssemblies ();" />
    <Member Sig="public System.Reflection.Assembly[] ReflectionOnlyGetAssemblies ();" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access);" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir);" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence);" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions, bool isSynchronized);" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, string dir, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions, bool isSynchronized, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes);" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt; assemblyAttributes);" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.Policy.Evidence evidence);" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder DefineDynamicAssembly (System.Reflection.AssemblyName name, System.Reflection.Emit.AssemblyBuilderAccess access, System.Security.Policy.Evidence evidence, System.Security.PermissionSet requiredPermissions, System.Security.PermissionSet optionalPermissions, System.Security.PermissionSet refusedPermissions);" />
    <Member Sig="public System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom (string assemblyFile, string typeName, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);" />
    <Member Sig="public System.Runtime.Remoting.ObjectHandle CreateComInstanceFrom (string assemblyName, string typeName);" />
    <Member Sig="public System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName);" />
    <Member Sig="public System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
    <Member Sig="public System.Runtime.Remoting.ObjectHandle CreateInstance (string assemblyName, string typeName, object[] activationAttributes);" />
    <Member Sig="public System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName);" />
    <Member Sig="public System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes, System.Security.Policy.Evidence securityAttributes);" />
    <Member Sig="public System.Runtime.Remoting.ObjectHandle CreateInstanceFrom (string assemblyFile, string typeName, object[] activationAttributes);" />
    <Member Sig="public System.Security.Policy.ApplicationTrust ApplicationTrust { get; }" />
    <Member Sig="public System.Security.Policy.Evidence Evidence { get; }" />
    <Member Sig="public Type GetType ();" />
    <Member Sig="public void AppendPrivatePath (string path);" />
    <Member Sig="public void ClearPrivatePath ();" />
    <Member Sig="public void ClearShadowCopyPath ();" />
    <Member Sig="public void DoCallBack (CrossAppDomainDelegate callBackDelegate);" />
    <Member Sig="public void SetAppDomainPolicy (System.Security.Policy.PolicyLevel domainPolicy);" />
    <Member Sig="public void SetCachePath (string path);" />
    <Member Sig="public void SetData (string name, object data);" />
    <Member Sig="public void SetData (string name, object data, System.Security.IPermission permission);" />
    <Member Sig="public void SetDynamicBase (string path);" />
    <Member Sig="public void SetPrincipalPolicy (System.Security.Principal.PrincipalPolicy policy);" />
    <Member Sig="public void SetShadowCopyFiles ();" />
    <Member Sig="public void SetShadowCopyPath (string path);" />
    <Member Sig="public void SetThreadPrincipal (System.Security.Principal.IPrincipal principal);" />
    <Member Sig="void _AppDomain.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _AppDomain.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _AppDomain.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _AppDomain.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.AppDomainInitializer" />
  <Type Name="System.AppDomainManager">
    <Member Sig="protected static AppDomain CreateDomainHelper (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup appDomainInfo);" />
    <Member Sig="public AppDomainManager ();" />
    <Member Sig="public AppDomainManagerInitializationOptions InitializationFlags { get; set; }" />
    <Member Sig="public virtual AppDomain CreateDomain (string friendlyName, System.Security.Policy.Evidence securityInfo, AppDomainSetup appDomainInfo);" />
    <Member Sig="public virtual bool CheckSecuritySettings (System.Security.SecurityState state);" />
    <Member Sig="public virtual System.Reflection.Assembly EntryAssembly { get; }" />
    <Member Sig="public virtual System.Runtime.Hosting.ApplicationActivator ApplicationActivator { get; }" />
    <Member Sig="public virtual System.Security.HostSecurityManager HostSecurityManager { get; }" />
    <Member Sig="public virtual System.Threading.HostExecutionContextManager HostExecutionContextManager { get; }" />
    <Member Sig="public virtual void InitializeNewDomain (AppDomainSetup appDomainInfo);" />
  </Type>
  <Type Name="System.AppDomainManagerInitializationOptions">
    <Member Sig="None" />
    <Member Sig="RegisterWithHost" />
  </Type>
  <Type Name="System.AppDomainSetup">
    <Member Sig="public AppDomainInitializer AppDomainInitializer { get; set; }" />
    <Member Sig="public AppDomainSetup ();" />
    <Member Sig="public AppDomainSetup (ActivationContext activationContext);" />
    <Member Sig="public AppDomainSetup (System.Runtime.Hosting.ActivationArguments activationArguments);" />
    <Member Sig="public bool DisallowApplicationBaseProbing { get; set; }" />
    <Member Sig="public bool DisallowBindingRedirects { get; set; }" />
    <Member Sig="public bool DisallowCodeDownload { get; set; }" />
    <Member Sig="public bool DisallowPublisherPolicy { get; set; }" />
    <Member Sig="public bool SandboxInterop { get; set; }" />
    <Member Sig="public byte[] GetConfigurationBytes ();" />
    <Member Sig="public LoaderOptimization LoaderOptimization { get; set; }" />
    <Member Sig="public string ApplicationBase { get; set; }" />
    <Member Sig="public string ApplicationName { get; set; }" />
    <Member Sig="public string CachePath { get; set; }" />
    <Member Sig="public string ConfigurationFile { get; set; }" />
    <Member Sig="public string DynamicBase { get; set; }" />
    <Member Sig="public string LicenseFile { get; set; }" />
    <Member Sig="public string PrivateBinPath { get; set; }" />
    <Member Sig="public string PrivateBinPathProbe { get; set; }" />
    <Member Sig="public string ShadowCopyDirectories { get; set; }" />
    <Member Sig="public string ShadowCopyFiles { get; set; }" />
    <Member Sig="public string[] AppDomainInitializerArguments { get; set; }" />
    <Member Sig="public System.Runtime.Hosting.ActivationArguments ActivationArguments { get; set; }" />
    <Member Sig="public System.Security.Policy.ApplicationTrust ApplicationTrust { get; set; }" />
    <Member Sig="public void SetConfigurationBytes (byte[] value);" />
  </Type>
  <Type Name="System.AppDomainUnloadedException">
    <Member Sig="protected AppDomainUnloadedException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public AppDomainUnloadedException ();" />
    <Member Sig="public AppDomainUnloadedException (string message);" />
    <Member Sig="public AppDomainUnloadedException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.ApplicationException">
    <Member Sig="protected ApplicationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public ApplicationException ();" />
    <Member Sig="public ApplicationException (string message);" />
    <Member Sig="public ApplicationException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.ApplicationId">
    <Member Sig="public ApplicationId (byte[] publicKeyToken, string name, Version version, string processorArchitecture, string culture);" />
    <Member Sig="public ApplicationId Copy ();" />
    <Member Sig="public byte[] PublicKeyToken { get; }" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public string Culture { get; }" />
    <Member Sig="public string Name { get; }" />
    <Member Sig="public string ProcessorArchitecture { get; }" />
    <Member Sig="public Version Version { get; }" />
  </Type>
  <Type Name="System.ApplicationIdentity">
    <Member Sig="public ApplicationIdentity (string applicationIdentityFullName);" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public string CodeBase { get; }" />
    <Member Sig="public string FullName { get; }" />
    <Member Sig="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.ArgIterator">
    <Member Sig="public ArgIterator (RuntimeArgumentHandle arglist);" />
    <Member Sig="public ArgIterator (RuntimeArgumentHandle arglist, void* ptr);" />
    <Member Sig="public int GetRemainingCount ();" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public RuntimeTypeHandle GetNextArgType ();" />
    <Member Sig="public TypedReference GetNextArg ();" />
    <Member Sig="public TypedReference GetNextArg (RuntimeTypeHandle rth);" />
    <Member Sig="public void End ();" />
  </Type>
  <Type Name="System.ArgumentException">
    <Member Sig="protected ArgumentException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public ArgumentException ();" />
    <Member Sig="public ArgumentException (string message);" />
    <Member Sig="public ArgumentException (string message, Exception innerException);" />
    <Member Sig="public ArgumentException (string message, string paramName);" />
    <Member Sig="public ArgumentException (string message, string paramName, Exception innerException);" />
    <Member Sig="public override string Message { get; }" />
    <Member Sig="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public virtual string ParamName { get; }" />
  </Type>
  <Type Name="System.ArgumentNullException">
    <Member Sig="protected ArgumentNullException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public ArgumentNullException ();" />
    <Member Sig="public ArgumentNullException (string message, Exception innerException);" />
    <Member Sig="public ArgumentNullException (string paramName);" />
    <Member Sig="public ArgumentNullException (string paramName, string message);" />
  </Type>
  <Type Name="System.ArgumentOutOfRangeException">
    <Member Sig="protected ArgumentOutOfRangeException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public ArgumentOutOfRangeException ();" />
    <Member Sig="public ArgumentOutOfRangeException (string message, Exception innerException);" />
    <Member Sig="public ArgumentOutOfRangeException (string paramName);" />
    <Member Sig="public ArgumentOutOfRangeException (string paramName, object actualValue, string message);" />
    <Member Sig="public ArgumentOutOfRangeException (string paramName, string message);" />
    <Member Sig="public override string Message { get; }" />
    <Member Sig="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public virtual object ActualValue { get; }" />
  </Type>
  <Type Name="System.ArithmeticException">
    <Member Sig="protected ArithmeticException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public ArithmeticException ();" />
    <Member Sig="public ArithmeticException (string message);" />
    <Member Sig="public ArithmeticException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.Array">
    <Member Sig="bool IList.Contains (object value);" />
    <Member Sig="int IList.Add (object value);" />
    <Member Sig="int IList.IndexOf (object value);" />
    <Member Sig="int System.Collections.ICollection.Count { get; }" />
    <Member Sig="object System.Collections.IList.Item[int index] { get; set; }" />
    <Member Sig="public bool IsFixedSize { get; }" />
    <Member Sig="public bool IsReadOnly { get; }" />
    <Member Sig="public bool IsSynchronized { get; }" />
    <Member Sig="public int GetLength (int dimension);" />
    <Member Sig="public int GetLowerBound (int dimension);" />
    <Member Sig="public int GetUpperBound (int dimension);" />
    <Member Sig="public int Length { get; }" />
    <Member Sig="public int Rank { get; }" />
    <Member Sig="public long GetLongLength (int dimension);" />
    <Member Sig="public long LongLength { get; }" />
    <Member Sig="public object Clone ();" />
    <Member Sig="public object GetValue (int index);" />
    <Member Sig="public object GetValue (int index1, int index2);" />
    <Member Sig="public object GetValue (int index1, int index2, int index3);" />
    <Member Sig="public object GetValue (int[] indices);" />
    <Member Sig="public object GetValue (long index);" />
    <Member Sig="public object GetValue (long index1, long index2);" />
    <Member Sig="public object GetValue (long index1, long index2, long index3);" />
    <Member Sig="public object GetValue (long[] indices);" />
    <Member Sig="public object SyncRoot { get; }" />
    <Member Sig="public static Array CreateInstance (Type elementType, int length);" />
    <Member Sig="public static Array CreateInstance (Type elementType, int length1, int length2);" />
    <Member Sig="public static Array CreateInstance (Type elementType, int length1, int length2, int length3);" />
    <Member Sig="public static Array CreateInstance (Type elementType, int[] lengths);" />
    <Member Sig="public static Array CreateInstance (Type elementType, int[] lengths, int[] lowerBounds);" />
    <Member Sig="public static Array CreateInstance (Type elementType, long[] lengths);" />
    <Member Sig="public static bool Exists&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);" />
    <Member Sig="public static bool TrueForAll&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);" />
    <Member Sig="public static int BinarySearch (Array array, int index, int length, object value);" />
    <Member Sig="public static int BinarySearch (Array array, int index, int length, object value, System.Collections.IComparer comparer);" />
    <Member Sig="public static int BinarySearch (Array array, object value);" />
    <Member Sig="public static int BinarySearch (Array array, object value, System.Collections.IComparer comparer);" />
    <Member Sig="public static int BinarySearch&lt;T&gt; (T[] array, int index, int length, T value);" />
    <Member Sig="public static int BinarySearch&lt;T&gt; (T[] array, int index, int length, T value, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
    <Member Sig="public static int BinarySearch&lt;T&gt; (T[] array, T value);" />
    <Member Sig="public static int BinarySearch&lt;T&gt; (T[] array, T value, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
    <Member Sig="public static int FindIndex&lt;T&gt; (T[] array, int startIndex, int count, Predicate&lt;T&gt; match);" />
    <Member Sig="public static int FindIndex&lt;T&gt; (T[] array, int startIndex, Predicate&lt;T&gt; match);" />
    <Member Sig="public static int FindIndex&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);" />
    <Member Sig="public static int FindLastIndex&lt;T&gt; (T[] array, int startIndex, int count, Predicate&lt;T&gt; match);" />
    <Member Sig="public static int FindLastIndex&lt;T&gt; (T[] array, int startIndex, Predicate&lt;T&gt; match);" />
    <Member Sig="public static int FindLastIndex&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);" />
    <Member Sig="public static int IndexOf (Array array, object value);" />
    <Member Sig="public static int IndexOf (Array array, object value, int startIndex);" />
    <Member Sig="public static int IndexOf (Array array, object value, int startIndex, int count);" />
    <Member Sig="public static int IndexOf&lt;T&gt; (T[] array, T value);" />
    <Member Sig="public static int IndexOf&lt;T&gt; (T[] array, T value, int startIndex);" />
    <Member Sig="public static int IndexOf&lt;T&gt; (T[] array, T value, int startIndex, int count);" />
    <Member Sig="public static int LastIndexOf (Array array, object value);" />
    <Member Sig="public static int LastIndexOf (Array array, object value, int startIndex);" />
    <Member Sig="public static int LastIndexOf (Array array, object value, int startIndex, int count);" />
    <Member Sig="public static int LastIndexOf&lt;T&gt; (T[] array, T value);" />
    <Member Sig="public static int LastIndexOf&lt;T&gt; (T[] array, T value, int startIndex);" />
    <Member Sig="public static int LastIndexOf&lt;T&gt; (T[] array, T value, int startIndex, int count);" />
    <Member Sig="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; AsReadOnly&lt;T&gt; (T[] array);" />
    <Member Sig="public static T Find&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);" />
    <Member Sig="public static T FindLast&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);" />
    <Member Sig="public static T[] FindAll&lt;T&gt; (T[] array, Predicate&lt;T&gt; match);" />
    <Member Sig="public static TOutput[] ConvertAll&lt;TInput,TOutput&gt; (TInput[] array, Converter&lt;TInput,TOutput&gt; converter);" />
    <Member Sig="public static void Clear (Array array, int index, int length);" />
    <Member Sig="public static void ConstrainedCopy (Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length);" />
    <Member Sig="public static void Copy (Array sourceArray, Array destinationArray, int length);" />
    <Member Sig="public static void Copy (Array sourceArray, Array destinationArray, long length);" />
    <Member Sig="public static void Copy (Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length);" />
    <Member Sig="public static void Copy (Array sourceArray, long sourceIndex, Array destinationArray, long destinationIndex, long length);" />
    <Member Sig="public static void ForEach&lt;T&gt; (T[] array, Action&lt;T&gt; action);" />
    <Member Sig="public static void Resize&lt;T&gt; (ref T[] array, int newSize);" />
    <Member Sig="public static void Reverse (Array array);" />
    <Member Sig="public static void Reverse (Array array, int index, int length);" />
    <Member Sig="public static void Sort (Array array);" />
    <Member Sig="public static void Sort (Array array, int index, int length);" />
    <Member Sig="public static void Sort (Array array, int index, int length, System.Collections.IComparer comparer);" />
    <Member Sig="public static void Sort (Array array, System.Collections.IComparer comparer);" />
    <Member Sig="public static void Sort (Array keys, Array items);" />
    <Member Sig="public static void Sort (Array keys, Array items, int index, int length);" />
    <Member Sig="public static void Sort (Array keys, Array items, int index, int length, System.Collections.IComparer comparer);" />
    <Member Sig="public static void Sort (Array keys, Array items, System.Collections.IComparer comparer);" />
    <Member Sig="public static void Sort&lt;T&gt; (T[] array);" />
    <Member Sig="public static void Sort&lt;T&gt; (T[] array, Comparison&lt;T&gt; comparison);" />
    <Member Sig="public static void Sort&lt;T&gt; (T[] array, int index, int length);" />
    <Member Sig="public static void Sort&lt;T&gt; (T[] array, int index, int length, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
    <Member Sig="public static void Sort&lt;T&gt; (T[] array, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
    <Member Sig="public static void Sort&lt;TKey,TValue&gt; (TKey[] keys, TValue[] items);" />
    <Member Sig="public static void Sort&lt;TKey,TValue&gt; (TKey[] keys, TValue[] items, int index, int length);" />
    <Member Sig="public static void Sort&lt;TKey,TValue&gt; (TKey[] keys, TValue[] items, int index, int length, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
    <Member Sig="public static void Sort&lt;TKey,TValue&gt; (TKey[] keys, TValue[] items, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
    <Member Sig="public System.Collections.IEnumerator GetEnumerator ();" />
    <Member Sig="public void CopyTo (Array array, int index);" />
    <Member Sig="public void CopyTo (Array array, long index);" />
    <Member Sig="public void Initialize ();" />
    <Member Sig="public void SetValue (object value, int index);" />
    <Member Sig="public void SetValue (object value, int index1, int index2);" />
    <Member Sig="public void SetValue (object value, int index1, int index2, int index3);" />
    <Member Sig="public void SetValue (object value, int[] indices);" />
    <Member Sig="public void SetValue (object value, long index);" />
    <Member Sig="public void SetValue (object value, long index1, long index2);" />
    <Member Sig="public void SetValue (object value, long index1, long index2, long index3);" />
    <Member Sig="public void SetValue (object value, long[] indices);" />
    <Member Sig="void IList.Clear ();" />
    <Member Sig="void IList.Insert (int index, object value);" />
    <Member Sig="void IList.Remove (object value);" />
    <Member Sig="void IList.RemoveAt (int index);" />
  </Type>
  <Type Name="System.ArraySegment`1">
    <Member Sig="public ArraySegment (T[] array);" />
    <Member Sig="public ArraySegment (T[] array, int offset, int count);" />
    <Member Sig="public bool Equals (ArraySegment&lt;T&gt; obj);" />
    <Member Sig="public int Count { get; }" />
    <Member Sig="public int Offset { get; }" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static bool op_Equality (ArraySegment&lt;T&gt; a, ArraySegment&lt;T&gt; b);" />
    <Member Sig="public static bool op_Inequality (ArraySegment&lt;T&gt; a, ArraySegment&lt;T&gt; b);" />
    <Member Sig="public T[] Array { get; }" />
  </Type>
  <Type Name="System.ArrayTypeMismatchException">
    <Member Sig="protected ArrayTypeMismatchException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public ArrayTypeMismatchException ();" />
    <Member Sig="public ArrayTypeMismatchException (string message);" />
    <Member Sig="public ArrayTypeMismatchException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.AssemblyLoadEventArgs">
    <Member Sig="public AssemblyLoadEventArgs (System.Reflection.Assembly loadedAssembly);" />
    <Member Sig="public System.Reflection.Assembly LoadedAssembly { get; }" />
  </Type>
  <Type Name="System.AssemblyLoadEventHandler" />
  <Type Name="System.AsyncCallback" />
  <Type Name="System.Attribute">
    <Member Sig="protected Attribute ();" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static Attribute GetCustomAttribute (System.Reflection.Assembly element, Type attributeType);" />
    <Member Sig="public static Attribute GetCustomAttribute (System.Reflection.Assembly element, Type attributeType, bool inherit);" />
    <Member Sig="public static Attribute GetCustomAttribute (System.Reflection.MemberInfo element, Type attributeType);" />
    <Member Sig="public static Attribute GetCustomAttribute (System.Reflection.MemberInfo element, Type attributeType, bool inherit);" />
    <Member Sig="public static Attribute GetCustomAttribute (System.Reflection.Module element, Type attributeType);" />
    <Member Sig="public static Attribute GetCustomAttribute (System.Reflection.Module element, Type attributeType, bool inherit);" />
    <Member Sig="public static Attribute GetCustomAttribute (System.Reflection.ParameterInfo element, Type attributeType);" />
    <Member Sig="public static Attribute GetCustomAttribute (System.Reflection.ParameterInfo element, Type attributeType, bool inherit);" />
    <Member Sig="public static Attribute[] GetCustomAttributes (System.Reflection.Assembly element);" />
    <Member Sig="public static Attribute[] GetCustomAttributes (System.Reflection.Assembly element, bool inherit);" />
    <Member Sig="public static Attribute[] GetCustomAttributes (System.Reflection.Assembly element, Type attributeType);" />
    <Member Sig="public static Attribute[] GetCustomAttributes (System.Reflection.Assembly element, Type attributeType, bool inherit);" />
    <Member Sig="public static Attribute[] GetCustomAttributes (System.Reflection.MemberInfo element);" />
    <Member Sig="public static Attribute[] GetCustomAttributes (System.Reflection.MemberInfo element, bool inherit);" />
    <Member Sig="public static Attribute[] GetCustomAttributes (System.Reflection.MemberInfo element, Type type);" />
    <Member Sig="public static Attribute[] GetCustomAttributes (System.Reflection.MemberInfo element, Type type, bool inherit);" />
    <Member Sig="public static Attribute[] GetCustomAttributes (System.Reflection.Module element);" />
    <Member Sig="public static Attribute[] GetCustomAttributes (System.Reflection.Module element, bool inherit);" />
    <Member Sig="public static Attribute[] GetCustomAttributes (System.Reflection.Module element, Type attributeType);" />
    <Member Sig="public static Attribute[] GetCustomAttributes (System.Reflection.Module element, Type attributeType, bool inherit);" />
    <Member Sig="public static Attribute[] GetCustomAttributes (System.Reflection.ParameterInfo element);" />
    <Member Sig="public static Attribute[] GetCustomAttributes (System.Reflection.ParameterInfo element, bool inherit);" />
    <Member Sig="public static Attribute[] GetCustomAttributes (System.Reflection.ParameterInfo element, Type attributeType);" />
    <Member Sig="public static Attribute[] GetCustomAttributes (System.Reflection.ParameterInfo element, Type attributeType, bool inherit);" />
    <Member Sig="public static bool IsDefined (System.Reflection.Assembly element, Type attributeType);" />
    <Member Sig="public static bool IsDefined (System.Reflection.Assembly element, Type attributeType, bool inherit);" />
    <Member Sig="public static bool IsDefined (System.Reflection.MemberInfo element, Type attributeType);" />
    <Member Sig="public static bool IsDefined (System.Reflection.MemberInfo element, Type attributeType, bool inherit);" />
    <Member Sig="public static bool IsDefined (System.Reflection.Module element, Type attributeType);" />
    <Member Sig="public static bool IsDefined (System.Reflection.Module element, Type attributeType, bool inherit);" />
    <Member Sig="public static bool IsDefined (System.Reflection.ParameterInfo element, Type attributeType);" />
    <Member Sig="public static bool IsDefined (System.Reflection.ParameterInfo element, Type attributeType, bool inherit);" />
    <Member Sig="public virtual bool IsDefaultAttribute ();" />
    <Member Sig="public virtual bool Match (object obj);" />
    <Member Sig="public virtual object TypeId { get; }" />
    <Member Sig="void _Attribute.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _Attribute.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _Attribute.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _Attribute.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.AttributeTargets">
    <Member Sig="All" />
    <Member Sig="Assembly" />
    <Member Sig="Class" />
    <Member Sig="Constructor" />
    <Member Sig="Delegate" />
    <Member Sig="Enum" />
    <Member Sig="Event" />
    <Member Sig="Field" />
    <Member Sig="GenericParameter" />
    <Member Sig="Interface" />
    <Member Sig="Method" />
    <Member Sig="Module" />
    <Member Sig="Parameter" />
    <Member Sig="Property" />
    <Member Sig="ReturnValue" />
    <Member Sig="Struct" />
  </Type>
  <Type Name="System.AttributeUsageAttribute">
    <Member Sig="public AttributeTargets ValidOn { get; }" />
    <Member Sig="public AttributeUsageAttribute (AttributeTargets validOn);" />
    <Member Sig="public bool AllowMultiple { get; set; }" />
    <Member Sig="public bool Inherited { get; set; }" />
  </Type>
  <Type Name="System.BadImageFormatException">
    <Member Sig="protected BadImageFormatException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public BadImageFormatException ();" />
    <Member Sig="public BadImageFormatException (string message);" />
    <Member Sig="public BadImageFormatException (string message, Exception inner);" />
    <Member Sig="public BadImageFormatException (string message, string fileName);" />
    <Member Sig="public BadImageFormatException (string message, string fileName, Exception inner);" />
    <Member Sig="public override string Message { get; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public string FileName { get; }" />
    <Member Sig="public string FusionLog { get; }" />
  </Type>
  <Type Name="System.Base64FormattingOptions">
    <Member Sig="InsertLineBreaks" />
    <Member Sig="None" />
  </Type>
  <Type Name="System.BitConverter">
    <Member Sig="public static bool ToBoolean (byte[] value, int startIndex);" />
    <Member Sig="public static byte[] GetBytes (bool value);" />
    <Member Sig="public static byte[] GetBytes (char value);" />
    <Member Sig="public static byte[] GetBytes (double value);" />
    <Member Sig="public static byte[] GetBytes (float value);" />
    <Member Sig="public static byte[] GetBytes (int value);" />
    <Member Sig="public static byte[] GetBytes (long value);" />
    <Member Sig="public static byte[] GetBytes (short value);" />
    <Member Sig="public static byte[] GetBytes (uint value);" />
    <Member Sig="public static byte[] GetBytes (ulong value);" />
    <Member Sig="public static byte[] GetBytes (ushort value);" />
    <Member Sig="public static char ToChar (byte[] value, int startIndex);" />
    <Member Sig="public static double Int64BitsToDouble (long value);" />
    <Member Sig="public static double ToDouble (byte[] value, int startIndex);" />
    <Member Sig="public static float ToSingle (byte[] value, int startIndex);" />
    <Member Sig="public static int ToInt32 (byte[] value, int startIndex);" />
    <Member Sig="public static long DoubleToInt64Bits (double value);" />
    <Member Sig="public static long ToInt64 (byte[] value, int startIndex);" />
    <Member Sig="public static readonly bool IsLittleEndian;" />
    <Member Sig="public static short ToInt16 (byte[] value, int startIndex);" />
    <Member Sig="public static string ToString (byte[] value);" />
    <Member Sig="public static string ToString (byte[] value, int startIndex);" />
    <Member Sig="public static string ToString (byte[] value, int startIndex, int length);" />
    <Member Sig="public static uint ToUInt32 (byte[] value, int startIndex);" />
    <Member Sig="public static ulong ToUInt64 (byte[] value, int startIndex);" />
    <Member Sig="public static ushort ToUInt16 (byte[] value, int startIndex);" />
  </Type>
  <Type Name="System.Boolean">
    <Member Sig="bool IConvertible.ToBoolean (IFormatProvider provider);" />
    <Member Sig="byte IConvertible.ToByte (IFormatProvider provider);" />
    <Member Sig="char IConvertible.ToChar (IFormatProvider provider);" />
    <Member Sig="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
    <Member Sig="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
    <Member Sig="double IConvertible.ToDouble (IFormatProvider provider);" />
    <Member Sig="float IConvertible.ToSingle (IFormatProvider provider);" />
    <Member Sig="int IConvertible.ToInt32 (IFormatProvider provider);" />
    <Member Sig="long IConvertible.ToInt64 (IFormatProvider provider);" />
    <Member Sig="object IConvertible.ToType (Type type, IFormatProvider provider);" />
    <Member Sig="public bool Equals (bool obj);" />
    <Member Sig="public int CompareTo (bool value);" />
    <Member Sig="public int CompareTo (object obj);" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool Parse (string value);" />
    <Member Sig="public static bool TryParse (string value, out bool result);" />
    <Member Sig="public static readonly string FalseString;" />
    <Member Sig="public static readonly string TrueString;" />
    <Member Sig="public string ToString (IFormatProvider provider);" />
    <Member Sig="public TypeCode GetTypeCode ();" />
    <Member Sig="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
    <Member Sig="short IConvertible.ToInt16 (IFormatProvider provider);" />
    <Member Sig="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
    <Member Sig="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
    <Member Sig="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
  </Type>
  <Type Name="System.Buffer">
    <Member Sig="public static byte GetByte (Array array, int index);" />
    <Member Sig="public static int ByteLength (Array array);" />
    <Member Sig="public static void BlockCopy (Array src, int srcOffset, Array dst, int dstOffset, int count);" />
    <Member Sig="public static void SetByte (Array array, int index, byte value);" />
  </Type>
  <Type Name="System.Byte">
    <Member Sig="bool IConvertible.ToBoolean (IFormatProvider provider);" />
    <Member Sig="byte IConvertible.ToByte (IFormatProvider provider);" />
    <Member Sig="char IConvertible.ToChar (IFormatProvider provider);" />
    <Member Sig="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
    <Member Sig="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
    <Member Sig="double IConvertible.ToDouble (IFormatProvider provider);" />
    <Member Sig="float IConvertible.ToSingle (IFormatProvider provider);" />
    <Member Sig="int IConvertible.ToInt32 (IFormatProvider provider);" />
    <Member Sig="long IConvertible.ToInt64 (IFormatProvider provider);" />
    <Member Sig="object IConvertible.ToType (Type type, IFormatProvider provider);" />
    <Member Sig="public bool Equals (byte obj);" />
    <Member Sig="public const byte MaxValue = 255;" />
    <Member Sig="public const byte MinValue = 0;" />
    <Member Sig="public int CompareTo (byte value);" />
    <Member Sig="public int CompareTo (object value);" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool TryParse (string s, out byte result);" />
    <Member Sig="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out byte result);" />
    <Member Sig="public static byte Parse (string s);" />
    <Member Sig="public static byte Parse (string s, IFormatProvider provider);" />
    <Member Sig="public static byte Parse (string s, System.Globalization.NumberStyles style);" />
    <Member Sig="public static byte Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
    <Member Sig="public string ToString (IFormatProvider provider);" />
    <Member Sig="public string ToString (string format);" />
    <Member Sig="public string ToString (string format, IFormatProvider provider);" />
    <Member Sig="public TypeCode GetTypeCode ();" />
    <Member Sig="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
    <Member Sig="short IConvertible.ToInt16 (IFormatProvider provider);" />
    <Member Sig="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
    <Member Sig="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
    <Member Sig="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
  </Type>
  <Type Name="System.CannotUnloadAppDomainException">
    <Member Sig="protected CannotUnloadAppDomainException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public CannotUnloadAppDomainException ();" />
    <Member Sig="public CannotUnloadAppDomainException (string message);" />
    <Member Sig="public CannotUnloadAppDomainException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.Char">
    <Member Sig="bool IConvertible.ToBoolean (IFormatProvider provider);" />
    <Member Sig="byte IConvertible.ToByte (IFormatProvider provider);" />
    <Member Sig="char IConvertible.ToChar (IFormatProvider provider);" />
    <Member Sig="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
    <Member Sig="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
    <Member Sig="double IConvertible.ToDouble (IFormatProvider provider);" />
    <Member Sig="float IConvertible.ToSingle (IFormatProvider provider);" />
    <Member Sig="int IConvertible.ToInt32 (IFormatProvider provider);" />
    <Member Sig="long IConvertible.ToInt64 (IFormatProvider provider);" />
    <Member Sig="object IConvertible.ToType (Type type, IFormatProvider provider);" />
    <Member Sig="public bool Equals (char obj);" />
    <Member Sig="public const char MaxValue;" />
    <Member Sig="public const char MinValue;" />
    <Member Sig="public int CompareTo (char value);" />
    <Member Sig="public int CompareTo (object value);" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool IsControl (char c);" />
    <Member Sig="public static bool IsControl (string s, int index);" />
    <Member Sig="public static bool IsDigit (char c);" />
    <Member Sig="public static bool IsDigit (string s, int index);" />
    <Member Sig="public static bool IsHighSurrogate (char c);" />
    <Member Sig="public static bool IsHighSurrogate (string s, int index);" />
    <Member Sig="public static bool IsLetter (char c);" />
    <Member Sig="public static bool IsLetter (string s, int index);" />
    <Member Sig="public static bool IsLetterOrDigit (char c);" />
    <Member Sig="public static bool IsLetterOrDigit (string s, int index);" />
    <Member Sig="public static bool IsLower (char c);" />
    <Member Sig="public static bool IsLower (string s, int index);" />
    <Member Sig="public static bool IsLowSurrogate (char c);" />
    <Member Sig="public static bool IsLowSurrogate (string s, int index);" />
    <Member Sig="public static bool IsNumber (char c);" />
    <Member Sig="public static bool IsNumber (string s, int index);" />
    <Member Sig="public static bool IsPunctuation (char c);" />
    <Member Sig="public static bool IsPunctuation (string s, int index);" />
    <Member Sig="public static bool IsSeparator (char c);" />
    <Member Sig="public static bool IsSeparator (string s, int index);" />
    <Member Sig="public static bool IsSurrogate (char c);" />
    <Member Sig="public static bool IsSurrogate (string s, int index);" />
    <Member Sig="public static bool IsSurrogatePair (char highSurrogate, char lowSurrogate);" />
    <Member Sig="public static bool IsSurrogatePair (string s, int index);" />
    <Member Sig="public static bool IsSymbol (char c);" />
    <Member Sig="public static bool IsSymbol (string s, int index);" />
    <Member Sig="public static bool IsUpper (char c);" />
    <Member Sig="public static bool IsUpper (string s, int index);" />
    <Member Sig="public static bool IsWhiteSpace (char c);" />
    <Member Sig="public static bool IsWhiteSpace (string s, int index);" />
    <Member Sig="public static bool TryParse (string s, out char result);" />
    <Member Sig="public static char Parse (string s);" />
    <Member Sig="public static char ToLower (char c);" />
    <Member Sig="public static char ToLower (char c, System.Globalization.CultureInfo culture);" />
    <Member Sig="public static char ToLowerInvariant (char c);" />
    <Member Sig="public static char ToUpper (char c);" />
    <Member Sig="public static char ToUpper (char c, System.Globalization.CultureInfo culture);" />
    <Member Sig="public static char ToUpperInvariant (char c);" />
    <Member Sig="public static double GetNumericValue (char c);" />
    <Member Sig="public static double GetNumericValue (string s, int index);" />
    <Member Sig="public static int ConvertToUtf32 (char highSurrogate, char lowSurrogate);" />
    <Member Sig="public static int ConvertToUtf32 (string s, int index);" />
    <Member Sig="public static string ConvertFromUtf32 (int utf32);" />
    <Member Sig="public static string ToString (char c);" />
    <Member Sig="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char c);" />
    <Member Sig="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
    <Member Sig="public string ToString (IFormatProvider provider);" />
    <Member Sig="public TypeCode GetTypeCode ();" />
    <Member Sig="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
    <Member Sig="short IConvertible.ToInt16 (IFormatProvider provider);" />
    <Member Sig="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
    <Member Sig="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
    <Member Sig="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
  </Type>
  <Type Name="System.CharEnumerator">
    <Member Sig="object System.Collections.IEnumerator.Current { get; }" />
    <Member Sig="public bool MoveNext ();" />
    <Member Sig="public char Current { get; }" />
    <Member Sig="public object Clone ();" />
    <Member Sig="public void Reset ();" />
    <Member Sig="void IDisposable.Dispose ();" />
  </Type>
  <Type Name="System.CLSCompliantAttribute">
    <Member Sig="public bool IsCompliant { get; }" />
    <Member Sig="public CLSCompliantAttribute (bool isCompliant);" />
  </Type>
  <Type Name="System.Collections.ArrayList">
    <Member Sig="public ArrayList ();" />
    <Member Sig="public ArrayList (int capacity);" />
    <Member Sig="public ArrayList (System.Collections.ICollection c);" />
    <Member Sig="public static System.Collections.ArrayList Adapter (System.Collections.IList list);" />
    <Member Sig="public static System.Collections.ArrayList FixedSize (System.Collections.ArrayList list);" />
    <Member Sig="public static System.Collections.ArrayList ReadOnly (System.Collections.ArrayList list);" />
    <Member Sig="public static System.Collections.ArrayList Repeat (object value, int count);" />
    <Member Sig="public static System.Collections.ArrayList Synchronized (System.Collections.ArrayList list);" />
    <Member Sig="public static System.Collections.IList FixedSize (System.Collections.IList list);" />
    <Member Sig="public static System.Collections.IList ReadOnly (System.Collections.IList list);" />
    <Member Sig="public static System.Collections.IList Synchronized (System.Collections.IList list);" />
    <Member Sig="public virtual Array ToArray (Type type);" />
    <Member Sig="public virtual bool Contains (object item);" />
    <Member Sig="public virtual bool IsFixedSize { get; }" />
    <Member Sig="public virtual bool IsReadOnly { get; }" />
    <Member Sig="public virtual bool IsSynchronized { get; }" />
    <Member Sig="public virtual int Add (object value);" />
    <Member Sig="public virtual int BinarySearch (int index, int count, object value, System.Collections.IComparer comparer);" />
    <Member Sig="public virtual int BinarySearch (object value);" />
    <Member Sig="public virtual int BinarySearch (object value, System.Collections.IComparer comparer);" />
    <Member Sig="public virtual int Capacity { get; set; }" />
    <Member Sig="public virtual int Count { get; }" />
    <Member Sig="public virtual int IndexOf (object value);" />
    <Member Sig="public virtual int IndexOf (object value, int startIndex);" />
    <Member Sig="public virtual int IndexOf (object value, int startIndex, int count);" />
    <Member Sig="public virtual int LastIndexOf (object value);" />
    <Member Sig="public virtual int LastIndexOf (object value, int startIndex);" />
    <Member Sig="public virtual int LastIndexOf (object value, int startIndex, int count);" />
    <Member Sig="public virtual object Clone ();" />
    <Member Sig="public virtual object SyncRoot { get; }" />
    <Member Sig="public virtual object this[int index] { get; set; }" />
    <Member Sig="public virtual object[] ToArray ();" />
    <Member Sig="public virtual System.Collections.ArrayList GetRange (int index, int count);" />
    <Member Sig="public virtual System.Collections.IEnumerator GetEnumerator ();" />
    <Member Sig="public virtual System.Collections.IEnumerator GetEnumerator (int index, int count);" />
    <Member Sig="public virtual void AddRange (System.Collections.ICollection c);" />
    <Member Sig="public virtual void Clear ();" />
    <Member Sig="public virtual void CopyTo (Array array);" />
    <Member Sig="public virtual void CopyTo (Array array, int arrayIndex);" />
    <Member Sig="public virtual void CopyTo (int index, Array array, int arrayIndex, int count);" />
    <Member Sig="public virtual void Insert (int index, object value);" />
    <Member Sig="public virtual void InsertRange (int index, System.Collections.ICollection c);" />
    <Member Sig="public virtual void Remove (object obj);" />
    <Member Sig="public virtual void RemoveAt (int index);" />
    <Member Sig="public virtual void RemoveRange (int index, int count);" />
    <Member Sig="public virtual void Reverse ();" />
    <Member Sig="public virtual void Reverse (int index, int count);" />
    <Member Sig="public virtual void SetRange (int index, System.Collections.ICollection c);" />
    <Member Sig="public virtual void Sort ();" />
    <Member Sig="public virtual void Sort (int index, int count, System.Collections.IComparer comparer);" />
    <Member Sig="public virtual void Sort (System.Collections.IComparer comparer);" />
    <Member Sig="public virtual void TrimToSize ();" />
  </Type>
  <Type Name="System.Collections.BitArray">
    <Member Sig="public BitArray (bool[] values);" />
    <Member Sig="public BitArray (byte[] bytes);" />
    <Member Sig="public BitArray (int length);" />
    <Member Sig="public BitArray (int length, bool defaultValue);" />
    <Member Sig="public BitArray (int[] values);" />
    <Member Sig="public BitArray (System.Collections.BitArray bits);" />
    <Member Sig="public bool Get (int index);" />
    <Member Sig="public bool IsReadOnly { get; }" />
    <Member Sig="public bool IsSynchronized { get; }" />
    <Member Sig="public bool this[int index] { get; set; }" />
    <Member Sig="public int Count { get; }" />
    <Member Sig="public int Length { get; set; }" />
    <Member Sig="public object Clone ();" />
    <Member Sig="public object SyncRoot { get; }" />
    <Member Sig="public System.Collections.BitArray And (System.Collections.BitArray value);" />
    <Member Sig="public System.Collections.BitArray Not ();" />
    <Member Sig="public System.Collections.BitArray Or (System.Collections.BitArray value);" />
    <Member Sig="public System.Collections.BitArray Xor (System.Collections.BitArray value);" />
    <Member Sig="public System.Collections.IEnumerator GetEnumerator ();" />
    <Member Sig="public void CopyTo (Array array, int index);" />
    <Member Sig="public void Set (int index, bool value);" />
    <Member Sig="public void SetAll (bool value);" />
  </Type>
  <Type Name="System.Collections.CaseInsensitiveComparer">
    <Member Sig="public CaseInsensitiveComparer ();" />
    <Member Sig="public CaseInsensitiveComparer (System.Globalization.CultureInfo culture);" />
    <Member Sig="public int Compare (object a, object b);" />
    <Member Sig="public static System.Collections.CaseInsensitiveComparer Default { get; }" />
    <Member Sig="public static System.Collections.CaseInsensitiveComparer DefaultInvariant { get; }" />
  </Type>
  <Type Name="System.Collections.CaseInsensitiveHashCodeProvider">
    <Member Sig="public CaseInsensitiveHashCodeProvider ();" />
    <Member Sig="public CaseInsensitiveHashCodeProvider (System.Globalization.CultureInfo culture);" />
    <Member Sig="public int GetHashCode (object obj);" />
    <Member Sig="public static System.Collections.CaseInsensitiveHashCodeProvider Default { get; }" />
    <Member Sig="public static System.Collections.CaseInsensitiveHashCodeProvider DefaultInvariant { get; }" />
  </Type>
  <Type Name="System.Collections.CollectionBase">
    <Member Sig="bool IList.Contains (object value);" />
    <Member Sig="bool System.Collections.ICollection.IsSynchronized { get; }" />
    <Member Sig="bool System.Collections.IList.IsFixedSize { get; }" />
    <Member Sig="bool System.Collections.IList.IsReadOnly { get; }" />
    <Member Sig="int IList.Add (object value);" />
    <Member Sig="int IList.IndexOf (object value);" />
    <Member Sig="object System.Collections.ICollection.SyncRoot { get; }" />
    <Member Sig="object System.Collections.IList.Item[int index] { get; set; }" />
    <Member Sig="protected CollectionBase ();" />
    <Member Sig="protected CollectionBase (int capacity);" />
    <Member Sig="protected System.Collections.ArrayList InnerList { get; }" />
    <Member Sig="protected System.Collections.IList List { get; }" />
    <Member Sig="protected virtual void OnClear ();" />
    <Member Sig="protected virtual void OnClearComplete ();" />
    <Member Sig="protected virtual void OnInsert (int index, object value);" />
    <Member Sig="protected virtual void OnInsertComplete (int index, object value);" />
    <Member Sig="protected virtual void OnRemove (int index, object value);" />
    <Member Sig="protected virtual void OnRemoveComplete (int index, object value);" />
    <Member Sig="protected virtual void OnSet (int index, object oldValue, object newValue);" />
    <Member Sig="protected virtual void OnSetComplete (int index, object oldValue, object newValue);" />
    <Member Sig="protected virtual void OnValidate (object value);" />
    <Member Sig="public int Capacity { get; set; }" />
    <Member Sig="public int Count { get; }" />
    <Member Sig="public System.Collections.IEnumerator GetEnumerator ();" />
    <Member Sig="public void Clear ();" />
    <Member Sig="public void RemoveAt (int index);" />
    <Member Sig="void ICollection.CopyTo (Array array, int index);" />
    <Member Sig="void IList.Insert (int index, object value);" />
    <Member Sig="void IList.Remove (object value);" />
  </Type>
  <Type Name="System.Collections.Comparer">
    <Member Sig="public Comparer (System.Globalization.CultureInfo culture);" />
    <Member Sig="public int Compare (object a, object b);" />
    <Member Sig="public static readonly System.Collections.Comparer Default;" />
    <Member Sig="public static readonly System.Collections.Comparer DefaultInvariant;" />
    <Member Sig="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.Collections.DictionaryBase">
    <Member Sig="bool IDictionary.Contains (object key);" />
    <Member Sig="bool System.Collections.ICollection.IsSynchronized { get; }" />
    <Member Sig="bool System.Collections.IDictionary.IsFixedSize { get; }" />
    <Member Sig="bool System.Collections.IDictionary.IsReadOnly { get; }" />
    <Member Sig="object System.Collections.ICollection.SyncRoot { get; }" />
    <Member Sig="object System.Collections.IDictionary.Item[object key] { get; set; }" />
    <Member Sig="protected DictionaryBase ();" />
    <Member Sig="protected System.Collections.Hashtable InnerHashtable { get; }" />
    <Member Sig="protected System.Collections.IDictionary Dictionary { get; }" />
    <Member Sig="protected virtual object OnGet (object key, object currentValue);" />
    <Member Sig="protected virtual void OnClear ();" />
    <Member Sig="protected virtual void OnClearComplete ();" />
    <Member Sig="protected virtual void OnInsert (object key, object value);" />
    <Member Sig="protected virtual void OnInsertComplete (object key, object value);" />
    <Member Sig="protected virtual void OnRemove (object key, object value);" />
    <Member Sig="protected virtual void OnRemoveComplete (object key, object value);" />
    <Member Sig="protected virtual void OnSet (object key, object oldValue, object newValue);" />
    <Member Sig="protected virtual void OnSetComplete (object key, object oldValue, object newValue);" />
    <Member Sig="protected virtual void OnValidate (object key, object value);" />
    <Member Sig="public int Count { get; }" />
    <Member Sig="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
    <Member Sig="public void Clear ();" />
    <Member Sig="public void CopyTo (Array array, int index);" />
    <Member Sig="System.Collections.ICollection System.Collections.IDictionary.Keys { get; }" />
    <Member Sig="System.Collections.ICollection System.Collections.IDictionary.Values { get; }" />
    <Member Sig="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
    <Member Sig="void IDictionary.Add (object key, object value);" />
    <Member Sig="void IDictionary.Remove (object key);" />
  </Type>
  <Type Name="System.Collections.DictionaryEntry">
    <Member Sig="public DictionaryEntry (object key, object value);" />
    <Member Sig="public object Key { get; set; }" />
    <Member Sig="public object Value { get; set; }" />
  </Type>
  <Type Name="System.Collections.Generic.Comparer`1">
    <Member Sig="int IComparer.Compare (object x, object y);" />
    <Member Sig="protected Comparer ();" />
    <Member Sig="public abstract int Compare (T x, T y);" />
    <Member Sig="public static System.Collections.Generic.Comparer&lt;T&gt; Default { get; }" />
  </Type>
  <Type Name="System.Collections.Generic.Dictionary`2">
    <Member Sig="bool ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Contains (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; keyValuePair);" />
    <Member Sig="bool ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Remove (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; keyValuePair);" />
    <Member Sig="bool IDictionary.Contains (object key);" />
    <Member Sig="bool System.Collections.Generic.ICollection&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt;.IsReadOnly { get; }" />
    <Member Sig="bool System.Collections.ICollection.IsSynchronized { get; }" />
    <Member Sig="bool System.Collections.IDictionary.IsFixedSize { get; }" />
    <Member Sig="bool System.Collections.IDictionary.IsReadOnly { get; }" />
    <Member Sig="object System.Collections.ICollection.SyncRoot { get; }" />
    <Member Sig="object System.Collections.IDictionary.Item[object key] { get; set; }" />
    <Member Sig="protected Dictionary (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public bool ContainsKey (TKey key);" />
    <Member Sig="public bool ContainsValue (TValue value);" />
    <Member Sig="public bool Remove (TKey key);" />
    <Member Sig="public bool TryGetValue (TKey key, out TValue value);" />
    <Member Sig="public Dictionary ();" />
    <Member Sig="public Dictionary (int capacity);" />
    <Member Sig="public Dictionary (int capacity, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
    <Member Sig="public Dictionary (System.Collections.Generic.IDictionary&lt;TKey,TValue&gt; dictionary);" />
    <Member Sig="public Dictionary (System.Collections.Generic.IDictionary&lt;TKey,TValue&gt; dictionary, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
    <Member Sig="public Dictionary (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
    <Member Sig="public int Count { get; }" />
    <Member Sig="public System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;.Enumerator GetEnumerator ();" />
    <Member Sig="public System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;.KeyCollection Keys { get; }" />
    <Member Sig="public System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;.ValueCollection Values { get; }" />
    <Member Sig="public System.Collections.Generic.IEqualityComparer&lt;TKey&gt; Comparer { get; }" />
    <Member Sig="public TValue this[TKey key] { get; set; }" />
    <Member Sig="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public virtual void OnDeserialization (object sender);" />
    <Member Sig="public void Add (TKey key, TValue value);" />
    <Member Sig="public void Clear ();" />
    <Member Sig="System.Collections.Generic.ICollection&lt;TKey&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Keys { get; }" />
    <Member Sig="System.Collections.Generic.ICollection&lt;TValue&gt; System.Collections.Generic.IDictionary&lt;TKey,TValue&gt;.Values { get; }" />
    <Member Sig="System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;&gt; IEnumerable&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.GetEnumerator ();" />
    <Member Sig="System.Collections.ICollection System.Collections.IDictionary.Keys { get; }" />
    <Member Sig="System.Collections.ICollection System.Collections.IDictionary.Values { get; }" />
    <Member Sig="System.Collections.IDictionaryEnumerator IDictionary.GetEnumerator ();" />
    <Member Sig="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
    <Member Sig="void ICollection.CopyTo (Array array, int index);" />
    <Member Sig="void ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.Add (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; keyValuePair);" />
    <Member Sig="void ICollection&lt;KeyValuePair&lt;TKey,TValue&gt;&gt;.CopyTo (System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt;[] array, int index);" />
    <Member Sig="void IDictionary.Add (object key, object value);" />
    <Member Sig="void IDictionary.Remove (object key);" />
  </Type>
  <Type Name="System.Collections.Generic.Dictionary`2/Enumerator">
    <Member Sig="object System.Collections.IDictionaryEnumerator.Key { get; }" />
    <Member Sig="object System.Collections.IDictionaryEnumerator.Value { get; }" />
    <Member Sig="object System.Collections.IEnumerator.Current { get; }" />
    <Member Sig="public bool MoveNext ();" />
    <Member Sig="public System.Collections.Generic.KeyValuePair&lt;TKey,TValue&gt; Current { get; }" />
    <Member Sig="public void Dispose ();" />
    <Member Sig="System.Collections.DictionaryEntry System.Collections.IDictionaryEnumerator.Entry { get; }" />
    <Member Sig="void IEnumerator.Reset ();" />
  </Type>
  <Type Name="System.Collections.Generic.Dictionary`2/KeyCollection">
    <Member Sig="bool ICollection&lt;TKey&gt;.Contains (TKey item);" />
    <Member Sig="bool ICollection&lt;TKey&gt;.Remove (TKey item);" />
    <Member Sig="bool System.Collections.Generic.ICollection&lt;TKey&gt;.IsReadOnly { get; }" />
    <Member Sig="bool System.Collections.ICollection.IsSynchronized { get; }" />
    <Member Sig="object System.Collections.ICollection.SyncRoot { get; }" />
    <Member Sig="public int Count { get; }" />
    <Member Sig="public KeyCollection (System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; dictionary);" />
    <Member Sig="public System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;.KeyCollection.Enumerator GetEnumerator ();" />
    <Member Sig="public void CopyTo (TKey[] array, int index);" />
    <Member Sig="System.Collections.Generic.IEnumerator&lt;TKey&gt; IEnumerable&lt;TKey&gt;.GetEnumerator ();" />
    <Member Sig="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
    <Member Sig="void ICollection.CopyTo (Array array, int index);" />
    <Member Sig="void ICollection&lt;TKey&gt;.Add (TKey item);" />
    <Member Sig="void ICollection&lt;TKey&gt;.Clear ();" />
  </Type>
  <Type Name="System.Collections.Generic.Dictionary`2/KeyCollection/Enumerator">
    <Member Sig="object System.Collections.IEnumerator.Current { get; }" />
    <Member Sig="public bool MoveNext ();" />
    <Member Sig="public TKey Current { get; }" />
    <Member Sig="public void Dispose ();" />
    <Member Sig="void IEnumerator.Reset ();" />
  </Type>
  <Type Name="System.Collections.Generic.Dictionary`2/ValueCollection">
    <Member Sig="bool ICollection&lt;TValue&gt;.Contains (TValue item);" />
    <Member Sig="bool ICollection&lt;TValue&gt;.Remove (TValue item);" />
    <Member Sig="bool System.Collections.Generic.ICollection&lt;TValue&gt;.IsReadOnly { get; }" />
    <Member Sig="bool System.Collections.ICollection.IsSynchronized { get; }" />
    <Member Sig="object System.Collections.ICollection.SyncRoot { get; }" />
    <Member Sig="public int Count { get; }" />
    <Member Sig="public System.Collections.Generic.Dictionary&lt;TKey,TValue&gt;.ValueCollection.Enumerator GetEnumerator ();" />
    <Member Sig="public ValueCollection (System.Collections.Generic.Dictionary&lt;TKey,TValue&gt; dictionary);" />
    <Member Sig="public void CopyTo (TValue[] array, int index);" />
    <Member Sig="System.Collections.Generic.IEnumerator&lt;TValue&gt; IEnumerable&lt;TValue&gt;.GetEnumerator ();" />
    <Member Sig="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
    <Member Sig="void ICollection.CopyTo (Array array, int index);" />
    <Member Sig="void ICollection&lt;TValue&gt;.Add (TValue item);" />
    <Member Sig="void ICollection&lt;TValue&gt;.Clear ();" />
  </Type>
  <Type Name="System.Collections.Generic.Dictionary`2/ValueCollection/Enumerator">
    <Member Sig="object System.Collections.IEnumerator.Current { get; }" />
    <Member Sig="public bool MoveNext ();" />
    <Member Sig="public TValue Current { get; }" />
    <Member Sig="public void Dispose ();" />
    <Member Sig="void IEnumerator.Reset ();" />
  </Type>
  <Type Name="System.Collections.Generic.EqualityComparer`1">
    <Member Sig="bool IEqualityComparer.Equals (object x, object y);" />
    <Member Sig="int IEqualityComparer.GetHashCode (object obj);" />
    <Member Sig="protected EqualityComparer ();" />
    <Member Sig="public abstract bool Equals (T x, T y);" />
    <Member Sig="public abstract int GetHashCode (T obj);" />
    <Member Sig="public static System.Collections.Generic.EqualityComparer&lt;T&gt; Default { get; }" />
  </Type>
  <Type Name="System.Collections.Generic.ICollection`1">
    <Member Sig="public bool Contains (T item);" />
    <Member Sig="public bool IsReadOnly { get; }" />
    <Member Sig="public bool Remove (T item);" />
    <Member Sig="public int Count { get; }" />
    <Member Sig="public void Add (T item);" />
    <Member Sig="public void Clear ();" />
    <Member Sig="public void CopyTo (T[] array, int arrayIndex);" />
  </Type>
  <Type Name="System.Collections.Generic.IComparer`1">
    <Member Sig="public int Compare (T x, T y);" />
  </Type>
  <Type Name="System.Collections.Generic.IDictionary`2">
    <Member Sig="public bool ContainsKey (TKey key);" />
    <Member Sig="public bool Remove (TKey key);" />
    <Member Sig="public bool TryGetValue (TKey key, out TValue value);" />
    <Member Sig="public System.Collections.Generic.ICollection&lt;TKey&gt; Keys { get; }" />
    <Member Sig="public System.Collections.Generic.ICollection&lt;TValue&gt; Values { get; }" />
    <Member Sig="public TValue this[TKey key] { get; set; }" />
    <Member Sig="public void Add (TKey key, TValue value);" />
  </Type>
  <Type Name="System.Collections.Generic.IEnumerable`1">
    <Member Sig="public System.Collections.Generic.IEnumerator&lt;T&gt; GetEnumerator ();" />
  </Type>
  <Type Name="System.Collections.Generic.IEnumerator`1">
    <Member Sig="public T Current { get; }" />
  </Type>
  <Type Name="System.Collections.Generic.IEqualityComparer`1">
    <Member Sig="public bool Equals (T x, T y);" />
    <Member Sig="public int GetHashCode (T obj);" />
  </Type>
  <Type Name="System.Collections.Generic.IList`1">
    <Member Sig="public int IndexOf (T item);" />
    <Member Sig="public T this[int index] { get; set; }" />
    <Member Sig="public void Insert (int index, T item);" />
    <Member Sig="public void RemoveAt (int index);" />
  </Type>
  <Type Name="System.Collections.Generic.KeyNotFoundException">
    <Member Sig="protected KeyNotFoundException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public KeyNotFoundException ();" />
    <Member Sig="public KeyNotFoundException (string message);" />
    <Member Sig="public KeyNotFoundException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.Collections.Generic.KeyValuePair`2">
    <Member Sig="public KeyValuePair (TKey key, TValue value);" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public TKey Key { get; }" />
    <Member Sig="public TValue Value { get; }" />
  </Type>
  <Type Name="System.Collections.Generic.List`1">
    <Member Sig="bool IList.Contains (object item);" />
    <Member Sig="bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }" />
    <Member Sig="bool System.Collections.ICollection.IsSynchronized { get; }" />
    <Member Sig="bool System.Collections.IList.IsFixedSize { get; }" />
    <Member Sig="bool System.Collections.IList.IsReadOnly { get; }" />
    <Member Sig="int IList.Add (object item);" />
    <Member Sig="int IList.IndexOf (object item);" />
    <Member Sig="object System.Collections.ICollection.SyncRoot { get; }" />
    <Member Sig="object System.Collections.IList.Item[int index] { get; set; }" />
    <Member Sig="public bool Contains (T item);" />
    <Member Sig="public bool Exists (Predicate&lt;T&gt; match);" />
    <Member Sig="public bool Remove (T item);" />
    <Member Sig="public bool TrueForAll (Predicate&lt;T&gt; match);" />
    <Member Sig="public int BinarySearch (int index, int count, T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
    <Member Sig="public int BinarySearch (T item);" />
    <Member Sig="public int BinarySearch (T item, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
    <Member Sig="public int Capacity { get; set; }" />
    <Member Sig="public int Count { get; }" />
    <Member Sig="public int FindIndex (int startIndex, int count, Predicate&lt;T&gt; match);" />
    <Member Sig="public int FindIndex (int startIndex, Predicate&lt;T&gt; match);" />
    <Member Sig="public int FindIndex (Predicate&lt;T&gt; match);" />
    <Member Sig="public int FindLastIndex (int startIndex, int count, Predicate&lt;T&gt; match);" />
    <Member Sig="public int FindLastIndex (int startIndex, Predicate&lt;T&gt; match);" />
    <Member Sig="public int FindLastIndex (Predicate&lt;T&gt; match);" />
    <Member Sig="public int IndexOf (T item);" />
    <Member Sig="public int IndexOf (T item, int index);" />
    <Member Sig="public int IndexOf (T item, int index, int count);" />
    <Member Sig="public int LastIndexOf (T item);" />
    <Member Sig="public int LastIndexOf (T item, int index);" />
    <Member Sig="public int LastIndexOf (T item, int index, int count);" />
    <Member Sig="public int RemoveAll (Predicate&lt;T&gt; match);" />
    <Member Sig="public List ();" />
    <Member Sig="public List (int capacity);" />
    <Member Sig="public List (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
    <Member Sig="public System.Collections.Generic.List&lt;T&gt; FindAll (Predicate&lt;T&gt; match);" />
    <Member Sig="public System.Collections.Generic.List&lt;T&gt; GetRange (int index, int count);" />
    <Member Sig="public System.Collections.Generic.List&lt;T&gt;.Enumerator GetEnumerator ();" />
    <Member Sig="public System.Collections.Generic.List&lt;TOutput&gt; ConvertAll&lt;TOutput&gt; (Converter&lt;T,TOutput&gt; converter);" />
    <Member Sig="public System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt; AsReadOnly ();" />
    <Member Sig="public T Find (Predicate&lt;T&gt; match);" />
    <Member Sig="public T FindLast (Predicate&lt;T&gt; match);" />
    <Member Sig="public T this[int index] { get; set; }" />
    <Member Sig="public T[] ToArray ();" />
    <Member Sig="public void Add (T item);" />
    <Member Sig="public void AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
    <Member Sig="public void Clear ();" />
    <Member Sig="public void CopyTo (int index, T[] array, int arrayIndex, int count);" />
    <Member Sig="public void CopyTo (T[] array);" />
    <Member Sig="public void CopyTo (T[] array, int arrayIndex);" />
    <Member Sig="public void ForEach (Action&lt;T&gt; action);" />
    <Member Sig="public void Insert (int index, T item);" />
    <Member Sig="public void InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; collection);" />
    <Member Sig="public void RemoveAt (int index);" />
    <Member Sig="public void RemoveRange (int index, int count);" />
    <Member Sig="public void Reverse ();" />
    <Member Sig="public void Reverse (int index, int count);" />
    <Member Sig="public void Sort ();" />
    <Member Sig="public void Sort (Comparison&lt;T&gt; comparison);" />
    <Member Sig="public void Sort (int index, int count, System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
    <Member Sig="public void Sort (System.Collections.Generic.IComparer&lt;T&gt; comparer);" />
    <Member Sig="public void TrimExcess ();" />
    <Member Sig="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
    <Member Sig="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
    <Member Sig="void ICollection.CopyTo (Array array, int arrayIndex);" />
    <Member Sig="void IList.Insert (int index, object item);" />
    <Member Sig="void IList.Remove (object item);" />
  </Type>
  <Type Name="System.Collections.Generic.List`1/Enumerator">
    <Member Sig="object System.Collections.IEnumerator.Current { get; }" />
    <Member Sig="public bool MoveNext ();" />
    <Member Sig="public T Current { get; }" />
    <Member Sig="public void Dispose ();" />
    <Member Sig="void IEnumerator.Reset ();" />
  </Type>
  <Type Name="System.Collections.Hashtable">
    <Member Sig="protected Hashtable (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="protected System.Collections.IComparer comparer { get; set; }" />
    <Member Sig="protected System.Collections.IEqualityComparer EqualityComparer { get; }" />
    <Member Sig="protected System.Collections.IHashCodeProvider hcp { get; set; }" />
    <Member Sig="protected virtual bool KeyEquals (object item, object key);" />
    <Member Sig="protected virtual int GetHash (object key);" />
    <Member Sig="public Hashtable ();" />
    <Member Sig="public Hashtable (int capacity);" />
    <Member Sig="public Hashtable (int capacity, float loadFactor);" />
    <Member Sig="public Hashtable (int capacity, float loadFactor, System.Collections.IEqualityComparer equalityComparer);" />
    <Member Sig="public Hashtable (int capacity, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);" />
    <Member Sig="public Hashtable (int capacity, System.Collections.IEqualityComparer equalityComparer);" />
    <Member Sig="public Hashtable (int capacity, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);" />
    <Member Sig="public Hashtable (System.Collections.IDictionary d);" />
    <Member Sig="public Hashtable (System.Collections.IDictionary d, float loadFactor);" />
    <Member Sig="public Hashtable (System.Collections.IDictionary d, float loadFactor, System.Collections.IEqualityComparer equalityComparer);" />
    <Member Sig="public Hashtable (System.Collections.IDictionary d, float loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);" />
    <Member Sig="public Hashtable (System.Collections.IDictionary d, System.Collections.IEqualityComparer equalityComparer);" />
    <Member Sig="public Hashtable (System.Collections.IDictionary d, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);" />
    <Member Sig="public Hashtable (System.Collections.IEqualityComparer equalityComparer);" />
    <Member Sig="public Hashtable (System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer);" />
    <Member Sig="public static System.Collections.Hashtable Synchronized (System.Collections.Hashtable table);" />
    <Member Sig="public virtual bool Contains (object key);" />
    <Member Sig="public virtual bool ContainsKey (object key);" />
    <Member Sig="public virtual bool ContainsValue (object value);" />
    <Member Sig="public virtual bool IsFixedSize { get; }" />
    <Member Sig="public virtual bool IsReadOnly { get; }" />
    <Member Sig="public virtual bool IsSynchronized { get; }" />
    <Member Sig="public virtual int Count { get; }" />
    <Member Sig="public virtual object Clone ();" />
    <Member Sig="public virtual object SyncRoot { get; }" />
    <Member Sig="public virtual object this[object key] { get; set; }" />
    <Member Sig="public virtual System.Collections.ICollection Keys { get; }" />
    <Member Sig="public virtual System.Collections.ICollection Values { get; }" />
    <Member Sig="public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();" />
    <Member Sig="public virtual void Add (object key, object value);" />
    <Member Sig="public virtual void Clear ();" />
    <Member Sig="public virtual void CopyTo (Array array, int arrayIndex);" />
    <Member Sig="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public virtual void OnDeserialization (object sender);" />
    <Member Sig="public virtual void Remove (object key);" />
    <Member Sig="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
  </Type>
  <Type Name="System.Collections.ICollection">
    <Member Sig="public bool IsSynchronized { get; }" />
    <Member Sig="public int Count { get; }" />
    <Member Sig="public object SyncRoot { get; }" />
    <Member Sig="public void CopyTo (Array array, int index);" />
  </Type>
  <Type Name="System.Collections.IComparer">
    <Member Sig="public int Compare (object x, object y);" />
  </Type>
  <Type Name="System.Collections.IDictionary">
    <Member Sig="public bool Contains (object key);" />
    <Member Sig="public bool IsFixedSize { get; }" />
    <Member Sig="public bool IsReadOnly { get; }" />
    <Member Sig="public object this[object key] { get; set; }" />
    <Member Sig="public System.Collections.ICollection Keys { get; }" />
    <Member Sig="public System.Collections.ICollection Values { get; }" />
    <Member Sig="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
    <Member Sig="public void Add (object key, object value);" />
    <Member Sig="public void Clear ();" />
    <Member Sig="public void Remove (object key);" />
  </Type>
  <Type Name="System.Collections.IDictionaryEnumerator">
    <Member Sig="public object Key { get; }" />
    <Member Sig="public object Value { get; }" />
    <Member Sig="public System.Collections.DictionaryEntry Entry { get; }" />
  </Type>
  <Type Name="System.Collections.IEnumerable">
    <Member Sig="public System.Collections.IEnumerator GetEnumerator ();" />
  </Type>
  <Type Name="System.Collections.IEnumerator">
    <Member Sig="public bool MoveNext ();" />
    <Member Sig="public object Current { get; }" />
    <Member Sig="public void Reset ();" />
  </Type>
  <Type Name="System.Collections.IEqualityComparer">
    <Member Sig="public bool Equals (object x, object y);" />
    <Member Sig="public int GetHashCode (object obj);" />
  </Type>
  <Type Name="System.Collections.IHashCodeProvider">
    <Member Sig="public int GetHashCode (object obj);" />
  </Type>
  <Type Name="System.Collections.IList">
    <Member Sig="public bool Contains (object value);" />
    <Member Sig="public bool IsFixedSize { get; }" />
    <Member Sig="public bool IsReadOnly { get; }" />
    <Member Sig="public int Add (object value);" />
    <Member Sig="public int IndexOf (object value);" />
    <Member Sig="public object this[int index] { get; set; }" />
    <Member Sig="public void Clear ();" />
    <Member Sig="public void Insert (int index, object value);" />
    <Member Sig="public void Remove (object value);" />
    <Member Sig="public void RemoveAt (int index);" />
  </Type>
  <Type Name="System.Collections.ObjectModel.Collection`1">
    <Member Sig="bool IList.Contains (object value);" />
    <Member Sig="bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }" />
    <Member Sig="bool System.Collections.ICollection.IsSynchronized { get; }" />
    <Member Sig="bool System.Collections.IList.IsFixedSize { get; }" />
    <Member Sig="bool System.Collections.IList.IsReadOnly { get; }" />
    <Member Sig="int IList.Add (object value);" />
    <Member Sig="int IList.IndexOf (object value);" />
    <Member Sig="object System.Collections.ICollection.SyncRoot { get; }" />
    <Member Sig="object System.Collections.IList.Item[int index] { get; set; }" />
    <Member Sig="protected System.Collections.Generic.IList&lt;T&gt; Items { get; }" />
    <Member Sig="protected virtual void ClearItems ();" />
    <Member Sig="protected virtual void InsertItem (int index, T item);" />
    <Member Sig="protected virtual void RemoveItem (int index);" />
    <Member Sig="protected virtual void SetItem (int index, T item);" />
    <Member Sig="public bool Contains (T item);" />
    <Member Sig="public bool Remove (T item);" />
    <Member Sig="public Collection ();" />
    <Member Sig="public Collection (System.Collections.Generic.IList&lt;T&gt; list);" />
    <Member Sig="public int Count { get; }" />
    <Member Sig="public int IndexOf (T item);" />
    <Member Sig="public System.Collections.Generic.IEnumerator&lt;T&gt; GetEnumerator ();" />
    <Member Sig="public T this[int index] { get; set; }" />
    <Member Sig="public void Add (T item);" />
    <Member Sig="public void Clear ();" />
    <Member Sig="public void CopyTo (T[] array, int index);" />
    <Member Sig="public void Insert (int index, T item);" />
    <Member Sig="public void RemoveAt (int index);" />
    <Member Sig="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
    <Member Sig="void ICollection.CopyTo (Array array, int index);" />
    <Member Sig="void IList.Insert (int index, object value);" />
    <Member Sig="void IList.Remove (object value);" />
  </Type>
  <Type Name="System.Collections.ObjectModel.KeyedCollection`2">
    <Member Sig="protected abstract TKey GetKeyForItem (TItem item);" />
    <Member Sig="protected KeyedCollection ();" />
    <Member Sig="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
    <Member Sig="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, int dictionaryCreationThreshold);" />
    <Member Sig="protected override void ClearItems ();" />
    <Member Sig="protected override void InsertItem (int index, TItem item);" />
    <Member Sig="protected override void RemoveItem (int index);" />
    <Member Sig="protected override void SetItem (int index, TItem item);" />
    <Member Sig="protected System.Collections.Generic.IDictionary&lt;TKey,TItem&gt; Dictionary { get; }" />
    <Member Sig="protected void ChangeItemKey (TItem item, TKey newKey);" />
    <Member Sig="public bool Contains (TKey key);" />
    <Member Sig="public bool Remove (TKey key);" />
    <Member Sig="public System.Collections.Generic.IEqualityComparer&lt;TKey&gt; Comparer { get; }" />
    <Member Sig="public TItem this[TKey key] { get; }" />
  </Type>
  <Type Name="System.Collections.ObjectModel.ReadOnlyCollection`1">
    <Member Sig="bool ICollection&lt;T&gt;.Remove (T value);" />
    <Member Sig="bool IList.Contains (object value);" />
    <Member Sig="bool System.Collections.Generic.ICollection&lt;T&gt;.IsReadOnly { get; }" />
    <Member Sig="bool System.Collections.ICollection.IsSynchronized { get; }" />
    <Member Sig="bool System.Collections.IList.IsFixedSize { get; }" />
    <Member Sig="bool System.Collections.IList.IsReadOnly { get; }" />
    <Member Sig="int IList.Add (object value);" />
    <Member Sig="int IList.IndexOf (object value);" />
    <Member Sig="object System.Collections.ICollection.SyncRoot { get; }" />
    <Member Sig="object System.Collections.IList.Item[int index] { get; set; }" />
    <Member Sig="protected System.Collections.Generic.IList&lt;T&gt; Items { get; }" />
    <Member Sig="public bool Contains (T value);" />
    <Member Sig="public int Count { get; }" />
    <Member Sig="public int IndexOf (T value);" />
    <Member Sig="public ReadOnlyCollection (System.Collections.Generic.IList&lt;T&gt; list);" />
    <Member Sig="public System.Collections.Generic.IEnumerator&lt;T&gt; GetEnumerator ();" />
    <Member Sig="public T this[int index] { get; }" />
    <Member Sig="public void CopyTo (T[] array, int index);" />
    <Member Sig="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
    <Member Sig="T System.Collections.Generic.IList&lt;T&gt;.Item[int index] { get; set; }" />
    <Member Sig="void ICollection.CopyTo (Array array, int index);" />
    <Member Sig="void ICollection&lt;T&gt;.Add (T value);" />
    <Member Sig="void ICollection&lt;T&gt;.Clear ();" />
    <Member Sig="void IList.Clear ();" />
    <Member Sig="void IList.Insert (int index, object value);" />
    <Member Sig="void IList.Remove (object value);" />
    <Member Sig="void IList.RemoveAt (int index);" />
    <Member Sig="void IList&lt;T&gt;.Insert (int index, T value);" />
    <Member Sig="void IList&lt;T&gt;.RemoveAt (int index);" />
  </Type>
  <Type Name="System.Collections.Queue">
    <Member Sig="public Queue ();" />
    <Member Sig="public Queue (int capacity);" />
    <Member Sig="public Queue (int capacity, float growFactor);" />
    <Member Sig="public Queue (System.Collections.ICollection col);" />
    <Member Sig="public static System.Collections.Queue Synchronized (System.Collections.Queue queue);" />
    <Member Sig="public virtual bool Contains (object obj);" />
    <Member Sig="public virtual bool IsSynchronized { get; }" />
    <Member Sig="public virtual int Count { get; }" />
    <Member Sig="public virtual object Clone ();" />
    <Member Sig="public virtual object Dequeue ();" />
    <Member Sig="public virtual object Peek ();" />
    <Member Sig="public virtual object SyncRoot { get; }" />
    <Member Sig="public virtual object[] ToArray ();" />
    <Member Sig="public virtual System.Collections.IEnumerator GetEnumerator ();" />
    <Member Sig="public virtual void Clear ();" />
    <Member Sig="public virtual void CopyTo (Array array, int index);" />
    <Member Sig="public virtual void Enqueue (object obj);" />
    <Member Sig="public virtual void TrimToSize ();" />
  </Type>
  <Type Name="System.Collections.ReadOnlyCollectionBase">
    <Member Sig="bool System.Collections.ICollection.IsSynchronized { get; }" />
    <Member Sig="object System.Collections.ICollection.SyncRoot { get; }" />
    <Member Sig="protected ReadOnlyCollectionBase ();" />
    <Member Sig="protected System.Collections.ArrayList InnerList { get; }" />
    <Member Sig="public virtual int Count { get; }" />
    <Member Sig="public virtual System.Collections.IEnumerator GetEnumerator ();" />
    <Member Sig="void ICollection.CopyTo (Array array, int index);" />
  </Type>
  <Type Name="System.Collections.SortedList">
    <Member Sig="public SortedList ();" />
    <Member Sig="public SortedList (int initialCapacity);" />
    <Member Sig="public SortedList (System.Collections.IComparer comparer);" />
    <Member Sig="public SortedList (System.Collections.IComparer comparer, int capacity);" />
    <Member Sig="public SortedList (System.Collections.IDictionary d);" />
    <Member Sig="public SortedList (System.Collections.IDictionary d, System.Collections.IComparer comparer);" />
    <Member Sig="public static System.Collections.SortedList Synchronized (System.Collections.SortedList list);" />
    <Member Sig="public virtual bool Contains (object key);" />
    <Member Sig="public virtual bool ContainsKey (object key);" />
    <Member Sig="public virtual bool ContainsValue (object value);" />
    <Member Sig="public virtual bool IsFixedSize { get; }" />
    <Member Sig="public virtual bool IsReadOnly { get; }" />
    <Member Sig="public virtual bool IsSynchronized { get; }" />
    <Member Sig="public virtual int Capacity { get; set; }" />
    <Member Sig="public virtual int Count { get; }" />
    <Member Sig="public virtual int IndexOfKey (object key);" />
    <Member Sig="public virtual int IndexOfValue (object value);" />
    <Member Sig="public virtual object Clone ();" />
    <Member Sig="public virtual object GetByIndex (int index);" />
    <Member Sig="public virtual object GetKey (int index);" />
    <Member Sig="public virtual object SyncRoot { get; }" />
    <Member Sig="public virtual object this[object key] { get; set; }" />
    <Member Sig="public virtual System.Collections.ICollection Keys { get; }" />
    <Member Sig="public virtual System.Collections.ICollection Values { get; }" />
    <Member Sig="public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();" />
    <Member Sig="public virtual System.Collections.IList GetKeyList ();" />
    <Member Sig="public virtual System.Collections.IList GetValueList ();" />
    <Member Sig="public virtual void Add (object key, object value);" />
    <Member Sig="public virtual void Clear ();" />
    <Member Sig="public virtual void CopyTo (Array array, int arrayIndex);" />
    <Member Sig="public virtual void Remove (object key);" />
    <Member Sig="public virtual void RemoveAt (int index);" />
    <Member Sig="public virtual void SetByIndex (int index, object value);" />
    <Member Sig="public virtual void TrimToSize ();" />
    <Member Sig="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
  </Type>
  <Type Name="System.Collections.Stack">
    <Member Sig="public Stack ();" />
    <Member Sig="public Stack (int initialCapacity);" />
    <Member Sig="public Stack (System.Collections.ICollection col);" />
    <Member Sig="public static System.Collections.Stack Synchronized (System.Collections.Stack stack);" />
    <Member Sig="public virtual bool Contains (object obj);" />
    <Member Sig="public virtual bool IsSynchronized { get; }" />
    <Member Sig="public virtual int Count { get; }" />
    <Member Sig="public virtual object Clone ();" />
    <Member Sig="public virtual object Peek ();" />
    <Member Sig="public virtual object Pop ();" />
    <Member Sig="public virtual object SyncRoot { get; }" />
    <Member Sig="public virtual object[] ToArray ();" />
    <Member Sig="public virtual System.Collections.IEnumerator GetEnumerator ();" />
    <Member Sig="public virtual void Clear ();" />
    <Member Sig="public virtual void CopyTo (Array array, int index);" />
    <Member Sig="public virtual void Push (object obj);" />
  </Type>
  <Type Name="System.Comparison`1" />
  <Type Name="System.Configuration.Assemblies.AssemblyHash">
    <Member Sig="public AssemblyHash (byte[] value);" />
    <Member Sig="public AssemblyHash (System.Configuration.Assemblies.AssemblyHashAlgorithm algorithm, byte[] value);" />
    <Member Sig="public byte[] GetValue ();" />
    <Member Sig="public object Clone ();" />
    <Member Sig="public static readonly System.Configuration.Assemblies.AssemblyHash Empty;" />
    <Member Sig="public System.Configuration.Assemblies.AssemblyHashAlgorithm Algorithm { get; set; }" />
    <Member Sig="public void SetValue (byte[] value);" />
  </Type>
  <Type Name="System.Configuration.Assemblies.AssemblyHashAlgorithm">
    <Member Sig="MD5" />
    <Member Sig="None" />
    <Member Sig="SHA1" />
  </Type>
  <Type Name="System.Configuration.Assemblies.AssemblyVersionCompatibility">
    <Member Sig="SameDomain" />
    <Member Sig="SameMachine" />
    <Member Sig="SameProcess" />
  </Type>
  <Type Name="System.Console">
    <Member Sig="public static bool CapsLock { get; }" />
    <Member Sig="public static bool CursorVisible { get; set; }" />
    <Member Sig="public static bool KeyAvailable { get; }" />
    <Member Sig="public static bool NumberLock { get; }" />
    <Member Sig="public static bool TreatControlCAsInput { get; set; }" />
    <Member Sig="public static ConsoleColor BackgroundColor { get; set; }" />
    <Member Sig="public static ConsoleColor ForegroundColor { get; set; }" />
    <Member Sig="public static ConsoleKeyInfo ReadKey ();" />
    <Member Sig="public static ConsoleKeyInfo ReadKey (bool intercept);" />
    <Member Sig="public static event ConsoleCancelEventHandler CancelKeyPress;" />
    <Member Sig="public static int BufferHeight { get; set; }" />
    <Member Sig="public static int BufferWidth { get; set; }" />
    <Member Sig="public static int CursorLeft { get; set; }" />
    <Member Sig="public static int CursorSize { get; set; }" />
    <Member Sig="public static int CursorTop { get; set; }" />
    <Member Sig="public static int LargestWindowHeight { get; }" />
    <Member Sig="public static int LargestWindowWidth { get; }" />
    <Member Sig="public static int Read ();" />
    <Member Sig="public static int WindowHeight { get; set; }" />
    <Member Sig="public static int WindowLeft { get; set; }" />
    <Member Sig="public static int WindowTop { get; set; }" />
    <Member Sig="public static int WindowWidth { get; set; }" />
    <Member Sig="public static string ReadLine ();" />
    <Member Sig="public static string Title { get; set; }" />
    <Member Sig="public static System.IO.Stream OpenStandardError ();" />
    <Member Sig="public static System.IO.Stream OpenStandardError (int bufferSize);" />
    <Member Sig="public static System.IO.Stream OpenStandardInput ();" />
    <Member Sig="public static System.IO.Stream OpenStandardInput (int bufferSize);" />
    <Member Sig="public static System.IO.Stream OpenStandardOutput ();" />
    <Member Sig="public static System.IO.Stream OpenStandardOutput (int bufferSize);" />
    <Member Sig="public static System.IO.TextReader In { get; }" />
    <Member Sig="public static System.IO.TextWriter Error { get; }" />
    <Member Sig="public static System.IO.TextWriter Out { get; }" />
    <Member Sig="public static System.Text.Encoding InputEncoding { get; set; }" />
    <Member Sig="public static System.Text.Encoding OutputEncoding { get; set; }" />
    <Member Sig="public static void Beep ();" />
    <Member Sig="public static void Beep (int frequency, int duration);" />
    <Member Sig="public static void Clear ();" />
    <Member Sig="public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);" />
    <Member Sig="public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);" />
    <Member Sig="public static void ResetColor ();" />
    <Member Sig="public static void SetBufferSize (int width, int height);" />
    <Member Sig="public static void SetCursorPosition (int left, int top);" />
    <Member Sig="public static void SetError (System.IO.TextWriter newError);" />
    <Member Sig="public static void SetIn (System.IO.TextReader newIn);" />
    <Member Sig="public static void SetOut (System.IO.TextWriter newOut);" />
    <Member Sig="public static void SetWindowPosition (int left, int top);" />
    <Member Sig="public static void SetWindowSize (int width, int height);" />
    <Member Sig="public static void Write (bool value);" />
    <Member Sig="public static void Write (char value);" />
    <Member Sig="public static void Write (char[] buffer);" />
    <Member Sig="public static void Write (char[] buffer, int index, int count);" />
    <Member Sig="public static void Write (decimal value);" />
    <Member Sig="public static void Write (double value);" />
    <Member Sig="public static void Write (float value);" />
    <Member Sig="public static void Write (int value);" />
    <Member Sig="public static void Write (long value);" />
    <Member Sig="public static void Write (object value);" />
    <Member Sig="public static void Write (string format, object arg0);" />
    <Member Sig="public static void Write (string format, object arg0, object arg1);" />
    <Member Sig="public static void Write (string format, object arg0, object arg1, object arg2);" />
    <Member Sig="public static void Write (string format, object arg0, object arg1, object arg2, object arg3);" />
    <Member Sig="public static void Write (string format, object[] arg);" />
    <Member Sig="public static void Write (string value);" />
    <Member Sig="public static void Write (uint value);" />
    <Member Sig="public static void Write (ulong value);" />
    <Member Sig="public static void WriteLine ();" />
    <Member Sig="public static void WriteLine (bool value);" />
    <Member Sig="public static void WriteLine (char value);" />
    <Member Sig="public static void WriteLine (char[] buffer);" />
    <Member Sig="public static void WriteLine (char[] buffer, int index, int count);" />
    <Member Sig="public static void WriteLine (decimal value);" />
    <Member Sig="public static void WriteLine (double value);" />
    <Member Sig="public static void WriteLine (float value);" />
    <Member Sig="public static void WriteLine (int value);" />
    <Member Sig="public static void WriteLine (long value);" />
    <Member Sig="public static void WriteLine (object value);" />
    <Member Sig="public static void WriteLine (string format, object arg0);" />
    <Member Sig="public static void WriteLine (string format, object arg0, object arg1);" />
    <Member Sig="public static void WriteLine (string format, object arg0, object arg1, object arg2);" />
    <Member Sig="public static void WriteLine (string format, object arg0, object arg1, object arg2, object arg3);" />
    <Member Sig="public static void WriteLine (string format, object[] arg);" />
    <Member Sig="public static void WriteLine (string value);" />
    <Member Sig="public static void WriteLine (uint value);" />
    <Member Sig="public static void WriteLine (ulong value);" />
  </Type>
  <Type Name="System.ConsoleCancelEventArgs">
    <Member Sig="public bool Cancel { get; set; }" />
    <Member Sig="public ConsoleSpecialKey SpecialKey { get; }" />
  </Type>
  <Type Name="System.ConsoleCancelEventHandler" />
  <Type Name="System.ConsoleColor">
    <Member Sig="Black" />
    <Member Sig="Blue" />
    <Member Sig="Cyan" />
    <Member Sig="DarkBlue" />
    <Member Sig="DarkCyan" />
    <Member Sig="DarkGray" />
    <Member Sig="DarkGreen" />
    <Member Sig="DarkMagenta" />
    <Member Sig="DarkRed" />
    <Member Sig="DarkYellow" />
    <Member Sig="Gray" />
    <Member Sig="Green" />
    <Member Sig="Magenta" />
    <Member Sig="Red" />
    <Member Sig="White" />
    <Member Sig="Yellow" />
  </Type>
  <Type Name="System.ConsoleKey">
    <Member Sig="A" />
    <Member Sig="Add" />
    <Member Sig="Applications" />
    <Member Sig="Attention" />
    <Member Sig="B" />
    <Member Sig="Backspace" />
    <Member Sig="BrowserBack" />
    <Member Sig="BrowserFavorites" />
    <Member Sig="BrowserForward" />
    <Member Sig="BrowserHome" />
    <Member Sig="BrowserRefresh" />
    <Member Sig="BrowserSearch" />
    <Member Sig="BrowserStop" />
    <Member Sig="C" />
    <Member Sig="Clear" />
    <Member Sig="CrSel" />
    <Member Sig="D" />
    <Member Sig="D0" />
    <Member Sig="D1" />
    <Member Sig="D2" />
    <Member Sig="D3" />
    <Member Sig="D4" />
    <Member Sig="D5" />
    <Member Sig="D6" />
    <Member Sig="D7" />
    <Member Sig="D8" />
    <Member Sig="D9" />
    <Member Sig="Decimal" />
    <Member Sig="Delete" />
    <Member Sig="Divide" />
    <Member Sig="DownArrow" />
    <Member Sig="E" />
    <Member Sig="End" />
    <Member Sig="Enter" />
    <Member Sig="EraseEndOfFile" />
    <Member Sig="Escape" />
    <Member Sig="Execute" />
    <Member Sig="ExSel" />
    <Member Sig="F" />
    <Member Sig="F1" />
    <Member Sig="F10" />
    <Member Sig="F11" />
    <Member Sig="F12" />
    <Member Sig="F13" />
    <Member Sig="F14" />
    <Member Sig="F15" />
    <Member Sig="F16" />
    <Member Sig="F17" />
    <Member Sig="F18" />
    <Member Sig="F19" />
    <Member Sig="F2" />
    <Member Sig="F20" />
    <Member Sig="F21" />
    <Member Sig="F22" />
    <Member Sig="F23" />
    <Member Sig="F24" />
    <Member Sig="F3" />
    <Member Sig="F4" />
    <Member Sig="F5" />
    <Member Sig="F6" />
    <Member Sig="F7" />
    <Member Sig="F8" />
    <Member Sig="F9" />
    <Member Sig="G" />
    <Member Sig="H" />
    <Member Sig="Help" />
    <Member Sig="Home" />
    <Member Sig="I" />
    <Member Sig="Insert" />
    <Member Sig="J" />
    <Member Sig="K" />
    <Member Sig="L" />
    <Member Sig="LaunchApp1" />
    <Member Sig="LaunchApp2" />
    <Member Sig="LaunchMail" />
    <Member Sig="LaunchMediaSelect" />
    <Member Sig="LeftArrow" />
    <Member Sig="LeftWindows" />
    <Member Sig="M" />
    <Member Sig="MediaNext" />
    <Member Sig="MediaPlay" />
    <Member Sig="MediaPrevious" />
    <Member Sig="MediaStop" />
    <Member Sig="Multiply" />
    <Member Sig="N" />
    <Member Sig="NoName" />
    <Member Sig="NumPad0" />
    <Member Sig="NumPad1" />
    <Member Sig="NumPad2" />
    <Member Sig="NumPad3" />
    <Member Sig="NumPad4" />
    <Member Sig="NumPad5" />
    <Member Sig="NumPad6" />
    <Member Sig="NumPad7" />
    <Member Sig="NumPad8" />
    <Member Sig="NumPad9" />
    <Member Sig="O" />
    <Member Sig="Oem1" />
    <Member Sig="Oem102" />
    <Member Sig="Oem2" />
    <Member Sig="Oem3" />
    <Member Sig="Oem4" />
    <Member Sig="Oem5" />
    <Member Sig="Oem6" />
    <Member Sig="Oem7" />
    <Member Sig="Oem8" />
    <Member Sig="OemClear" />
    <Member Sig="OemComma" />
    <Member Sig="OemMinus" />
    <Member Sig="OemPeriod" />
    <Member Sig="OemPlus" />
    <Member Sig="P" />
    <Member Sig="Pa1" />
    <Member Sig="Packet" />
    <Member Sig="PageDown" />
    <Member Sig="PageUp" />
    <Member Sig="Pause" />
    <Member Sig="Play" />
    <Member Sig="Print" />
    <Member Sig="PrintScreen" />
    <Member Sig="Process" />
    <Member Sig="Q" />
    <Member Sig="R" />
    <Member Sig="RightArrow" />
    <Member Sig="RightWindows" />
    <Member Sig="S" />
    <Member Sig="Select" />
    <Member Sig="Separator" />
    <Member Sig="Sleep" />
    <Member Sig="Spacebar" />
    <Member Sig="Subtract" />
    <Member Sig="T" />
    <Member Sig="Tab" />
    <Member Sig="U" />
    <Member Sig="UpArrow" />
    <Member Sig="V" />
    <Member Sig="VolumeDown" />
    <Member Sig="VolumeMute" />
    <Member Sig="VolumeUp" />
    <Member Sig="W" />
    <Member Sig="X" />
    <Member Sig="Y" />
    <Member Sig="Z" />
    <Member Sig="Zoom" />
  </Type>
  <Type Name="System.ConsoleKeyInfo">
    <Member Sig="public bool Equals (ConsoleKeyInfo obj);" />
    <Member Sig="public char KeyChar { get; }" />
    <Member Sig="public ConsoleKey Key { get; }" />
    <Member Sig="public ConsoleKeyInfo (char keyChar, ConsoleKey key, bool shift, bool alt, bool control);" />
    <Member Sig="public ConsoleModifiers Modifiers { get; }" />
    <Member Sig="public override bool Equals (object value);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static bool op_Equality (ConsoleKeyInfo a, ConsoleKeyInfo b);" />
    <Member Sig="public static bool op_Inequality (ConsoleKeyInfo a, ConsoleKeyInfo b);" />
  </Type>
  <Type Name="System.ConsoleModifiers">
    <Member Sig="Alt" />
    <Member Sig="Control" />
    <Member Sig="Shift" />
  </Type>
  <Type Name="System.ConsoleSpecialKey">
    <Member Sig="ControlBreak" />
    <Member Sig="ControlC" />
  </Type>
  <Type Name="System.ContextBoundObject">
    <Member Sig="protected ContextBoundObject ();" />
  </Type>
  <Type Name="System.ContextMarshalException">
    <Member Sig="protected ContextMarshalException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public ContextMarshalException ();" />
    <Member Sig="public ContextMarshalException (string message);" />
    <Member Sig="public ContextMarshalException (string message, Exception inner);" />
  </Type>
  <Type Name="System.ContextStaticAttribute">
    <Member Sig="public ContextStaticAttribute ();" />
  </Type>
  <Type Name="System.Convert">
    <Member Sig="public static bool IsDBNull (object value);" />
    <Member Sig="public static bool ToBoolean (bool value);" />
    <Member Sig="public static bool ToBoolean (byte value);" />
    <Member Sig="public static bool ToBoolean (char value);" />
    <Member Sig="public static bool ToBoolean (DateTime value);" />
    <Member Sig="public static bool ToBoolean (decimal value);" />
    <Member Sig="public static bool ToBoolean (double value);" />
    <Member Sig="public static bool ToBoolean (float value);" />
    <Member Sig="public static bool ToBoolean (int value);" />
    <Member Sig="public static bool ToBoolean (long value);" />
    <Member Sig="public static bool ToBoolean (object value);" />
    <Member Sig="public static bool ToBoolean (object value, IFormatProvider provider);" />
    <Member Sig="public static bool ToBoolean (sbyte value);" />
    <Member Sig="public static bool ToBoolean (short value);" />
    <Member Sig="public static bool ToBoolean (string value);" />
    <Member Sig="public static bool ToBoolean (string value, IFormatProvider provider);" />
    <Member Sig="public static bool ToBoolean (uint value);" />
    <Member Sig="public static bool ToBoolean (ulong value);" />
    <Member Sig="public static bool ToBoolean (ushort value);" />
    <Member Sig="public static byte ToByte (bool value);" />
    <Member Sig="public static byte ToByte (byte value);" />
    <Member Sig="public static byte ToByte (char value);" />
    <Member Sig="public static byte ToByte (DateTime value);" />
    <Member Sig="public static byte ToByte (decimal value);" />
    <Member Sig="public static byte ToByte (double value);" />
    <Member Sig="public static byte ToByte (float value);" />
    <Member Sig="public static byte ToByte (int value);" />
    <Member Sig="public static byte ToByte (long value);" />
    <Member Sig="public static byte ToByte (object value);" />
    <Member Sig="public static byte ToByte (object value, IFormatProvider provider);" />
    <Member Sig="public static byte ToByte (sbyte value);" />
    <Member Sig="public static byte ToByte (short value);" />
    <Member Sig="public static byte ToByte (string value);" />
    <Member Sig="public static byte ToByte (string value, IFormatProvider provider);" />
    <Member Sig="public static byte ToByte (string value, int fromBase);" />
    <Member Sig="public static byte ToByte (uint value);" />
    <Member Sig="public static byte ToByte (ulong value);" />
    <Member Sig="public static byte ToByte (ushort value);" />
    <Member Sig="public static byte[] FromBase64CharArray (char[] inArray, int offset, int length);" />
    <Member Sig="public static byte[] FromBase64String (string s);" />
    <Member Sig="public static char ToChar (bool value);" />
    <Member Sig="public static char ToChar (byte value);" />
    <Member Sig="public static char ToChar (char value);" />
    <Member Sig="public static char ToChar (DateTime value);" />
    <Member Sig="public static char ToChar (decimal value);" />
    <Member Sig="public static char ToChar (double value);" />
    <Member Sig="public static char ToChar (float value);" />
    <Member Sig="public static char ToChar (int value);" />
    <Member Sig="public static char ToChar (long value);" />
    <Member Sig="public static char ToChar (object value);" />
    <Member Sig="public static char ToChar (object value, IFormatProvider provider);" />
    <Member Sig="public static char ToChar (sbyte value);" />
    <Member Sig="public static char ToChar (short value);" />
    <Member Sig="public static char ToChar (string value);" />
    <Member Sig="public static char ToChar (string value, IFormatProvider provider);" />
    <Member Sig="public static char ToChar (uint value);" />
    <Member Sig="public static char ToChar (ulong value);" />
    <Member Sig="public static char ToChar (ushort value);" />
    <Member Sig="public static DateTime ToDateTime (bool value);" />
    <Member Sig="public static DateTime ToDateTime (byte value);" />
    <Member Sig="public static DateTime ToDateTime (char value);" />
    <Member Sig="public static DateTime ToDateTime (DateTime value);" />
    <Member Sig="public static DateTime ToDateTime (decimal value);" />
    <Member Sig="public static DateTime ToDateTime (double value);" />
    <Member Sig="public static DateTime ToDateTime (float value);" />
    <Member Sig="public static DateTime ToDateTime (int value);" />
    <Member Sig="public static DateTime ToDateTime (long value);" />
    <Member Sig="public static DateTime ToDateTime (object value);" />
    <Member Sig="public static DateTime ToDateTime (object value, IFormatProvider provider);" />
    <Member Sig="public static DateTime ToDateTime (sbyte value);" />
    <Member Sig="public static DateTime ToDateTime (short value);" />
    <Member Sig="public static DateTime ToDateTime (string value);" />
    <Member Sig="public static DateTime ToDateTime (string value, IFormatProvider provider);" />
    <Member Sig="public static DateTime ToDateTime (uint value);" />
    <Member Sig="public static DateTime ToDateTime (ulong value);" />
    <Member Sig="public static DateTime ToDateTime (ushort value);" />
    <Member Sig="public static decimal ToDecimal (bool value);" />
    <Member Sig="public static decimal ToDecimal (byte value);" />
    <Member Sig="public static decimal ToDecimal (char value);" />
    <Member Sig="public static decimal ToDecimal (DateTime value);" />
    <Member Sig="public static decimal ToDecimal (decimal value);" />
    <Member Sig="public static decimal ToDecimal (double value);" />
    <Member Sig="public static decimal ToDecimal (float value);" />
    <Member Sig="public static decimal ToDecimal (int value);" />
    <Member Sig="public static decimal ToDecimal (long value);" />
    <Member Sig="public static decimal ToDecimal (object value);" />
    <Member Sig="public static decimal ToDecimal (object value, IFormatProvider provider);" />
    <Member Sig="public static decimal ToDecimal (sbyte value);" />
    <Member Sig="public static decimal ToDecimal (short value);" />
    <Member Sig="public static decimal ToDecimal (string value);" />
    <Member Sig="public static decimal ToDecimal (string value, IFormatProvider provider);" />
    <Member Sig="public static decimal ToDecimal (uint value);" />
    <Member Sig="public static decimal ToDecimal (ulong value);" />
    <Member Sig="public static decimal ToDecimal (ushort value);" />
    <Member Sig="public static double ToDouble (bool value);" />
    <Member Sig="public static double ToDouble (byte value);" />
    <Member Sig="public static double ToDouble (char value);" />
    <Member Sig="public static double ToDouble (DateTime value);" />
    <Member Sig="public static double ToDouble (decimal value);" />
    <Member Sig="public static double ToDouble (double value);" />
    <Member Sig="public static double ToDouble (float value);" />
    <Member Sig="public static double ToDouble (int value);" />
    <Member Sig="public static double ToDouble (long value);" />
    <Member Sig="public static double ToDouble (object value);" />
    <Member Sig="public static double ToDouble (object value, IFormatProvider provider);" />
    <Member Sig="public static double ToDouble (sbyte value);" />
    <Member Sig="public static double ToDouble (short value);" />
    <Member Sig="public static double ToDouble (string value);" />
    <Member Sig="public static double ToDouble (string value, IFormatProvider provider);" />
    <Member Sig="public static double ToDouble (uint value);" />
    <Member Sig="public static double ToDouble (ulong value);" />
    <Member Sig="public static double ToDouble (ushort value);" />
    <Member Sig="public static float ToSingle (bool value);" />
    <Member Sig="public static float ToSingle (byte value);" />
    <Member Sig="public static float ToSingle (char value);" />
    <Member Sig="public static float ToSingle (DateTime value);" />
    <Member Sig="public static float ToSingle (decimal value);" />
    <Member Sig="public static float ToSingle (double value);" />
    <Member Sig="public static float ToSingle (float value);" />
    <Member Sig="public static float ToSingle (int value);" />
    <Member Sig="public static float ToSingle (long value);" />
    <Member Sig="public static float ToSingle (object value);" />
    <Member Sig="public static float ToSingle (object value, IFormatProvider provider);" />
    <Member Sig="public static float ToSingle (sbyte value);" />
    <Member Sig="public static float ToSingle (short value);" />
    <Member Sig="public static float ToSingle (string value);" />
    <Member Sig="public static float ToSingle (string value, IFormatProvider provider);" />
    <Member Sig="public static float ToSingle (uint value);" />
    <Member Sig="public static float ToSingle (ulong value);" />
    <Member Sig="public static float ToSingle (ushort value);" />
    <Member Sig="public static int ToBase64CharArray (byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut);" />
    <Member Sig="public static int ToBase64CharArray (byte[] inArray, int offsetIn, int length, char[] outArray, int offsetOut, Base64FormattingOptions options);" />
    <Member Sig="public static int ToInt32 (bool value);" />
    <Member Sig="public static int ToInt32 (byte value);" />
    <Member Sig="public static int ToInt32 (char value);" />
    <Member Sig="public static int ToInt32 (DateTime value);" />
    <Member Sig="public static int ToInt32 (decimal value);" />
    <Member Sig="public static int ToInt32 (double value);" />
    <Member Sig="public static int ToInt32 (float value);" />
    <Member Sig="public static int ToInt32 (int value);" />
    <Member Sig="public static int ToInt32 (long value);" />
    <Member Sig="public static int ToInt32 (object value);" />
    <Member Sig="public static int ToInt32 (object value, IFormatProvider provider);" />
    <Member Sig="public static int ToInt32 (sbyte value);" />
    <Member Sig="public static int ToInt32 (short value);" />
    <Member Sig="public static int ToInt32 (string value);" />
    <Member Sig="public static int ToInt32 (string value, IFormatProvider provider);" />
    <Member Sig="public static int ToInt32 (string value, int fromBase);" />
    <Member Sig="public static int ToInt32 (uint value);" />
    <Member Sig="public static int ToInt32 (ulong value);" />
    <Member Sig="public static int ToInt32 (ushort value);" />
    <Member Sig="public static long ToInt64 (bool value);" />
    <Member Sig="public static long ToInt64 (byte value);" />
    <Member Sig="public static long ToInt64 (char value);" />
    <Member Sig="public static long ToInt64 (DateTime value);" />
    <Member Sig="public static long ToInt64 (decimal value);" />
    <Member Sig="public static long ToInt64 (double value);" />
    <Member Sig="public static long ToInt64 (float value);" />
    <Member Sig="public static long ToInt64 (int value);" />
    <Member Sig="public static long ToInt64 (long value);" />
    <Member Sig="public static long ToInt64 (object value);" />
    <Member Sig="public static long ToInt64 (object value, IFormatProvider provider);" />
    <Member Sig="public static long ToInt64 (sbyte value);" />
    <Member Sig="public static long ToInt64 (short value);" />
    <Member Sig="public static long ToInt64 (string value);" />
    <Member Sig="public static long ToInt64 (string value, IFormatProvider provider);" />
    <Member Sig="public static long ToInt64 (string value, int fromBase);" />
    <Member Sig="public static long ToInt64 (uint value);" />
    <Member Sig="public static long ToInt64 (ulong value);" />
    <Member Sig="public static long ToInt64 (ushort value);" />
    <Member Sig="public static object ChangeType (object value, Type conversionType);" />
    <Member Sig="public static object ChangeType (object value, Type conversionType, IFormatProvider provider);" />
    <Member Sig="public static object ChangeType (object value, TypeCode typeCode);" />
    <Member Sig="public static object ChangeType (object value, TypeCode typeCode, IFormatProvider provider);" />
    <Member Sig="public static readonly object DBNull;" />
    <Member Sig="public static sbyte ToSByte (bool value);" />
    <Member Sig="public static sbyte ToSByte (byte value);" />
    <Member Sig="public static sbyte ToSByte (char value);" />
    <Member Sig="public static sbyte ToSByte (DateTime value);" />
    <Member Sig="public static sbyte ToSByte (decimal value);" />
    <Member Sig="public static sbyte ToSByte (double value);" />
    <Member Sig="public static sbyte ToSByte (float value);" />
    <Member Sig="public static sbyte ToSByte (int value);" />
    <Member Sig="public static sbyte ToSByte (long value);" />
    <Member Sig="public static sbyte ToSByte (object value);" />
    <Member Sig="public static sbyte ToSByte (object value, IFormatProvider provider);" />
    <Member Sig="public static sbyte ToSByte (sbyte value);" />
    <Member Sig="public static sbyte ToSByte (short value);" />
    <Member Sig="public static sbyte ToSByte (string value);" />
    <Member Sig="public static sbyte ToSByte (string value, IFormatProvider provider);" />
    <Member Sig="public static sbyte ToSByte (string value, int fromBase);" />
    <Member Sig="public static sbyte ToSByte (uint value);" />
    <Member Sig="public static sbyte ToSByte (ulong value);" />
    <Member Sig="public static sbyte ToSByte (ushort value);" />
    <Member Sig="public static short ToInt16 (bool value);" />
    <Member Sig="public static short ToInt16 (byte value);" />
    <Member Sig="public static short ToInt16 (char value);" />
    <Member Sig="public static short ToInt16 (DateTime value);" />
    <Member Sig="public static short ToInt16 (decimal value);" />
    <Member Sig="public static short ToInt16 (double value);" />
    <Member Sig="public static short ToInt16 (float value);" />
    <Member Sig="public static short ToInt16 (int value);" />
    <Member Sig="public static short ToInt16 (long value);" />
    <Member Sig="public static short ToInt16 (object value);" />
    <Member Sig="public static short ToInt16 (object value, IFormatProvider provider);" />
    <Member Sig="public static short ToInt16 (sbyte value);" />
    <Member Sig="public static short ToInt16 (short value);" />
    <Member Sig="public static short ToInt16 (string value);" />
    <Member Sig="public static short ToInt16 (string value, IFormatProvider provider);" />
    <Member Sig="public static short ToInt16 (string value, int fromBase);" />
    <Member Sig="public static short ToInt16 (uint value);" />
    <Member Sig="public static short ToInt16 (ulong value);" />
    <Member Sig="public static short ToInt16 (ushort value);" />
    <Member Sig="public static string ToBase64String (byte[] inArray);" />
    <Member Sig="public static string ToBase64String (byte[] inArray, Base64FormattingOptions options);" />
    <Member Sig="public static string ToBase64String (byte[] inArray, int offset, int length);" />
    <Member Sig="public static string ToBase64String (byte[] inArray, int offset, int length, Base64FormattingOptions options);" />
    <Member Sig="public static string ToString (bool value);" />
    <Member Sig="public static string ToString (bool value, IFormatProvider provider);" />
    <Member Sig="public static string ToString (byte value);" />
    <Member Sig="public static string ToString (byte value, IFormatProvider provider);" />
    <Member Sig="public static string ToString (byte value, int toBase);" />
    <Member Sig="public static string ToString (char value);" />
    <Member Sig="public static string ToString (char value, IFormatProvider provider);" />
    <Member Sig="public static string ToString (DateTime value);" />
    <Member Sig="public static string ToString (DateTime value, IFormatProvider provider);" />
    <Member Sig="public static string ToString (decimal value);" />
    <Member Sig="public static string ToString (decimal value, IFormatProvider provider);" />
    <Member Sig="public static string ToString (double value);" />
    <Member Sig="public static string ToString (double value, IFormatProvider provider);" />
    <Member Sig="public static string ToString (float value);" />
    <Member Sig="public static string ToString (float value, IFormatProvider provider);" />
    <Member Sig="public static string ToString (int value);" />
    <Member Sig="public static string ToString (int value, IFormatProvider provider);" />
    <Member Sig="public static string ToString (int value, int toBase);" />
    <Member Sig="public static string ToString (long value);" />
    <Member Sig="public static string ToString (long value, IFormatProvider provider);" />
    <Member Sig="public static string ToString (long value, int toBase);" />
    <Member Sig="public static string ToString (object value);" />
    <Member Sig="public static string ToString (object value, IFormatProvider provider);" />
    <Member Sig="public static string ToString (sbyte value);" />
    <Member Sig="public static string ToString (sbyte value, IFormatProvider provider);" />
    <Member Sig="public static string ToString (short value);" />
    <Member Sig="public static string ToString (short value, IFormatProvider provider);" />
    <Member Sig="public static string ToString (short value, int toBase);" />
    <Member Sig="public static string ToString (string value);" />
    <Member Sig="public static string ToString (string value, IFormatProvider provider);" />
    <Member Sig="public static string ToString (uint value);" />
    <Member Sig="public static string ToString (uint value, IFormatProvider provider);" />
    <Member Sig="public static string ToString (ulong value);" />
    <Member Sig="public static string ToString (ulong value, IFormatProvider provider);" />
    <Member Sig="public static string ToString (ushort value);" />
    <Member Sig="public static string ToString (ushort value, IFormatProvider provider);" />
    <Member Sig="public static TypeCode GetTypeCode (object value);" />
    <Member Sig="public static uint ToUInt32 (bool value);" />
    <Member Sig="public static uint ToUInt32 (byte value);" />
    <Member Sig="public static uint ToUInt32 (char value);" />
    <Member Sig="public static uint ToUInt32 (DateTime value);" />
    <Member Sig="public static uint ToUInt32 (decimal value);" />
    <Member Sig="public static uint ToUInt32 (double value);" />
    <Member Sig="public static uint ToUInt32 (float value);" />
    <Member Sig="public static uint ToUInt32 (int value);" />
    <Member Sig="public static uint ToUInt32 (long value);" />
    <Member Sig="public static uint ToUInt32 (object value);" />
    <Member Sig="public static uint ToUInt32 (object value, IFormatProvider provider);" />
    <Member Sig="public static uint ToUInt32 (sbyte value);" />
    <Member Sig="public static uint ToUInt32 (short value);" />
    <Member Sig="public static uint ToUInt32 (string value);" />
    <Member Sig="public static uint ToUInt32 (string value, IFormatProvider provider);" />
    <Member Sig="public static uint ToUInt32 (string value, int fromBase);" />
    <Member Sig="public static uint ToUInt32 (uint value);" />
    <Member Sig="public static uint ToUInt32 (ulong value);" />
    <Member Sig="public static uint ToUInt32 (ushort value);" />
    <Member Sig="public static ulong ToUInt64 (bool value);" />
    <Member Sig="public static ulong ToUInt64 (byte value);" />
    <Member Sig="public static ulong ToUInt64 (char value);" />
    <Member Sig="public static ulong ToUInt64 (DateTime value);" />
    <Member Sig="public static ulong ToUInt64 (decimal value);" />
    <Member Sig="public static ulong ToUInt64 (double value);" />
    <Member Sig="public static ulong ToUInt64 (float value);" />
    <Member Sig="public static ulong ToUInt64 (int value);" />
    <Member Sig="public static ulong ToUInt64 (long value);" />
    <Member Sig="public static ulong ToUInt64 (object value);" />
    <Member Sig="public static ulong ToUInt64 (object value, IFormatProvider provider);" />
    <Member Sig="public static ulong ToUInt64 (sbyte value);" />
    <Member Sig="public static ulong ToUInt64 (short value);" />
    <Member Sig="public static ulong ToUInt64 (string value);" />
    <Member Sig="public static ulong ToUInt64 (string value, IFormatProvider provider);" />
    <Member Sig="public static ulong ToUInt64 (string value, int fromBase);" />
    <Member Sig="public static ulong ToUInt64 (uint value);" />
    <Member Sig="public static ulong ToUInt64 (ulong value);" />
    <Member Sig="public static ulong ToUInt64 (ushort value);" />
    <Member Sig="public static ushort ToUInt16 (bool value);" />
    <Member Sig="public static ushort ToUInt16 (byte value);" />
    <Member Sig="public static ushort ToUInt16 (char value);" />
    <Member Sig="public static ushort ToUInt16 (DateTime value);" />
    <Member Sig="public static ushort ToUInt16 (decimal value);" />
    <Member Sig="public static ushort ToUInt16 (double value);" />
    <Member Sig="public static ushort ToUInt16 (float value);" />
    <Member Sig="public static ushort ToUInt16 (int value);" />
    <Member Sig="public static ushort ToUInt16 (long value);" />
    <Member Sig="public static ushort ToUInt16 (object value);" />
    <Member Sig="public static ushort ToUInt16 (object value, IFormatProvider provider);" />
    <Member Sig="public static ushort ToUInt16 (sbyte value);" />
    <Member Sig="public static ushort ToUInt16 (short value);" />
    <Member Sig="public static ushort ToUInt16 (string value);" />
    <Member Sig="public static ushort ToUInt16 (string value, IFormatProvider provider);" />
    <Member Sig="public static ushort ToUInt16 (string value, int fromBase);" />
    <Member Sig="public static ushort ToUInt16 (uint value);" />
    <Member Sig="public static ushort ToUInt16 (ulong value);" />
    <Member Sig="public static ushort ToUInt16 (ushort value);" />
  </Type>
  <Type Name="System.Converter`2" />
  <Type Name="System.CrossAppDomainDelegate" />
  <Type Name="System.DataMisalignedException">
    <Member Sig="public DataMisalignedException ();" />
    <Member Sig="public DataMisalignedException (string message);" />
    <Member Sig="public DataMisalignedException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.DateTime">
    <Member Sig="bool IConvertible.ToBoolean (IFormatProvider provider);" />
    <Member Sig="byte IConvertible.ToByte (IFormatProvider provider);" />
    <Member Sig="char IConvertible.ToChar (IFormatProvider provider);" />
    <Member Sig="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
    <Member Sig="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
    <Member Sig="double IConvertible.ToDouble (IFormatProvider provider);" />
    <Member Sig="float IConvertible.ToSingle (IFormatProvider provider);" />
    <Member Sig="int IConvertible.ToInt32 (IFormatProvider provider);" />
    <Member Sig="long IConvertible.ToInt64 (IFormatProvider provider);" />
    <Member Sig="object IConvertible.ToType (Type type, IFormatProvider provider);" />
    <Member Sig="public bool Equals (DateTime value);" />
    <Member Sig="public bool IsDaylightSavingTime ();" />
    <Member Sig="public DateTime (int year, int month, int day);" />
    <Member Sig="public DateTime (int year, int month, int day, int hour, int minute, int second);" />
    <Member Sig="public DateTime (int year, int month, int day, int hour, int minute, int second, DateTimeKind kind);" />
    <Member Sig="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);" />
    <Member Sig="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, DateTimeKind kind);" />
    <Member Sig="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar);" />
    <Member Sig="public DateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, DateTimeKind kind);" />
    <Member Sig="public DateTime (int year, int month, int day, int hour, int minute, int second, System.Globalization.Calendar calendar);" />
    <Member Sig="public DateTime (int year, int month, int day, System.Globalization.Calendar calendar);" />
    <Member Sig="public DateTime (long ticks);" />
    <Member Sig="public DateTime (long ticks, DateTimeKind kind);" />
    <Member Sig="public DateTime Add (TimeSpan value);" />
    <Member Sig="public DateTime AddDays (double value);" />
    <Member Sig="public DateTime AddHours (double value);" />
    <Member Sig="public DateTime AddMilliseconds (double value);" />
    <Member Sig="public DateTime AddMinutes (double value);" />
    <Member Sig="public DateTime AddMonths (int months);" />
    <Member Sig="public DateTime AddSeconds (double value);" />
    <Member Sig="public DateTime AddTicks (long value);" />
    <Member Sig="public DateTime AddYears (int value);" />
    <Member Sig="public DateTime Date { get; }" />
    <Member Sig="public DateTime Subtract (TimeSpan value);" />
    <Member Sig="public DateTime ToLocalTime ();" />
    <Member Sig="public DateTime ToUniversalTime ();" />
    <Member Sig="public DateTimeKind Kind { get; }" />
    <Member Sig="public DayOfWeek DayOfWeek { get; }" />
    <Member Sig="public double ToOADate ();" />
    <Member Sig="public int CompareTo (DateTime value);" />
    <Member Sig="public int CompareTo (object value);" />
    <Member Sig="public int Day { get; }" />
    <Member Sig="public int DayOfYear { get; }" />
    <Member Sig="public int Hour { get; }" />
    <Member Sig="public int Millisecond { get; }" />
    <Member Sig="public int Minute { get; }" />
    <Member Sig="public int Month { get; }" />
    <Member Sig="public int Second { get; }" />
    <Member Sig="public int Year { get; }" />
    <Member Sig="public long Ticks { get; }" />
    <Member Sig="public long ToBinary ();" />
    <Member Sig="public long ToFileTime ();" />
    <Member Sig="public long ToFileTimeUtc ();" />
    <Member Sig="public override bool Equals (object value);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool Equals (DateTime t1, DateTime t2);" />
    <Member Sig="public static bool IsLeapYear (int year);" />
    <Member Sig="public static bool op_Equality (DateTime d1, DateTime d2);" />
    <Member Sig="public static bool op_GreaterThan (DateTime t1, DateTime t2);" />
    <Member Sig="public static bool op_GreaterThanOrEqual (DateTime t1, DateTime t2);" />
    <Member Sig="public static bool op_Inequality (DateTime d1, DateTime d2);" />
    <Member Sig="public static bool op_LessThan (DateTime t1, DateTime t2);" />
    <Member Sig="public static bool op_LessThanOrEqual (DateTime t1, DateTime t2);" />
    <Member Sig="public static bool TryParse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles, out DateTime result);" />
    <Member Sig="public static bool TryParse (string s, out DateTime result);" />
    <Member Sig="public static bool TryParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
    <Member Sig="public static bool TryParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style, out DateTime result);" />
    <Member Sig="public static DateTime FromBinary (long dateData);" />
    <Member Sig="public static DateTime FromFileTime (long fileTime);" />
    <Member Sig="public static DateTime FromFileTimeUtc (long fileTime);" />
    <Member Sig="public static DateTime FromOADate (double d);" />
    <Member Sig="public static DateTime Now { get; }" />
    <Member Sig="public static DateTime op_Addition (DateTime d, TimeSpan t);" />
    <Member Sig="public static DateTime op_Subtraction (DateTime d, TimeSpan t);" />
    <Member Sig="public static DateTime Parse (string s);" />
    <Member Sig="public static DateTime Parse (string s, IFormatProvider provider);" />
    <Member Sig="public static DateTime Parse (string s, IFormatProvider provider, System.Globalization.DateTimeStyles styles);" />
    <Member Sig="public static DateTime ParseExact (string s, string format, IFormatProvider provider);" />
    <Member Sig="public static DateTime ParseExact (string s, string format, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
    <Member Sig="public static DateTime ParseExact (string s, string[] formats, IFormatProvider provider, System.Globalization.DateTimeStyles style);" />
    <Member Sig="public static DateTime SpecifyKind (DateTime value, DateTimeKind kind);" />
    <Member Sig="public static DateTime Today { get; }" />
    <Member Sig="public static DateTime UtcNow { get; }" />
    <Member Sig="public static int Compare (DateTime t1, DateTime t2);" />
    <Member Sig="public static int DaysInMonth (int year, int month);" />
    <Member Sig="public static readonly DateTime MaxValue;" />
    <Member Sig="public static readonly DateTime MinValue;" />
    <Member Sig="public static TimeSpan op_Subtraction (DateTime d1, DateTime d2);" />
    <Member Sig="public string ToLongDateString ();" />
    <Member Sig="public string ToLongTimeString ();" />
    <Member Sig="public string ToShortDateString ();" />
    <Member Sig="public string ToShortTimeString ();" />
    <Member Sig="public string ToString (IFormatProvider provider);" />
    <Member Sig="public string ToString (string format);" />
    <Member Sig="public string ToString (string format, IFormatProvider provider);" />
    <Member Sig="public string[] GetDateTimeFormats ();" />
    <Member Sig="public string[] GetDateTimeFormats (char format);" />
    <Member Sig="public string[] GetDateTimeFormats (char format, IFormatProvider provider);" />
    <Member Sig="public string[] GetDateTimeFormats (IFormatProvider provider);" />
    <Member Sig="public TimeSpan Subtract (DateTime value);" />
    <Member Sig="public TimeSpan TimeOfDay { get; }" />
    <Member Sig="public TypeCode GetTypeCode ();" />
    <Member Sig="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
    <Member Sig="short IConvertible.ToInt16 (IFormatProvider provider);" />
    <Member Sig="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
    <Member Sig="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
    <Member Sig="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
    <Member Sig="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.DateTimeKind">
    <Member Sig="Local" />
    <Member Sig="Unspecified" />
    <Member Sig="Utc" />
  </Type>
  <Type Name="System.DateTimeOffset">
    <Member Sig="int IComparable.CompareTo (object obj);" />
    <Member Sig="public bool Equals (DateTimeOffset other);" />
    <Member Sig="public bool EqualsExact (DateTimeOffset other);" />
    <Member Sig="public DateTime Date { get; }" />
    <Member Sig="public DateTime DateTime { get; }" />
    <Member Sig="public DateTime LocalDateTime { get; }" />
    <Member Sig="public DateTime UtcDateTime { get; }" />
    <Member Sig="public DateTimeOffset (DateTime dateTime);" />
    <Member Sig="public DateTimeOffset (DateTime dateTime, TimeSpan offset);" />
    <Member Sig="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, System.Globalization.Calendar calendar, TimeSpan offset);" />
    <Member Sig="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, int millisecond, TimeSpan offset);" />
    <Member Sig="public DateTimeOffset (int year, int month, int day, int hour, int minute, int second, TimeSpan offset);" />
    <Member Sig="public DateTimeOffset (long ticks, TimeSpan offset);" />
    <Member Sig="public DateTimeOffset Add (TimeSpan timeSpan);" />
    <Member Sig="public DateTimeOffset AddDays (double days);" />
    <Member Sig="public DateTimeOffset AddHours (double hours);" />
    <Member Sig="public DateTimeOffset AddMilliseconds (double milliseconds);" />
    <Member Sig="public DateTimeOffset AddMinutes (double minutes);" />
    <Member Sig="public DateTimeOffset AddMonths (int months);" />
    <Member Sig="public DateTimeOffset AddSeconds (double seconds);" />
    <Member Sig="public DateTimeOffset AddTicks (long ticks);" />
    <Member Sig="public DateTimeOffset AddYears (int years);" />
    <Member Sig="public DateTimeOffset Subtract (TimeSpan value);" />
    <Member Sig="public DateTimeOffset ToLocalTime ();" />
    <Member Sig="public DateTimeOffset ToOffset (TimeSpan offset);" />
    <Member Sig="public DateTimeOffset ToUniversalTime ();" />
    <Member Sig="public DayOfWeek DayOfWeek { get; }" />
    <Member Sig="public int CompareTo (DateTimeOffset other);" />
    <Member Sig="public int Day { get; }" />
    <Member Sig="public int DayOfYear { get; }" />
    <Member Sig="public int Hour { get; }" />
    <Member Sig="public int Millisecond { get; }" />
    <Member Sig="public int Minute { get; }" />
    <Member Sig="public int Month { get; }" />
    <Member Sig="public int Second { get; }" />
    <Member Sig="public int Year { get; }" />
    <Member Sig="public long Ticks { get; }" />
    <Member Sig="public long ToFileTime ();" />
    <Member Sig="public long UtcTicks { get; }" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool Equals (DateTimeOffset first, DateTimeOffset second);" />
    <Member Sig="public static bool op_Equality (DateTimeOffset left, DateTimeOffset right);" />
    <Member Sig="public static bool op_GreaterThan (DateTimeOffset left, DateTimeOffset right);" />
    <Member Sig="public static bool op_GreaterThanOrEqual (DateTimeOffset left, DateTimeOffset right);" />
    <Member Sig="public static bool op_Inequality (DateTimeOffset left, DateTimeOffset right);" />
    <Member Sig="public static bool op_LessThan (DateTimeOffset left, DateTimeOffset right);" />
    <Member Sig="public static bool op_LessThanOrEqual (DateTimeOffset left, DateTimeOffset right);" />
    <Member Sig="public static bool TryParse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
    <Member Sig="public static bool TryParse (string input, out DateTimeOffset result);" />
    <Member Sig="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
    <Member Sig="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles, out DateTimeOffset result);" />
    <Member Sig="public static DateTimeOffset FromFileTime (long fileTime);" />
    <Member Sig="public static DateTimeOffset Now { get; }" />
    <Member Sig="public static DateTimeOffset op_Addition (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" />
    <Member Sig="public static DateTimeOffset op_Implicit (DateTime dateTime);" />
    <Member Sig="public static DateTimeOffset op_Subtraction (DateTimeOffset dateTimeTz, TimeSpan timeSpan);" />
    <Member Sig="public static DateTimeOffset Parse (string input);" />
    <Member Sig="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider);" />
    <Member Sig="public static DateTimeOffset Parse (string input, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
    <Member Sig="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider);" />
    <Member Sig="public static DateTimeOffset ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
    <Member Sig="public static DateTimeOffset ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.DateTimeStyles styles);" />
    <Member Sig="public static DateTimeOffset UtcNow { get; }" />
    <Member Sig="public static int Compare (DateTimeOffset first, DateTimeOffset second);" />
    <Member Sig="public static readonly DateTimeOffset MaxValue;" />
    <Member Sig="public static readonly DateTimeOffset MinValue;" />
    <Member Sig="public static TimeSpan op_Subtraction (DateTimeOffset left, DateTimeOffset right);" />
    <Member Sig="public string ToString (IFormatProvider formatProvider);" />
    <Member Sig="public string ToString (string format);" />
    <Member Sig="public string ToString (string format, IFormatProvider formatProvider);" />
    <Member Sig="public TimeSpan Offset { get; }" />
    <Member Sig="public TimeSpan Subtract (DateTimeOffset value);" />
    <Member Sig="public TimeSpan TimeOfDay { get; }" />
    <Member Sig="void IDeserializationCallback.OnDeserialization (object sender);" />
    <Member Sig="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.DayOfWeek">
    <Member Sig="Friday" />
    <Member Sig="Monday" />
    <Member Sig="Saturday" />
    <Member Sig="Sunday" />
    <Member Sig="Thursday" />
    <Member Sig="Tuesday" />
    <Member Sig="Wednesday" />
  </Type>
  <Type Name="System.DBNull">
    <Member Sig="bool IConvertible.ToBoolean (IFormatProvider provider);" />
    <Member Sig="byte IConvertible.ToByte (IFormatProvider provider);" />
    <Member Sig="char IConvertible.ToChar (IFormatProvider provider);" />
    <Member Sig="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
    <Member Sig="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
    <Member Sig="double IConvertible.ToDouble (IFormatProvider provider);" />
    <Member Sig="float IConvertible.ToSingle (IFormatProvider provider);" />
    <Member Sig="int IConvertible.ToInt32 (IFormatProvider provider);" />
    <Member Sig="long IConvertible.ToInt64 (IFormatProvider provider);" />
    <Member Sig="object IConvertible.ToType (Type type, IFormatProvider provider);" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static readonly DBNull Value;" />
    <Member Sig="public string ToString (IFormatProvider provider);" />
    <Member Sig="public TypeCode GetTypeCode ();" />
    <Member Sig="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
    <Member Sig="short IConvertible.ToInt16 (IFormatProvider provider);" />
    <Member Sig="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
    <Member Sig="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
    <Member Sig="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
  </Type>
  <Type Name="System.Decimal">
    <Member Sig="bool IConvertible.ToBoolean (IFormatProvider provider);" />
    <Member Sig="byte IConvertible.ToByte (IFormatProvider provider);" />
    <Member Sig="char IConvertible.ToChar (IFormatProvider provider);" />
    <Member Sig="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
    <Member Sig="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
    <Member Sig="double IConvertible.ToDouble (IFormatProvider provider);" />
    <Member Sig="float IConvertible.ToSingle (IFormatProvider provider);" />
    <Member Sig="int IConvertible.ToInt32 (IFormatProvider provider);" />
    <Member Sig="long IConvertible.ToInt64 (IFormatProvider provider);" />
    <Member Sig="object IConvertible.ToType (Type type, IFormatProvider provider);" />
    <Member Sig="public bool Equals (decimal value);" />
    <Member Sig="public Decimal (double value);" />
    <Member Sig="public Decimal (float value);" />
    <Member Sig="public Decimal (int lo, int mid, int hi, bool isNegative, byte scale);" />
    <Member Sig="public Decimal (int value);" />
    <Member Sig="public Decimal (int[] bits);" />
    <Member Sig="public Decimal (long value);" />
    <Member Sig="public Decimal (uint value);" />
    <Member Sig="public Decimal (ulong value);" />
    <Member Sig="public int CompareTo (decimal value);" />
    <Member Sig="public int CompareTo (object value);" />
    <Member Sig="public override bool Equals (object value);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool Equals (decimal d1, decimal d2);" />
    <Member Sig="public static bool op_Equality (decimal d1, decimal d2);" />
    <Member Sig="public static bool op_GreaterThan (decimal d1, decimal d2);" />
    <Member Sig="public static bool op_GreaterThanOrEqual (decimal d1, decimal d2);" />
    <Member Sig="public static bool op_Inequality (decimal d1, decimal d2);" />
    <Member Sig="public static bool op_LessThan (decimal d1, decimal d2);" />
    <Member Sig="public static bool op_LessThanOrEqual (decimal d1, decimal d2);" />
    <Member Sig="public static bool TryParse (string s, out decimal result);" />
    <Member Sig="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out decimal result);" />
    <Member Sig="public static byte op_Explicit (decimal value);" />
    <Member Sig="public static byte ToByte (decimal value);" />
    <Member Sig="public static char op_Explicit (decimal value);" />
    <Member Sig="public static decimal Add (decimal d1, decimal d2);" />
    <Member Sig="public static decimal Ceiling (decimal d);" />
    <Member Sig="public static decimal Divide (decimal d1, decimal d2);" />
    <Member Sig="public static decimal Floor (decimal d);" />
    <Member Sig="public static decimal FromOACurrency (long cy);" />
    <Member Sig="public static decimal Multiply (decimal d1, decimal d2);" />
    <Member Sig="public static decimal Negate (decimal d);" />
    <Member Sig="public static decimal op_Addition (decimal d1, decimal d2);" />
    <Member Sig="public static decimal op_Decrement (decimal d);" />
    <Member Sig="public static decimal op_Division (decimal d1, decimal d2);" />
    <Member Sig="public static decimal op_Explicit (double value);" />
    <Member Sig="public static decimal op_Explicit (float value);" />
    <Member Sig="public static decimal op_Implicit (byte value);" />
    <Member Sig="public static decimal op_Implicit (char value);" />
    <Member Sig="public static decimal op_Implicit (int value);" />
    <Member Sig="public static decimal op_Implicit (long value);" />
    <Member Sig="public static decimal op_Implicit (sbyte value);" />
    <Member Sig="public static decimal op_Implicit (short value);" />
    <Member Sig="public static decimal op_Implicit (uint value);" />
    <Member Sig="public static decimal op_Implicit (ulong value);" />
    <Member Sig="public static decimal op_Implicit (ushort value);" />
    <Member Sig="public static decimal op_Increment (decimal d);" />
    <Member Sig="public static decimal op_Modulus (decimal d1, decimal d2);" />
    <Member Sig="public static decimal op_Multiply (decimal d1, decimal d2);" />
    <Member Sig="public static decimal op_Subtraction (decimal d1, decimal d2);" />
    <Member Sig="public static decimal op_UnaryNegation (decimal d);" />
    <Member Sig="public static decimal op_UnaryPlus (decimal d);" />
    <Member Sig="public static decimal Parse (string s);" />
    <Member Sig="public static decimal Parse (string s, IFormatProvider provider);" />
    <Member Sig="public static decimal Parse (string s, System.Globalization.NumberStyles style);" />
    <Member Sig="public static decimal Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
    <Member Sig="public static decimal Remainder (decimal d1, decimal d2);" />
    <Member Sig="public static decimal Round (decimal d);" />
    <Member Sig="public static decimal Round (decimal d, int decimals);" />
    <Member Sig="public static decimal Round (decimal d, int decimals, MidpointRounding mode);" />
    <Member Sig="public static decimal Round (decimal d, MidpointRounding mode);" />
    <Member Sig="public static decimal Subtract (decimal d1, decimal d2);" />
    <Member Sig="public static decimal Truncate (decimal d);" />
    <Member Sig="public static double op_Explicit (decimal value);" />
    <Member Sig="public static double ToDouble (decimal d);" />
    <Member Sig="public static float op_Explicit (decimal value);" />
    <Member Sig="public static float ToSingle (decimal d);" />
    <Member Sig="public static int Compare (decimal d1, decimal d2);" />
    <Member Sig="public static int op_Explicit (decimal value);" />
    <Member Sig="public static int ToInt32 (decimal d);" />
    <Member Sig="public static int[] GetBits (decimal d);" />
    <Member Sig="public static long op_Explicit (decimal value);" />
    <Member Sig="public static long ToInt64 (decimal d);" />
    <Member Sig="public static long ToOACurrency (decimal value);" />
    <Member Sig="public static readonly decimal MaxValue;" />
    <Member Sig="public static readonly decimal MinusOne;" />
    <Member Sig="public static readonly decimal MinValue;" />
    <Member Sig="public static readonly decimal One;" />
    <Member Sig="public static readonly decimal Zero;" />
    <Member Sig="public static sbyte op_Explicit (decimal value);" />
    <Member Sig="public static sbyte ToSByte (decimal value);" />
    <Member Sig="public static short op_Explicit (decimal value);" />
    <Member Sig="public static short ToInt16 (decimal value);" />
    <Member Sig="public static uint op_Explicit (decimal value);" />
    <Member Sig="public static uint ToUInt32 (decimal d);" />
    <Member Sig="public static ulong op_Explicit (decimal value);" />
    <Member Sig="public static ulong ToUInt64 (decimal d);" />
    <Member Sig="public static ushort op_Explicit (decimal value);" />
    <Member Sig="public static ushort ToUInt16 (decimal value);" />
    <Member Sig="public string ToString (IFormatProvider provider);" />
    <Member Sig="public string ToString (string format);" />
    <Member Sig="public string ToString (string format, IFormatProvider provider);" />
    <Member Sig="public TypeCode GetTypeCode ();" />
    <Member Sig="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
    <Member Sig="short IConvertible.ToInt16 (IFormatProvider provider);" />
    <Member Sig="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
    <Member Sig="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
    <Member Sig="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
  </Type>
  <Type Name="System.Delegate">
    <Member Sig="protected Delegate (object target, string method);" />
    <Member Sig="protected Delegate (Type target, string method);" />
    <Member Sig="protected virtual Delegate CombineImpl (Delegate d);" />
    <Member Sig="protected virtual Delegate RemoveImpl (Delegate d);" />
    <Member Sig="protected virtual object DynamicInvokeImpl (object[] args);" />
    <Member Sig="protected virtual System.Reflection.MethodInfo GetMethodImpl ();" />
    <Member Sig="public object DynamicInvoke (object[] args);" />
    <Member Sig="public object Target { get; }" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static bool op_Equality (Delegate d1, Delegate d2);" />
    <Member Sig="public static bool op_Inequality (Delegate d1, Delegate d2);" />
    <Member Sig="public static Delegate Combine (Delegate a, Delegate b);" />
    <Member Sig="public static Delegate Combine (Delegate[] delegates);" />
    <Member Sig="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method);" />
    <Member Sig="public static Delegate CreateDelegate (Type type, object firstArgument, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
    <Member Sig="public static Delegate CreateDelegate (Type type, object target, string method);" />
    <Member Sig="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase);" />
    <Member Sig="public static Delegate CreateDelegate (Type type, object target, string method, bool ignoreCase, bool throwOnBindFailure);" />
    <Member Sig="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method);" />
    <Member Sig="public static Delegate CreateDelegate (Type type, System.Reflection.MethodInfo method, bool throwOnBindFailure);" />
    <Member Sig="public static Delegate CreateDelegate (Type type, Type target, string method);" />
    <Member Sig="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase);" />
    <Member Sig="public static Delegate CreateDelegate (Type type, Type target, string method, bool ignoreCase, bool throwOnBindFailure);" />
    <Member Sig="public static Delegate Remove (Delegate source, Delegate value);" />
    <Member Sig="public static Delegate RemoveAll (Delegate source, Delegate value);" />
    <Member Sig="public System.Reflection.MethodInfo Method { get; }" />
    <Member Sig="public virtual Delegate[] GetInvocationList ();" />
    <Member Sig="public virtual object Clone ();" />
    <Member Sig="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.Deployment.Internal.InternalActivationContextHelper">
    <Member Sig="public static bool IsFirstRun (ActivationContext appInfo);" />
    <Member Sig="public static byte[] GetApplicationManifestBytes (ActivationContext appInfo);" />
    <Member Sig="public static byte[] GetDeploymentManifestBytes (ActivationContext appInfo);" />
    <Member Sig="public static object GetActivationContextData (ActivationContext appInfo);" />
    <Member Sig="public static object GetApplicationComponentManifest (ActivationContext appInfo);" />
    <Member Sig="public static object GetDeploymentComponentManifest (ActivationContext appInfo);" />
    <Member Sig="public static void PrepareForExecution (ActivationContext appInfo);" />
  </Type>
  <Type Name="System.Deployment.Internal.InternalApplicationIdentityHelper">
    <Member Sig="public static object GetInternalAppId (ApplicationIdentity id);" />
  </Type>
  <Type Name="System.Diagnostics.CodeAnalysis.SuppressMessageAttribute">
    <Member Sig="public string Category { get; }" />
    <Member Sig="public string CheckId { get; }" />
    <Member Sig="public string Justification { get; set; }" />
    <Member Sig="public string MessageId { get; set; }" />
    <Member Sig="public string Scope { get; set; }" />
    <Member Sig="public string Target { get; set; }" />
    <Member Sig="public SuppressMessageAttribute (string category, string checkId);" />
  </Type>
  <Type Name="System.Diagnostics.ConditionalAttribute">
    <Member Sig="public ConditionalAttribute (string conditionString);" />
    <Member Sig="public string ConditionString { get; }" />
  </Type>
  <Type Name="System.Diagnostics.DebuggableAttribute">
    <Member Sig="public bool IsJITOptimizerDisabled { get; }" />
    <Member Sig="public bool IsJITTrackingEnabled { get; }" />
    <Member Sig="public DebuggableAttribute (bool isJITTrackingEnabled, bool isJITOptimizerDisabled);" />
    <Member Sig="public DebuggableAttribute (System.Diagnostics.DebuggableAttribute.DebuggingModes modes);" />
    <Member Sig="public System.Diagnostics.DebuggableAttribute.DebuggingModes DebuggingFlags { get; }" />
  </Type>
  <Type Name="System.Diagnostics.DebuggableAttribute/DebuggingModes">
    <Member Sig="Default" />
    <Member Sig="DisableOptimizations" />
    <Member Sig="EnableEditAndContinue" />
    <Member Sig="IgnoreSymbolStoreSequencePoints" />
    <Member Sig="None" />
  </Type>
  <Type Name="System.Diagnostics.Debugger">
    <Member Sig="public Debugger ();" />
    <Member Sig="public static bool IsAttached { get; }" />
    <Member Sig="public static bool IsLogging ();" />
    <Member Sig="public static bool Launch ();" />
    <Member Sig="public static readonly string DefaultCategory;" />
    <Member Sig="public static void Break ();" />
    <Member Sig="public static void Log (int level, string category, string message);" />
  </Type>
  <Type Name="System.Diagnostics.DebuggerBrowsableAttribute">
    <Member Sig="public DebuggerBrowsableAttribute (System.Diagnostics.DebuggerBrowsableState state);" />
    <Member Sig="public System.Diagnostics.DebuggerBrowsableState State { get; }" />
  </Type>
  <Type Name="System.Diagnostics.DebuggerBrowsableState">
    <Member Sig="Collapsed" />
    <Member Sig="Never" />
    <Member Sig="RootHidden" />
  </Type>
  <Type Name="System.Diagnostics.DebuggerDisplayAttribute">
    <Member Sig="public DebuggerDisplayAttribute (string value);" />
    <Member Sig="public string Name { get; set; }" />
    <Member Sig="public string TargetTypeName { get; set; }" />
    <Member Sig="public string Type { get; set; }" />
    <Member Sig="public string Value { get; }" />
    <Member Sig="public Type Target { get; set; }" />
  </Type>
  <Type Name="System.Diagnostics.DebuggerHiddenAttribute">
    <Member Sig="public DebuggerHiddenAttribute ();" />
  </Type>
  <Type Name="System.Diagnostics.DebuggerNonUserCodeAttribute">
    <Member Sig="public DebuggerNonUserCodeAttribute ();" />
  </Type>
  <Type Name="System.Diagnostics.DebuggerStepperBoundaryAttribute">
    <Member Sig="public DebuggerStepperBoundaryAttribute ();" />
  </Type>
  <Type Name="System.Diagnostics.DebuggerStepThroughAttribute">
    <Member Sig="public DebuggerStepThroughAttribute ();" />
  </Type>
  <Type Name="System.Diagnostics.DebuggerTypeProxyAttribute">
    <Member Sig="public DebuggerTypeProxyAttribute (string typeName);" />
    <Member Sig="public DebuggerTypeProxyAttribute (Type type);" />
    <Member Sig="public string ProxyTypeName { get; }" />
    <Member Sig="public string TargetTypeName { get; set; }" />
    <Member Sig="public Type Target { get; set; }" />
  </Type>
  <Type Name="System.Diagnostics.DebuggerVisualizerAttribute">
    <Member Sig="public DebuggerVisualizerAttribute (string visualizerTypeName);" />
    <Member Sig="public DebuggerVisualizerAttribute (string visualizerTypeName, string visualizerObjectSourceTypeName);" />
    <Member Sig="public DebuggerVisualizerAttribute (string visualizerTypeName, Type visualizerObjectSource);" />
    <Member Sig="public DebuggerVisualizerAttribute (Type visualizer);" />
    <Member Sig="public DebuggerVisualizerAttribute (Type visualizer, string visualizerObjectSourceTypeName);" />
    <Member Sig="public DebuggerVisualizerAttribute (Type visualizer, Type visualizerObjectSource);" />
    <Member Sig="public string Description { get; set; }" />
    <Member Sig="public string TargetTypeName { get; set; }" />
    <Member Sig="public string VisualizerObjectSourceTypeName { get; }" />
    <Member Sig="public string VisualizerTypeName { get; }" />
    <Member Sig="public Type Target { get; set; }" />
  </Type>
  <Type Name="System.Diagnostics.StackFrame">
    <Member Sig="public const int OFFSET_UNKNOWN = -1;" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public StackFrame ();" />
    <Member Sig="public StackFrame (bool fNeedFileInfo);" />
    <Member Sig="public StackFrame (int skipFrames);" />
    <Member Sig="public StackFrame (int skipFrames, bool fNeedFileInfo);" />
    <Member Sig="public StackFrame (string fileName, int lineNumber);" />
    <Member Sig="public StackFrame (string fileName, int lineNumber, int colNumber);" />
    <Member Sig="public virtual int GetFileColumnNumber ();" />
    <Member Sig="public virtual int GetFileLineNumber ();" />
    <Member Sig="public virtual int GetILOffset ();" />
    <Member Sig="public virtual int GetNativeOffset ();" />
    <Member Sig="public virtual string GetFileName ();" />
    <Member Sig="public virtual System.Reflection.MethodBase GetMethod ();" />
  </Type>
  <Type Name="System.Diagnostics.StackTrace">
    <Member Sig="public const int METHODS_TO_SKIP = 0;" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public StackTrace ();" />
    <Member Sig="public StackTrace (bool fNeedFileInfo);" />
    <Member Sig="public StackTrace (Exception e);" />
    <Member Sig="public StackTrace (Exception e, bool fNeedFileInfo);" />
    <Member Sig="public StackTrace (Exception e, int skipFrames);" />
    <Member Sig="public StackTrace (Exception e, int skipFrames, bool fNeedFileInfo);" />
    <Member Sig="public StackTrace (int skipFrames);" />
    <Member Sig="public StackTrace (int skipFrames, bool fNeedFileInfo);" />
    <Member Sig="public StackTrace (System.Diagnostics.StackFrame frame);" />
    <Member Sig="public StackTrace (System.Threading.Thread targetThread, bool needFileInfo);" />
    <Member Sig="public virtual int FrameCount { get; }" />
    <Member Sig="public virtual System.Diagnostics.StackFrame GetFrame (int index);" />
    <Member Sig="public virtual System.Diagnostics.StackFrame[] GetFrames ();" />
  </Type>
  <Type Name="System.Diagnostics.SymbolStore.ISymbolBinder">
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolReader GetReader (int importer, string filename, string searchPath);" />
  </Type>
  <Type Name="System.Diagnostics.SymbolStore.ISymbolBinder1">
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolReader GetReader (IntPtr importer, string filename, string searchPath);" />
  </Type>
  <Type Name="System.Diagnostics.SymbolStore.ISymbolDocument">
    <Member Sig="public bool HasEmbeddedSource { get; }" />
    <Member Sig="public byte[] GetCheckSum ();" />
    <Member Sig="public byte[] GetSourceRange (int startLine, int startColumn, int endLine, int endColumn);" />
    <Member Sig="public Guid CheckSumAlgorithmId { get; }" />
    <Member Sig="public Guid DocumentType { get; }" />
    <Member Sig="public Guid Language { get; }" />
    <Member Sig="public Guid LanguageVendor { get; }" />
    <Member Sig="public int FindClosestLine (int line);" />
    <Member Sig="public int SourceLength { get; }" />
    <Member Sig="public string URL { get; }" />
  </Type>
  <Type Name="System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
    <Member Sig="public void SetCheckSum (Guid algorithmId, byte[] checkSum);" />
    <Member Sig="public void SetSource (byte[] source);" />
  </Type>
  <Type Name="System.Diagnostics.SymbolStore.ISymbolMethod">
    <Member Sig="public bool GetSourceStartEnd (System.Diagnostics.SymbolStore.ISymbolDocument[] docs, int[] lines, int[] columns);" />
    <Member Sig="public int GetOffset (System.Diagnostics.SymbolStore.ISymbolDocument document, int line, int column);" />
    <Member Sig="public int SequencePointCount { get; }" />
    <Member Sig="public int[] GetRanges (System.Diagnostics.SymbolStore.ISymbolDocument document, int line, int column);" />
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolNamespace GetNamespace ();" />
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolScope GetScope (int offset);" />
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolScope RootScope { get; }" />
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolVariable[] GetParameters ();" />
    <Member Sig="public System.Diagnostics.SymbolStore.SymbolToken Token { get; }" />
    <Member Sig="public void GetSequencePoints (int[] offsets, System.Diagnostics.SymbolStore.ISymbolDocument[] documents, int[] lines, int[] columns, int[] endLines, int[] endColumns);" />
  </Type>
  <Type Name="System.Diagnostics.SymbolStore.ISymbolNamespace">
    <Member Sig="public string Name { get; }" />
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolNamespace[] GetNamespaces ();" />
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolVariable[] GetVariables ();" />
  </Type>
  <Type Name="System.Diagnostics.SymbolStore.ISymbolReader">
    <Member Sig="public byte[] GetSymAttribute (System.Diagnostics.SymbolStore.SymbolToken parent, string name);" />
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolDocument GetDocument (string url, Guid language, Guid languageVendor, Guid documentType);" />
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolDocument[] GetDocuments ();" />
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolMethod GetMethod (System.Diagnostics.SymbolStore.SymbolToken method);" />
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolMethod GetMethod (System.Diagnostics.SymbolStore.SymbolToken method, int version);" />
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolMethod GetMethodFromDocumentPosition (System.Diagnostics.SymbolStore.ISymbolDocument document, int line, int column);" />
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolNamespace[] GetNamespaces ();" />
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolVariable[] GetGlobalVariables ();" />
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolVariable[] GetVariables (System.Diagnostics.SymbolStore.SymbolToken parent);" />
    <Member Sig="public System.Diagnostics.SymbolStore.SymbolToken UserEntryPoint { get; }" />
  </Type>
  <Type Name="System.Diagnostics.SymbolStore.ISymbolScope">
    <Member Sig="public int EndOffset { get; }" />
    <Member Sig="public int StartOffset { get; }" />
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolMethod Method { get; }" />
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolNamespace[] GetNamespaces ();" />
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolScope Parent { get; }" />
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolScope[] GetChildren ();" />
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolVariable[] GetLocals ();" />
  </Type>
  <Type Name="System.Diagnostics.SymbolStore.ISymbolVariable">
    <Member Sig="public byte[] GetSignature ();" />
    <Member Sig="public int AddressField1 { get; }" />
    <Member Sig="public int AddressField2 { get; }" />
    <Member Sig="public int AddressField3 { get; }" />
    <Member Sig="public int EndOffset { get; }" />
    <Member Sig="public int StartOffset { get; }" />
    <Member Sig="public object Attributes { get; }" />
    <Member Sig="public string Name { get; }" />
    <Member Sig="public System.Diagnostics.SymbolStore.SymAddressKind AddressKind { get; }" />
  </Type>
  <Type Name="System.Diagnostics.SymbolStore.ISymbolWriter">
    <Member Sig="public int OpenScope (int startOffset);" />
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolDocumentWriter DefineDocument (string url, Guid language, Guid languageVendor, Guid documentType);" />
    <Member Sig="public void Close ();" />
    <Member Sig="public void CloseMethod ();" />
    <Member Sig="public void CloseNamespace ();" />
    <Member Sig="public void CloseScope (int endOffset);" />
    <Member Sig="public void DefineField (System.Diagnostics.SymbolStore.SymbolToken parent, string name, System.Reflection.FieldAttributes attributes, byte[] signature, System.Diagnostics.SymbolStore.SymAddressKind addrKind, int addr1, int addr2, int addr3);" />
    <Member Sig="public void DefineGlobalVariable (string name, System.Reflection.FieldAttributes attributes, byte[] signature, System.Diagnostics.SymbolStore.SymAddressKind addrKind, int addr1, int addr2, int addr3);" />
    <Member Sig="public void DefineLocalVariable (string name, System.Reflection.FieldAttributes attributes, byte[] signature, System.Diagnostics.SymbolStore.SymAddressKind addrKind, int addr1, int addr2, int addr3, int startOffset, int endOffset);" />
    <Member Sig="public void DefineParameter (string name, System.Reflection.ParameterAttributes attributes, int sequence, System.Diagnostics.SymbolStore.SymAddressKind addrKind, int addr1, int addr2, int addr3);" />
    <Member Sig="public void DefineSequencePoints (System.Diagnostics.SymbolStore.ISymbolDocumentWriter document, int[] offsets, int[] lines, int[] columns, int[] endLines, int[] endColumns);" />
    <Member Sig="public void Initialize (IntPtr emitter, string filename, bool fFullBuild);" />
    <Member Sig="public void OpenMethod (System.Diagnostics.SymbolStore.SymbolToken method);" />
    <Member Sig="public void OpenNamespace (string name);" />
    <Member Sig="public void SetMethodSourceRange (System.Diagnostics.SymbolStore.ISymbolDocumentWriter startDoc, int startLine, int startColumn, System.Diagnostics.SymbolStore.ISymbolDocumentWriter endDoc, int endLine, int endColumn);" />
    <Member Sig="public void SetScopeRange (int scopeID, int startOffset, int endOffset);" />
    <Member Sig="public void SetSymAttribute (System.Diagnostics.SymbolStore.SymbolToken parent, string name, byte[] data);" />
    <Member Sig="public void SetUnderlyingWriter (IntPtr underlyingWriter);" />
    <Member Sig="public void SetUserEntryPoint (System.Diagnostics.SymbolStore.SymbolToken entryMethod);" />
    <Member Sig="public void UsingNamespace (string fullName);" />
  </Type>
  <Type Name="System.Diagnostics.SymbolStore.SymAddressKind">
    <Member Sig="BitField" />
    <Member Sig="ILOffset" />
    <Member Sig="NativeOffset" />
    <Member Sig="NativeRegister" />
    <Member Sig="NativeRegisterRegister" />
    <Member Sig="NativeRegisterRelative" />
    <Member Sig="NativeRegisterStack" />
    <Member Sig="NativeRVA" />
    <Member Sig="NativeSectionOffset" />
    <Member Sig="NativeStackRegister" />
  </Type>
  <Type Name="System.Diagnostics.SymbolStore.SymbolToken">
    <Member Sig="public bool Equals (System.Diagnostics.SymbolStore.SymbolToken obj);" />
    <Member Sig="public int GetToken ();" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static bool op_Equality (System.Diagnostics.SymbolStore.SymbolToken a, System.Diagnostics.SymbolStore.SymbolToken b);" />
    <Member Sig="public static bool op_Inequality (System.Diagnostics.SymbolStore.SymbolToken a, System.Diagnostics.SymbolStore.SymbolToken b);" />
    <Member Sig="public SymbolToken (int val);" />
  </Type>
  <Type Name="System.Diagnostics.SymbolStore.SymDocumentType">
    <Member Sig="public static readonly Guid Text;" />
    <Member Sig="public SymDocumentType ();" />
  </Type>
  <Type Name="System.Diagnostics.SymbolStore.SymLanguageType">
    <Member Sig="public static readonly Guid Basic;" />
    <Member Sig="public static readonly Guid C;" />
    <Member Sig="public static readonly Guid Cobol;" />
    <Member Sig="public static readonly Guid CPlusPlus;" />
    <Member Sig="public static readonly Guid CSharp;" />
    <Member Sig="public static readonly Guid ILAssembly;" />
    <Member Sig="public static readonly Guid Java;" />
    <Member Sig="public static readonly Guid JScript;" />
    <Member Sig="public static readonly Guid MCPlusPlus;" />
    <Member Sig="public static readonly Guid Pascal;" />
    <Member Sig="public static readonly Guid SMC;" />
    <Member Sig="public SymLanguageType ();" />
  </Type>
  <Type Name="System.Diagnostics.SymbolStore.SymLanguageVendor">
    <Member Sig="public static readonly Guid Microsoft;" />
    <Member Sig="public SymLanguageVendor ();" />
  </Type>
  <Type Name="System.DivideByZeroException">
    <Member Sig="protected DivideByZeroException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public DivideByZeroException ();" />
    <Member Sig="public DivideByZeroException (string message);" />
    <Member Sig="public DivideByZeroException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.DllNotFoundException">
    <Member Sig="protected DllNotFoundException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public DllNotFoundException ();" />
    <Member Sig="public DllNotFoundException (string message);" />
    <Member Sig="public DllNotFoundException (string message, Exception inner);" />
  </Type>
  <Type Name="System.Double">
    <Member Sig="bool IConvertible.ToBoolean (IFormatProvider provider);" />
    <Member Sig="byte IConvertible.ToByte (IFormatProvider provider);" />
    <Member Sig="char IConvertible.ToChar (IFormatProvider provider);" />
    <Member Sig="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
    <Member Sig="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
    <Member Sig="double IConvertible.ToDouble (IFormatProvider provider);" />
    <Member Sig="float IConvertible.ToSingle (IFormatProvider provider);" />
    <Member Sig="int IConvertible.ToInt32 (IFormatProvider provider);" />
    <Member Sig="long IConvertible.ToInt64 (IFormatProvider provider);" />
    <Member Sig="object IConvertible.ToType (Type type, IFormatProvider provider);" />
    <Member Sig="public bool Equals (double obj);" />
    <Member Sig="public const double Epsilon = 4.94065645841247E-324;" />
    <Member Sig="public const double MaxValue = 1.79769313486232E+308;" />
    <Member Sig="public const double MinValue = -1.79769313486232E+308;" />
    <Member Sig="public const double NaN = NaN;" />
    <Member Sig="public const double NegativeInfinity = -Infinity;" />
    <Member Sig="public const double PositiveInfinity = Infinity;" />
    <Member Sig="public int CompareTo (double value);" />
    <Member Sig="public int CompareTo (object value);" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool IsInfinity (double d);" />
    <Member Sig="public static bool IsNaN (double d);" />
    <Member Sig="public static bool IsNegativeInfinity (double d);" />
    <Member Sig="public static bool IsPositiveInfinity (double d);" />
    <Member Sig="public static bool TryParse (string s, out double result);" />
    <Member Sig="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out double result);" />
    <Member Sig="public static double Parse (string s);" />
    <Member Sig="public static double Parse (string s, IFormatProvider provider);" />
    <Member Sig="public static double Parse (string s, System.Globalization.NumberStyles style);" />
    <Member Sig="public static double Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
    <Member Sig="public string ToString (IFormatProvider provider);" />
    <Member Sig="public string ToString (string format);" />
    <Member Sig="public string ToString (string format, IFormatProvider provider);" />
    <Member Sig="public TypeCode GetTypeCode ();" />
    <Member Sig="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
    <Member Sig="short IConvertible.ToInt16 (IFormatProvider provider);" />
    <Member Sig="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
    <Member Sig="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
    <Member Sig="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
  </Type>
  <Type Name="System.DuplicateWaitObjectException">
    <Member Sig="protected DuplicateWaitObjectException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public DuplicateWaitObjectException ();" />
    <Member Sig="public DuplicateWaitObjectException (string message, Exception innerException);" />
    <Member Sig="public DuplicateWaitObjectException (string parameterName);" />
    <Member Sig="public DuplicateWaitObjectException (string parameterName, string message);" />
  </Type>
  <Type Name="System.EntryPointNotFoundException">
    <Member Sig="protected EntryPointNotFoundException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public EntryPointNotFoundException ();" />
    <Member Sig="public EntryPointNotFoundException (string message);" />
    <Member Sig="public EntryPointNotFoundException (string message, Exception inner);" />
  </Type>
  <Type Name="System.Enum">
    <Member Sig="bool IConvertible.ToBoolean (IFormatProvider provider);" />
    <Member Sig="byte IConvertible.ToByte (IFormatProvider provider);" />
    <Member Sig="char IConvertible.ToChar (IFormatProvider provider);" />
    <Member Sig="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
    <Member Sig="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
    <Member Sig="double IConvertible.ToDouble (IFormatProvider provider);" />
    <Member Sig="float IConvertible.ToSingle (IFormatProvider provider);" />
    <Member Sig="int IConvertible.ToInt32 (IFormatProvider provider);" />
    <Member Sig="long IConvertible.ToInt64 (IFormatProvider provider);" />
    <Member Sig="object IConvertible.ToType (Type type, IFormatProvider provider);" />
    <Member Sig="protected Enum ();" />
    <Member Sig="public int CompareTo (object target);" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static Array GetValues (Type enumType);" />
    <Member Sig="public static bool IsDefined (Type enumType, object value);" />
    <Member Sig="public static object Parse (Type enumType, string value);" />
    <Member Sig="public static object Parse (Type enumType, string value, bool ignoreCase);" />
    <Member Sig="public static object ToObject (Type enumType, byte value);" />
    <Member Sig="public static object ToObject (Type enumType, int value);" />
    <Member Sig="public static object ToObject (Type enumType, long value);" />
    <Member Sig="public static object ToObject (Type enumType, object value);" />
    <Member Sig="public static object ToObject (Type enumType, sbyte value);" />
    <Member Sig="public static object ToObject (Type enumType, short value);" />
    <Member Sig="public static object ToObject (Type enumType, uint value);" />
    <Member Sig="public static object ToObject (Type enumType, ulong value);" />
    <Member Sig="public static object ToObject (Type enumType, ushort value);" />
    <Member Sig="public static string Format (Type enumType, object value, string format);" />
    <Member Sig="public static string GetName (Type enumType, object value);" />
    <Member Sig="public static string[] GetNames (Type enumType);" />
    <Member Sig="public static Type GetUnderlyingType (Type enumType);" />
    <Member Sig="public string ToString (IFormatProvider provider);" />
    <Member Sig="public string ToString (string format);" />
    <Member Sig="public string ToString (string format, IFormatProvider provider);" />
    <Member Sig="public TypeCode GetTypeCode ();" />
    <Member Sig="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
    <Member Sig="short IConvertible.ToInt16 (IFormatProvider provider);" />
    <Member Sig="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
    <Member Sig="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
    <Member Sig="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
  </Type>
  <Type Name="System.Environment">
    <Member Sig="public static bool HasShutdownStarted { get; }" />
    <Member Sig="public static bool UserInteractive { get; }" />
    <Member Sig="public static int ExitCode { get; set; }" />
    <Member Sig="public static int ProcessorCount { get; }" />
    <Member Sig="public static int TickCount { get; }" />
    <Member Sig="public static long WorkingSet { get; }" />
    <Member Sig="public static OperatingSystem OSVersion { get; }" />
    <Member Sig="public static string CommandLine { get; }" />
    <Member Sig="public static string CurrentDirectory { get; set; }" />
    <Member Sig="public static string ExpandEnvironmentVariables (string name);" />
    <Member Sig="public static string GetEnvironmentVariable (string variable);" />
    <Member Sig="public static string GetEnvironmentVariable (string variable, EnvironmentVariableTarget target);" />
    <Member Sig="public static string GetFolderPath (Environment.SpecialFolder folder);" />
    <Member Sig="public static string MachineName { get; }" />
    <Member Sig="public static string NewLine { get; }" />
    <Member Sig="public static string StackTrace { get; }" />
    <Member Sig="public static string SystemDirectory { get; }" />
    <Member Sig="public static string UserDomainName { get; }" />
    <Member Sig="public static string UserName { get; }" />
    <Member Sig="public static string[] GetCommandLineArgs ();" />
    <Member Sig="public static string[] GetLogicalDrives ();" />
    <Member Sig="public static System.Collections.IDictionary GetEnvironmentVariables ();" />
    <Member Sig="public static System.Collections.IDictionary GetEnvironmentVariables (EnvironmentVariableTarget target);" />
    <Member Sig="public static Version Version { get; }" />
    <Member Sig="public static void Exit (int exitCode);" />
    <Member Sig="public static void FailFast (string message);" />
    <Member Sig="public static void SetEnvironmentVariable (string variable, string value);" />
    <Member Sig="public static void SetEnvironmentVariable (string variable, string value, EnvironmentVariableTarget target);" />
  </Type>
  <Type Name="System.Environment/SpecialFolder">
    <Member Sig="ApplicationData" />
    <Member Sig="CommonApplicationData" />
    <Member Sig="CommonProgramFiles" />
    <Member Sig="Cookies" />
    <Member Sig="Desktop" />
    <Member Sig="DesktopDirectory" />
    <Member Sig="Favorites" />
    <Member Sig="History" />
    <Member Sig="InternetCache" />
    <Member Sig="LocalApplicationData" />
    <Member Sig="MyComputer" />
    <Member Sig="MyDocuments" />
    <Member Sig="MyMusic" />
    <Member Sig="MyPictures" />
    <Member Sig="Personal" />
    <Member Sig="ProgramFiles" />
    <Member Sig="Programs" />
    <Member Sig="Recent" />
    <Member Sig="SendTo" />
    <Member Sig="StartMenu" />
    <Member Sig="Startup" />
    <Member Sig="System" />
    <Member Sig="Templates" />
  </Type>
  <Type Name="System.EnvironmentVariableTarget">
    <Member Sig="Machine" />
    <Member Sig="Process" />
    <Member Sig="User" />
  </Type>
  <Type Name="System.EventArgs">
    <Member Sig="public EventArgs ();" />
    <Member Sig="public static readonly EventArgs Empty;" />
  </Type>
  <Type Name="System.EventHandler" />
  <Type Name="System.EventHandler`1" />
  <Type Name="System.Exception">
    <Member Sig="protected Exception (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="protected int HResult { get; set; }" />
    <Member Sig="public Exception ();" />
    <Member Sig="public Exception (string message);" />
    <Member Sig="public Exception (string message, Exception innerException);" />
    <Member Sig="public Exception InnerException { get; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public System.Reflection.MethodBase TargetSite { get; }" />
    <Member Sig="public Type GetType ();" />
    <Member Sig="public virtual Exception GetBaseException ();" />
    <Member Sig="public virtual string HelpLink { get; set; }" />
    <Member Sig="public virtual string Message { get; }" />
    <Member Sig="public virtual string Source { get; set; }" />
    <Member Sig="public virtual string StackTrace { get; }" />
    <Member Sig="public virtual System.Collections.IDictionary Data { get; }" />
    <Member Sig="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.ExecutionEngineException">
    <Member Sig="public ExecutionEngineException ();" />
    <Member Sig="public ExecutionEngineException (string message);" />
    <Member Sig="public ExecutionEngineException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.FieldAccessException">
    <Member Sig="protected FieldAccessException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public FieldAccessException ();" />
    <Member Sig="public FieldAccessException (string message);" />
    <Member Sig="public FieldAccessException (string message, Exception inner);" />
  </Type>
  <Type Name="System.FlagsAttribute">
    <Member Sig="public FlagsAttribute ();" />
  </Type>
  <Type Name="System.FormatException">
    <Member Sig="protected FormatException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public FormatException ();" />
    <Member Sig="public FormatException (string message);" />
    <Member Sig="public FormatException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.GC">
    <Member Sig="public static GCNotificationStatus WaitForFullGCApproach ();" />
    <Member Sig="public static GCNotificationStatus WaitForFullGCApproach (int millisecondsTimeout);" />
    <Member Sig="public static GCNotificationStatus WaitForFullGCComplete ();" />
    <Member Sig="public static GCNotificationStatus WaitForFullGCComplete (int millisecondsTimeout);" />
    <Member Sig="public static int CollectionCount (int generation);" />
    <Member Sig="public static int GetGeneration (object obj);" />
    <Member Sig="public static int GetGeneration (WeakReference wo);" />
    <Member Sig="public static int MaxGeneration { get; }" />
    <Member Sig="public static long GetTotalMemory (bool forceFullCollection);" />
    <Member Sig="public static void AddMemoryPressure (long bytesAllocated);" />
    <Member Sig="public static void CancelFullGCNotification ();" />
    <Member Sig="public static void Collect ();" />
    <Member Sig="public static void Collect (int generation);" />
    <Member Sig="public static void Collect (int generation, GCCollectionMode mode);" />
    <Member Sig="public static void KeepAlive (object obj);" />
    <Member Sig="public static void RegisterForFullGCNotification (int maxGenerationThreshold, int largeObjectHeapThreshold);" />
    <Member Sig="public static void RemoveMemoryPressure (long bytesAllocated);" />
    <Member Sig="public static void ReRegisterForFinalize (object obj);" />
    <Member Sig="public static void SuppressFinalize (object obj);" />
    <Member Sig="public static void WaitForPendingFinalizers ();" />
  </Type>
  <Type Name="System.GCCollectionMode">
    <Member Sig="Default" />
    <Member Sig="Forced" />
    <Member Sig="Optimized" />
  </Type>
  <Type Name="System.GCNotificationStatus">
    <Member Sig="Canceled" />
    <Member Sig="Failed" />
    <Member Sig="NotApplicable" />
    <Member Sig="Succeeded" />
    <Member Sig="Timeout" />
  </Type>
  <Type Name="System.Globalization.Calendar">
    <Member Sig="protected Calendar ();" />
    <Member Sig="public abstract bool IsLeapDay (int year, int month, int day, int era);" />
    <Member Sig="public abstract bool IsLeapMonth (int year, int month, int era);" />
    <Member Sig="public abstract bool IsLeapYear (int year, int era);" />
    <Member Sig="public abstract DateTime AddMonths (DateTime time, int months);" />
    <Member Sig="public abstract DateTime AddYears (DateTime time, int years);" />
    <Member Sig="public abstract DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);" />
    <Member Sig="public abstract DayOfWeek GetDayOfWeek (DateTime time);" />
    <Member Sig="public abstract int GetDayOfMonth (DateTime time);" />
    <Member Sig="public abstract int GetDayOfYear (DateTime time);" />
    <Member Sig="public abstract int GetDaysInMonth (int year, int month, int era);" />
    <Member Sig="public abstract int GetDaysInYear (int year, int era);" />
    <Member Sig="public abstract int GetEra (DateTime time);" />
    <Member Sig="public abstract int GetMonth (DateTime time);" />
    <Member Sig="public abstract int GetMonthsInYear (int year, int era);" />
    <Member Sig="public abstract int GetYear (DateTime time);" />
    <Member Sig="public abstract int[] Eras { get; }" />
    <Member Sig="public bool IsReadOnly { get; }" />
    <Member Sig="public const int CurrentEra = 0;" />
    <Member Sig="public static System.Globalization.Calendar ReadOnly (System.Globalization.Calendar calendar);" />
    <Member Sig="public virtual bool IsLeapDay (int year, int month, int day);" />
    <Member Sig="public virtual bool IsLeapMonth (int year, int month);" />
    <Member Sig="public virtual bool IsLeapYear (int year);" />
    <Member Sig="public virtual DateTime AddDays (DateTime time, int days);" />
    <Member Sig="public virtual DateTime AddHours (DateTime time, int hours);" />
    <Member Sig="public virtual DateTime AddMilliseconds (DateTime time, double milliseconds);" />
    <Member Sig="public virtual DateTime AddMinutes (DateTime time, int minutes);" />
    <Member Sig="public virtual DateTime AddSeconds (DateTime time, int seconds);" />
    <Member Sig="public virtual DateTime AddWeeks (DateTime time, int weeks);" />
    <Member Sig="public virtual DateTime MaxSupportedDateTime { get; }" />
    <Member Sig="public virtual DateTime MinSupportedDateTime { get; }" />
    <Member Sig="public virtual DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond);" />
    <Member Sig="public virtual double GetMilliseconds (DateTime time);" />
    <Member Sig="public virtual int GetDaysInMonth (int year, int month);" />
    <Member Sig="public virtual int GetDaysInYear (int year);" />
    <Member Sig="public virtual int GetHour (DateTime time);" />
    <Member Sig="public virtual int GetLeapMonth (int year);" />
    <Member Sig="public virtual int GetLeapMonth (int year, int era);" />
    <Member Sig="public virtual int GetMinute (DateTime time);" />
    <Member Sig="public virtual int GetMonthsInYear (int year);" />
    <Member Sig="public virtual int GetSecond (DateTime time);" />
    <Member Sig="public virtual int GetWeekOfYear (DateTime time, System.Globalization.CalendarWeekRule rule, DayOfWeek firstDayOfWeek);" />
    <Member Sig="public virtual int ToFourDigitYear (int year);" />
    <Member Sig="public virtual int TwoDigitYearMax { get; set; }" />
    <Member Sig="public virtual object Clone ();" />
    <Member Sig="public virtual System.Globalization.CalendarAlgorithmType AlgorithmType { get; }" />
  </Type>
  <Type Name="System.Globalization.CalendarAlgorithmType">
    <Member Sig="LunarCalendar" />
    <Member Sig="LunisolarCalendar" />
    <Member Sig="SolarCalendar" />
    <Member Sig="Unknown" />
  </Type>
  <Type Name="System.Globalization.CalendarWeekRule">
    <Member Sig="FirstDay" />
    <Member Sig="FirstFourDayWeek" />
    <Member Sig="FirstFullWeek" />
  </Type>
  <Type Name="System.Globalization.CharUnicodeInfo">
    <Member Sig="public static double GetNumericValue (char ch);" />
    <Member Sig="public static double GetNumericValue (string s, int index);" />
    <Member Sig="public static int GetDecimalDigitValue (char ch);" />
    <Member Sig="public static int GetDecimalDigitValue (string s, int index);" />
    <Member Sig="public static int GetDigitValue (char ch);" />
    <Member Sig="public static int GetDigitValue (string s, int index);" />
    <Member Sig="public static System.Globalization.UnicodeCategory GetUnicodeCategory (char ch);" />
    <Member Sig="public static System.Globalization.UnicodeCategory GetUnicodeCategory (string s, int index);" />
  </Type>
  <Type Name="System.Globalization.ChineseLunisolarCalendar">
    <Member Sig="public ChineseLunisolarCalendar ();" />
    <Member Sig="public const int ChineseEra = 1;" />
    <Member Sig="public override DateTime MaxSupportedDateTime { get; }" />
    <Member Sig="public override DateTime MinSupportedDateTime { get; }" />
    <Member Sig="public override int GetEra (DateTime time);" />
    <Member Sig="public override int[] Eras { get; }" />
  </Type>
  <Type Name="System.Globalization.CompareInfo">
    <Member Sig="public int LCID { get; }" />
    <Member Sig="public override bool Equals (object value);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool IsSortable (char ch);" />
    <Member Sig="public static bool IsSortable (string text);" />
    <Member Sig="public static System.Globalization.CompareInfo GetCompareInfo (int culture);" />
    <Member Sig="public static System.Globalization.CompareInfo GetCompareInfo (int culture, System.Reflection.Assembly assembly);" />
    <Member Sig="public static System.Globalization.CompareInfo GetCompareInfo (string name);" />
    <Member Sig="public static System.Globalization.CompareInfo GetCompareInfo (string name, System.Reflection.Assembly assembly);" />
    <Member Sig="public virtual bool IsPrefix (string source, string prefix);" />
    <Member Sig="public virtual bool IsPrefix (string source, string prefix, System.Globalization.CompareOptions options);" />
    <Member Sig="public virtual bool IsSuffix (string source, string suffix);" />
    <Member Sig="public virtual bool IsSuffix (string source, string suffix, System.Globalization.CompareOptions options);" />
    <Member Sig="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2);" />
    <Member Sig="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2, System.Globalization.CompareOptions options);" />
    <Member Sig="public virtual int Compare (string string1, int offset1, string string2, int offset2);" />
    <Member Sig="public virtual int Compare (string string1, int offset1, string string2, int offset2, System.Globalization.CompareOptions options);" />
    <Member Sig="public virtual int Compare (string string1, string string2);" />
    <Member Sig="public virtual int Compare (string string1, string string2, System.Globalization.CompareOptions options);" />
    <Member Sig="public virtual int IndexOf (string source, char value);" />
    <Member Sig="public virtual int IndexOf (string source, char value, int startIndex);" />
    <Member Sig="public virtual int IndexOf (string source, char value, int startIndex, int count);" />
    <Member Sig="public virtual int IndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
    <Member Sig="public virtual int IndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
    <Member Sig="public virtual int IndexOf (string source, char value, System.Globalization.CompareOptions options);" />
    <Member Sig="public virtual int IndexOf (string source, string value);" />
    <Member Sig="public virtual int IndexOf (string source, string value, int startIndex);" />
    <Member Sig="public virtual int IndexOf (string source, string value, int startIndex, int count);" />
    <Member Sig="public virtual int IndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
    <Member Sig="public virtual int IndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
    <Member Sig="public virtual int IndexOf (string source, string value, System.Globalization.CompareOptions options);" />
    <Member Sig="public virtual int LastIndexOf (string source, char value);" />
    <Member Sig="public virtual int LastIndexOf (string source, char value, int startIndex);" />
    <Member Sig="public virtual int LastIndexOf (string source, char value, int startIndex, int count);" />
    <Member Sig="public virtual int LastIndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
    <Member Sig="public virtual int LastIndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
    <Member Sig="public virtual int LastIndexOf (string source, char value, System.Globalization.CompareOptions options);" />
    <Member Sig="public virtual int LastIndexOf (string source, string value);" />
    <Member Sig="public virtual int LastIndexOf (string source, string value, int startIndex);" />
    <Member Sig="public virtual int LastIndexOf (string source, string value, int startIndex, int count);" />
    <Member Sig="public virtual int LastIndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
    <Member Sig="public virtual int LastIndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
    <Member Sig="public virtual int LastIndexOf (string source, string value, System.Globalization.CompareOptions options);" />
    <Member Sig="public virtual string Name { get; }" />
    <Member Sig="public virtual System.Globalization.SortKey GetSortKey (string source);" />
    <Member Sig="public virtual System.Globalization.SortKey GetSortKey (string source, System.Globalization.CompareOptions options);" />
    <Member Sig="void IDeserializationCallback.OnDeserialization (object sender);" />
  </Type>
  <Type Name="System.Globalization.CompareOptions">
    <Member Sig="IgnoreCase" />
    <Member Sig="IgnoreKanaType" />
    <Member Sig="IgnoreNonSpace" />
    <Member Sig="IgnoreSymbols" />
    <Member Sig="IgnoreWidth" />
    <Member Sig="None" />
    <Member Sig="Ordinal" />
    <Member Sig="OrdinalIgnoreCase" />
    <Member Sig="StringSort" />
  </Type>
  <Type Name="System.Globalization.CultureInfo">
    <Member Sig="public bool IsReadOnly { get; }" />
    <Member Sig="public bool UseUserOverride { get; }" />
    <Member Sig="public CultureInfo (int culture);" />
    <Member Sig="public CultureInfo (int culture, bool useUserOverride);" />
    <Member Sig="public CultureInfo (string name);" />
    <Member Sig="public CultureInfo (string name, bool useUserOverride);" />
    <Member Sig="public override bool Equals (object value);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static System.Globalization.CultureInfo CreateSpecificCulture (string name);" />
    <Member Sig="public static System.Globalization.CultureInfo CurrentCulture { get; }" />
    <Member Sig="public static System.Globalization.CultureInfo CurrentUICulture { get; }" />
    <Member Sig="public static System.Globalization.CultureInfo GetCultureInfo (int culture);" />
    <Member Sig="public static System.Globalization.CultureInfo GetCultureInfo (string name);" />
    <Member Sig="public static System.Globalization.CultureInfo GetCultureInfo (string name, string altName);" />
    <Member Sig="public static System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag (string name);" />
    <Member Sig="public static System.Globalization.CultureInfo InstalledUICulture { get; }" />
    <Member Sig="public static System.Globalization.CultureInfo InvariantCulture { get; }" />
    <Member Sig="public static System.Globalization.CultureInfo ReadOnly (System.Globalization.CultureInfo ci);" />
    <Member Sig="public static System.Globalization.CultureInfo[] GetCultures (System.Globalization.CultureTypes types);" />
    <Member Sig="public string IetfLanguageTag { get; }" />
    <Member Sig="public System.Globalization.CultureInfo GetConsoleFallbackUICulture ();" />
    <Member Sig="public System.Globalization.CultureTypes CultureTypes { get; }" />
    <Member Sig="public virtual bool IsNeutralCulture { get; }" />
    <Member Sig="public virtual int KeyboardLayoutId { get; }" />
    <Member Sig="public virtual int LCID { get; }" />
    <Member Sig="public virtual object Clone ();" />
    <Member Sig="public virtual object GetFormat (Type formatType);" />
    <Member Sig="public virtual string DisplayName { get; }" />
    <Member Sig="public virtual string EnglishName { get; }" />
    <Member Sig="public virtual string Name { get; }" />
    <Member Sig="public virtual string NativeName { get; }" />
    <Member Sig="public virtual string ThreeLetterISOLanguageName { get; }" />
    <Member Sig="public virtual string ThreeLetterWindowsLanguageName { get; }" />
    <Member Sig="public virtual string TwoLetterISOLanguageName { get; }" />
    <Member Sig="public virtual System.Globalization.Calendar Calendar { get; }" />
    <Member Sig="public virtual System.Globalization.Calendar[] OptionalCalendars { get; }" />
    <Member Sig="public virtual System.Globalization.CompareInfo CompareInfo { get; }" />
    <Member Sig="public virtual System.Globalization.CultureInfo Parent { get; }" />
    <Member Sig="public virtual System.Globalization.DateTimeFormatInfo DateTimeFormat { get; set; }" />
    <Member Sig="public virtual System.Globalization.NumberFormatInfo NumberFormat { get; set; }" />
    <Member Sig="public virtual System.Globalization.TextInfo TextInfo { get; }" />
    <Member Sig="public void ClearCachedData ();" />
  </Type>
  <Type Name="System.Globalization.CultureTypes">
    <Member Sig="AllCultures" />
    <Member Sig="FrameworkCultures" />
    <Member Sig="InstalledWin32Cultures" />
    <Member Sig="NeutralCultures" />
    <Member Sig="ReplacementCultures" />
    <Member Sig="SpecificCultures" />
    <Member Sig="UserCustomCulture" />
    <Member Sig="WindowsOnlyCultures" />
  </Type>
  <Type Name="System.Globalization.DateTimeFormatInfo">
    <Member Sig="public bool IsReadOnly { get; }" />
    <Member Sig="public DateTimeFormatInfo ();" />
    <Member Sig="public DayOfWeek FirstDayOfWeek { get; set; }" />
    <Member Sig="public int GetEra (string eraName);" />
    <Member Sig="public object Clone ();" />
    <Member Sig="public object GetFormat (Type formatType);" />
    <Member Sig="public static System.Globalization.DateTimeFormatInfo CurrentInfo { get; }" />
    <Member Sig="public static System.Globalization.DateTimeFormatInfo GetInstance (IFormatProvider provider);" />
    <Member Sig="public static System.Globalization.DateTimeFormatInfo InvariantInfo { get; }" />
    <Member Sig="public static System.Globalization.DateTimeFormatInfo ReadOnly (System.Globalization.DateTimeFormatInfo dtfi);" />
    <Member Sig="public string AMDesignator { get; set; }" />
    <Member Sig="public string DateSeparator { get; set; }" />
    <Member Sig="public string FullDateTimePattern { get; set; }" />
    <Member Sig="public string GetAbbreviatedDayName (DayOfWeek dayofweek);" />
    <Member Sig="public string GetAbbreviatedEraName (int era);" />
    <Member Sig="public string GetAbbreviatedMonthName (int month);" />
    <Member Sig="public string GetDayName (DayOfWeek dayofweek);" />
    <Member Sig="public string GetEraName (int era);" />
    <Member Sig="public string GetMonthName (int month);" />
    <Member Sig="public string GetShortestDayName (DayOfWeek dayOfWeek);" />
    <Member Sig="public string LongDatePattern { get; set; }" />
    <Member Sig="public string LongTimePattern { get; set; }" />
    <Member Sig="public string MonthDayPattern { get; set; }" />
    <Member Sig="public string NativeCalendarName { get; }" />
    <Member Sig="public string PMDesignator { get; set; }" />
    <Member Sig="public string RFC1123Pattern { get; }" />
    <Member Sig="public string ShortDatePattern { get; set; }" />
    <Member Sig="public string ShortTimePattern { get; set; }" />
    <Member Sig="public string SortableDateTimePattern { get; }" />
    <Member Sig="public string TimeSeparator { get; set; }" />
    <Member Sig="public string UniversalSortableDateTimePattern { get; }" />
    <Member Sig="public string YearMonthPattern { get; set; }" />
    <Member Sig="public string[] AbbreviatedDayNames { get; set; }" />
    <Member Sig="public string[] AbbreviatedMonthGenitiveNames { get; set; }" />
    <Member Sig="public string[] AbbreviatedMonthNames { get; set; }" />
    <Member Sig="public string[] DayNames { get; set; }" />
    <Member Sig="public string[] GetAllDateTimePatterns ();" />
    <Member Sig="public string[] GetAllDateTimePatterns (char format);" />
    <Member Sig="public string[] MonthGenitiveNames { get; set; }" />
    <Member Sig="public string[] MonthNames { get; set; }" />
    <Member Sig="public string[] ShortestDayNames { get; set; }" />
    <Member Sig="public System.Globalization.Calendar Calendar { get; set; }" />
    <Member Sig="public System.Globalization.CalendarWeekRule CalendarWeekRule { get; set; }" />
    <Member Sig="public void SetAllDateTimePatterns (string[] patterns, char format);" />
  </Type>
  <Type Name="System.Globalization.DateTimeStyles">
    <Member Sig="AdjustToUniversal" />
    <Member Sig="AllowInnerWhite" />
    <Member Sig="AllowLeadingWhite" />
    <Member Sig="AllowTrailingWhite" />
    <Member Sig="AllowWhiteSpaces" />
    <Member Sig="AssumeLocal" />
    <Member Sig="AssumeUniversal" />
    <Member Sig="NoCurrentDateDefault" />
    <Member Sig="None" />
    <Member Sig="RoundtripKind" />
  </Type>
  <Type Name="System.Globalization.DaylightTime">
    <Member Sig="public DateTime End { get; }" />
    <Member Sig="public DateTime Start { get; }" />
    <Member Sig="public DaylightTime (DateTime start, DateTime end, TimeSpan delta);" />
    <Member Sig="public TimeSpan Delta { get; }" />
  </Type>
  <Type Name="System.Globalization.DigitShapes">
    <Member Sig="Context" />
    <Member Sig="NativeNational" />
    <Member Sig="None" />
  </Type>
  <Type Name="System.Globalization.EastAsianLunisolarCalendar">
    <Member Sig="public int GetCelestialStem (int sexagenaryYear);" />
    <Member Sig="public int GetTerrestrialBranch (int sexagenaryYear);" />
    <Member Sig="public override bool IsLeapDay (int year, int month, int day, int era);" />
    <Member Sig="public override bool IsLeapMonth (int year, int month, int era);" />
    <Member Sig="public override bool IsLeapYear (int year, int era);" />
    <Member Sig="public override DateTime AddMonths (DateTime time, int months);" />
    <Member Sig="public override DateTime AddYears (DateTime time, int years);" />
    <Member Sig="public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);" />
    <Member Sig="public override DayOfWeek GetDayOfWeek (DateTime time);" />
    <Member Sig="public override int GetDayOfMonth (DateTime time);" />
    <Member Sig="public override int GetDayOfYear (DateTime time);" />
    <Member Sig="public override int GetDaysInMonth (int year, int month, int era);" />
    <Member Sig="public override int GetDaysInYear (int year, int era);" />
    <Member Sig="public override int GetLeapMonth (int year, int era);" />
    <Member Sig="public override int GetMonth (DateTime time);" />
    <Member Sig="public override int GetMonthsInYear (int year, int era);" />
    <Member Sig="public override int GetYear (DateTime time);" />
    <Member Sig="public override int ToFourDigitYear (int year);" />
    <Member Sig="public override int TwoDigitYearMax { get; set; }" />
    <Member Sig="public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }" />
    <Member Sig="public virtual int GetSexagenaryYear (DateTime time);" />
  </Type>
  <Type Name="System.Globalization.GregorianCalendar">
    <Member Sig="public const int ADEra = 1;" />
    <Member Sig="public GregorianCalendar ();" />
    <Member Sig="public GregorianCalendar (System.Globalization.GregorianCalendarTypes type);" />
    <Member Sig="public override bool IsLeapDay (int year, int month, int day, int era);" />
    <Member Sig="public override bool IsLeapMonth (int year, int month, int era);" />
    <Member Sig="public override bool IsLeapYear (int year, int era);" />
    <Member Sig="public override DateTime AddMonths (DateTime time, int months);" />
    <Member Sig="public override DateTime AddYears (DateTime time, int years);" />
    <Member Sig="public override DateTime MaxSupportedDateTime { get; }" />
    <Member Sig="public override DateTime MinSupportedDateTime { get; }" />
    <Member Sig="public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);" />
    <Member Sig="public override DayOfWeek GetDayOfWeek (DateTime time);" />
    <Member Sig="public override int GetDayOfMonth (DateTime time);" />
    <Member Sig="public override int GetDayOfYear (DateTime time);" />
    <Member Sig="public override int GetDaysInMonth (int year, int month, int era);" />
    <Member Sig="public override int GetDaysInYear (int year, int era);" />
    <Member Sig="public override int GetEra (DateTime time);" />
    <Member Sig="public override int GetLeapMonth (int year, int era);" />
    <Member Sig="public override int GetMonth (DateTime time);" />
    <Member Sig="public override int GetMonthsInYear (int year, int era);" />
    <Member Sig="public override int GetWeekOfYear (DateTime time, System.Globalization.CalendarWeekRule rule, DayOfWeek firstDayOfWeek);" />
    <Member Sig="public override int GetYear (DateTime time);" />
    <Member Sig="public override int ToFourDigitYear (int year);" />
    <Member Sig="public override int TwoDigitYearMax { get; set; }" />
    <Member Sig="public override int[] Eras { get; }" />
    <Member Sig="public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }" />
    <Member Sig="public virtual System.Globalization.GregorianCalendarTypes CalendarType { get; set; }" />
  </Type>
  <Type Name="System.Globalization.GregorianCalendarTypes">
    <Member Sig="Arabic" />
    <Member Sig="Localized" />
    <Member Sig="MiddleEastFrench" />
    <Member Sig="TransliteratedEnglish" />
    <Member Sig="TransliteratedFrench" />
    <Member Sig="USEnglish" />
  </Type>
  <Type Name="System.Globalization.HebrewCalendar">
    <Member Sig="public HebrewCalendar ();" />
    <Member Sig="public override bool IsLeapDay (int year, int month, int day, int era);" />
    <Member Sig="public override bool IsLeapMonth (int year, int month, int era);" />
    <Member Sig="public override bool IsLeapYear (int year, int era);" />
    <Member Sig="public override DateTime AddMonths (DateTime time, int months);" />
    <Member Sig="public override DateTime AddYears (DateTime time, int years);" />
    <Member Sig="public override DateTime MaxSupportedDateTime { get; }" />
    <Member Sig="public override DateTime MinSupportedDateTime { get; }" />
    <Member Sig="public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);" />
    <Member Sig="public override DayOfWeek GetDayOfWeek (DateTime time);" />
    <Member Sig="public override int GetDayOfMonth (DateTime time);" />
    <Member Sig="public override int GetDayOfYear (DateTime time);" />
    <Member Sig="public override int GetDaysInMonth (int year, int month, int era);" />
    <Member Sig="public override int GetDaysInYear (int year, int era);" />
    <Member Sig="public override int GetEra (DateTime time);" />
    <Member Sig="public override int GetLeapMonth (int year, int era);" />
    <Member Sig="public override int GetMonth (DateTime time);" />
    <Member Sig="public override int GetMonthsInYear (int year, int era);" />
    <Member Sig="public override int GetYear (DateTime time);" />
    <Member Sig="public override int ToFourDigitYear (int year);" />
    <Member Sig="public override int TwoDigitYearMax { get; set; }" />
    <Member Sig="public override int[] Eras { get; }" />
    <Member Sig="public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }" />
    <Member Sig="public static readonly int HebrewEra;" />
  </Type>
  <Type Name="System.Globalization.HijriCalendar">
    <Member Sig="public HijriCalendar ();" />
    <Member Sig="public int HijriAdjustment { get; set; }" />
    <Member Sig="public override bool IsLeapDay (int year, int month, int day, int era);" />
    <Member Sig="public override bool IsLeapMonth (int year, int month, int era);" />
    <Member Sig="public override bool IsLeapYear (int year, int era);" />
    <Member Sig="public override DateTime AddMonths (DateTime time, int months);" />
    <Member Sig="public override DateTime AddYears (DateTime time, int years);" />
    <Member Sig="public override DateTime MaxSupportedDateTime { get; }" />
    <Member Sig="public override DateTime MinSupportedDateTime { get; }" />
    <Member Sig="public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);" />
    <Member Sig="public override DayOfWeek GetDayOfWeek (DateTime time);" />
    <Member Sig="public override int GetDayOfMonth (DateTime time);" />
    <Member Sig="public override int GetDayOfYear (DateTime time);" />
    <Member Sig="public override int GetDaysInMonth (int year, int month, int era);" />
    <Member Sig="public override int GetDaysInYear (int year, int era);" />
    <Member Sig="public override int GetEra (DateTime time);" />
    <Member Sig="public override int GetLeapMonth (int year, int era);" />
    <Member Sig="public override int GetMonth (DateTime time);" />
    <Member Sig="public override int GetMonthsInYear (int year, int era);" />
    <Member Sig="public override int GetYear (DateTime time);" />
    <Member Sig="public override int ToFourDigitYear (int year);" />
    <Member Sig="public override int TwoDigitYearMax { get; set; }" />
    <Member Sig="public override int[] Eras { get; }" />
    <Member Sig="public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }" />
    <Member Sig="public static readonly int HijriEra;" />
  </Type>
  <Type Name="System.Globalization.IdnMapping">
    <Member Sig="public bool AllowUnassigned { get; set; }" />
    <Member Sig="public bool UseStd3AsciiRules { get; set; }" />
    <Member Sig="public IdnMapping ();" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public string GetAscii (string unicode);" />
    <Member Sig="public string GetAscii (string unicode, int index);" />
    <Member Sig="public string GetAscii (string unicode, int index, int count);" />
    <Member Sig="public string GetUnicode (string ascii);" />
    <Member Sig="public string GetUnicode (string ascii, int index);" />
    <Member Sig="public string GetUnicode (string ascii, int index, int count);" />
  </Type>
  <Type Name="System.Globalization.JapaneseCalendar">
    <Member Sig="public JapaneseCalendar ();" />
    <Member Sig="public override bool IsLeapDay (int year, int month, int day, int era);" />
    <Member Sig="public override bool IsLeapMonth (int year, int month, int era);" />
    <Member Sig="public override bool IsLeapYear (int year, int era);" />
    <Member Sig="public override DateTime AddMonths (DateTime time, int months);" />
    <Member Sig="public override DateTime AddYears (DateTime time, int years);" />
    <Member Sig="public override DateTime MaxSupportedDateTime { get; }" />
    <Member Sig="public override DateTime MinSupportedDateTime { get; }" />
    <Member Sig="public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);" />
    <Member Sig="public override DayOfWeek GetDayOfWeek (DateTime time);" />
    <Member Sig="public override int GetDayOfMonth (DateTime time);" />
    <Member Sig="public override int GetDayOfYear (DateTime time);" />
    <Member Sig="public override int GetDaysInMonth (int year, int month, int era);" />
    <Member Sig="public override int GetDaysInYear (int year, int era);" />
    <Member Sig="public override int GetEra (DateTime time);" />
    <Member Sig="public override int GetLeapMonth (int year, int era);" />
    <Member Sig="public override int GetMonth (DateTime time);" />
    <Member Sig="public override int GetMonthsInYear (int year, int era);" />
    <Member Sig="public override int GetWeekOfYear (DateTime time, System.Globalization.CalendarWeekRule rule, DayOfWeek firstDayOfWeek);" />
    <Member Sig="public override int GetYear (DateTime time);" />
    <Member Sig="public override int ToFourDigitYear (int year);" />
    <Member Sig="public override int TwoDigitYearMax { get; set; }" />
    <Member Sig="public override int[] Eras { get; }" />
    <Member Sig="public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }" />
  </Type>
  <Type Name="System.Globalization.JapaneseLunisolarCalendar">
    <Member Sig="public const int JapaneseEra = 1;" />
    <Member Sig="public JapaneseLunisolarCalendar ();" />
    <Member Sig="public override DateTime MaxSupportedDateTime { get; }" />
    <Member Sig="public override DateTime MinSupportedDateTime { get; }" />
    <Member Sig="public override int GetEra (DateTime time);" />
    <Member Sig="public override int[] Eras { get; }" />
  </Type>
  <Type Name="System.Globalization.JulianCalendar">
    <Member Sig="public JulianCalendar ();" />
    <Member Sig="public override bool IsLeapDay (int year, int month, int day, int era);" />
    <Member Sig="public override bool IsLeapMonth (int year, int month, int era);" />
    <Member Sig="public override bool IsLeapYear (int year, int era);" />
    <Member Sig="public override DateTime AddMonths (DateTime time, int months);" />
    <Member Sig="public override DateTime AddYears (DateTime time, int years);" />
    <Member Sig="public override DateTime MaxSupportedDateTime { get; }" />
    <Member Sig="public override DateTime MinSupportedDateTime { get; }" />
    <Member Sig="public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);" />
    <Member Sig="public override DayOfWeek GetDayOfWeek (DateTime time);" />
    <Member Sig="public override int GetDayOfMonth (DateTime time);" />
    <Member Sig="public override int GetDayOfYear (DateTime time);" />
    <Member Sig="public override int GetDaysInMonth (int year, int month, int era);" />
    <Member Sig="public override int GetDaysInYear (int year, int era);" />
    <Member Sig="public override int GetEra (DateTime time);" />
    <Member Sig="public override int GetLeapMonth (int year, int era);" />
    <Member Sig="public override int GetMonth (DateTime time);" />
    <Member Sig="public override int GetMonthsInYear (int year, int era);" />
    <Member Sig="public override int GetYear (DateTime time);" />
    <Member Sig="public override int ToFourDigitYear (int year);" />
    <Member Sig="public override int TwoDigitYearMax { get; set; }" />
    <Member Sig="public override int[] Eras { get; }" />
    <Member Sig="public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }" />
    <Member Sig="public static readonly int JulianEra;" />
  </Type>
  <Type Name="System.Globalization.KoreanCalendar">
    <Member Sig="public const int KoreanEra = 1;" />
    <Member Sig="public KoreanCalendar ();" />
    <Member Sig="public override bool IsLeapDay (int year, int month, int day, int era);" />
    <Member Sig="public override bool IsLeapMonth (int year, int month, int era);" />
    <Member Sig="public override bool IsLeapYear (int year, int era);" />
    <Member Sig="public override DateTime AddMonths (DateTime time, int months);" />
    <Member Sig="public override DateTime AddYears (DateTime time, int years);" />
    <Member Sig="public override DateTime MaxSupportedDateTime { get; }" />
    <Member Sig="public override DateTime MinSupportedDateTime { get; }" />
    <Member Sig="public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);" />
    <Member Sig="public override DayOfWeek GetDayOfWeek (DateTime time);" />
    <Member Sig="public override int GetDayOfMonth (DateTime time);" />
    <Member Sig="public override int GetDayOfYear (DateTime time);" />
    <Member Sig="public override int GetDaysInMonth (int year, int month, int era);" />
    <Member Sig="public override int GetDaysInYear (int year, int era);" />
    <Member Sig="public override int GetEra (DateTime time);" />
    <Member Sig="public override int GetLeapMonth (int year, int era);" />
    <Member Sig="public override int GetMonth (DateTime time);" />
    <Member Sig="public override int GetMonthsInYear (int year, int era);" />
    <Member Sig="public override int GetWeekOfYear (DateTime time, System.Globalization.CalendarWeekRule rule, DayOfWeek firstDayOfWeek);" />
    <Member Sig="public override int GetYear (DateTime time);" />
    <Member Sig="public override int ToFourDigitYear (int year);" />
    <Member Sig="public override int TwoDigitYearMax { get; set; }" />
    <Member Sig="public override int[] Eras { get; }" />
    <Member Sig="public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }" />
  </Type>
  <Type Name="System.Globalization.KoreanLunisolarCalendar">
    <Member Sig="public const int GregorianEra = 1;" />
    <Member Sig="public KoreanLunisolarCalendar ();" />
    <Member Sig="public override DateTime MaxSupportedDateTime { get; }" />
    <Member Sig="public override DateTime MinSupportedDateTime { get; }" />
    <Member Sig="public override int GetEra (DateTime time);" />
    <Member Sig="public override int[] Eras { get; }" />
  </Type>
  <Type Name="System.Globalization.NumberFormatInfo">
    <Member Sig="public bool IsReadOnly { get; }" />
    <Member Sig="public int CurrencyDecimalDigits { get; set; }" />
    <Member Sig="public int CurrencyNegativePattern { get; set; }" />
    <Member Sig="public int CurrencyPositivePattern { get; set; }" />
    <Member Sig="public int NumberDecimalDigits { get; set; }" />
    <Member Sig="public int NumberNegativePattern { get; set; }" />
    <Member Sig="public int PercentDecimalDigits { get; set; }" />
    <Member Sig="public int PercentNegativePattern { get; set; }" />
    <Member Sig="public int PercentPositivePattern { get; set; }" />
    <Member Sig="public int[] CurrencyGroupSizes { get; set; }" />
    <Member Sig="public int[] NumberGroupSizes { get; set; }" />
    <Member Sig="public int[] PercentGroupSizes { get; set; }" />
    <Member Sig="public NumberFormatInfo ();" />
    <Member Sig="public object Clone ();" />
    <Member Sig="public object GetFormat (Type formatType);" />
    <Member Sig="public static System.Globalization.NumberFormatInfo CurrentInfo { get; }" />
    <Member Sig="public static System.Globalization.NumberFormatInfo GetInstance (IFormatProvider formatProvider);" />
    <Member Sig="public static System.Globalization.NumberFormatInfo InvariantInfo { get; }" />
    <Member Sig="public static System.Globalization.NumberFormatInfo ReadOnly (System.Globalization.NumberFormatInfo nfi);" />
    <Member Sig="public string CurrencyDecimalSeparator { get; set; }" />
    <Member Sig="public string CurrencyGroupSeparator { get; set; }" />
    <Member Sig="public string CurrencySymbol { get; set; }" />
    <Member Sig="public string NaNSymbol { get; set; }" />
    <Member Sig="public string NegativeInfinitySymbol { get; set; }" />
    <Member Sig="public string NegativeSign { get; set; }" />
    <Member Sig="public string NumberDecimalSeparator { get; set; }" />
    <Member Sig="public string NumberGroupSeparator { get; set; }" />
    <Member Sig="public string PercentDecimalSeparator { get; set; }" />
    <Member Sig="public string PercentGroupSeparator { get; set; }" />
    <Member Sig="public string PercentSymbol { get; set; }" />
    <Member Sig="public string PerMilleSymbol { get; set; }" />
    <Member Sig="public string PositiveInfinitySymbol { get; set; }" />
    <Member Sig="public string PositiveSign { get; set; }" />
    <Member Sig="public string[] NativeDigits { get; set; }" />
    <Member Sig="public System.Globalization.DigitShapes DigitSubstitution { get; set; }" />
  </Type>
  <Type Name="System.Globalization.NumberStyles">
    <Member Sig="AllowCurrencySymbol" />
    <Member Sig="AllowDecimalPoint" />
    <Member Sig="AllowExponent" />
    <Member Sig="AllowHexSpecifier" />
    <Member Sig="AllowLeadingSign" />
    <Member Sig="AllowLeadingWhite" />
    <Member Sig="AllowParentheses" />
    <Member Sig="AllowThousands" />
    <Member Sig="AllowTrailingSign" />
    <Member Sig="AllowTrailingWhite" />
    <Member Sig="Any" />
    <Member Sig="Currency" />
    <Member Sig="Float" />
    <Member Sig="HexNumber" />
    <Member Sig="Integer" />
    <Member Sig="None" />
    <Member Sig="Number" />
  </Type>
  <Type Name="System.Globalization.PersianCalendar">
    <Member Sig="public override bool IsLeapDay (int year, int month, int day, int era);" />
    <Member Sig="public override bool IsLeapMonth (int year, int month, int era);" />
    <Member Sig="public override bool IsLeapYear (int year, int era);" />
    <Member Sig="public override DateTime AddMonths (DateTime time, int months);" />
    <Member Sig="public override DateTime AddYears (DateTime time, int years);" />
    <Member Sig="public override DateTime MaxSupportedDateTime { get; }" />
    <Member Sig="public override DateTime MinSupportedDateTime { get; }" />
    <Member Sig="public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);" />
    <Member Sig="public override DayOfWeek GetDayOfWeek (DateTime time);" />
    <Member Sig="public override int GetDayOfMonth (DateTime time);" />
    <Member Sig="public override int GetDayOfYear (DateTime time);" />
    <Member Sig="public override int GetDaysInMonth (int year, int month, int era);" />
    <Member Sig="public override int GetDaysInYear (int year, int era);" />
    <Member Sig="public override int GetEra (DateTime time);" />
    <Member Sig="public override int GetLeapMonth (int year, int era);" />
    <Member Sig="public override int GetMonth (DateTime time);" />
    <Member Sig="public override int GetMonthsInYear (int year, int era);" />
    <Member Sig="public override int GetYear (DateTime time);" />
    <Member Sig="public override int ToFourDigitYear (int year);" />
    <Member Sig="public override int TwoDigitYearMax { get; set; }" />
    <Member Sig="public override int[] Eras { get; }" />
    <Member Sig="public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }" />
    <Member Sig="public PersianCalendar ();" />
    <Member Sig="public static readonly int PersianEra;" />
  </Type>
  <Type Name="System.Globalization.RegionInfo">
    <Member Sig="public override bool Equals (object value);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public RegionInfo (int culture);" />
    <Member Sig="public RegionInfo (string name);" />
    <Member Sig="public static System.Globalization.RegionInfo CurrentRegion { get; }" />
    <Member Sig="public virtual bool IsMetric { get; }" />
    <Member Sig="public virtual int GeoId { get; }" />
    <Member Sig="public virtual string CurrencyEnglishName { get; }" />
    <Member Sig="public virtual string CurrencyNativeName { get; }" />
    <Member Sig="public virtual string CurrencySymbol { get; }" />
    <Member Sig="public virtual string DisplayName { get; }" />
    <Member Sig="public virtual string EnglishName { get; }" />
    <Member Sig="public virtual string ISOCurrencySymbol { get; }" />
    <Member Sig="public virtual string Name { get; }" />
    <Member Sig="public virtual string NativeName { get; }" />
    <Member Sig="public virtual string ThreeLetterISORegionName { get; }" />
    <Member Sig="public virtual string ThreeLetterWindowsRegionName { get; }" />
    <Member Sig="public virtual string TwoLetterISORegionName { get; }" />
  </Type>
  <Type Name="System.Globalization.SortKey">
    <Member Sig="public override bool Equals (object value);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static int Compare (System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2);" />
    <Member Sig="public virtual byte[] KeyData { get; }" />
    <Member Sig="public virtual string OriginalString { get; }" />
  </Type>
  <Type Name="System.Globalization.StringInfo">
    <Member Sig="public int LengthInTextElements { get; }" />
    <Member Sig="public override bool Equals (object value);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static int[] ParseCombiningCharacters (string str);" />
    <Member Sig="public static string GetNextTextElement (string str);" />
    <Member Sig="public static string GetNextTextElement (string str, int index);" />
    <Member Sig="public static System.Globalization.TextElementEnumerator GetTextElementEnumerator (string str);" />
    <Member Sig="public static System.Globalization.TextElementEnumerator GetTextElementEnumerator (string str, int index);" />
    <Member Sig="public string String { get; set; }" />
    <Member Sig="public string SubstringByTextElements (int startingTextElement);" />
    <Member Sig="public string SubstringByTextElements (int startingTextElement, int lengthInTextElements);" />
    <Member Sig="public StringInfo ();" />
    <Member Sig="public StringInfo (string value);" />
  </Type>
  <Type Name="System.Globalization.TaiwanCalendar">
    <Member Sig="public override bool IsLeapDay (int year, int month, int day, int era);" />
    <Member Sig="public override bool IsLeapMonth (int year, int month, int era);" />
    <Member Sig="public override bool IsLeapYear (int year, int era);" />
    <Member Sig="public override DateTime AddMonths (DateTime time, int months);" />
    <Member Sig="public override DateTime AddYears (DateTime time, int years);" />
    <Member Sig="public override DateTime MaxSupportedDateTime { get; }" />
    <Member Sig="public override DateTime MinSupportedDateTime { get; }" />
    <Member Sig="public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);" />
    <Member Sig="public override DayOfWeek GetDayOfWeek (DateTime time);" />
    <Member Sig="public override int GetDayOfMonth (DateTime time);" />
    <Member Sig="public override int GetDayOfYear (DateTime time);" />
    <Member Sig="public override int GetDaysInMonth (int year, int month, int era);" />
    <Member Sig="public override int GetDaysInYear (int year, int era);" />
    <Member Sig="public override int GetEra (DateTime time);" />
    <Member Sig="public override int GetLeapMonth (int year, int era);" />
    <Member Sig="public override int GetMonth (DateTime time);" />
    <Member Sig="public override int GetMonthsInYear (int year, int era);" />
    <Member Sig="public override int GetWeekOfYear (DateTime time, System.Globalization.CalendarWeekRule rule, DayOfWeek firstDayOfWeek);" />
    <Member Sig="public override int GetYear (DateTime time);" />
    <Member Sig="public override int ToFourDigitYear (int year);" />
    <Member Sig="public override int TwoDigitYearMax { get; set; }" />
    <Member Sig="public override int[] Eras { get; }" />
    <Member Sig="public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }" />
    <Member Sig="public TaiwanCalendar ();" />
  </Type>
  <Type Name="System.Globalization.TaiwanLunisolarCalendar">
    <Member Sig="public override DateTime MaxSupportedDateTime { get; }" />
    <Member Sig="public override DateTime MinSupportedDateTime { get; }" />
    <Member Sig="public override int GetEra (DateTime time);" />
    <Member Sig="public override int[] Eras { get; }" />
    <Member Sig="public TaiwanLunisolarCalendar ();" />
  </Type>
  <Type Name="System.Globalization.TextElementEnumerator">
    <Member Sig="public bool MoveNext ();" />
    <Member Sig="public int ElementIndex { get; }" />
    <Member Sig="public object Current { get; }" />
    <Member Sig="public string GetTextElement ();" />
    <Member Sig="public void Reset ();" />
  </Type>
  <Type Name="System.Globalization.TextInfo">
    <Member Sig="public bool IsReadOnly { get; }" />
    <Member Sig="public bool IsRightToLeft { get; }" />
    <Member Sig="public int LCID { get; }" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static System.Globalization.TextInfo ReadOnly (System.Globalization.TextInfo textInfo);" />
    <Member Sig="public string CultureName { get; }" />
    <Member Sig="public string ToTitleCase (string str);" />
    <Member Sig="public virtual char ToLower (char c);" />
    <Member Sig="public virtual char ToUpper (char c);" />
    <Member Sig="public virtual int ANSICodePage { get; }" />
    <Member Sig="public virtual int EBCDICCodePage { get; }" />
    <Member Sig="public virtual int MacCodePage { get; }" />
    <Member Sig="public virtual int OEMCodePage { get; }" />
    <Member Sig="public virtual object Clone ();" />
    <Member Sig="public virtual string ListSeparator { get; set; }" />
    <Member Sig="public virtual string ToLower (string str);" />
    <Member Sig="public virtual string ToUpper (string str);" />
    <Member Sig="void IDeserializationCallback.OnDeserialization (object sender);" />
  </Type>
  <Type Name="System.Globalization.ThaiBuddhistCalendar">
    <Member Sig="public const int ThaiBuddhistEra = 1;" />
    <Member Sig="public override bool IsLeapDay (int year, int month, int day, int era);" />
    <Member Sig="public override bool IsLeapMonth (int year, int month, int era);" />
    <Member Sig="public override bool IsLeapYear (int year, int era);" />
    <Member Sig="public override DateTime AddMonths (DateTime time, int months);" />
    <Member Sig="public override DateTime AddYears (DateTime time, int years);" />
    <Member Sig="public override DateTime MaxSupportedDateTime { get; }" />
    <Member Sig="public override DateTime MinSupportedDateTime { get; }" />
    <Member Sig="public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);" />
    <Member Sig="public override DayOfWeek GetDayOfWeek (DateTime time);" />
    <Member Sig="public override int GetDayOfMonth (DateTime time);" />
    <Member Sig="public override int GetDayOfYear (DateTime time);" />
    <Member Sig="public override int GetDaysInMonth (int year, int month, int era);" />
    <Member Sig="public override int GetDaysInYear (int year, int era);" />
    <Member Sig="public override int GetEra (DateTime time);" />
    <Member Sig="public override int GetLeapMonth (int year, int era);" />
    <Member Sig="public override int GetMonth (DateTime time);" />
    <Member Sig="public override int GetMonthsInYear (int year, int era);" />
    <Member Sig="public override int GetWeekOfYear (DateTime time, System.Globalization.CalendarWeekRule rule, DayOfWeek firstDayOfWeek);" />
    <Member Sig="public override int GetYear (DateTime time);" />
    <Member Sig="public override int ToFourDigitYear (int year);" />
    <Member Sig="public override int TwoDigitYearMax { get; set; }" />
    <Member Sig="public override int[] Eras { get; }" />
    <Member Sig="public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }" />
    <Member Sig="public ThaiBuddhistCalendar ();" />
  </Type>
  <Type Name="System.Globalization.UmAlQuraCalendar">
    <Member Sig="public const int UmAlQuraEra = 1;" />
    <Member Sig="public override bool IsLeapDay (int year, int month, int day, int era);" />
    <Member Sig="public override bool IsLeapMonth (int year, int month, int era);" />
    <Member Sig="public override bool IsLeapYear (int year, int era);" />
    <Member Sig="public override DateTime AddMonths (DateTime time, int months);" />
    <Member Sig="public override DateTime AddYears (DateTime time, int years);" />
    <Member Sig="public override DateTime MaxSupportedDateTime { get; }" />
    <Member Sig="public override DateTime MinSupportedDateTime { get; }" />
    <Member Sig="public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);" />
    <Member Sig="public override DayOfWeek GetDayOfWeek (DateTime time);" />
    <Member Sig="public override int GetDayOfMonth (DateTime time);" />
    <Member Sig="public override int GetDayOfYear (DateTime time);" />
    <Member Sig="public override int GetDaysInMonth (int year, int month, int era);" />
    <Member Sig="public override int GetDaysInYear (int year, int era);" />
    <Member Sig="public override int GetEra (DateTime time);" />
    <Member Sig="public override int GetLeapMonth (int year, int era);" />
    <Member Sig="public override int GetMonth (DateTime time);" />
    <Member Sig="public override int GetMonthsInYear (int year, int era);" />
    <Member Sig="public override int GetYear (DateTime time);" />
    <Member Sig="public override int ToFourDigitYear (int year);" />
    <Member Sig="public override int TwoDigitYearMax { get; set; }" />
    <Member Sig="public override int[] Eras { get; }" />
    <Member Sig="public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }" />
    <Member Sig="public UmAlQuraCalendar ();" />
  </Type>
  <Type Name="System.Globalization.UnicodeCategory">
    <Member Sig="ClosePunctuation" />
    <Member Sig="ConnectorPunctuation" />
    <Member Sig="Control" />
    <Member Sig="CurrencySymbol" />
    <Member Sig="DashPunctuation" />
    <Member Sig="DecimalDigitNumber" />
    <Member Sig="EnclosingMark" />
    <Member Sig="FinalQuotePunctuation" />
    <Member Sig="Format" />
    <Member Sig="InitialQuotePunctuation" />
    <Member Sig="LetterNumber" />
    <Member Sig="LineSeparator" />
    <Member Sig="LowercaseLetter" />
    <Member Sig="MathSymbol" />
    <Member Sig="ModifierLetter" />
    <Member Sig="ModifierSymbol" />
    <Member Sig="NonSpacingMark" />
    <Member Sig="OpenPunctuation" />
    <Member Sig="OtherLetter" />
    <Member Sig="OtherNotAssigned" />
    <Member Sig="OtherNumber" />
    <Member Sig="OtherPunctuation" />
    <Member Sig="OtherSymbol" />
    <Member Sig="ParagraphSeparator" />
    <Member Sig="PrivateUse" />
    <Member Sig="SpaceSeparator" />
    <Member Sig="SpacingCombiningMark" />
    <Member Sig="Surrogate" />
    <Member Sig="TitlecaseLetter" />
    <Member Sig="UppercaseLetter" />
  </Type>
  <Type Name="System.Guid">
    <Member Sig="public bool Equals (Guid g);" />
    <Member Sig="public byte[] ToByteArray ();" />
    <Member Sig="public Guid (byte[] b);" />
    <Member Sig="public Guid (int a, short b, short c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k);" />
    <Member Sig="public Guid (int a, short b, short c, byte[] d);" />
    <Member Sig="public Guid (string g);" />
    <Member Sig="public Guid (uint a, ushort b, ushort c, byte d, byte e, byte f, byte g, byte h, byte i, byte j, byte k);" />
    <Member Sig="public int CompareTo (Guid value);" />
    <Member Sig="public int CompareTo (object value);" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool op_Equality (Guid a, Guid b);" />
    <Member Sig="public static bool op_Inequality (Guid a, Guid b);" />
    <Member Sig="public static Guid NewGuid ();" />
    <Member Sig="public static readonly Guid Empty;" />
    <Member Sig="public string ToString (string format);" />
    <Member Sig="public string ToString (string format, IFormatProvider provider);" />
  </Type>
  <Type Name="System.IAppDomainSetup">
    <Member Sig="public string ApplicationBase { get; set; }" />
    <Member Sig="public string ApplicationName { get; set; }" />
    <Member Sig="public string CachePath { get; set; }" />
    <Member Sig="public string ConfigurationFile { get; set; }" />
    <Member Sig="public string DynamicBase { get; set; }" />
    <Member Sig="public string LicenseFile { get; set; }" />
    <Member Sig="public string PrivateBinPath { get; set; }" />
    <Member Sig="public string PrivateBinPathProbe { get; set; }" />
    <Member Sig="public string ShadowCopyDirectories { get; set; }" />
    <Member Sig="public string ShadowCopyFiles { get; set; }" />
  </Type>
  <Type Name="System.IAsyncResult">
    <Member Sig="public bool CompletedSynchronously { get; }" />
    <Member Sig="public bool IsCompleted { get; }" />
    <Member Sig="public object AsyncState { get; }" />
    <Member Sig="public System.Threading.WaitHandle AsyncWaitHandle { get; }" />
  </Type>
  <Type Name="System.ICloneable">
    <Member Sig="public object Clone ();" />
  </Type>
  <Type Name="System.IComparable">
    <Member Sig="public int CompareTo (object obj);" />
  </Type>
  <Type Name="System.IComparable`1">
    <Member Sig="public int CompareTo (T other);" />
  </Type>
  <Type Name="System.IConvertible">
    <Member Sig="public bool ToBoolean (IFormatProvider provider);" />
    <Member Sig="public byte ToByte (IFormatProvider provider);" />
    <Member Sig="public char ToChar (IFormatProvider provider);" />
    <Member Sig="public DateTime ToDateTime (IFormatProvider provider);" />
    <Member Sig="public decimal ToDecimal (IFormatProvider provider);" />
    <Member Sig="public double ToDouble (IFormatProvider provider);" />
    <Member Sig="public float ToSingle (IFormatProvider provider);" />
    <Member Sig="public int ToInt32 (IFormatProvider provider);" />
    <Member Sig="public long ToInt64 (IFormatProvider provider);" />
    <Member Sig="public object ToType (Type conversionType, IFormatProvider provider);" />
    <Member Sig="public sbyte ToSByte (IFormatProvider provider);" />
    <Member Sig="public short ToInt16 (IFormatProvider provider);" />
    <Member Sig="public string ToString (IFormatProvider provider);" />
    <Member Sig="public TypeCode GetTypeCode ();" />
    <Member Sig="public uint ToUInt32 (IFormatProvider provider);" />
    <Member Sig="public ulong ToUInt64 (IFormatProvider provider);" />
    <Member Sig="public ushort ToUInt16 (IFormatProvider provider);" />
  </Type>
  <Type Name="System.ICustomFormatter">
    <Member Sig="public string Format (string format, object arg, IFormatProvider formatProvider);" />
  </Type>
  <Type Name="System.IDisposable">
    <Member Sig="public void Dispose ();" />
  </Type>
  <Type Name="System.IEquatable`1">
    <Member Sig="public bool Equals (T other);" />
  </Type>
  <Type Name="System.IFormatProvider">
    <Member Sig="public object GetFormat (Type formatType);" />
  </Type>
  <Type Name="System.IFormattable">
    <Member Sig="public string ToString (string format, IFormatProvider formatProvider);" />
  </Type>
  <Type Name="System.IndexOutOfRangeException">
    <Member Sig="public IndexOutOfRangeException ();" />
    <Member Sig="public IndexOutOfRangeException (string message);" />
    <Member Sig="public IndexOutOfRangeException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.InsufficientMemoryException">
    <Member Sig="public InsufficientMemoryException ();" />
    <Member Sig="public InsufficientMemoryException (string message);" />
    <Member Sig="public InsufficientMemoryException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.Int16">
    <Member Sig="bool IConvertible.ToBoolean (IFormatProvider provider);" />
    <Member Sig="byte IConvertible.ToByte (IFormatProvider provider);" />
    <Member Sig="char IConvertible.ToChar (IFormatProvider provider);" />
    <Member Sig="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
    <Member Sig="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
    <Member Sig="double IConvertible.ToDouble (IFormatProvider provider);" />
    <Member Sig="float IConvertible.ToSingle (IFormatProvider provider);" />
    <Member Sig="int IConvertible.ToInt32 (IFormatProvider provider);" />
    <Member Sig="long IConvertible.ToInt64 (IFormatProvider provider);" />
    <Member Sig="object IConvertible.ToType (Type type, IFormatProvider provider);" />
    <Member Sig="public bool Equals (short obj);" />
    <Member Sig="public const short MaxValue = 32767;" />
    <Member Sig="public const short MinValue = -32768;" />
    <Member Sig="public int CompareTo (object value);" />
    <Member Sig="public int CompareTo (short value);" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool TryParse (string s, out short result);" />
    <Member Sig="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out short result);" />
    <Member Sig="public static short Parse (string s);" />
    <Member Sig="public static short Parse (string s, IFormatProvider provider);" />
    <Member Sig="public static short Parse (string s, System.Globalization.NumberStyles style);" />
    <Member Sig="public static short Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
    <Member Sig="public string ToString (IFormatProvider provider);" />
    <Member Sig="public string ToString (string format);" />
    <Member Sig="public string ToString (string format, IFormatProvider provider);" />
    <Member Sig="public TypeCode GetTypeCode ();" />
    <Member Sig="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
    <Member Sig="short IConvertible.ToInt16 (IFormatProvider provider);" />
    <Member Sig="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
    <Member Sig="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
    <Member Sig="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
  </Type>
  <Type Name="System.Int32">
    <Member Sig="bool IConvertible.ToBoolean (IFormatProvider provider);" />
    <Member Sig="byte IConvertible.ToByte (IFormatProvider provider);" />
    <Member Sig="char IConvertible.ToChar (IFormatProvider provider);" />
    <Member Sig="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
    <Member Sig="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
    <Member Sig="double IConvertible.ToDouble (IFormatProvider provider);" />
    <Member Sig="float IConvertible.ToSingle (IFormatProvider provider);" />
    <Member Sig="int IConvertible.ToInt32 (IFormatProvider provider);" />
    <Member Sig="long IConvertible.ToInt64 (IFormatProvider provider);" />
    <Member Sig="object IConvertible.ToType (Type type, IFormatProvider provider);" />
    <Member Sig="public bool Equals (int obj);" />
    <Member Sig="public const int MaxValue = 2147483647;" />
    <Member Sig="public const int MinValue = -2147483648;" />
    <Member Sig="public int CompareTo (int value);" />
    <Member Sig="public int CompareTo (object value);" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool TryParse (string s, out int result);" />
    <Member Sig="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out int result);" />
    <Member Sig="public static int Parse (string s);" />
    <Member Sig="public static int Parse (string s, IFormatProvider provider);" />
    <Member Sig="public static int Parse (string s, System.Globalization.NumberStyles style);" />
    <Member Sig="public static int Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
    <Member Sig="public string ToString (IFormatProvider provider);" />
    <Member Sig="public string ToString (string format);" />
    <Member Sig="public string ToString (string format, IFormatProvider provider);" />
    <Member Sig="public TypeCode GetTypeCode ();" />
    <Member Sig="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
    <Member Sig="short IConvertible.ToInt16 (IFormatProvider provider);" />
    <Member Sig="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
    <Member Sig="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
    <Member Sig="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
  </Type>
  <Type Name="System.Int64">
    <Member Sig="bool IConvertible.ToBoolean (IFormatProvider provider);" />
    <Member Sig="byte IConvertible.ToByte (IFormatProvider provider);" />
    <Member Sig="char IConvertible.ToChar (IFormatProvider provider);" />
    <Member Sig="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
    <Member Sig="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
    <Member Sig="double IConvertible.ToDouble (IFormatProvider provider);" />
    <Member Sig="float IConvertible.ToSingle (IFormatProvider provider);" />
    <Member Sig="int IConvertible.ToInt32 (IFormatProvider provider);" />
    <Member Sig="long IConvertible.ToInt64 (IFormatProvider provider);" />
    <Member Sig="object IConvertible.ToType (Type type, IFormatProvider provider);" />
    <Member Sig="public bool Equals (long obj);" />
    <Member Sig="public const long MaxValue = 9223372036854775807;" />
    <Member Sig="public const long MinValue = -9223372036854775808;" />
    <Member Sig="public int CompareTo (long value);" />
    <Member Sig="public int CompareTo (object value);" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool TryParse (string s, out long result);" />
    <Member Sig="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out long result);" />
    <Member Sig="public static long Parse (string s);" />
    <Member Sig="public static long Parse (string s, IFormatProvider provider);" />
    <Member Sig="public static long Parse (string s, System.Globalization.NumberStyles style);" />
    <Member Sig="public static long Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
    <Member Sig="public string ToString (IFormatProvider provider);" />
    <Member Sig="public string ToString (string format);" />
    <Member Sig="public string ToString (string format, IFormatProvider provider);" />
    <Member Sig="public TypeCode GetTypeCode ();" />
    <Member Sig="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
    <Member Sig="short IConvertible.ToInt16 (IFormatProvider provider);" />
    <Member Sig="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
    <Member Sig="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
    <Member Sig="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
  </Type>
  <Type Name="System.IntPtr">
    <Member Sig="public int ToInt32 ();" />
    <Member Sig="public IntPtr (int value);" />
    <Member Sig="public IntPtr (long value);" />
    <Member Sig="public IntPtr (void* value);" />
    <Member Sig="public long ToInt64 ();" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool op_Equality (IntPtr value1, IntPtr value2);" />
    <Member Sig="public static bool op_Inequality (IntPtr value1, IntPtr value2);" />
    <Member Sig="public static int op_Explicit (IntPtr value);" />
    <Member Sig="public static int Size { get; }" />
    <Member Sig="public static IntPtr op_Explicit (int value);" />
    <Member Sig="public static IntPtr op_Explicit (long value);" />
    <Member Sig="public static IntPtr op_Explicit (void* value);" />
    <Member Sig="public static long op_Explicit (IntPtr value);" />
    <Member Sig="public static readonly IntPtr Zero;" />
    <Member Sig="public static void* op_Explicit (IntPtr value);" />
    <Member Sig="public string ToString (string format);" />
    <Member Sig="public void* ToPointer ();" />
    <Member Sig="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.InvalidCastException">
    <Member Sig="protected InvalidCastException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public InvalidCastException ();" />
    <Member Sig="public InvalidCastException (string message);" />
    <Member Sig="public InvalidCastException (string message, Exception innerException);" />
    <Member Sig="public InvalidCastException (string message, int errorCode);" />
  </Type>
  <Type Name="System.InvalidOperationException">
    <Member Sig="protected InvalidOperationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public InvalidOperationException ();" />
    <Member Sig="public InvalidOperationException (string message);" />
    <Member Sig="public InvalidOperationException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.InvalidProgramException">
    <Member Sig="public InvalidProgramException ();" />
    <Member Sig="public InvalidProgramException (string message);" />
    <Member Sig="public InvalidProgramException (string message, Exception inner);" />
  </Type>
  <Type Name="System.IO.BinaryReader">
    <Member Sig="protected int Read7BitEncodedInt ();" />
    <Member Sig="protected virtual void Dispose (bool disposing);" />
    <Member Sig="protected virtual void FillBuffer (int numBytes);" />
    <Member Sig="public BinaryReader (System.IO.Stream input);" />
    <Member Sig="public BinaryReader (System.IO.Stream input, System.Text.Encoding encoding);" />
    <Member Sig="public virtual bool ReadBoolean ();" />
    <Member Sig="public virtual byte ReadByte ();" />
    <Member Sig="public virtual byte[] ReadBytes (int count);" />
    <Member Sig="public virtual char ReadChar ();" />
    <Member Sig="public virtual char[] ReadChars (int count);" />
    <Member Sig="public virtual decimal ReadDecimal ();" />
    <Member Sig="public virtual double ReadDouble ();" />
    <Member Sig="public virtual float ReadSingle ();" />
    <Member Sig="public virtual int PeekChar ();" />
    <Member Sig="public virtual int Read ();" />
    <Member Sig="public virtual int Read (byte[] buffer, int index, int count);" />
    <Member Sig="public virtual int Read (char[] buffer, int index, int count);" />
    <Member Sig="public virtual int ReadInt32 ();" />
    <Member Sig="public virtual long ReadInt64 ();" />
    <Member Sig="public virtual sbyte ReadSByte ();" />
    <Member Sig="public virtual short ReadInt16 ();" />
    <Member Sig="public virtual string ReadString ();" />
    <Member Sig="public virtual System.IO.Stream BaseStream { get; }" />
    <Member Sig="public virtual uint ReadUInt32 ();" />
    <Member Sig="public virtual ulong ReadUInt64 ();" />
    <Member Sig="public virtual ushort ReadUInt16 ();" />
    <Member Sig="public virtual void Close ();" />
    <Member Sig="void IDisposable.Dispose ();" />
  </Type>
  <Type Name="System.IO.BinaryWriter">
    <Member Sig="protected BinaryWriter ();" />
    <Member Sig="protected System.IO.Stream OutStream;" />
    <Member Sig="protected virtual void Dispose (bool disposing);" />
    <Member Sig="protected void Write7BitEncodedInt (int value);" />
    <Member Sig="public BinaryWriter (System.IO.Stream output);" />
    <Member Sig="public BinaryWriter (System.IO.Stream output, System.Text.Encoding encoding);" />
    <Member Sig="public static readonly System.IO.BinaryWriter Null;" />
    <Member Sig="public virtual long Seek (int offset, System.IO.SeekOrigin origin);" />
    <Member Sig="public virtual System.IO.Stream BaseStream { get; }" />
    <Member Sig="public virtual void Close ();" />
    <Member Sig="public virtual void Flush ();" />
    <Member Sig="public virtual void Write (bool value);" />
    <Member Sig="public virtual void Write (byte value);" />
    <Member Sig="public virtual void Write (byte[] buffer);" />
    <Member Sig="public virtual void Write (byte[] buffer, int index, int count);" />
    <Member Sig="public virtual void Write (char ch);" />
    <Member Sig="public virtual void Write (char[] chars);" />
    <Member Sig="public virtual void Write (char[] chars, int index, int count);" />
    <Member Sig="public virtual void Write (decimal value);" />
    <Member Sig="public virtual void Write (double value);" />
    <Member Sig="public virtual void Write (float value);" />
    <Member Sig="public virtual void Write (int value);" />
    <Member Sig="public virtual void Write (long value);" />
    <Member Sig="public virtual void Write (sbyte value);" />
    <Member Sig="public virtual void Write (short value);" />
    <Member Sig="public virtual void Write (string value);" />
    <Member Sig="public virtual void Write (uint value);" />
    <Member Sig="public virtual void Write (ulong value);" />
    <Member Sig="public virtual void Write (ushort value);" />
    <Member Sig="void IDisposable.Dispose ();" />
  </Type>
  <Type Name="System.IO.BufferedStream">
    <Member Sig="protected override void Dispose (bool disposing);" />
    <Member Sig="public BufferedStream (System.IO.Stream stream);" />
    <Member Sig="public BufferedStream (System.IO.Stream stream, int bufferSize);" />
    <Member Sig="public override bool CanRead { get; }" />
    <Member Sig="public override bool CanSeek { get; }" />
    <Member Sig="public override bool CanWrite { get; }" />
    <Member Sig="public override int Read (byte[] array, int offset, int count);" />
    <Member Sig="public override int ReadByte ();" />
    <Member Sig="public override long Length { get; }" />
    <Member Sig="public override long Position { get; set; }" />
    <Member Sig="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
    <Member Sig="public override void Flush ();" />
    <Member Sig="public override void SetLength (long value);" />
    <Member Sig="public override void Write (byte[] array, int offset, int count);" />
    <Member Sig="public override void WriteByte (byte value);" />
  </Type>
  <Type Name="System.IO.Directory">
    <Member Sig="public static bool Exists (string path);" />
    <Member Sig="public static DateTime GetCreationTime (string path);" />
    <Member Sig="public static DateTime GetCreationTimeUtc (string path);" />
    <Member Sig="public static DateTime GetLastAccessTime (string path);" />
    <Member Sig="public static DateTime GetLastAccessTimeUtc (string path);" />
    <Member Sig="public static DateTime GetLastWriteTime (string path);" />
    <Member Sig="public static DateTime GetLastWriteTimeUtc (string path);" />
    <Member Sig="public static string GetCurrentDirectory ();" />
    <Member Sig="public static string GetDirectoryRoot (string path);" />
    <Member Sig="public static string[] GetDirectories (string path);" />
    <Member Sig="public static string[] GetDirectories (string path, string searchPattern);" />
    <Member Sig="public static string[] GetDirectories (string path, string searchPattern, System.IO.SearchOption searchOption);" />
    <Member Sig="public static string[] GetFiles (string path);" />
    <Member Sig="public static string[] GetFiles (string path, string searchPattern);" />
    <Member Sig="public static string[] GetFiles (string path, string searchPattern, System.IO.SearchOption searchOption);" />
    <Member Sig="public static string[] GetFileSystemEntries (string path);" />
    <Member Sig="public static string[] GetFileSystemEntries (string path, string searchPattern);" />
    <Member Sig="public static string[] GetLogicalDrives ();" />
    <Member Sig="public static System.IO.DirectoryInfo CreateDirectory (string path);" />
    <Member Sig="public static System.IO.DirectoryInfo CreateDirectory (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);" />
    <Member Sig="public static System.IO.DirectoryInfo GetParent (string path);" />
    <Member Sig="public static System.Security.AccessControl.DirectorySecurity GetAccessControl (string path);" />
    <Member Sig="public static System.Security.AccessControl.DirectorySecurity GetAccessControl (string path, System.Security.AccessControl.AccessControlSections includeSections);" />
    <Member Sig="public static void Delete (string path);" />
    <Member Sig="public static void Delete (string path, bool recursive);" />
    <Member Sig="public static void Move (string sourceDirName, string destDirName);" />
    <Member Sig="public static void SetAccessControl (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);" />
    <Member Sig="public static void SetCreationTime (string path, DateTime creationTime);" />
    <Member Sig="public static void SetCreationTimeUtc (string path, DateTime creationTimeUtc);" />
    <Member Sig="public static void SetCurrentDirectory (string path);" />
    <Member Sig="public static void SetLastAccessTime (string path, DateTime lastAccessTime);" />
    <Member Sig="public static void SetLastAccessTimeUtc (string path, DateTime lastAccessTimeUtc);" />
    <Member Sig="public static void SetLastWriteTime (string path, DateTime lastWriteTime);" />
    <Member Sig="public static void SetLastWriteTimeUtc (string path, DateTime lastWriteTimeUtc);" />
  </Type>
  <Type Name="System.IO.DirectoryInfo">
    <Member Sig="public DirectoryInfo (string path);" />
    <Member Sig="public override bool Exists { get; }" />
    <Member Sig="public override string Name { get; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public override void Delete ();" />
    <Member Sig="public System.IO.DirectoryInfo CreateSubdirectory (string path);" />
    <Member Sig="public System.IO.DirectoryInfo CreateSubdirectory (string path, System.Security.AccessControl.DirectorySecurity directorySecurity);" />
    <Member Sig="public System.IO.DirectoryInfo Parent { get; }" />
    <Member Sig="public System.IO.DirectoryInfo Root { get; }" />
    <Member Sig="public System.IO.DirectoryInfo[] GetDirectories ();" />
    <Member Sig="public System.IO.DirectoryInfo[] GetDirectories (string searchPattern);" />
    <Member Sig="public System.IO.DirectoryInfo[] GetDirectories (string searchPattern, System.IO.SearchOption searchOption);" />
    <Member Sig="public System.IO.FileInfo[] GetFiles ();" />
    <Member Sig="public System.IO.FileInfo[] GetFiles (string searchPattern);" />
    <Member Sig="public System.IO.FileInfo[] GetFiles (string searchPattern, System.IO.SearchOption searchOption);" />
    <Member Sig="public System.IO.FileSystemInfo[] GetFileSystemInfos ();" />
    <Member Sig="public System.IO.FileSystemInfo[] GetFileSystemInfos (string searchPattern);" />
    <Member Sig="public System.Security.AccessControl.DirectorySecurity GetAccessControl ();" />
    <Member Sig="public System.Security.AccessControl.DirectorySecurity GetAccessControl (System.Security.AccessControl.AccessControlSections includeSections);" />
    <Member Sig="public void Create ();" />
    <Member Sig="public void Create (System.Security.AccessControl.DirectorySecurity directorySecurity);" />
    <Member Sig="public void Delete (bool recursive);" />
    <Member Sig="public void MoveTo (string destDirName);" />
    <Member Sig="public void SetAccessControl (System.Security.AccessControl.DirectorySecurity directorySecurity);" />
  </Type>
  <Type Name="System.IO.DirectoryNotFoundException">
    <Member Sig="protected DirectoryNotFoundException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public DirectoryNotFoundException ();" />
    <Member Sig="public DirectoryNotFoundException (string message);" />
    <Member Sig="public DirectoryNotFoundException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.IO.DriveInfo">
    <Member Sig="public bool IsReady { get; }" />
    <Member Sig="public DriveInfo (string driveName);" />
    <Member Sig="public long AvailableFreeSpace { get; }" />
    <Member Sig="public long TotalFreeSpace { get; }" />
    <Member Sig="public long TotalSize { get; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static System.IO.DriveInfo[] GetDrives ();" />
    <Member Sig="public string DriveFormat { get; }" />
    <Member Sig="public string Name { get; }" />
    <Member Sig="public string VolumeLabel { get; set; }" />
    <Member Sig="public System.IO.DirectoryInfo RootDirectory { get; }" />
    <Member Sig="public System.IO.DriveType DriveType { get; }" />
    <Member Sig="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.IO.DriveNotFoundException">
    <Member Sig="protected DriveNotFoundException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public DriveNotFoundException ();" />
    <Member Sig="public DriveNotFoundException (string message);" />
    <Member Sig="public DriveNotFoundException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.IO.DriveType">
    <Member Sig="CDRom" />
    <Member Sig="Fixed" />
    <Member Sig="Network" />
    <Member Sig="NoRootDirectory" />
    <Member Sig="Ram" />
    <Member Sig="Removable" />
    <Member Sig="Unknown" />
  </Type>
  <Type Name="System.IO.EndOfStreamException">
    <Member Sig="protected EndOfStreamException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public EndOfStreamException ();" />
    <Member Sig="public EndOfStreamException (string message);" />
    <Member Sig="public EndOfStreamException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.IO.File">
    <Member Sig="public static bool Exists (string path);" />
    <Member Sig="public static byte[] ReadAllBytes (string path);" />
    <Member Sig="public static DateTime GetCreationTime (string path);" />
    <Member Sig="public static DateTime GetCreationTimeUtc (string path);" />
    <Member Sig="public static DateTime GetLastAccessTime (string path);" />
    <Member Sig="public static DateTime GetLastAccessTimeUtc (string path);" />
    <Member Sig="public static DateTime GetLastWriteTime (string path);" />
    <Member Sig="public static DateTime GetLastWriteTimeUtc (string path);" />
    <Member Sig="public static string ReadAllText (string path);" />
    <Member Sig="public static string ReadAllText (string path, System.Text.Encoding encoding);" />
    <Member Sig="public static string[] ReadAllLines (string path);" />
    <Member Sig="public static string[] ReadAllLines (string path, System.Text.Encoding encoding);" />
    <Member Sig="public static System.IO.FileAttributes GetAttributes (string path);" />
    <Member Sig="public static System.IO.FileStream Create (string path);" />
    <Member Sig="public static System.IO.FileStream Create (string path, int bufferSize);" />
    <Member Sig="public static System.IO.FileStream Create (string path, int bufferSize, System.IO.FileOptions options);" />
    <Member Sig="public static System.IO.FileStream Create (string path, int bufferSize, System.IO.FileOptions options, System.Security.AccessControl.FileSecurity fileSecurity);" />
    <Member Sig="public static System.IO.FileStream Open (string path, System.IO.FileMode mode);" />
    <Member Sig="public static System.IO.FileStream Open (string path, System.IO.FileMode mode, System.IO.FileAccess access);" />
    <Member Sig="public static System.IO.FileStream Open (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);" />
    <Member Sig="public static System.IO.FileStream OpenRead (string path);" />
    <Member Sig="public static System.IO.FileStream OpenWrite (string path);" />
    <Member Sig="public static System.IO.StreamReader OpenText (string path);" />
    <Member Sig="public static System.IO.StreamWriter AppendText (string path);" />
    <Member Sig="public static System.IO.StreamWriter CreateText (string path);" />
    <Member Sig="public static System.Security.AccessControl.FileSecurity GetAccessControl (string path);" />
    <Member Sig="public static System.Security.AccessControl.FileSecurity GetAccessControl (string path, System.Security.AccessControl.AccessControlSections includeSections);" />
    <Member Sig="public static void AppendAllText (string path, string contents);" />
    <Member Sig="public static void AppendAllText (string path, string contents, System.Text.Encoding encoding);" />
    <Member Sig="public static void Copy (string sourceFileName, string destFileName);" />
    <Member Sig="public static void Copy (string sourceFileName, string destFileName, bool overwrite);" />
    <Member Sig="public static void Decrypt (string path);" />
    <Member Sig="public static void Delete (string path);" />
    <Member Sig="public static void Encrypt (string path);" />
    <Member Sig="public static void Move (string sourceFileName, string destFileName);" />
    <Member Sig="public static void Replace (string sourceFileName, string destinationFileName, string destinationBackupFileName);" />
    <Member Sig="public static void Replace (string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);" />
    <Member Sig="public static void SetAccessControl (string path, System.Security.AccessControl.FileSecurity fileSecurity);" />
    <Member Sig="public static void SetAttributes (string path, System.IO.FileAttributes fileAttributes);" />
    <Member Sig="public static void SetCreationTime (string path, DateTime creationTime);" />
    <Member Sig="public static void SetCreationTimeUtc (string path, DateTime creationTimeUtc);" />
    <Member Sig="public static void SetLastAccessTime (string path, DateTime lastAccessTime);" />
    <Member Sig="public static void SetLastAccessTimeUtc (string path, DateTime lastAccessTimeUtc);" />
    <Member Sig="public static void SetLastWriteTime (string path, DateTime lastWriteTime);" />
    <Member Sig="public static void SetLastWriteTimeUtc (string path, DateTime lastWriteTimeUtc);" />
    <Member Sig="public static void WriteAllBytes (string path, byte[] bytes);" />
    <Member Sig="public static void WriteAllLines (string path, string[] contents);" />
    <Member Sig="public static void WriteAllLines (string path, string[] contents, System.Text.Encoding encoding);" />
    <Member Sig="public static void WriteAllText (string path, string contents);" />
    <Member Sig="public static void WriteAllText (string path, string contents, System.Text.Encoding encoding);" />
  </Type>
  <Type Name="System.IO.FileAccess">
    <Member Sig="Read" />
    <Member Sig="ReadWrite" />
    <Member Sig="Write" />
  </Type>
  <Type Name="System.IO.FileAttributes">
    <Member Sig="Archive" />
    <Member Sig="Compressed" />
    <Member Sig="Device" />
    <Member Sig="Directory" />
    <Member Sig="Encrypted" />
    <Member Sig="Hidden" />
    <Member Sig="Normal" />
    <Member Sig="NotContentIndexed" />
    <Member Sig="Offline" />
    <Member Sig="ReadOnly" />
    <Member Sig="ReparsePoint" />
    <Member Sig="SparseFile" />
    <Member Sig="System" />
    <Member Sig="Temporary" />
  </Type>
  <Type Name="System.IO.FileInfo">
    <Member Sig="public bool IsReadOnly { get; set; }" />
    <Member Sig="public FileInfo (string fileName);" />
    <Member Sig="public long Length { get; }" />
    <Member Sig="public override bool Exists { get; }" />
    <Member Sig="public override string Name { get; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public override void Delete ();" />
    <Member Sig="public string DirectoryName { get; }" />
    <Member Sig="public System.IO.DirectoryInfo Directory { get; }" />
    <Member Sig="public System.IO.FileInfo CopyTo (string destFileName);" />
    <Member Sig="public System.IO.FileInfo CopyTo (string destFileName, bool overwrite);" />
    <Member Sig="public System.IO.FileInfo Replace (string destinationFileName, string destinationBackupFileName);" />
    <Member Sig="public System.IO.FileInfo Replace (string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors);" />
    <Member Sig="public System.IO.FileStream Create ();" />
    <Member Sig="public System.IO.FileStream Open (System.IO.FileMode mode);" />
    <Member Sig="public System.IO.FileStream Open (System.IO.FileMode mode, System.IO.FileAccess access);" />
    <Member Sig="public System.IO.FileStream Open (System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);" />
    <Member Sig="public System.IO.FileStream OpenRead ();" />
    <Member Sig="public System.IO.FileStream OpenWrite ();" />
    <Member Sig="public System.IO.StreamReader OpenText ();" />
    <Member Sig="public System.IO.StreamWriter AppendText ();" />
    <Member Sig="public System.IO.StreamWriter CreateText ();" />
    <Member Sig="public System.Security.AccessControl.FileSecurity GetAccessControl ();" />
    <Member Sig="public System.Security.AccessControl.FileSecurity GetAccessControl (System.Security.AccessControl.AccessControlSections includeSections);" />
    <Member Sig="public void Decrypt ();" />
    <Member Sig="public void Encrypt ();" />
    <Member Sig="public void MoveTo (string destFileName);" />
    <Member Sig="public void SetAccessControl (System.Security.AccessControl.FileSecurity fileSecurity);" />
  </Type>
  <Type Name="System.IO.FileLoadException">
    <Member Sig="protected FileLoadException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public FileLoadException ();" />
    <Member Sig="public FileLoadException (string message);" />
    <Member Sig="public FileLoadException (string message, Exception inner);" />
    <Member Sig="public FileLoadException (string message, string fileName);" />
    <Member Sig="public FileLoadException (string message, string fileName, Exception inner);" />
    <Member Sig="public override string Message { get; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public string FileName { get; }" />
    <Member Sig="public string FusionLog { get; }" />
  </Type>
  <Type Name="System.IO.FileMode">
    <Member Sig="Append" />
    <Member Sig="Create" />
    <Member Sig="CreateNew" />
    <Member Sig="Open" />
    <Member Sig="OpenOrCreate" />
    <Member Sig="Truncate" />
  </Type>
  <Type Name="System.IO.FileNotFoundException">
    <Member Sig="protected FileNotFoundException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public FileNotFoundException ();" />
    <Member Sig="public FileNotFoundException (string message);" />
    <Member Sig="public FileNotFoundException (string message, Exception innerException);" />
    <Member Sig="public FileNotFoundException (string message, string fileName);" />
    <Member Sig="public FileNotFoundException (string message, string fileName, Exception innerException);" />
    <Member Sig="public override string Message { get; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public string FileName { get; }" />
    <Member Sig="public string FusionLog { get; }" />
  </Type>
  <Type Name="System.IO.FileOptions">
    <Member Sig="Asynchronous" />
    <Member Sig="DeleteOnClose" />
    <Member Sig="Encrypted" />
    <Member Sig="None" />
    <Member Sig="RandomAccess" />
    <Member Sig="SequentialScan" />
    <Member Sig="WriteThrough" />
  </Type>
  <Type Name="System.IO.FileShare">
    <Member Sig="Delete" />
    <Member Sig="Inheritable" />
    <Member Sig="None" />
    <Member Sig="Read" />
    <Member Sig="ReadWrite" />
    <Member Sig="Write" />
  </Type>
  <Type Name="System.IO.FileStream">
    <Member Sig="~FileStream ();" />
    <Member Sig="protected override void Dispose (bool disposing);" />
    <Member Sig="public FileStream (IntPtr handle, System.IO.FileAccess access);" />
    <Member Sig="public FileStream (IntPtr handle, System.IO.FileAccess access, bool ownsHandle);" />
    <Member Sig="public FileStream (IntPtr handle, System.IO.FileAccess access, bool ownsHandle, int bufferSize);" />
    <Member Sig="public FileStream (IntPtr handle, System.IO.FileAccess access, bool ownsHandle, int bufferSize, bool isAsync);" />
    <Member Sig="public FileStream (Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access);" />
    <Member Sig="public FileStream (Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize);" />
    <Member Sig="public FileStream (Microsoft.Win32.SafeHandles.SafeFileHandle handle, System.IO.FileAccess access, int bufferSize, bool isAsync);" />
    <Member Sig="public FileStream (string path, System.IO.FileMode mode);" />
    <Member Sig="public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access);" />
    <Member Sig="public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);" />
    <Member Sig="public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize);" />
    <Member Sig="public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, bool useAsync);" />
    <Member Sig="public FileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options);" />
    <Member Sig="public FileStream (string path, System.IO.FileMode mode, System.Security.AccessControl.FileSystemRights rights, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options);" />
    <Member Sig="public FileStream (string path, System.IO.FileMode mode, System.Security.AccessControl.FileSystemRights rights, System.IO.FileShare share, int bufferSize, System.IO.FileOptions options, System.Security.AccessControl.FileSecurity fileSecurity);" />
    <Member Sig="public override bool CanRead { get; }" />
    <Member Sig="public override bool CanSeek { get; }" />
    <Member Sig="public override bool CanWrite { get; }" />
    <Member Sig="public override IAsyncResult BeginRead (byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject);" />
    <Member Sig="public override IAsyncResult BeginWrite (byte[] array, int offset, int numBytes, AsyncCallback userCallback, object stateObject);" />
    <Member Sig="public override int EndRead (IAsyncResult asyncResult);" />
    <Member Sig="public override int Read (byte[] array, int offset, int count);" />
    <Member Sig="public override int ReadByte ();" />
    <Member Sig="public override long Length { get; }" />
    <Member Sig="public override long Position { get; set; }" />
    <Member Sig="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
    <Member Sig="public override void EndWrite (IAsyncResult asyncResult);" />
    <Member Sig="public override void Flush ();" />
    <Member Sig="public override void SetLength (long value);" />
    <Member Sig="public override void Write (byte[] array, int offset, int count);" />
    <Member Sig="public override void WriteByte (byte value);" />
    <Member Sig="public string Name { get; }" />
    <Member Sig="public System.Security.AccessControl.FileSecurity GetAccessControl ();" />
    <Member Sig="public virtual bool IsAsync { get; }" />
    <Member Sig="public virtual IntPtr Handle { get; }" />
    <Member Sig="public virtual Microsoft.Win32.SafeHandles.SafeFileHandle SafeFileHandle { get; }" />
    <Member Sig="public virtual void Lock (long position, long length);" />
    <Member Sig="public virtual void Unlock (long position, long length);" />
    <Member Sig="public void SetAccessControl (System.Security.AccessControl.FileSecurity fileSecurity);" />
  </Type>
  <Type Name="System.IO.FileSystemInfo">
    <Member Sig="protected FileSystemInfo ();" />
    <Member Sig="protected FileSystemInfo (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="protected string FullPath;" />
    <Member Sig="protected string OriginalPath;" />
    <Member Sig="public abstract bool Exists { get; }" />
    <Member Sig="public abstract string Name { get; }" />
    <Member Sig="public abstract void Delete ();" />
    <Member Sig="public DateTime CreationTime { get; set; }" />
    <Member Sig="public DateTime CreationTimeUtc { get; set; }" />
    <Member Sig="public DateTime LastAccessTime { get; set; }" />
    <Member Sig="public DateTime LastAccessTimeUtc { get; set; }" />
    <Member Sig="public DateTime LastWriteTime { get; set; }" />
    <Member Sig="public DateTime LastWriteTimeUtc { get; set; }" />
    <Member Sig="public string Extension { get; }" />
    <Member Sig="public System.IO.FileAttributes Attributes { get; set; }" />
    <Member Sig="public virtual string FullName { get; }" />
    <Member Sig="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public void Refresh ();" />
  </Type>
  <Type Name="System.IO.IOException">
    <Member Sig="protected IOException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public IOException ();" />
    <Member Sig="public IOException (string message);" />
    <Member Sig="public IOException (string message, Exception innerException);" />
    <Member Sig="public IOException (string message, int hresult);" />
  </Type>
  <Type Name="System.IO.IsolatedStorage.INormalizeForIsolatedStorage">
    <Member Sig="public object Normalize ();" />
  </Type>
  <Type Name="System.IO.IsolatedStorage.IsolatedStorage">
    <Member Sig="protected abstract System.Security.Permissions.IsolatedStoragePermission GetPermission (System.Security.PermissionSet ps);" />
    <Member Sig="protected IsolatedStorage ();" />
    <Member Sig="protected virtual char SeparatorExternal { get; }" />
    <Member Sig="protected virtual char SeparatorInternal { get; }" />
    <Member Sig="protected void InitStore (System.IO.IsolatedStorage.IsolatedStorageScope scope, Type appEvidenceType);" />
    <Member Sig="protected void InitStore (System.IO.IsolatedStorage.IsolatedStorageScope scope, Type domainEvidenceType, Type assemblyEvidenceType);" />
    <Member Sig="public abstract void Remove ();" />
    <Member Sig="public object ApplicationIdentity { get; }" />
    <Member Sig="public object AssemblyIdentity { get; }" />
    <Member Sig="public object DomainIdentity { get; }" />
    <Member Sig="public System.IO.IsolatedStorage.IsolatedStorageScope Scope { get; }" />
    <Member Sig="public virtual ulong CurrentSize { get; }" />
    <Member Sig="public virtual ulong MaximumSize { get; }" />
  </Type>
  <Type Name="System.IO.IsolatedStorage.IsolatedStorageException">
    <Member Sig="protected IsolatedStorageException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public IsolatedStorageException ();" />
    <Member Sig="public IsolatedStorageException (string message);" />
    <Member Sig="public IsolatedStorageException (string message, Exception inner);" />
  </Type>
  <Type Name="System.IO.IsolatedStorage.IsolatedStorageFile">
    <Member Sig="~IsolatedStorageFile ();" />
    <Member Sig="protected override System.Security.Permissions.IsolatedStoragePermission GetPermission (System.Security.PermissionSet ps);" />
    <Member Sig="public override ulong CurrentSize { get; }" />
    <Member Sig="public override ulong MaximumSize { get; }" />
    <Member Sig="public override void Remove ();" />
    <Member Sig="public static System.Collections.IEnumerator GetEnumerator (System.IO.IsolatedStorage.IsolatedStorageScope scope);" />
    <Member Sig="public static System.IO.IsolatedStorage.IsolatedStorageFile GetMachineStoreForApplication ();" />
    <Member Sig="public static System.IO.IsolatedStorage.IsolatedStorageFile GetMachineStoreForAssembly ();" />
    <Member Sig="public static System.IO.IsolatedStorage.IsolatedStorageFile GetMachineStoreForDomain ();" />
    <Member Sig="public static System.IO.IsolatedStorage.IsolatedStorageFile GetStore (System.IO.IsolatedStorage.IsolatedStorageScope scope, object applicationIdentity);" />
    <Member Sig="public static System.IO.IsolatedStorage.IsolatedStorageFile GetStore (System.IO.IsolatedStorage.IsolatedStorageScope scope, object domainIdentity, object assemblyIdentity);" />
    <Member Sig="public static System.IO.IsolatedStorage.IsolatedStorageFile GetStore (System.IO.IsolatedStorage.IsolatedStorageScope scope, System.Security.Policy.Evidence domainEvidence, Type domainEvidenceType, System.Security.Policy.Evidence assemblyEvidence, Type assemblyEvidenceType);" />
    <Member Sig="public static System.IO.IsolatedStorage.IsolatedStorageFile GetStore (System.IO.IsolatedStorage.IsolatedStorageScope scope, Type applicationEvidenceType);" />
    <Member Sig="public static System.IO.IsolatedStorage.IsolatedStorageFile GetStore (System.IO.IsolatedStorage.IsolatedStorageScope scope, Type domainEvidenceType, Type assemblyEvidenceType);" />
    <Member Sig="public static System.IO.IsolatedStorage.IsolatedStorageFile GetUserStoreForApplication ();" />
    <Member Sig="public static System.IO.IsolatedStorage.IsolatedStorageFile GetUserStoreForAssembly ();" />
    <Member Sig="public static System.IO.IsolatedStorage.IsolatedStorageFile GetUserStoreForDomain ();" />
    <Member Sig="public static void Remove (System.IO.IsolatedStorage.IsolatedStorageScope scope);" />
    <Member Sig="public string[] GetDirectoryNames (string searchPattern);" />
    <Member Sig="public string[] GetFileNames (string searchPattern);" />
    <Member Sig="public void Close ();" />
    <Member Sig="public void CreateDirectory (string dir);" />
    <Member Sig="public void DeleteDirectory (string dir);" />
    <Member Sig="public void DeleteFile (string file);" />
    <Member Sig="public void Dispose ();" />
  </Type>
  <Type Name="System.IO.IsolatedStorage.IsolatedStorageFileStream">
    <Member Sig="protected override void Dispose (bool disposing);" />
    <Member Sig="public IsolatedStorageFileStream (string path, System.IO.FileMode mode);" />
    <Member Sig="public IsolatedStorageFileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access);" />
    <Member Sig="public IsolatedStorageFileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share);" />
    <Member Sig="public IsolatedStorageFileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize);" />
    <Member Sig="public IsolatedStorageFileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, int bufferSize, System.IO.IsolatedStorage.IsolatedStorageFile isf);" />
    <Member Sig="public IsolatedStorageFileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.IO.IsolatedStorage.IsolatedStorageFile isf);" />
    <Member Sig="public IsolatedStorageFileStream (string path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.IsolatedStorage.IsolatedStorageFile isf);" />
    <Member Sig="public IsolatedStorageFileStream (string path, System.IO.FileMode mode, System.IO.IsolatedStorage.IsolatedStorageFile isf);" />
    <Member Sig="public override bool CanRead { get; }" />
    <Member Sig="public override bool CanSeek { get; }" />
    <Member Sig="public override bool CanWrite { get; }" />
    <Member Sig="public override bool IsAsync { get; }" />
    <Member Sig="public override IAsyncResult BeginRead (byte[] buffer, int offset, int numBytes, AsyncCallback userCallback, object stateObject);" />
    <Member Sig="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int numBytes, AsyncCallback userCallback, object stateObject);" />
    <Member Sig="public override int EndRead (IAsyncResult asyncResult);" />
    <Member Sig="public override int Read (byte[] buffer, int offset, int count);" />
    <Member Sig="public override int ReadByte ();" />
    <Member Sig="public override IntPtr Handle { get; }" />
    <Member Sig="public override long Length { get; }" />
    <Member Sig="public override long Position { get; set; }" />
    <Member Sig="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
    <Member Sig="public override Microsoft.Win32.SafeHandles.SafeFileHandle SafeFileHandle { get; }" />
    <Member Sig="public override void EndWrite (IAsyncResult asyncResult);" />
    <Member Sig="public override void Flush ();" />
    <Member Sig="public override void SetLength (long value);" />
    <Member Sig="public override void Write (byte[] buffer, int offset, int count);" />
    <Member Sig="public override void WriteByte (byte value);" />
  </Type>
  <Type Name="System.IO.IsolatedStorage.IsolatedStorageScope">
    <Member Sig="Application" />
    <Member Sig="Assembly" />
    <Member Sig="Domain" />
    <Member Sig="Machine" />
    <Member Sig="None" />
    <Member Sig="Roaming" />
    <Member Sig="User" />
  </Type>
  <Type Name="System.IO.MemoryStream">
    <Member Sig="protected override void Dispose (bool disposing);" />
    <Member Sig="public MemoryStream ();" />
    <Member Sig="public MemoryStream (byte[] buffer);" />
    <Member Sig="public MemoryStream (byte[] buffer, bool writable);" />
    <Member Sig="public MemoryStream (byte[] buffer, int index, int count);" />
    <Member Sig="public MemoryStream (byte[] buffer, int index, int count, bool writable);" />
    <Member Sig="public MemoryStream (byte[] buffer, int index, int count, bool writable, bool publiclyVisible);" />
    <Member Sig="public MemoryStream (int capacity);" />
    <Member Sig="public override bool CanRead { get; }" />
    <Member Sig="public override bool CanSeek { get; }" />
    <Member Sig="public override bool CanWrite { get; }" />
    <Member Sig="public override int Read (byte[] buffer, int offset, int count);" />
    <Member Sig="public override int ReadByte ();" />
    <Member Sig="public override long Length { get; }" />
    <Member Sig="public override long Position { get; set; }" />
    <Member Sig="public override long Seek (long offset, System.IO.SeekOrigin loc);" />
    <Member Sig="public override void Flush ();" />
    <Member Sig="public override void SetLength (long value);" />
    <Member Sig="public override void Write (byte[] buffer, int offset, int count);" />
    <Member Sig="public override void WriteByte (byte value);" />
    <Member Sig="public virtual byte[] GetBuffer ();" />
    <Member Sig="public virtual byte[] ToArray ();" />
    <Member Sig="public virtual int Capacity { get; set; }" />
    <Member Sig="public virtual void WriteTo (System.IO.Stream stream);" />
  </Type>
  <Type Name="System.IO.Path">
    <Member Sig="public static bool HasExtension (string path);" />
    <Member Sig="public static bool IsPathRooted (string path);" />
    <Member Sig="public static char[] GetInvalidFileNameChars ();" />
    <Member Sig="public static char[] GetInvalidPathChars ();" />
    <Member Sig="public static readonly char AltDirectorySeparatorChar;" />
    <Member Sig="public static readonly char DirectorySeparatorChar;" />
    <Member Sig="public static readonly char PathSeparator;" />
    <Member Sig="public static readonly char VolumeSeparatorChar;" />
    <Member Sig="public static readonly char[] InvalidPathChars;" />
    <Member Sig="public static string ChangeExtension (string path, string extension);" />
    <Member Sig="public static string Combine (string path1, string path2);" />
    <Member Sig="public static string GetDirectoryName (string path);" />
    <Member Sig="public static string GetExtension (string path);" />
    <Member Sig="public static string GetFileName (string path);" />
    <Member Sig="public static string GetFileNameWithoutExtension (string path);" />
    <Member Sig="public static string GetFullPath (string path);" />
    <Member Sig="public static string GetPathRoot (string path);" />
    <Member Sig="public static string GetRandomFileName ();" />
    <Member Sig="public static string GetTempFileName ();" />
    <Member Sig="public static string GetTempPath ();" />
  </Type>
  <Type Name="System.IO.PathTooLongException">
    <Member Sig="protected PathTooLongException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public PathTooLongException ();" />
    <Member Sig="public PathTooLongException (string message);" />
    <Member Sig="public PathTooLongException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.IO.SearchOption">
    <Member Sig="AllDirectories" />
    <Member Sig="TopDirectoryOnly" />
  </Type>
  <Type Name="System.IO.SeekOrigin">
    <Member Sig="Begin" />
    <Member Sig="Current" />
    <Member Sig="End" />
  </Type>
  <Type Name="System.IO.Stream">
    <Member Sig="protected Stream ();" />
    <Member Sig="protected virtual System.Threading.WaitHandle CreateWaitHandle ();" />
    <Member Sig="protected virtual void Dispose (bool disposing);" />
    <Member Sig="public abstract bool CanRead { get; }" />
    <Member Sig="public abstract bool CanSeek { get; }" />
    <Member Sig="public abstract bool CanWrite { get; }" />
    <Member Sig="public abstract int Read (byte[] buffer, int offset, int count);" />
    <Member Sig="public abstract long Length { get; }" />
    <Member Sig="public abstract long Position { get; set; }" />
    <Member Sig="public abstract long Seek (long offset, System.IO.SeekOrigin origin);" />
    <Member Sig="public abstract void Flush ();" />
    <Member Sig="public abstract void SetLength (long value);" />
    <Member Sig="public abstract void Write (byte[] buffer, int offset, int count);" />
    <Member Sig="public static readonly System.IO.Stream Null;" />
    <Member Sig="public static System.IO.Stream Synchronized (System.IO.Stream stream);" />
    <Member Sig="public virtual bool CanTimeout { get; }" />
    <Member Sig="public virtual IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" />
    <Member Sig="public virtual IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback callback, object state);" />
    <Member Sig="public virtual int EndRead (IAsyncResult asyncResult);" />
    <Member Sig="public virtual int ReadByte ();" />
    <Member Sig="public virtual int ReadTimeout { get; set; }" />
    <Member Sig="public virtual int WriteTimeout { get; set; }" />
    <Member Sig="public virtual void Close ();" />
    <Member Sig="public virtual void EndWrite (IAsyncResult asyncResult);" />
    <Member Sig="public virtual void WriteByte (byte value);" />
    <Member Sig="public void Dispose ();" />
  </Type>
  <Type Name="System.IO.StreamReader">
    <Member Sig="protected override void Dispose (bool disposing);" />
    <Member Sig="public bool EndOfStream { get; }" />
    <Member Sig="public override int Peek ();" />
    <Member Sig="public override int Read ();" />
    <Member Sig="public override int Read (char[] buffer, int index, int count);" />
    <Member Sig="public override string ReadLine ();" />
    <Member Sig="public override string ReadToEnd ();" />
    <Member Sig="public override void Close ();" />
    <Member Sig="public static readonly System.IO.StreamReader Null;" />
    <Member Sig="public StreamReader (string path);" />
    <Member Sig="public StreamReader (string path, bool detectEncodingFromByteOrderMarks);" />
    <Member Sig="public StreamReader (string path, System.Text.Encoding encoding);" />
    <Member Sig="public StreamReader (string path, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks);" />
    <Member Sig="public StreamReader (string path, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize);" />
    <Member Sig="public StreamReader (System.IO.Stream stream);" />
    <Member Sig="public StreamReader (System.IO.Stream stream, bool detectEncodingFromByteOrderMarks);" />
    <Member Sig="public StreamReader (System.IO.Stream stream, System.Text.Encoding encoding);" />
    <Member Sig="public StreamReader (System.IO.Stream stream, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks);" />
    <Member Sig="public StreamReader (System.IO.Stream stream, System.Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize);" />
    <Member Sig="public virtual System.IO.Stream BaseStream { get; }" />
    <Member Sig="public virtual System.Text.Encoding CurrentEncoding { get; }" />
    <Member Sig="public void DiscardBufferedData ();" />
  </Type>
  <Type Name="System.IO.StreamWriter">
    <Member Sig="protected override void Dispose (bool disposing);" />
    <Member Sig="public override System.Text.Encoding Encoding { get; }" />
    <Member Sig="public override void Close ();" />
    <Member Sig="public override void Flush ();" />
    <Member Sig="public override void Write (char value);" />
    <Member Sig="public override void Write (char[] buffer);" />
    <Member Sig="public override void Write (char[] buffer, int index, int count);" />
    <Member Sig="public override void Write (string value);" />
    <Member Sig="public static readonly System.IO.StreamWriter Null;" />
    <Member Sig="public StreamWriter (string path);" />
    <Member Sig="public StreamWriter (string path, bool append);" />
    <Member Sig="public StreamWriter (string path, bool append, System.Text.Encoding encoding);" />
    <Member Sig="public StreamWriter (string path, bool append, System.Text.Encoding encoding, int bufferSize);" />
    <Member Sig="public StreamWriter (System.IO.Stream stream);" />
    <Member Sig="public StreamWriter (System.IO.Stream stream, System.Text.Encoding encoding);" />
    <Member Sig="public StreamWriter (System.IO.Stream stream, System.Text.Encoding encoding, int bufferSize);" />
    <Member Sig="public virtual bool AutoFlush { get; set; }" />
    <Member Sig="public virtual System.IO.Stream BaseStream { get; }" />
  </Type>
  <Type Name="System.IO.StringReader">
    <Member Sig="protected override void Dispose (bool disposing);" />
    <Member Sig="public override int Peek ();" />
    <Member Sig="public override int Read ();" />
    <Member Sig="public override int Read (char[] buffer, int index, int count);" />
    <Member Sig="public override string ReadLine ();" />
    <Member Sig="public override string ReadToEnd ();" />
    <Member Sig="public override void Close ();" />
    <Member Sig="public StringReader (string s);" />
  </Type>
  <Type Name="System.IO.StringWriter">
    <Member Sig="protected override void Dispose (bool disposing);" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public override System.Text.Encoding Encoding { get; }" />
    <Member Sig="public override void Close ();" />
    <Member Sig="public override void Write (char value);" />
    <Member Sig="public override void Write (char[] buffer, int index, int count);" />
    <Member Sig="public override void Write (string value);" />
    <Member Sig="public StringWriter ();" />
    <Member Sig="public StringWriter (IFormatProvider formatProvider);" />
    <Member Sig="public StringWriter (System.Text.StringBuilder sb);" />
    <Member Sig="public StringWriter (System.Text.StringBuilder sb, IFormatProvider formatProvider);" />
    <Member Sig="public virtual System.Text.StringBuilder GetStringBuilder ();" />
  </Type>
  <Type Name="System.IO.TextReader">
    <Member Sig="protected TextReader ();" />
    <Member Sig="protected virtual void Dispose (bool disposing);" />
    <Member Sig="public static readonly System.IO.TextReader Null;" />
    <Member Sig="public static System.IO.TextReader Synchronized (System.IO.TextReader reader);" />
    <Member Sig="public virtual int Peek ();" />
    <Member Sig="public virtual int Read ();" />
    <Member Sig="public virtual int Read (char[] buffer, int index, int count);" />
    <Member Sig="public virtual int ReadBlock (char[] buffer, int index, int count);" />
    <Member Sig="public virtual string ReadLine ();" />
    <Member Sig="public virtual string ReadToEnd ();" />
    <Member Sig="public virtual void Close ();" />
    <Member Sig="public void Dispose ();" />
  </Type>
  <Type Name="System.IO.TextWriter">
    <Member Sig="protected char[] CoreNewLine;" />
    <Member Sig="protected TextWriter ();" />
    <Member Sig="protected TextWriter (IFormatProvider formatProvider);" />
    <Member Sig="protected virtual void Dispose (bool disposing);" />
    <Member Sig="public abstract System.Text.Encoding Encoding { get; }" />
    <Member Sig="public static readonly System.IO.TextWriter Null;" />
    <Member Sig="public static System.IO.TextWriter Synchronized (System.IO.TextWriter writer);" />
    <Member Sig="public virtual IFormatProvider FormatProvider { get; }" />
    <Member Sig="public virtual string NewLine { get; set; }" />
    <Member Sig="public virtual void Close ();" />
    <Member Sig="public virtual void Flush ();" />
    <Member Sig="public virtual void Write (bool value);" />
    <Member Sig="public virtual void Write (char value);" />
    <Member Sig="public virtual void Write (char[] buffer);" />
    <Member Sig="public virtual void Write (char[] buffer, int index, int count);" />
    <Member Sig="public virtual void Write (decimal value);" />
    <Member Sig="public virtual void Write (double value);" />
    <Member Sig="public virtual void Write (float value);" />
    <Member Sig="public virtual void Write (int value);" />
    <Member Sig="public virtual void Write (long value);" />
    <Member Sig="public virtual void Write (object value);" />
    <Member Sig="public virtual void Write (string format, object arg0);" />
    <Member Sig="public virtual void Write (string format, object arg0, object arg1);" />
    <Member Sig="public virtual void Write (string format, object arg0, object arg1, object arg2);" />
    <Member Sig="public virtual void Write (string format, object[] arg);" />
    <Member Sig="public virtual void Write (string value);" />
    <Member Sig="public virtual void Write (uint value);" />
    <Member Sig="public virtual void Write (ulong value);" />
    <Member Sig="public virtual void WriteLine ();" />
    <Member Sig="public virtual void WriteLine (bool value);" />
    <Member Sig="public virtual void WriteLine (char value);" />
    <Member Sig="public virtual void WriteLine (char[] buffer);" />
    <Member Sig="public virtual void WriteLine (char[] buffer, int index, int count);" />
    <Member Sig="public virtual void WriteLine (decimal value);" />
    <Member Sig="public virtual void WriteLine (double value);" />
    <Member Sig="public virtual void WriteLine (float value);" />
    <Member Sig="public virtual void WriteLine (int value);" />
    <Member Sig="public virtual void WriteLine (long value);" />
    <Member Sig="public virtual void WriteLine (object value);" />
    <Member Sig="public virtual void WriteLine (string format, object arg0);" />
    <Member Sig="public virtual void WriteLine (string format, object arg0, object arg1);" />
    <Member Sig="public virtual void WriteLine (string format, object arg0, object arg1, object arg2);" />
    <Member Sig="public virtual void WriteLine (string format, object[] arg);" />
    <Member Sig="public virtual void WriteLine (string value);" />
    <Member Sig="public virtual void WriteLine (uint value);" />
    <Member Sig="public virtual void WriteLine (ulong value);" />
    <Member Sig="public void Dispose ();" />
  </Type>
  <Type Name="System.IO.UnmanagedMemoryStream">
    <Member Sig="protected override void Dispose (bool disposing);" />
    <Member Sig="protected UnmanagedMemoryStream ();" />
    <Member Sig="protected void Initialize (byte* pointer, long length, long capacity, System.IO.FileAccess access);" />
    <Member Sig="public byte* PositionPointer { get; set; }" />
    <Member Sig="public long Capacity { get; }" />
    <Member Sig="public override bool CanRead { get; }" />
    <Member Sig="public override bool CanSeek { get; }" />
    <Member Sig="public override bool CanWrite { get; }" />
    <Member Sig="public override int Read (byte[] buffer, int offset, int count);" />
    <Member Sig="public override int ReadByte ();" />
    <Member Sig="public override long Length { get; }" />
    <Member Sig="public override long Position { get; set; }" />
    <Member Sig="public override long Seek (long offset, System.IO.SeekOrigin loc);" />
    <Member Sig="public override void Flush ();" />
    <Member Sig="public override void SetLength (long value);" />
    <Member Sig="public override void Write (byte[] buffer, int offset, int count);" />
    <Member Sig="public override void WriteByte (byte value);" />
    <Member Sig="public UnmanagedMemoryStream (byte* pointer, long length);" />
    <Member Sig="public UnmanagedMemoryStream (byte* pointer, long length, long capacity, System.IO.FileAccess access);" />
  </Type>
  <Type Name="System.IServiceProvider">
    <Member Sig="public object GetService (Type serviceType);" />
  </Type>
  <Type Name="System.LoaderOptimization">
    <Member Sig="DisallowBindings" />
    <Member Sig="DomainMask" />
    <Member Sig="MultiDomain" />
    <Member Sig="MultiDomainHost" />
    <Member Sig="NotSpecified" />
    <Member Sig="SingleDomain" />
  </Type>
  <Type Name="System.LoaderOptimizationAttribute">
    <Member Sig="public LoaderOptimization Value { get; }" />
    <Member Sig="public LoaderOptimizationAttribute (byte value);" />
    <Member Sig="public LoaderOptimizationAttribute (LoaderOptimization value);" />
  </Type>
  <Type Name="System.LocalDataStoreSlot">
    <Member Sig="~LocalDataStoreSlot ();" />
  </Type>
  <Type Name="System.MarshalByRefObject">
    <Member Sig="protected MarshalByRefObject ();" />
    <Member Sig="protected MarshalByRefObject MemberwiseClone (bool cloneIdentity);" />
    <Member Sig="public object GetLifetimeService ();" />
    <Member Sig="public virtual object InitializeLifetimeService ();" />
    <Member Sig="public virtual System.Runtime.Remoting.ObjRef CreateObjRef (Type requestedType);" />
  </Type>
  <Type Name="System.Math">
    <Member Sig="public const double E = 2.71828182845905;" />
    <Member Sig="public const double PI = 3.14159265358979;" />
    <Member Sig="public static byte Max (byte val1, byte val2);" />
    <Member Sig="public static byte Min (byte val1, byte val2);" />
    <Member Sig="public static decimal Abs (decimal value);" />
    <Member Sig="public static decimal Ceiling (decimal d);" />
    <Member Sig="public static decimal Floor (decimal d);" />
    <Member Sig="public static decimal Max (decimal val1, decimal val2);" />
    <Member Sig="public static decimal Min (decimal val1, decimal val2);" />
    <Member Sig="public static decimal Round (decimal d);" />
    <Member Sig="public static decimal Round (decimal d, int decimals);" />
    <Member Sig="public static decimal Round (decimal d, int decimals, MidpointRounding mode);" />
    <Member Sig="public static decimal Round (decimal d, MidpointRounding mode);" />
    <Member Sig="public static decimal Truncate (decimal d);" />
    <Member Sig="public static double Abs (double value);" />
    <Member Sig="public static double Acos (double d);" />
    <Member Sig="public static double Asin (double d);" />
    <Member Sig="public static double Atan (double d);" />
    <Member Sig="public static double Atan2 (double y, double x);" />
    <Member Sig="public static double Ceiling (double a);" />
    <Member Sig="public static double Cos (double d);" />
    <Member Sig="public static double Cosh (double value);" />
    <Member Sig="public static double Exp (double d);" />
    <Member Sig="public static double Floor (double d);" />
    <Member Sig="public static double IEEERemainder (double x, double y);" />
    <Member Sig="public static double Log (double a, double newBase);" />
    <Member Sig="public static double Log (double d);" />
    <Member Sig="public static double Log10 (double d);" />
    <Member Sig="public static double Max (double val1, double val2);" />
    <Member Sig="public static double Min (double val1, double val2);" />
    <Member Sig="public static double Pow (double x, double y);" />
    <Member Sig="public static double Round (double a);" />
    <Member Sig="public static double Round (double value, int digits);" />
    <Member Sig="public static double Round (double value, int digits, MidpointRounding mode);" />
    <Member Sig="public static double Round (double value, MidpointRounding mode);" />
    <Member Sig="public static double Sin (double a);" />
    <Member Sig="public static double Sinh (double value);" />
    <Member Sig="public static double Sqrt (double d);" />
    <Member Sig="public static double Tan (double a);" />
    <Member Sig="public static double Tanh (double value);" />
    <Member Sig="public static double Truncate (double d);" />
    <Member Sig="public static float Abs (float value);" />
    <Member Sig="public static float Max (float val1, float val2);" />
    <Member Sig="public static float Min (float val1, float val2);" />
    <Member Sig="public static int Abs (int value);" />
    <Member Sig="public static int DivRem (int a, int b, out int result);" />
    <Member Sig="public static int Max (int val1, int val2);" />
    <Member Sig="public static int Min (int val1, int val2);" />
    <Member Sig="public static int Sign (decimal value);" />
    <Member Sig="public static int Sign (double value);" />
    <Member Sig="public static int Sign (float value);" />
    <Member Sig="public static int Sign (int value);" />
    <Member Sig="public static int Sign (long value);" />
    <Member Sig="public static int Sign (sbyte value);" />
    <Member Sig="public static int Sign (short value);" />
    <Member Sig="public static long Abs (long value);" />
    <Member Sig="public static long BigMul (int a, int b);" />
    <Member Sig="public static long DivRem (long a, long b, out long result);" />
    <Member Sig="public static long Max (long val1, long val2);" />
    <Member Sig="public static long Min (long val1, long val2);" />
    <Member Sig="public static sbyte Abs (sbyte value);" />
    <Member Sig="public static sbyte Max (sbyte val1, sbyte val2);" />
    <Member Sig="public static sbyte Min (sbyte val1, sbyte val2);" />
    <Member Sig="public static short Abs (short value);" />
    <Member Sig="public static short Max (short val1, short val2);" />
    <Member Sig="public static short Min (short val1, short val2);" />
    <Member Sig="public static uint Max (uint val1, uint val2);" />
    <Member Sig="public static uint Min (uint val1, uint val2);" />
    <Member Sig="public static ulong Max (ulong val1, ulong val2);" />
    <Member Sig="public static ulong Min (ulong val1, ulong val2);" />
    <Member Sig="public static ushort Max (ushort val1, ushort val2);" />
    <Member Sig="public static ushort Min (ushort val1, ushort val2);" />
  </Type>
  <Type Name="System.MemberAccessException">
    <Member Sig="protected MemberAccessException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public MemberAccessException ();" />
    <Member Sig="public MemberAccessException (string message);" />
    <Member Sig="public MemberAccessException (string message, Exception inner);" />
  </Type>
  <Type Name="System.MethodAccessException">
    <Member Sig="protected MethodAccessException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public MethodAccessException ();" />
    <Member Sig="public MethodAccessException (string message);" />
    <Member Sig="public MethodAccessException (string message, Exception inner);" />
  </Type>
  <Type Name="System.MidpointRounding">
    <Member Sig="AwayFromZero" />
    <Member Sig="ToEven" />
  </Type>
  <Type Name="System.MissingFieldException">
    <Member Sig="protected MissingFieldException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public MissingFieldException ();" />
    <Member Sig="public MissingFieldException (string className, string fieldName);" />
    <Member Sig="public MissingFieldException (string message);" />
    <Member Sig="public MissingFieldException (string message, Exception inner);" />
    <Member Sig="public override string Message { get; }" />
  </Type>
  <Type Name="System.MissingMemberException">
    <Member Sig="protected byte[] Signature;" />
    <Member Sig="protected MissingMemberException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="protected string ClassName;" />
    <Member Sig="protected string MemberName;" />
    <Member Sig="public MissingMemberException ();" />
    <Member Sig="public MissingMemberException (string className, string memberName);" />
    <Member Sig="public MissingMemberException (string message);" />
    <Member Sig="public MissingMemberException (string message, Exception inner);" />
    <Member Sig="public override string Message { get; }" />
    <Member Sig="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.MissingMethodException">
    <Member Sig="protected MissingMethodException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public MissingMethodException ();" />
    <Member Sig="public MissingMethodException (string className, string methodName);" />
    <Member Sig="public MissingMethodException (string message);" />
    <Member Sig="public MissingMethodException (string message, Exception inner);" />
    <Member Sig="public override string Message { get; }" />
  </Type>
  <Type Name="System.ModuleHandle">
    <Member Sig="public bool Equals (ModuleHandle handle);" />
    <Member Sig="public int MDStreamVersion { get; }" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public RuntimeFieldHandle GetRuntimeFieldHandleFromMetadataToken (int fieldToken);" />
    <Member Sig="public RuntimeFieldHandle ResolveFieldHandle (int fieldToken);" />
    <Member Sig="public RuntimeFieldHandle ResolveFieldHandle (int fieldToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext);" />
    <Member Sig="public RuntimeMethodHandle GetRuntimeMethodHandleFromMetadataToken (int methodToken);" />
    <Member Sig="public RuntimeMethodHandle ResolveMethodHandle (int methodToken);" />
    <Member Sig="public RuntimeMethodHandle ResolveMethodHandle (int methodToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext);" />
    <Member Sig="public RuntimeTypeHandle GetRuntimeTypeHandleFromMetadataToken (int typeToken);" />
    <Member Sig="public RuntimeTypeHandle ResolveTypeHandle (int typeToken);" />
    <Member Sig="public RuntimeTypeHandle ResolveTypeHandle (int typeToken, RuntimeTypeHandle[] typeInstantiationContext, RuntimeTypeHandle[] methodInstantiationContext);" />
    <Member Sig="public static bool op_Equality (ModuleHandle left, ModuleHandle right);" />
    <Member Sig="public static bool op_Inequality (ModuleHandle left, ModuleHandle right);" />
    <Member Sig="public static readonly ModuleHandle EmptyHandle;" />
  </Type>
  <Type Name="System.MTAThreadAttribute">
    <Member Sig="public MTAThreadAttribute ();" />
  </Type>
  <Type Name="System.MulticastDelegate">
    <Member Sig="protected MulticastDelegate (object target, string method);" />
    <Member Sig="protected MulticastDelegate (Type target, string method);" />
    <Member Sig="protected override sealed Delegate CombineImpl (Delegate follow);" />
    <Member Sig="protected override sealed Delegate RemoveImpl (Delegate value);" />
    <Member Sig="protected override System.Reflection.MethodInfo GetMethodImpl ();" />
    <Member Sig="public override sealed bool Equals (object obj);" />
    <Member Sig="public override sealed Delegate[] GetInvocationList ();" />
    <Member Sig="public override sealed int GetHashCode ();" />
    <Member Sig="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public static bool op_Equality (MulticastDelegate d1, MulticastDelegate d2);" />
    <Member Sig="public static bool op_Inequality (MulticastDelegate d1, MulticastDelegate d2);" />
  </Type>
  <Type Name="System.MulticastNotSupportedException">
    <Member Sig="public MulticastNotSupportedException ();" />
    <Member Sig="public MulticastNotSupportedException (string message);" />
    <Member Sig="public MulticastNotSupportedException (string message, Exception inner);" />
  </Type>
  <Type Name="System.NonSerializedAttribute">
    <Member Sig="public NonSerializedAttribute ();" />
  </Type>
  <Type Name="System.NotFiniteNumberException">
    <Member Sig="protected NotFiniteNumberException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public double OffendingNumber { get; }" />
    <Member Sig="public NotFiniteNumberException ();" />
    <Member Sig="public NotFiniteNumberException (double offendingNumber);" />
    <Member Sig="public NotFiniteNumberException (string message);" />
    <Member Sig="public NotFiniteNumberException (string message, double offendingNumber);" />
    <Member Sig="public NotFiniteNumberException (string message, double offendingNumber, Exception innerException);" />
    <Member Sig="public NotFiniteNumberException (string message, Exception innerException);" />
    <Member Sig="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.NotImplementedException">
    <Member Sig="protected NotImplementedException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public NotImplementedException ();" />
    <Member Sig="public NotImplementedException (string message);" />
    <Member Sig="public NotImplementedException (string message, Exception inner);" />
  </Type>
  <Type Name="System.NotSupportedException">
    <Member Sig="protected NotSupportedException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public NotSupportedException ();" />
    <Member Sig="public NotSupportedException (string message);" />
    <Member Sig="public NotSupportedException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.Nullable">
    <Member Sig="public static bool Equals&lt;T&gt; (Nullable&lt;T&gt; n1, Nullable&lt;T&gt; n2) where T : struct;" />
    <Member Sig="public static int Compare&lt;T&gt; (Nullable&lt;T&gt; n1, Nullable&lt;T&gt; n2) where T : struct;" />
    <Member Sig="public static Type GetUnderlyingType (Type nullableType);" />
  </Type>
  <Type Name="System.Nullable`1">
    <Member Sig="public bool HasValue { get; }" />
    <Member Sig="public Nullable (T value);" />
    <Member Sig="public override bool Equals (object other);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static Nullable&lt;T&gt; op_Implicit (T value);" />
    <Member Sig="public static T op_Explicit (Nullable&lt;T&gt; value);" />
    <Member Sig="public T GetValueOrDefault ();" />
    <Member Sig="public T GetValueOrDefault (T defaultValue);" />
    <Member Sig="public T Value { get; }" />
  </Type>
  <Type Name="System.NullReferenceException">
    <Member Sig="protected NullReferenceException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public NullReferenceException ();" />
    <Member Sig="public NullReferenceException (string message);" />
    <Member Sig="public NullReferenceException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.Object">
    <Member Sig="~Object ();" />
    <Member Sig="protected object MemberwiseClone ();" />
    <Member Sig="public Object ();" />
    <Member Sig="public static bool Equals (object objA, object objB);" />
    <Member Sig="public static bool ReferenceEquals (object objA, object objB);" />
    <Member Sig="public Type GetType ();" />
    <Member Sig="public virtual bool Equals (object obj);" />
    <Member Sig="public virtual int GetHashCode ();" />
    <Member Sig="public virtual string ToString ();" />
  </Type>
  <Type Name="System.ObjectDisposedException">
    <Member Sig="protected ObjectDisposedException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public ObjectDisposedException (string message, Exception innerException);" />
    <Member Sig="public ObjectDisposedException (string objectName);" />
    <Member Sig="public ObjectDisposedException (string objectName, string message);" />
    <Member Sig="public override string Message { get; }" />
    <Member Sig="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public string ObjectName { get; }" />
  </Type>
  <Type Name="System.ObsoleteAttribute">
    <Member Sig="public bool IsError { get; }" />
    <Member Sig="public ObsoleteAttribute ();" />
    <Member Sig="public ObsoleteAttribute (string message);" />
    <Member Sig="public ObsoleteAttribute (string message, bool error);" />
    <Member Sig="public string Message { get; }" />
  </Type>
  <Type Name="System.OperatingSystem">
    <Member Sig="public object Clone ();" />
    <Member Sig="public OperatingSystem (PlatformID platform, Version version);" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public PlatformID Platform { get; }" />
    <Member Sig="public string ServicePack { get; }" />
    <Member Sig="public string VersionString { get; }" />
    <Member Sig="public Version Version { get; }" />
    <Member Sig="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.OperationCanceledException">
    <Member Sig="protected OperationCanceledException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public OperationCanceledException ();" />
    <Member Sig="public OperationCanceledException (string message);" />
    <Member Sig="public OperationCanceledException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.OutOfMemoryException">
    <Member Sig="protected OutOfMemoryException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public OutOfMemoryException ();" />
    <Member Sig="public OutOfMemoryException (string message);" />
    <Member Sig="public OutOfMemoryException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.OverflowException">
    <Member Sig="protected OverflowException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public OverflowException ();" />
    <Member Sig="public OverflowException (string message);" />
    <Member Sig="public OverflowException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.ParamArrayAttribute">
    <Member Sig="public ParamArrayAttribute ();" />
  </Type>
  <Type Name="System.PlatformID">
    <Member Sig="MacOSX" />
    <Member Sig="Unix" />
    <Member Sig="Win32NT" />
    <Member Sig="Win32S" />
    <Member Sig="Win32Windows" />
    <Member Sig="WinCE" />
    <Member Sig="Xbox" />
  </Type>
  <Type Name="System.PlatformNotSupportedException">
    <Member Sig="protected PlatformNotSupportedException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public PlatformNotSupportedException ();" />
    <Member Sig="public PlatformNotSupportedException (string message);" />
    <Member Sig="public PlatformNotSupportedException (string message, Exception inner);" />
  </Type>
  <Type Name="System.Predicate`1" />
  <Type Name="System.Random">
    <Member Sig="protected virtual double Sample ();" />
    <Member Sig="public Random ();" />
    <Member Sig="public Random (int Seed);" />
    <Member Sig="public virtual double NextDouble ();" />
    <Member Sig="public virtual int Next ();" />
    <Member Sig="public virtual int Next (int maxValue);" />
    <Member Sig="public virtual int Next (int minValue, int maxValue);" />
    <Member Sig="public virtual void NextBytes (byte[] buffer);" />
  </Type>
  <Type Name="System.RankException">
    <Member Sig="protected RankException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public RankException ();" />
    <Member Sig="public RankException (string message);" />
    <Member Sig="public RankException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.Reflection.AmbiguousMatchException">
    <Member Sig="public AmbiguousMatchException ();" />
    <Member Sig="public AmbiguousMatchException (string message);" />
    <Member Sig="public AmbiguousMatchException (string message, Exception inner);" />
  </Type>
  <Type Name="System.Reflection.Assembly">
    <Member Sig="public bool GlobalAssemblyCache { get; }" />
    <Member Sig="public event System.Reflection.ModuleResolveEventHandler ModuleResolve;" />
    <Member Sig="public long HostContext { get; }" />
    <Member Sig="public object CreateInstance (string typeName);" />
    <Member Sig="public object CreateInstance (string typeName, bool ignoreCase);" />
    <Member Sig="public object CreateInstance (string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static string CreateQualifiedName (string assemblyName, string typeName);" />
    <Member Sig="public static System.Reflection.Assembly GetAssembly (Type type);" />
    <Member Sig="public static System.Reflection.Assembly GetCallingAssembly ();" />
    <Member Sig="public static System.Reflection.Assembly GetEntryAssembly ();" />
    <Member Sig="public static System.Reflection.Assembly GetExecutingAssembly ();" />
    <Member Sig="public static System.Reflection.Assembly Load (byte[] rawAssembly);" />
    <Member Sig="public static System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore);" />
    <Member Sig="public static System.Reflection.Assembly Load (byte[] rawAssembly, byte[] rawSymbolStore, System.Security.Policy.Evidence securityEvidence);" />
    <Member Sig="public static System.Reflection.Assembly Load (string assemblyString);" />
    <Member Sig="public static System.Reflection.Assembly Load (string assemblyString, System.Security.Policy.Evidence assemblySecurity);" />
    <Member Sig="public static System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef);" />
    <Member Sig="public static System.Reflection.Assembly Load (System.Reflection.AssemblyName assemblyRef, System.Security.Policy.Evidence assemblySecurity);" />
    <Member Sig="public static System.Reflection.Assembly LoadFile (string path);" />
    <Member Sig="public static System.Reflection.Assembly LoadFile (string path, System.Security.Policy.Evidence securityEvidence);" />
    <Member Sig="public static System.Reflection.Assembly LoadFrom (string assemblyFile);" />
    <Member Sig="public static System.Reflection.Assembly LoadFrom (string assemblyFile, System.Security.Policy.Evidence securityEvidence);" />
    <Member Sig="public static System.Reflection.Assembly LoadFrom (string assemblyFile, System.Security.Policy.Evidence securityEvidence, byte[] hashValue, System.Configuration.Assemblies.AssemblyHashAlgorithm hashAlgorithm);" />
    <Member Sig="public static System.Reflection.Assembly LoadWithPartialName (string partialName);" />
    <Member Sig="public static System.Reflection.Assembly LoadWithPartialName (string partialName, System.Security.Policy.Evidence securityEvidence);" />
    <Member Sig="public static System.Reflection.Assembly ReflectionOnlyLoad (byte[] rawAssembly);" />
    <Member Sig="public static System.Reflection.Assembly ReflectionOnlyLoad (string assemblyString);" />
    <Member Sig="public static System.Reflection.Assembly ReflectionOnlyLoadFrom (string assemblyFile);" />
    <Member Sig="public System.Reflection.Assembly GetSatelliteAssembly (System.Globalization.CultureInfo culture);" />
    <Member Sig="public System.Reflection.Assembly GetSatelliteAssembly (System.Globalization.CultureInfo culture, Version version);" />
    <Member Sig="public System.Reflection.AssemblyName[] GetReferencedAssemblies ();" />
    <Member Sig="public System.Reflection.Module GetModule (string name);" />
    <Member Sig="public System.Reflection.Module LoadModule (string moduleName, byte[] rawModule);" />
    <Member Sig="public System.Reflection.Module LoadModule (string moduleName, byte[] rawModule, byte[] rawSymbolStore);" />
    <Member Sig="public System.Reflection.Module ManifestModule { get; }" />
    <Member Sig="public System.Reflection.Module[] GetLoadedModules ();" />
    <Member Sig="public System.Reflection.Module[] GetLoadedModules (bool getResourceModules);" />
    <Member Sig="public System.Reflection.Module[] GetModules ();" />
    <Member Sig="public System.Reflection.Module[] GetModules (bool getResourceModules);" />
    <Member Sig="public Type GetType (string name, bool throwOnError, bool ignoreCase);" />
    <Member Sig="public virtual bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public virtual bool ReflectionOnly { get; }" />
    <Member Sig="public virtual object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public virtual object[] GetCustomAttributes (Type attributeType, bool inherit);" />
    <Member Sig="public virtual string CodeBase { get; }" />
    <Member Sig="public virtual string EscapedCodeBase { get; }" />
    <Member Sig="public virtual string FullName { get; }" />
    <Member Sig="public virtual string ImageRuntimeVersion { get; }" />
    <Member Sig="public virtual string Location { get; }" />
    <Member Sig="public virtual string[] GetManifestResourceNames ();" />
    <Member Sig="public virtual System.IO.FileStream GetFile (string name);" />
    <Member Sig="public virtual System.IO.FileStream[] GetFiles ();" />
    <Member Sig="public virtual System.IO.FileStream[] GetFiles (bool getResourceModules);" />
    <Member Sig="public virtual System.IO.Stream GetManifestResourceStream (string name);" />
    <Member Sig="public virtual System.IO.Stream GetManifestResourceStream (Type type, string name);" />
    <Member Sig="public virtual System.Reflection.AssemblyName GetName ();" />
    <Member Sig="public virtual System.Reflection.AssemblyName GetName (bool copiedName);" />
    <Member Sig="public virtual System.Reflection.ManifestResourceInfo GetManifestResourceInfo (string resourceName);" />
    <Member Sig="public virtual System.Reflection.MethodInfo EntryPoint { get; }" />
    <Member Sig="public virtual System.Security.Policy.Evidence Evidence { get; }" />
    <Member Sig="public virtual Type GetType (string name);" />
    <Member Sig="public virtual Type GetType (string name, bool throwOnError);" />
    <Member Sig="public virtual Type[] GetExportedTypes ();" />
    <Member Sig="public virtual Type[] GetTypes ();" />
    <Member Sig="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="Type _Assembly.GetType ();" />
  </Type>
  <Type Name="System.Reflection.AssemblyAlgorithmIdAttribute">
    <Member Sig="public AssemblyAlgorithmIdAttribute (System.Configuration.Assemblies.AssemblyHashAlgorithm algorithmId);" />
    <Member Sig="public AssemblyAlgorithmIdAttribute (uint algorithmId);" />
    <Member Sig="public uint AlgorithmId { get; }" />
  </Type>
  <Type Name="System.Reflection.AssemblyCompanyAttribute">
    <Member Sig="public AssemblyCompanyAttribute (string company);" />
    <Member Sig="public string Company { get; }" />
  </Type>
  <Type Name="System.Reflection.AssemblyConfigurationAttribute">
    <Member Sig="public AssemblyConfigurationAttribute (string configuration);" />
    <Member Sig="public string Configuration { get; }" />
  </Type>
  <Type Name="System.Reflection.AssemblyCopyrightAttribute">
    <Member Sig="public AssemblyCopyrightAttribute (string copyright);" />
    <Member Sig="public string Copyright { get; }" />
  </Type>
  <Type Name="System.Reflection.AssemblyCultureAttribute">
    <Member Sig="public AssemblyCultureAttribute (string culture);" />
    <Member Sig="public string Culture { get; }" />
  </Type>
  <Type Name="System.Reflection.AssemblyDefaultAliasAttribute">
    <Member Sig="public AssemblyDefaultAliasAttribute (string defaultAlias);" />
    <Member Sig="public string DefaultAlias { get; }" />
  </Type>
  <Type Name="System.Reflection.AssemblyDelaySignAttribute">
    <Member Sig="public AssemblyDelaySignAttribute (bool delaySign);" />
    <Member Sig="public bool DelaySign { get; }" />
  </Type>
  <Type Name="System.Reflection.AssemblyDescriptionAttribute">
    <Member Sig="public AssemblyDescriptionAttribute (string description);" />
    <Member Sig="public string Description { get; }" />
  </Type>
  <Type Name="System.Reflection.AssemblyFileVersionAttribute">
    <Member Sig="public AssemblyFileVersionAttribute (string version);" />
    <Member Sig="public string Version { get; }" />
  </Type>
  <Type Name="System.Reflection.AssemblyFlagsAttribute">
    <Member Sig="public AssemblyFlagsAttribute (int assemblyFlags);" />
    <Member Sig="public AssemblyFlagsAttribute (System.Reflection.AssemblyNameFlags assemblyFlags);" />
    <Member Sig="public AssemblyFlagsAttribute (uint flags);" />
    <Member Sig="public int AssemblyFlags { get; }" />
    <Member Sig="public uint Flags { get; }" />
  </Type>
  <Type Name="System.Reflection.AssemblyInformationalVersionAttribute">
    <Member Sig="public AssemblyInformationalVersionAttribute (string informationalVersion);" />
    <Member Sig="public string InformationalVersion { get; }" />
  </Type>
  <Type Name="System.Reflection.AssemblyKeyFileAttribute">
    <Member Sig="public AssemblyKeyFileAttribute (string keyFile);" />
    <Member Sig="public string KeyFile { get; }" />
  </Type>
  <Type Name="System.Reflection.AssemblyKeyNameAttribute">
    <Member Sig="public AssemblyKeyNameAttribute (string keyName);" />
    <Member Sig="public string KeyName { get; }" />
  </Type>
  <Type Name="System.Reflection.AssemblyName">
    <Member Sig="public AssemblyName ();" />
    <Member Sig="public AssemblyName (string assemblyName);" />
    <Member Sig="public byte[] GetPublicKey ();" />
    <Member Sig="public byte[] GetPublicKeyToken ();" />
    <Member Sig="public object Clone ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool ReferenceMatchesDefinition (System.Reflection.AssemblyName reference, System.Reflection.AssemblyName definition);" />
    <Member Sig="public static System.Reflection.AssemblyName GetAssemblyName (string assemblyFile);" />
    <Member Sig="public string CodeBase { get; set; }" />
    <Member Sig="public string EscapedCodeBase { get; }" />
    <Member Sig="public string FullName { get; }" />
    <Member Sig="public string Name { get; set; }" />
    <Member Sig="public System.Configuration.Assemblies.AssemblyHashAlgorithm HashAlgorithm { get; set; }" />
    <Member Sig="public System.Configuration.Assemblies.AssemblyVersionCompatibility VersionCompatibility { get; set; }" />
    <Member Sig="public System.Globalization.CultureInfo CultureInfo { get; set; }" />
    <Member Sig="public System.Reflection.AssemblyNameFlags Flags { get; set; }" />
    <Member Sig="public System.Reflection.ProcessorArchitecture ProcessorArchitecture { get; set; }" />
    <Member Sig="public System.Reflection.StrongNameKeyPair KeyPair { get; set; }" />
    <Member Sig="public Version Version { get; set; }" />
    <Member Sig="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public void OnDeserialization (object sender);" />
    <Member Sig="public void SetPublicKey (byte[] publicKey);" />
    <Member Sig="public void SetPublicKeyToken (byte[] publicKeyToken);" />
    <Member Sig="void _AssemblyName.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _AssemblyName.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _AssemblyName.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _AssemblyName.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.AssemblyNameFlags">
    <Member Sig="EnableJITcompileOptimizer" />
    <Member Sig="EnableJITcompileTracking" />
    <Member Sig="None" />
    <Member Sig="PublicKey" />
    <Member Sig="Retargetable" />
  </Type>
  <Type Name="System.Reflection.AssemblyNameProxy">
    <Member Sig="public AssemblyNameProxy ();" />
    <Member Sig="public System.Reflection.AssemblyName GetAssemblyName (string assemblyFile);" />
  </Type>
  <Type Name="System.Reflection.AssemblyProductAttribute">
    <Member Sig="public AssemblyProductAttribute (string product);" />
    <Member Sig="public string Product { get; }" />
  </Type>
  <Type Name="System.Reflection.AssemblyTitleAttribute">
    <Member Sig="public AssemblyTitleAttribute (string title);" />
    <Member Sig="public string Title { get; }" />
  </Type>
  <Type Name="System.Reflection.AssemblyTrademarkAttribute">
    <Member Sig="public AssemblyTrademarkAttribute (string trademark);" />
    <Member Sig="public string Trademark { get; }" />
  </Type>
  <Type Name="System.Reflection.AssemblyVersionAttribute">
    <Member Sig="public AssemblyVersionAttribute (string version);" />
    <Member Sig="public string Version { get; }" />
  </Type>
  <Type Name="System.Reflection.Binder">
    <Member Sig="protected Binder ();" />
    <Member Sig="public abstract object ChangeType (object value, Type type, System.Globalization.CultureInfo culture);" />
    <Member Sig="public abstract System.Reflection.FieldInfo BindToField (System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo culture);" />
    <Member Sig="public abstract System.Reflection.MethodBase BindToMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] names, out object state);" />
    <Member Sig="public abstract System.Reflection.MethodBase SelectMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="public abstract System.Reflection.PropertyInfo SelectProperty (System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, Type returnType, Type[] indexes, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="public abstract void ReorderArgumentArray (ref object[] args, object state);" />
  </Type>
  <Type Name="System.Reflection.BindingFlags">
    <Member Sig="CreateInstance" />
    <Member Sig="DeclaredOnly" />
    <Member Sig="Default" />
    <Member Sig="ExactBinding" />
    <Member Sig="FlattenHierarchy" />
    <Member Sig="GetField" />
    <Member Sig="GetProperty" />
    <Member Sig="IgnoreCase" />
    <Member Sig="IgnoreReturn" />
    <Member Sig="Instance" />
    <Member Sig="InvokeMethod" />
    <Member Sig="NonPublic" />
    <Member Sig="OptionalParamBinding" />
    <Member Sig="Public" />
    <Member Sig="PutDispProperty" />
    <Member Sig="PutRefDispProperty" />
    <Member Sig="SetField" />
    <Member Sig="SetProperty" />
    <Member Sig="Static" />
    <Member Sig="SuppressChangeType" />
  </Type>
  <Type Name="System.Reflection.CallingConventions">
    <Member Sig="Any" />
    <Member Sig="ExplicitThis" />
    <Member Sig="HasThis" />
    <Member Sig="Standard" />
    <Member Sig="VarArgs" />
  </Type>
  <Type Name="System.Reflection.ConstructorInfo">
    <Member Sig="object _ConstructorInfo.Invoke_2 (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
    <Member Sig="object _ConstructorInfo.Invoke_3 (object obj, object[] parameters);" />
    <Member Sig="object _ConstructorInfo.Invoke_4 (System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
    <Member Sig="object _ConstructorInfo.Invoke_5 (object[] parameters);" />
    <Member Sig="protected ConstructorInfo ();" />
    <Member Sig="public abstract object Invoke (System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
    <Member Sig="public object Invoke (object[] parameters);" />
    <Member Sig="public override System.Reflection.MemberTypes MemberType { get; }" />
    <Member Sig="public static readonly string ConstructorName;" />
    <Member Sig="public static readonly string TypeConstructorName;" />
    <Member Sig="Type _ConstructorInfo.GetType ();" />
    <Member Sig="void _ConstructorInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _ConstructorInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _ConstructorInfo.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _ConstructorInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.CustomAttributeData">
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributes (System.Reflection.Assembly target);" />
    <Member Sig="public static System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributes (System.Reflection.MemberInfo target);" />
    <Member Sig="public static System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributes (System.Reflection.Module target);" />
    <Member Sig="public static System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributes (System.Reflection.ParameterInfo target);" />
    <Member Sig="public System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeNamedArgument&gt; NamedArguments { get; }" />
    <Member Sig="public System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeTypedArgument&gt; ConstructorArguments { get; }" />
    <Member Sig="public System.Reflection.ConstructorInfo Constructor { get; }" />
  </Type>
  <Type Name="System.Reflection.CustomAttributeFormatException">
    <Member Sig="protected CustomAttributeFormatException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public CustomAttributeFormatException ();" />
    <Member Sig="public CustomAttributeFormatException (string message);" />
    <Member Sig="public CustomAttributeFormatException (string message, Exception inner);" />
  </Type>
  <Type Name="System.Reflection.CustomAttributeNamedArgument">
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool op_Equality (System.Reflection.CustomAttributeNamedArgument left, System.Reflection.CustomAttributeNamedArgument right);" />
    <Member Sig="public static bool op_Inequality (System.Reflection.CustomAttributeNamedArgument left, System.Reflection.CustomAttributeNamedArgument right);" />
    <Member Sig="public System.Reflection.CustomAttributeTypedArgument TypedValue { get; }" />
    <Member Sig="public System.Reflection.MemberInfo MemberInfo { get; }" />
  </Type>
  <Type Name="System.Reflection.CustomAttributeTypedArgument">
    <Member Sig="public object Value { get; }" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool op_Equality (System.Reflection.CustomAttributeTypedArgument left, System.Reflection.CustomAttributeTypedArgument right);" />
    <Member Sig="public static bool op_Inequality (System.Reflection.CustomAttributeTypedArgument left, System.Reflection.CustomAttributeTypedArgument right);" />
    <Member Sig="public Type ArgumentType { get; }" />
  </Type>
  <Type Name="System.Reflection.DefaultMemberAttribute">
    <Member Sig="public DefaultMemberAttribute (string memberName);" />
    <Member Sig="public string MemberName { get; }" />
  </Type>
  <Type Name="System.Reflection.Emit.AssemblyBuilder">
    <Member Sig="public override string CodeBase { get; }" />
    <Member Sig="public override string ImageRuntimeVersion { get; }" />
    <Member Sig="public override string Location { get; }" />
    <Member Sig="public override string[] GetManifestResourceNames ();" />
    <Member Sig="public override System.IO.FileStream GetFile (string name);" />
    <Member Sig="public override System.IO.FileStream[] GetFiles (bool getResourceModules);" />
    <Member Sig="public override System.IO.Stream GetManifestResourceStream (string name);" />
    <Member Sig="public override System.IO.Stream GetManifestResourceStream (Type type, string name);" />
    <Member Sig="public override System.Reflection.ManifestResourceInfo GetManifestResourceInfo (string resourceName);" />
    <Member Sig="public override System.Reflection.MethodInfo EntryPoint { get; }" />
    <Member Sig="public override Type[] GetExportedTypes ();" />
    <Member Sig="public System.Reflection.Emit.ModuleBuilder DefineDynamicModule (string name);" />
    <Member Sig="public System.Reflection.Emit.ModuleBuilder DefineDynamicModule (string name, bool emitSymbolInfo);" />
    <Member Sig="public System.Reflection.Emit.ModuleBuilder DefineDynamicModule (string name, string fileName);" />
    <Member Sig="public System.Reflection.Emit.ModuleBuilder DefineDynamicModule (string name, string fileName, bool emitSymbolInfo);" />
    <Member Sig="public System.Reflection.Emit.ModuleBuilder GetDynamicModule (string name);" />
    <Member Sig="public System.Resources.IResourceWriter DefineResource (string name, string description, string fileName);" />
    <Member Sig="public System.Resources.IResourceWriter DefineResource (string name, string description, string fileName, System.Reflection.ResourceAttributes attribute);" />
    <Member Sig="public void AddResourceFile (string name, string fileName);" />
    <Member Sig="public void AddResourceFile (string name, string fileName, System.Reflection.ResourceAttributes attribute);" />
    <Member Sig="public void DefineUnmanagedResource (byte[] resource);" />
    <Member Sig="public void DefineUnmanagedResource (string resourceFileName);" />
    <Member Sig="public void DefineVersionInfoResource ();" />
    <Member Sig="public void DefineVersionInfoResource (string product, string productVersion, string company, string copyright, string trademark);" />
    <Member Sig="public void Save (string assemblyFileName);" />
    <Member Sig="public void Save (string assemblyFileName, System.Reflection.PortableExecutableKinds portableExecutableKind, System.Reflection.ImageFileMachine imageFileMachine);" />
    <Member Sig="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
    <Member Sig="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
    <Member Sig="public void SetEntryPoint (System.Reflection.MethodInfo entryMethod);" />
    <Member Sig="public void SetEntryPoint (System.Reflection.MethodInfo entryMethod, System.Reflection.Emit.PEFileKinds fileKind);" />
    <Member Sig="void _AssemblyBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _AssemblyBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _AssemblyBuilder.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _AssemblyBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.Emit.AssemblyBuilderAccess">
    <Member Sig="ReflectionOnly" />
    <Member Sig="Run" />
    <Member Sig="RunAndSave" />
    <Member Sig="Save" />
  </Type>
  <Type Name="System.Reflection.Emit.ConstructorBuilder">
    <Member Sig="public bool InitLocals { get; set; }" />
    <Member Sig="public override bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
    <Member Sig="public override object Invoke (System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
    <Member Sig="public override object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
    <Member Sig="public override RuntimeMethodHandle MethodHandle { get; }" />
    <Member Sig="public override string Name { get; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public override System.Reflection.CallingConventions CallingConvention { get; }" />
    <Member Sig="public override System.Reflection.MethodAttributes Attributes { get; }" />
    <Member Sig="public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
    <Member Sig="public override System.Reflection.Module Module { get; }" />
    <Member Sig="public override System.Reflection.ParameterInfo[] GetParameters ();" />
    <Member Sig="public override Type DeclaringType { get; }" />
    <Member Sig="public override Type ReflectedType { get; }" />
    <Member Sig="public string Signature { get; }" />
    <Member Sig="public System.Reflection.Emit.ILGenerator GetILGenerator ();" />
    <Member Sig="public System.Reflection.Emit.ILGenerator GetILGenerator (int streamSize);" />
    <Member Sig="public System.Reflection.Emit.MethodToken GetToken ();" />
    <Member Sig="public System.Reflection.Emit.ParameterBuilder DefineParameter (int iSequence, System.Reflection.ParameterAttributes attributes, string strParamName);" />
    <Member Sig="public System.Reflection.Module GetModule ();" />
    <Member Sig="public Type ReturnType { get; }" />
    <Member Sig="public void AddDeclarativeSecurity (System.Security.Permissions.SecurityAction action, System.Security.PermissionSet pset);" />
    <Member Sig="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
    <Member Sig="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
    <Member Sig="public void SetImplementationFlags (System.Reflection.MethodImplAttributes attributes);" />
    <Member Sig="public void SetSymCustomAttribute (string name, byte[] data);" />
    <Member Sig="void _ConstructorBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _ConstructorBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _ConstructorBuilder.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _ConstructorBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.Emit.CustomAttributeBuilder">
    <Member Sig="public CustomAttributeBuilder (System.Reflection.ConstructorInfo con, object[] constructorArgs);" />
    <Member Sig="public CustomAttributeBuilder (System.Reflection.ConstructorInfo con, object[] constructorArgs, System.Reflection.FieldInfo[] namedFields, object[] fieldValues);" />
    <Member Sig="public CustomAttributeBuilder (System.Reflection.ConstructorInfo con, object[] constructorArgs, System.Reflection.PropertyInfo[] namedProperties, object[] propertyValues);" />
    <Member Sig="public CustomAttributeBuilder (System.Reflection.ConstructorInfo con, object[] constructorArgs, System.Reflection.PropertyInfo[] namedProperties, object[] propertyValues, System.Reflection.FieldInfo[] namedFields, object[] fieldValues);" />
    <Member Sig="void _CustomAttributeBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _CustomAttributeBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _CustomAttributeBuilder.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _CustomAttributeBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.Emit.DynamicILInfo">
    <Member Sig="public int GetTokenFor (byte[] signature);" />
    <Member Sig="public int GetTokenFor (RuntimeFieldHandle field);" />
    <Member Sig="public int GetTokenFor (RuntimeMethodHandle method);" />
    <Member Sig="public int GetTokenFor (RuntimeMethodHandle method, RuntimeTypeHandle contextType);" />
    <Member Sig="public int GetTokenFor (RuntimeTypeHandle type);" />
    <Member Sig="public int GetTokenFor (string literal);" />
    <Member Sig="public int GetTokenFor (System.Reflection.Emit.DynamicMethod method);" />
    <Member Sig="public System.Reflection.Emit.DynamicMethod DynamicMethod { get; }" />
    <Member Sig="public void SetCode (byte* code, int codeSize, int maxStackSize);" />
    <Member Sig="public void SetCode (byte[] code, int maxStackSize);" />
    <Member Sig="public void SetExceptions (byte* exceptions, int exceptionsSize);" />
    <Member Sig="public void SetExceptions (byte[] exceptions);" />
    <Member Sig="public void SetLocalSignature (byte* localSignature, int signatureSize);" />
    <Member Sig="public void SetLocalSignature (byte[] localSignature);" />
  </Type>
  <Type Name="System.Reflection.Emit.DynamicMethod">
    <Member Sig="public bool InitLocals { get; set; }" />
    <Member Sig="public Delegate CreateDelegate (Type delegateType);" />
    <Member Sig="public Delegate CreateDelegate (Type delegateType, object target);" />
    <Member Sig="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
    <Member Sig="public DynamicMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
    <Member Sig="public DynamicMethod (string name, Type returnType, Type[] parameterTypes);" />
    <Member Sig="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility);" />
    <Member Sig="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m);" />
    <Member Sig="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, System.Reflection.Module m, bool skipVisibility);" />
    <Member Sig="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner);" />
    <Member Sig="public DynamicMethod (string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility);" />
    <Member Sig="public override bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
    <Member Sig="public override object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
    <Member Sig="public override RuntimeMethodHandle MethodHandle { get; }" />
    <Member Sig="public override string Name { get; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public override System.Reflection.CallingConventions CallingConvention { get; }" />
    <Member Sig="public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }" />
    <Member Sig="public override System.Reflection.MethodAttributes Attributes { get; }" />
    <Member Sig="public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
    <Member Sig="public override System.Reflection.MethodInfo GetBaseDefinition ();" />
    <Member Sig="public override System.Reflection.Module Module { get; }" />
    <Member Sig="public override System.Reflection.ParameterInfo ReturnParameter { get; }" />
    <Member Sig="public override System.Reflection.ParameterInfo[] GetParameters ();" />
    <Member Sig="public override Type DeclaringType { get; }" />
    <Member Sig="public override Type ReflectedType { get; }" />
    <Member Sig="public override Type ReturnType { get; }" />
    <Member Sig="public System.Reflection.Emit.DynamicILInfo GetDynamicILInfo ();" />
    <Member Sig="public System.Reflection.Emit.ILGenerator GetILGenerator ();" />
    <Member Sig="public System.Reflection.Emit.ILGenerator GetILGenerator (int streamSize);" />
    <Member Sig="public System.Reflection.Emit.ParameterBuilder DefineParameter (int position, System.Reflection.ParameterAttributes attributes, string parameterName);" />
  </Type>
  <Type Name="System.Reflection.Emit.EnumBuilder">
    <Member Sig="protected override bool HasElementTypeImpl ();" />
    <Member Sig="protected override bool IsArrayImpl ();" />
    <Member Sig="protected override bool IsByRefImpl ();" />
    <Member Sig="protected override bool IsCOMObjectImpl ();" />
    <Member Sig="protected override bool IsPointerImpl ();" />
    <Member Sig="protected override bool IsPrimitiveImpl ();" />
    <Member Sig="protected override bool IsValueTypeImpl ();" />
    <Member Sig="protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
    <Member Sig="public override bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public override Guid GUID { get; }" />
    <Member Sig="public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
    <Member Sig="public override object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
    <Member Sig="public override RuntimeTypeHandle TypeHandle { get; }" />
    <Member Sig="public override string AssemblyQualifiedName { get; }" />
    <Member Sig="public override string FullName { get; }" />
    <Member Sig="public override string Name { get; }" />
    <Member Sig="public override string Namespace { get; }" />
    <Member Sig="public override System.Reflection.Assembly Assembly { get; }" />
    <Member Sig="public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.EventInfo[] GetEvents ();" />
    <Member Sig="public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
    <Member Sig="public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.Module Module { get; }" />
    <Member Sig="public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override Type BaseType { get; }" />
    <Member Sig="public override Type DeclaringType { get; }" />
    <Member Sig="public override Type GetElementType ();" />
    <Member Sig="public override Type GetInterface (string name, bool ignoreCase);" />
    <Member Sig="public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override Type MakeArrayType ();" />
    <Member Sig="public override Type MakeArrayType (int rank);" />
    <Member Sig="public override Type MakeByRefType ();" />
    <Member Sig="public override Type MakePointerType ();" />
    <Member Sig="public override Type ReflectedType { get; }" />
    <Member Sig="public override Type UnderlyingSystemType { get; }" />
    <Member Sig="public override Type[] GetInterfaces ();" />
    <Member Sig="public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.Emit.FieldBuilder DefineLiteral (string literalName, object literalValue);" />
    <Member Sig="public System.Reflection.Emit.FieldBuilder UnderlyingField { get; }" />
    <Member Sig="public System.Reflection.Emit.TypeToken TypeToken { get; }" />
    <Member Sig="public Type CreateType ();" />
    <Member Sig="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
    <Member Sig="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
    <Member Sig="void _EnumBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _EnumBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _EnumBuilder.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _EnumBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.Emit.EventBuilder">
    <Member Sig="public System.Reflection.Emit.EventToken GetEventToken ();" />
    <Member Sig="public void AddOtherMethod (System.Reflection.Emit.MethodBuilder mdBuilder);" />
    <Member Sig="public void SetAddOnMethod (System.Reflection.Emit.MethodBuilder mdBuilder);" />
    <Member Sig="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
    <Member Sig="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
    <Member Sig="public void SetRaiseMethod (System.Reflection.Emit.MethodBuilder mdBuilder);" />
    <Member Sig="public void SetRemoveOnMethod (System.Reflection.Emit.MethodBuilder mdBuilder);" />
    <Member Sig="void _EventBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _EventBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _EventBuilder.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _EventBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.Emit.EventToken">
    <Member Sig="public bool Equals (System.Reflection.Emit.EventToken obj);" />
    <Member Sig="public int Token { get; }" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static bool op_Equality (System.Reflection.Emit.EventToken a, System.Reflection.Emit.EventToken b);" />
    <Member Sig="public static bool op_Inequality (System.Reflection.Emit.EventToken a, System.Reflection.Emit.EventToken b);" />
    <Member Sig="public static readonly System.Reflection.Emit.EventToken Empty;" />
  </Type>
  <Type Name="System.Reflection.Emit.FieldBuilder">
    <Member Sig="public override bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public override object GetValue (object obj);" />
    <Member Sig="public override object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
    <Member Sig="public override RuntimeFieldHandle FieldHandle { get; }" />
    <Member Sig="public override string Name { get; }" />
    <Member Sig="public override System.Reflection.FieldAttributes Attributes { get; }" />
    <Member Sig="public override System.Reflection.Module Module { get; }" />
    <Member Sig="public override Type DeclaringType { get; }" />
    <Member Sig="public override Type FieldType { get; }" />
    <Member Sig="public override Type ReflectedType { get; }" />
    <Member Sig="public override void SetValue (object obj, object val, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);" />
    <Member Sig="public System.Reflection.Emit.FieldToken GetToken ();" />
    <Member Sig="public void SetConstant (object defaultValue);" />
    <Member Sig="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
    <Member Sig="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
    <Member Sig="public void SetMarshal (System.Reflection.Emit.UnmanagedMarshal unmanagedMarshal);" />
    <Member Sig="public void SetOffset (int iOffset);" />
    <Member Sig="void _FieldBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _FieldBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _FieldBuilder.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _FieldBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.Emit.FieldToken">
    <Member Sig="public bool Equals (System.Reflection.Emit.FieldToken obj);" />
    <Member Sig="public int Token { get; }" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static bool op_Equality (System.Reflection.Emit.FieldToken a, System.Reflection.Emit.FieldToken b);" />
    <Member Sig="public static bool op_Inequality (System.Reflection.Emit.FieldToken a, System.Reflection.Emit.FieldToken b);" />
    <Member Sig="public static readonly System.Reflection.Emit.FieldToken Empty;" />
  </Type>
  <Type Name="System.Reflection.Emit.FlowControl">
    <Member Sig="Branch" />
    <Member Sig="Break" />
    <Member Sig="Call" />
    <Member Sig="Cond_Branch" />
    <Member Sig="Meta" />
    <Member Sig="Next" />
    <Member Sig="Phi" />
    <Member Sig="Return" />
    <Member Sig="Throw" />
  </Type>
  <Type Name="System.Reflection.Emit.GenericTypeParameterBuilder">
    <Member Sig="protected override bool HasElementTypeImpl ();" />
    <Member Sig="protected override bool IsArrayImpl ();" />
    <Member Sig="protected override bool IsByRefImpl ();" />
    <Member Sig="protected override bool IsCOMObjectImpl ();" />
    <Member Sig="protected override bool IsPointerImpl ();" />
    <Member Sig="protected override bool IsPrimitiveImpl ();" />
    <Member Sig="protected override bool IsValueTypeImpl ();" />
    <Member Sig="protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
    <Member Sig="public override bool ContainsGenericParameters { get; }" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override bool IsAssignableFrom (Type c);" />
    <Member Sig="public override bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public override bool IsGenericParameter { get; }" />
    <Member Sig="public override bool IsGenericType { get; }" />
    <Member Sig="public override bool IsGenericTypeDefinition { get; }" />
    <Member Sig="public override bool IsSubclassOf (Type c);" />
    <Member Sig="public override Guid GUID { get; }" />
    <Member Sig="public override int GenericParameterPosition { get; }" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
    <Member Sig="public override object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
    <Member Sig="public override RuntimeTypeHandle TypeHandle { get; }" />
    <Member Sig="public override string AssemblyQualifiedName { get; }" />
    <Member Sig="public override string FullName { get; }" />
    <Member Sig="public override string Name { get; }" />
    <Member Sig="public override string Namespace { get; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public override System.Reflection.Assembly Assembly { get; }" />
    <Member Sig="public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.EventInfo[] GetEvents ();" />
    <Member Sig="public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
    <Member Sig="public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.MethodBase DeclaringMethod { get; }" />
    <Member Sig="public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.Module Module { get; }" />
    <Member Sig="public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override Type BaseType { get; }" />
    <Member Sig="public override Type DeclaringType { get; }" />
    <Member Sig="public override Type GetElementType ();" />
    <Member Sig="public override Type GetGenericTypeDefinition ();" />
    <Member Sig="public override Type GetInterface (string name, bool ignoreCase);" />
    <Member Sig="public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override Type MakeArrayType ();" />
    <Member Sig="public override Type MakeArrayType (int rank);" />
    <Member Sig="public override Type MakeByRefType ();" />
    <Member Sig="public override Type MakeGenericType (Type[] typeArguments);" />
    <Member Sig="public override Type MakePointerType ();" />
    <Member Sig="public override Type ReflectedType { get; }" />
    <Member Sig="public override Type UnderlyingSystemType { get; }" />
    <Member Sig="public override Type[] GetGenericArguments ();" />
    <Member Sig="public override Type[] GetInterfaces ();" />
    <Member Sig="public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public void SetBaseTypeConstraint (Type baseTypeConstraint);" />
    <Member Sig="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
    <Member Sig="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
    <Member Sig="public void SetGenericParameterAttributes (System.Reflection.GenericParameterAttributes genericParameterAttributes);" />
    <Member Sig="public void SetInterfaceConstraints (Type[] interfaceConstraints);" />
  </Type>
  <Type Name="System.Reflection.Emit.ILGenerator">
    <Member Sig="public virtual System.Reflection.Emit.Label BeginExceptionBlock ();" />
    <Member Sig="public virtual System.Reflection.Emit.Label DefineLabel ();" />
    <Member Sig="public virtual System.Reflection.Emit.LocalBuilder DeclareLocal (Type localType);" />
    <Member Sig="public virtual System.Reflection.Emit.LocalBuilder DeclareLocal (Type localType, bool pinned);" />
    <Member Sig="public virtual void BeginCatchBlock (Type exceptionType);" />
    <Member Sig="public virtual void BeginExceptFilterBlock ();" />
    <Member Sig="public virtual void BeginFaultBlock ();" />
    <Member Sig="public virtual void BeginFinallyBlock ();" />
    <Member Sig="public virtual void BeginScope ();" />
    <Member Sig="public virtual void Emit (System.Reflection.Emit.OpCode opcode);" />
    <Member Sig="public virtual void Emit (System.Reflection.Emit.OpCode opcode, byte arg);" />
    <Member Sig="public virtual void Emit (System.Reflection.Emit.OpCode opcode, double arg);" />
    <Member Sig="public virtual void Emit (System.Reflection.Emit.OpCode opcode, float arg);" />
    <Member Sig="public virtual void Emit (System.Reflection.Emit.OpCode opcode, int arg);" />
    <Member Sig="public virtual void Emit (System.Reflection.Emit.OpCode opcode, long arg);" />
    <Member Sig="public virtual void Emit (System.Reflection.Emit.OpCode opcode, short arg);" />
    <Member Sig="public virtual void Emit (System.Reflection.Emit.OpCode opcode, string str);" />
    <Member Sig="public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.ConstructorInfo con);" />
    <Member Sig="public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label label);" />
    <Member Sig="public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.Label[] labels);" />
    <Member Sig="public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.LocalBuilder local);" />
    <Member Sig="public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.Emit.SignatureHelper signature);" />
    <Member Sig="public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.FieldInfo field);" />
    <Member Sig="public virtual void Emit (System.Reflection.Emit.OpCode opcode, System.Reflection.MethodInfo meth);" />
    <Member Sig="public virtual void Emit (System.Reflection.Emit.OpCode opcode, Type cls);" />
    <Member Sig="public virtual void EmitCall (System.Reflection.Emit.OpCode opcode, System.Reflection.MethodInfo methodInfo, Type[] optionalParameterTypes);" />
    <Member Sig="public virtual void EmitCalli (System.Reflection.Emit.OpCode opcode, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes);" />
    <Member Sig="public virtual void EmitCalli (System.Reflection.Emit.OpCode opcode, System.Runtime.InteropServices.CallingConvention unmanagedCallConv, Type returnType, Type[] parameterTypes);" />
    <Member Sig="public virtual void EmitWriteLine (string value);" />
    <Member Sig="public virtual void EmitWriteLine (System.Reflection.Emit.LocalBuilder localBuilder);" />
    <Member Sig="public virtual void EmitWriteLine (System.Reflection.FieldInfo fld);" />
    <Member Sig="public virtual void EndExceptionBlock ();" />
    <Member Sig="public virtual void EndScope ();" />
    <Member Sig="public virtual void MarkLabel (System.Reflection.Emit.Label loc);" />
    <Member Sig="public virtual void MarkSequencePoint (System.Diagnostics.SymbolStore.ISymbolDocumentWriter document, int startLine, int startColumn, int endLine, int endColumn);" />
    <Member Sig="public virtual void ThrowException (Type excType);" />
    <Member Sig="public virtual void UsingNamespace (string usingNamespace);" />
    <Member Sig="public void Emit (System.Reflection.Emit.OpCode opcode, sbyte arg);" />
    <Member Sig="void _ILGenerator.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _ILGenerator.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _ILGenerator.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _ILGenerator.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.Emit.Label">
    <Member Sig="public bool Equals (System.Reflection.Emit.Label obj);" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static bool op_Equality (System.Reflection.Emit.Label a, System.Reflection.Emit.Label b);" />
    <Member Sig="public static bool op_Inequality (System.Reflection.Emit.Label a, System.Reflection.Emit.Label b);" />
  </Type>
  <Type Name="System.Reflection.Emit.LocalBuilder">
    <Member Sig="public override bool IsPinned { get; }" />
    <Member Sig="public override int LocalIndex { get; }" />
    <Member Sig="public override Type LocalType { get; }" />
    <Member Sig="public void SetLocalSymInfo (string name);" />
    <Member Sig="public void SetLocalSymInfo (string name, int startOffset, int endOffset);" />
    <Member Sig="void _LocalBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _LocalBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _LocalBuilder.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _LocalBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.Emit.MethodBuilder">
    <Member Sig="public bool InitLocals { get; set; }" />
    <Member Sig="public override bool ContainsGenericParameters { get; }" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public override bool IsGenericMethod { get; }" />
    <Member Sig="public override bool IsGenericMethodDefinition { get; }" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
    <Member Sig="public override object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
    <Member Sig="public override RuntimeMethodHandle MethodHandle { get; }" />
    <Member Sig="public override string Name { get; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public override System.Reflection.CallingConventions CallingConvention { get; }" />
    <Member Sig="public override System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }" />
    <Member Sig="public override System.Reflection.MethodAttributes Attributes { get; }" />
    <Member Sig="public override System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
    <Member Sig="public override System.Reflection.MethodInfo GetBaseDefinition ();" />
    <Member Sig="public override System.Reflection.MethodInfo GetGenericMethodDefinition ();" />
    <Member Sig="public override System.Reflection.MethodInfo MakeGenericMethod (Type[] typeArguments);" />
    <Member Sig="public override System.Reflection.Module Module { get; }" />
    <Member Sig="public override System.Reflection.ParameterInfo ReturnParameter { get; }" />
    <Member Sig="public override System.Reflection.ParameterInfo[] GetParameters ();" />
    <Member Sig="public override Type DeclaringType { get; }" />
    <Member Sig="public override Type ReflectedType { get; }" />
    <Member Sig="public override Type[] GetGenericArguments ();" />
    <Member Sig="public string Signature { get; }" />
    <Member Sig="public System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters (string[] names);" />
    <Member Sig="public System.Reflection.Emit.ILGenerator GetILGenerator ();" />
    <Member Sig="public System.Reflection.Emit.ILGenerator GetILGenerator (int size);" />
    <Member Sig="public System.Reflection.Emit.MethodToken GetToken ();" />
    <Member Sig="public System.Reflection.Emit.ParameterBuilder DefineParameter (int position, System.Reflection.ParameterAttributes attributes, string strParamName);" />
    <Member Sig="public System.Reflection.Module GetModule ();" />
    <Member Sig="public void AddDeclarativeSecurity (System.Security.Permissions.SecurityAction action, System.Security.PermissionSet pset);" />
    <Member Sig="public void CreateMethodBody (byte[] il, int count);" />
    <Member Sig="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
    <Member Sig="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
    <Member Sig="public void SetImplementationFlags (System.Reflection.MethodImplAttributes attributes);" />
    <Member Sig="public void SetMarshal (System.Reflection.Emit.UnmanagedMarshal unmanagedMarshal);" />
    <Member Sig="public void SetParameters (Type[] parameterTypes);" />
    <Member Sig="public void SetReturnType (Type returnType);" />
    <Member Sig="public void SetSignature (Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);" />
    <Member Sig="public void SetSymCustomAttribute (string name, byte[] data);" />
    <Member Sig="void _MethodBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _MethodBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _MethodBuilder.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _MethodBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.Emit.MethodRental">
    <Member Sig="public const int JitImmediate = 1;" />
    <Member Sig="public const int JitOnDemand = 0;" />
    <Member Sig="public static void SwapMethodBody (Type cls, int methodtoken, IntPtr rgIL, int methodSize, int flags);" />
    <Member Sig="void _MethodRental.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _MethodRental.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _MethodRental.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _MethodRental.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.Emit.MethodToken">
    <Member Sig="public bool Equals (System.Reflection.Emit.MethodToken obj);" />
    <Member Sig="public int Token { get; }" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static bool op_Equality (System.Reflection.Emit.MethodToken a, System.Reflection.Emit.MethodToken b);" />
    <Member Sig="public static bool op_Inequality (System.Reflection.Emit.MethodToken a, System.Reflection.Emit.MethodToken b);" />
    <Member Sig="public static readonly System.Reflection.Emit.MethodToken Empty;" />
  </Type>
  <Type Name="System.Reflection.Emit.ModuleBuilder">
    <Member Sig="public bool IsTransient ();" />
    <Member Sig="public override string FullyQualifiedName { get; }" />
    <Member Sig="public override Type GetType (string className);" />
    <Member Sig="public override Type GetType (string className, bool ignoreCase);" />
    <Member Sig="public override Type GetType (string className, bool throwOnError, bool ignoreCase);" />
    <Member Sig="public override Type[] GetTypes ();" />
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolDocumentWriter DefineDocument (string url, Guid language, Guid languageVendor, Guid documentType);" />
    <Member Sig="public System.Diagnostics.SymbolStore.ISymbolWriter GetSymWriter ();" />
    <Member Sig="public System.Reflection.Emit.EnumBuilder DefineEnum (string name, System.Reflection.TypeAttributes visibility, Type underlyingType);" />
    <Member Sig="public System.Reflection.Emit.FieldBuilder DefineInitializedData (string name, byte[] data, System.Reflection.FieldAttributes attributes);" />
    <Member Sig="public System.Reflection.Emit.FieldBuilder DefineUninitializedData (string name, int size, System.Reflection.FieldAttributes attributes);" />
    <Member Sig="public System.Reflection.Emit.FieldToken GetFieldToken (System.Reflection.FieldInfo field);" />
    <Member Sig="public System.Reflection.Emit.MethodBuilder DefineGlobalMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);" />
    <Member Sig="public System.Reflection.Emit.MethodBuilder DefineGlobalMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers);" />
    <Member Sig="public System.Reflection.Emit.MethodBuilder DefineGlobalMethod (string name, System.Reflection.MethodAttributes attributes, Type returnType, Type[] parameterTypes);" />
    <Member Sig="public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, string entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);" />
    <Member Sig="public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);" />
    <Member Sig="public System.Reflection.Emit.MethodToken GetArrayMethodToken (Type arrayClass, string methodName, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);" />
    <Member Sig="public System.Reflection.Emit.MethodToken GetConstructorToken (System.Reflection.ConstructorInfo con);" />
    <Member Sig="public System.Reflection.Emit.MethodToken GetMethodToken (System.Reflection.MethodInfo method);" />
    <Member Sig="public System.Reflection.Emit.SignatureToken GetSignatureToken (byte[] sigBytes, int sigLength);" />
    <Member Sig="public System.Reflection.Emit.SignatureToken GetSignatureToken (System.Reflection.Emit.SignatureHelper sigHelper);" />
    <Member Sig="public System.Reflection.Emit.StringToken GetStringConstant (string str);" />
    <Member Sig="public System.Reflection.Emit.TypeBuilder DefineType (string name);" />
    <Member Sig="public System.Reflection.Emit.TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr);" />
    <Member Sig="public System.Reflection.Emit.TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr, Type parent);" />
    <Member Sig="public System.Reflection.Emit.TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr, Type parent, int typesize);" />
    <Member Sig="public System.Reflection.Emit.TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr, Type parent, System.Reflection.Emit.PackingSize packingSize, int typesize);" />
    <Member Sig="public System.Reflection.Emit.TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr, Type parent, System.Reflection.Emit.PackingSize packsize);" />
    <Member Sig="public System.Reflection.Emit.TypeBuilder DefineType (string name, System.Reflection.TypeAttributes attr, Type parent, Type[] interfaces);" />
    <Member Sig="public System.Reflection.Emit.TypeToken GetTypeToken (string name);" />
    <Member Sig="public System.Reflection.Emit.TypeToken GetTypeToken (Type type);" />
    <Member Sig="public System.Reflection.MethodInfo GetArrayMethod (Type arrayClass, string methodName, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);" />
    <Member Sig="public System.Resources.IResourceWriter DefineResource (string name, string description);" />
    <Member Sig="public System.Resources.IResourceWriter DefineResource (string name, string description, System.Reflection.ResourceAttributes attribute);" />
    <Member Sig="public void CreateGlobalFunctions ();" />
    <Member Sig="public void DefineManifestResource (string name, System.IO.Stream stream, System.Reflection.ResourceAttributes attribute);" />
    <Member Sig="public void DefineUnmanagedResource (byte[] resource);" />
    <Member Sig="public void DefineUnmanagedResource (string resourceFileName);" />
    <Member Sig="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
    <Member Sig="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
    <Member Sig="public void SetSymCustomAttribute (string name, byte[] data);" />
    <Member Sig="public void SetUserEntryPoint (System.Reflection.MethodInfo entryPoint);" />
    <Member Sig="void _ModuleBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _ModuleBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _ModuleBuilder.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _ModuleBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.Emit.OpCode">
    <Member Sig="public bool Equals (System.Reflection.Emit.OpCode obj);" />
    <Member Sig="public int Size { get; }" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public short Value { get; }" />
    <Member Sig="public static bool op_Equality (System.Reflection.Emit.OpCode a, System.Reflection.Emit.OpCode b);" />
    <Member Sig="public static bool op_Inequality (System.Reflection.Emit.OpCode a, System.Reflection.Emit.OpCode b);" />
    <Member Sig="public string Name { get; }" />
    <Member Sig="public System.Reflection.Emit.FlowControl FlowControl { get; }" />
    <Member Sig="public System.Reflection.Emit.OpCodeType OpCodeType { get; }" />
    <Member Sig="public System.Reflection.Emit.OperandType OperandType { get; }" />
    <Member Sig="public System.Reflection.Emit.StackBehaviour StackBehaviourPop { get; }" />
    <Member Sig="public System.Reflection.Emit.StackBehaviour StackBehaviourPush { get; }" />
  </Type>
  <Type Name="System.Reflection.Emit.OpCodes">
    <Member Sig="public static bool TakesSingleByteArgument (System.Reflection.Emit.OpCode inst);" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Add;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Add_Ovf;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Add_Ovf_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode And;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Arglist;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Beq;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Beq_S;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Bge;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Bge_S;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Bge_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Bge_Un_S;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Bgt;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Bgt_S;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Bgt_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Bgt_Un_S;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ble;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ble_S;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ble_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ble_Un_S;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Blt;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Blt_S;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Blt_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Blt_Un_S;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Bne_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Bne_Un_S;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Box;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Br;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Br_S;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Break;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Brfalse;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Brfalse_S;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Brtrue;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Brtrue_S;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Call;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Calli;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Callvirt;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Castclass;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ceq;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Cgt;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Cgt_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ckfinite;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Clt;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Clt_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Constrained;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_I;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_I1;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_I2;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_I4;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_I8;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I1_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I2_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I4_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_I8_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U1_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U2_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U4_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_Ovf_U8_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_R_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_R4;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_R8;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_U;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_U1;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_U2;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_U4;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Conv_U8;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Cpblk;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Cpobj;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Div;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Div_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Dup;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Endfilter;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Endfinally;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Initblk;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Initobj;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Isinst;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Jmp;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldarg;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldarg_0;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldarg_1;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldarg_2;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldarg_3;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldarg_S;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldarga;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldarga_S;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldc_I4;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldc_I4_0;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldc_I4_1;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldc_I4_2;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldc_I4_3;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldc_I4_4;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldc_I4_5;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldc_I4_6;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldc_I4_7;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldc_I4_8;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldc_I4_M1;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldc_I4_S;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldc_I8;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldc_R4;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldc_R8;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldelem;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldelem_I;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldelem_I1;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldelem_I2;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldelem_I4;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldelem_I8;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldelem_R4;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldelem_R8;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldelem_Ref;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldelem_U1;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldelem_U2;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldelem_U4;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldelema;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldfld;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldflda;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldftn;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldind_I;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldind_I1;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldind_I2;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldind_I4;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldind_I8;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldind_R4;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldind_R8;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldind_Ref;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldind_U1;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldind_U2;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldind_U4;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldlen;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldloc;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldloc_0;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldloc_1;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldloc_2;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldloc_3;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldloc_S;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldloca;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldloca_S;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldnull;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldobj;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldsfld;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldsflda;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldstr;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldtoken;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ldvirtftn;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Leave;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Leave_S;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Localloc;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Mkrefany;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Mul;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Mul_Ovf;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Mul_Ovf_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Neg;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Newarr;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Newobj;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Nop;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Not;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Or;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Pop;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Prefix1;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Prefix2;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Prefix3;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Prefix4;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Prefix5;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Prefix6;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Prefix7;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Prefixref;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Readonly;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Refanytype;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Refanyval;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Rem;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Rem_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Ret;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Rethrow;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Shl;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Shr;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Shr_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Sizeof;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Starg;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Starg_S;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stelem;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stelem_I;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stelem_I1;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stelem_I2;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stelem_I4;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stelem_I8;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stelem_R4;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stelem_R8;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stelem_Ref;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stfld;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stind_I;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stind_I1;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stind_I2;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stind_I4;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stind_I8;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stind_R4;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stind_R8;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stind_Ref;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stloc;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stloc_0;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stloc_1;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stloc_2;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stloc_3;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stloc_S;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stobj;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Stsfld;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Sub;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Sub_Ovf;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Sub_Ovf_Un;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Switch;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Tailcall;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Throw;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Unaligned;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Unbox;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Unbox_Any;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Volatile;" />
    <Member Sig="public static readonly System.Reflection.Emit.OpCode Xor;" />
  </Type>
  <Type Name="System.Reflection.Emit.OpCodeType">
    <Member Sig="Annotation" />
    <Member Sig="Macro" />
    <Member Sig="Nternal" />
    <Member Sig="Objmodel" />
    <Member Sig="Prefix" />
    <Member Sig="Primitive" />
  </Type>
  <Type Name="System.Reflection.Emit.OperandType">
    <Member Sig="InlineBrTarget" />
    <Member Sig="InlineField" />
    <Member Sig="InlineI" />
    <Member Sig="InlineI8" />
    <Member Sig="InlineMethod" />
    <Member Sig="InlineNone" />
    <Member Sig="InlinePhi" />
    <Member Sig="InlineR" />
    <Member Sig="InlineSig" />
    <Member Sig="InlineString" />
    <Member Sig="InlineSwitch" />
    <Member Sig="InlineTok" />
    <Member Sig="InlineType" />
    <Member Sig="InlineVar" />
    <Member Sig="ShortInlineBrTarget" />
    <Member Sig="ShortInlineI" />
    <Member Sig="ShortInlineR" />
    <Member Sig="ShortInlineVar" />
  </Type>
  <Type Name="System.Reflection.Emit.PackingSize">
    <Member Sig="Size1" />
    <Member Sig="Size128" />
    <Member Sig="Size16" />
    <Member Sig="Size2" />
    <Member Sig="Size32" />
    <Member Sig="Size4" />
    <Member Sig="Size64" />
    <Member Sig="Size8" />
    <Member Sig="Unspecified" />
  </Type>
  <Type Name="System.Reflection.Emit.ParameterBuilder">
    <Member Sig="public bool IsIn { get; }" />
    <Member Sig="public bool IsOptional { get; }" />
    <Member Sig="public bool IsOut { get; }" />
    <Member Sig="public virtual int Attributes { get; }" />
    <Member Sig="public virtual int Position { get; }" />
    <Member Sig="public virtual string Name { get; }" />
    <Member Sig="public virtual System.Reflection.Emit.ParameterToken GetToken ();" />
    <Member Sig="public virtual void SetConstant (object defaultValue);" />
    <Member Sig="public virtual void SetMarshal (System.Reflection.Emit.UnmanagedMarshal unmanagedMarshal);" />
    <Member Sig="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
    <Member Sig="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
    <Member Sig="void _ParameterBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _ParameterBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _ParameterBuilder.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _ParameterBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.Emit.ParameterToken">
    <Member Sig="public bool Equals (System.Reflection.Emit.ParameterToken obj);" />
    <Member Sig="public int Token { get; }" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static bool op_Equality (System.Reflection.Emit.ParameterToken a, System.Reflection.Emit.ParameterToken b);" />
    <Member Sig="public static bool op_Inequality (System.Reflection.Emit.ParameterToken a, System.Reflection.Emit.ParameterToken b);" />
    <Member Sig="public static readonly System.Reflection.Emit.ParameterToken Empty;" />
  </Type>
  <Type Name="System.Reflection.Emit.PEFileKinds">
    <Member Sig="ConsoleApplication" />
    <Member Sig="Dll" />
    <Member Sig="WindowApplication" />
  </Type>
  <Type Name="System.Reflection.Emit.PropertyBuilder">
    <Member Sig="public override bool CanRead { get; }" />
    <Member Sig="public override bool CanWrite { get; }" />
    <Member Sig="public override bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public override object GetValue (object obj, object[] index);" />
    <Member Sig="public override object GetValue (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);" />
    <Member Sig="public override object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
    <Member Sig="public override string Name { get; }" />
    <Member Sig="public override System.Reflection.MethodInfo GetGetMethod (bool nonPublic);" />
    <Member Sig="public override System.Reflection.MethodInfo GetSetMethod (bool nonPublic);" />
    <Member Sig="public override System.Reflection.MethodInfo[] GetAccessors (bool nonPublic);" />
    <Member Sig="public override System.Reflection.Module Module { get; }" />
    <Member Sig="public override System.Reflection.ParameterInfo[] GetIndexParameters ();" />
    <Member Sig="public override System.Reflection.PropertyAttributes Attributes { get; }" />
    <Member Sig="public override Type DeclaringType { get; }" />
    <Member Sig="public override Type PropertyType { get; }" />
    <Member Sig="public override Type ReflectedType { get; }" />
    <Member Sig="public override void SetValue (object obj, object value, object[] index);" />
    <Member Sig="public override void SetValue (object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);" />
    <Member Sig="public System.Reflection.Emit.PropertyToken PropertyToken { get; }" />
    <Member Sig="public void AddOtherMethod (System.Reflection.Emit.MethodBuilder mdBuilder);" />
    <Member Sig="public void SetConstant (object defaultValue);" />
    <Member Sig="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
    <Member Sig="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
    <Member Sig="public void SetGetMethod (System.Reflection.Emit.MethodBuilder mdBuilder);" />
    <Member Sig="public void SetSetMethod (System.Reflection.Emit.MethodBuilder mdBuilder);" />
    <Member Sig="void _PropertyBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _PropertyBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _PropertyBuilder.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _PropertyBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.Emit.PropertyToken">
    <Member Sig="public bool Equals (System.Reflection.Emit.PropertyToken obj);" />
    <Member Sig="public int Token { get; }" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static bool op_Equality (System.Reflection.Emit.PropertyToken a, System.Reflection.Emit.PropertyToken b);" />
    <Member Sig="public static bool op_Inequality (System.Reflection.Emit.PropertyToken a, System.Reflection.Emit.PropertyToken b);" />
    <Member Sig="public static readonly System.Reflection.Emit.PropertyToken Empty;" />
  </Type>
  <Type Name="System.Reflection.Emit.SignatureHelper">
    <Member Sig="public byte[] GetSignature ();" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static System.Reflection.Emit.SignatureHelper GetFieldSigHelper (System.Reflection.Module mod);" />
    <Member Sig="public static System.Reflection.Emit.SignatureHelper GetLocalVarSigHelper ();" />
    <Member Sig="public static System.Reflection.Emit.SignatureHelper GetLocalVarSigHelper (System.Reflection.Module mod);" />
    <Member Sig="public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper (System.Reflection.CallingConventions callingConvention, Type returnType);" />
    <Member Sig="public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper (System.Reflection.Module mod, System.Reflection.CallingConventions callingConvention, Type returnType);" />
    <Member Sig="public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper (System.Reflection.Module mod, System.Runtime.InteropServices.CallingConvention unmanagedCallConv, Type returnType);" />
    <Member Sig="public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper (System.Reflection.Module mod, Type returnType, Type[] parameterTypes);" />
    <Member Sig="public static System.Reflection.Emit.SignatureHelper GetMethodSigHelper (System.Runtime.InteropServices.CallingConvention unmanagedCallingConvention, Type returnType);" />
    <Member Sig="public static System.Reflection.Emit.SignatureHelper GetPropertySigHelper (System.Reflection.Module mod, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers);" />
    <Member Sig="public static System.Reflection.Emit.SignatureHelper GetPropertySigHelper (System.Reflection.Module mod, Type returnType, Type[] parameterTypes);" />
    <Member Sig="public static System.Reflection.Emit.SignatureHelper GetPropertySigHelper (System.Reflection.Module mod, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers);" />
    <Member Sig="public void AddArgument (Type argument, bool pinned);" />
    <Member Sig="public void AddArgument (Type argument, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers);" />
    <Member Sig="public void AddArgument (Type clsArgument);" />
    <Member Sig="public void AddArguments (Type[] arguments, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers);" />
    <Member Sig="public void AddSentinel ();" />
    <Member Sig="void _SignatureHelper.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _SignatureHelper.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _SignatureHelper.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _SignatureHelper.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.Emit.SignatureToken">
    <Member Sig="public bool Equals (System.Reflection.Emit.SignatureToken obj);" />
    <Member Sig="public int Token { get; }" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static bool op_Equality (System.Reflection.Emit.SignatureToken a, System.Reflection.Emit.SignatureToken b);" />
    <Member Sig="public static bool op_Inequality (System.Reflection.Emit.SignatureToken a, System.Reflection.Emit.SignatureToken b);" />
    <Member Sig="public static readonly System.Reflection.Emit.SignatureToken Empty;" />
  </Type>
  <Type Name="System.Reflection.Emit.StackBehaviour">
    <Member Sig="Pop0" />
    <Member Sig="Pop1" />
    <Member Sig="Pop1_pop1" />
    <Member Sig="Popi" />
    <Member Sig="Popi_pop1" />
    <Member Sig="Popi_popi" />
    <Member Sig="Popi_popi_popi" />
    <Member Sig="Popi_popi8" />
    <Member Sig="Popi_popr4" />
    <Member Sig="Popi_popr8" />
    <Member Sig="Popref" />
    <Member Sig="Popref_pop1" />
    <Member Sig="Popref_popi" />
    <Member Sig="Popref_popi_pop1" />
    <Member Sig="Popref_popi_popi" />
    <Member Sig="Popref_popi_popi8" />
    <Member Sig="Popref_popi_popr4" />
    <Member Sig="Popref_popi_popr8" />
    <Member Sig="Popref_popi_popref" />
    <Member Sig="Push0" />
    <Member Sig="Push1" />
    <Member Sig="Push1_push1" />
    <Member Sig="Pushi" />
    <Member Sig="Pushi8" />
    <Member Sig="Pushr4" />
    <Member Sig="Pushr8" />
    <Member Sig="Pushref" />
    <Member Sig="Varpop" />
    <Member Sig="Varpush" />
  </Type>
  <Type Name="System.Reflection.Emit.StringToken">
    <Member Sig="public bool Equals (System.Reflection.Emit.StringToken obj);" />
    <Member Sig="public int Token { get; }" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static bool op_Equality (System.Reflection.Emit.StringToken a, System.Reflection.Emit.StringToken b);" />
    <Member Sig="public static bool op_Inequality (System.Reflection.Emit.StringToken a, System.Reflection.Emit.StringToken b);" />
  </Type>
  <Type Name="System.Reflection.Emit.TypeBuilder">
    <Member Sig="protected override bool HasElementTypeImpl ();" />
    <Member Sig="protected override bool IsArrayImpl ();" />
    <Member Sig="protected override bool IsByRefImpl ();" />
    <Member Sig="protected override bool IsCOMObjectImpl ();" />
    <Member Sig="protected override bool IsPointerImpl ();" />
    <Member Sig="protected override bool IsPrimitiveImpl ();" />
    <Member Sig="protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
    <Member Sig="public bool IsCreated ();" />
    <Member Sig="public const int UnspecifiedTypeSize = 0;" />
    <Member Sig="public int Size { get; }" />
    <Member Sig="public override bool IsAssignableFrom (Type c);" />
    <Member Sig="public override bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public override bool IsGenericParameter { get; }" />
    <Member Sig="public override bool IsGenericType { get; }" />
    <Member Sig="public override bool IsGenericTypeDefinition { get; }" />
    <Member Sig="public override bool IsSubclassOf (Type c);" />
    <Member Sig="public override Guid GUID { get; }" />
    <Member Sig="public override int GenericParameterPosition { get; }" />
    <Member Sig="public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
    <Member Sig="public override object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
    <Member Sig="public override RuntimeTypeHandle TypeHandle { get; }" />
    <Member Sig="public override string AssemblyQualifiedName { get; }" />
    <Member Sig="public override string FullName { get; }" />
    <Member Sig="public override string Name { get; }" />
    <Member Sig="public override string Namespace { get; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public override System.Reflection.Assembly Assembly { get; }" />
    <Member Sig="public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.EventInfo[] GetEvents ();" />
    <Member Sig="public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }" />
    <Member Sig="public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
    <Member Sig="public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.MethodBase DeclaringMethod { get; }" />
    <Member Sig="public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.Module Module { get; }" />
    <Member Sig="public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override Type BaseType { get; }" />
    <Member Sig="public override Type DeclaringType { get; }" />
    <Member Sig="public override Type GetElementType ();" />
    <Member Sig="public override Type GetGenericTypeDefinition ();" />
    <Member Sig="public override Type GetInterface (string name, bool ignoreCase);" />
    <Member Sig="public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override Type MakeArrayType ();" />
    <Member Sig="public override Type MakeArrayType (int rank);" />
    <Member Sig="public override Type MakeByRefType ();" />
    <Member Sig="public override Type MakeGenericType (Type[] typeArguments);" />
    <Member Sig="public override Type MakePointerType ();" />
    <Member Sig="public override Type ReflectedType { get; }" />
    <Member Sig="public override Type UnderlyingSystemType { get; }" />
    <Member Sig="public override Type[] GetGenericArguments ();" />
    <Member Sig="public override Type[] GetInterfaces ();" />
    <Member Sig="public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public static System.Reflection.ConstructorInfo GetConstructor (Type type, System.Reflection.ConstructorInfo constructor);" />
    <Member Sig="public static System.Reflection.FieldInfo GetField (Type type, System.Reflection.FieldInfo field);" />
    <Member Sig="public static System.Reflection.MethodInfo GetMethod (Type type, System.Reflection.MethodInfo method);" />
    <Member Sig="public System.Reflection.Emit.ConstructorBuilder DefineConstructor (System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type[] parameterTypes);" />
    <Member Sig="public System.Reflection.Emit.ConstructorBuilder DefineConstructor (System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type[] parameterTypes, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers);" />
    <Member Sig="public System.Reflection.Emit.ConstructorBuilder DefineDefaultConstructor (System.Reflection.MethodAttributes attributes);" />
    <Member Sig="public System.Reflection.Emit.ConstructorBuilder DefineTypeInitializer ();" />
    <Member Sig="public System.Reflection.Emit.EventBuilder DefineEvent (string name, System.Reflection.EventAttributes attributes, Type eventtype);" />
    <Member Sig="public System.Reflection.Emit.FieldBuilder DefineField (string fieldName, Type type, System.Reflection.FieldAttributes attributes);" />
    <Member Sig="public System.Reflection.Emit.FieldBuilder DefineField (string fieldName, Type type, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers, System.Reflection.FieldAttributes attributes);" />
    <Member Sig="public System.Reflection.Emit.FieldBuilder DefineInitializedData (string name, byte[] data, System.Reflection.FieldAttributes attributes);" />
    <Member Sig="public System.Reflection.Emit.FieldBuilder DefineUninitializedData (string name, int size, System.Reflection.FieldAttributes attributes);" />
    <Member Sig="public System.Reflection.Emit.GenericTypeParameterBuilder[] DefineGenericParameters (string[] names);" />
    <Member Sig="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes);" />
    <Member Sig="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention);" />
    <Member Sig="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes);" />
    <Member Sig="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);" />
    <Member Sig="public System.Reflection.Emit.MethodBuilder DefineMethod (string name, System.Reflection.MethodAttributes attributes, Type returnType, Type[] parameterTypes);" />
    <Member Sig="public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, string entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);" />
    <Member Sig="public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, string entryName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);" />
    <Member Sig="public System.Reflection.Emit.MethodBuilder DefinePInvokeMethod (string name, string dllName, System.Reflection.MethodAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] parameterTypes, System.Runtime.InteropServices.CallingConvention nativeCallConv, System.Runtime.InteropServices.CharSet nativeCharSet);" />
    <Member Sig="public System.Reflection.Emit.PackingSize PackingSize { get; }" />
    <Member Sig="public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, System.Reflection.CallingConventions callingConvention, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);" />
    <Member Sig="public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, Type returnType, Type[] parameterTypes);" />
    <Member Sig="public System.Reflection.Emit.PropertyBuilder DefineProperty (string name, System.Reflection.PropertyAttributes attributes, Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers);" />
    <Member Sig="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name);" />
    <Member Sig="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr);" />
    <Member Sig="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent);" />
    <Member Sig="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, int typeSize);" />
    <Member Sig="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, System.Reflection.Emit.PackingSize packSize);" />
    <Member Sig="public System.Reflection.Emit.TypeBuilder DefineNestedType (string name, System.Reflection.TypeAttributes attr, Type parent, Type[] interfaces);" />
    <Member Sig="public System.Reflection.Emit.TypeToken TypeToken { get; }" />
    <Member Sig="public Type CreateType ();" />
    <Member Sig="public void AddDeclarativeSecurity (System.Security.Permissions.SecurityAction action, System.Security.PermissionSet pset);" />
    <Member Sig="public void AddInterfaceImplementation (Type interfaceType);" />
    <Member Sig="public void DefineMethodOverride (System.Reflection.MethodInfo methodInfoBody, System.Reflection.MethodInfo methodInfoDeclaration);" />
    <Member Sig="public void SetCustomAttribute (System.Reflection.ConstructorInfo con, byte[] binaryAttribute);" />
    <Member Sig="public void SetCustomAttribute (System.Reflection.Emit.CustomAttributeBuilder customBuilder);" />
    <Member Sig="public void SetParent (Type parent);" />
    <Member Sig="void _TypeBuilder.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _TypeBuilder.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _TypeBuilder.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _TypeBuilder.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.Emit.TypeToken">
    <Member Sig="public bool Equals (System.Reflection.Emit.TypeToken obj);" />
    <Member Sig="public int Token { get; }" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static bool op_Equality (System.Reflection.Emit.TypeToken a, System.Reflection.Emit.TypeToken b);" />
    <Member Sig="public static bool op_Inequality (System.Reflection.Emit.TypeToken a, System.Reflection.Emit.TypeToken b);" />
    <Member Sig="public static readonly System.Reflection.Emit.TypeToken Empty;" />
  </Type>
  <Type Name="System.Reflection.Emit.UnmanagedMarshal">
    <Member Sig="public Guid IIDGuid { get; }" />
    <Member Sig="public int ElementCount { get; }" />
    <Member Sig="public static System.Reflection.Emit.UnmanagedMarshal DefineByValArray (int elemCount);" />
    <Member Sig="public static System.Reflection.Emit.UnmanagedMarshal DefineByValTStr (int elemCount);" />
    <Member Sig="public static System.Reflection.Emit.UnmanagedMarshal DefineLPArray (System.Runtime.InteropServices.UnmanagedType elemType);" />
    <Member Sig="public static System.Reflection.Emit.UnmanagedMarshal DefineSafeArray (System.Runtime.InteropServices.UnmanagedType elemType);" />
    <Member Sig="public static System.Reflection.Emit.UnmanagedMarshal DefineUnmanagedMarshal (System.Runtime.InteropServices.UnmanagedType unmanagedType);" />
    <Member Sig="public System.Runtime.InteropServices.UnmanagedType BaseType { get; }" />
    <Member Sig="public System.Runtime.InteropServices.UnmanagedType GetUnmanagedType { get; }" />
  </Type>
  <Type Name="System.Reflection.EventAttributes">
    <Member Sig="None" />
    <Member Sig="ReservedMask" />
    <Member Sig="RTSpecialName" />
    <Member Sig="SpecialName" />
  </Type>
  <Type Name="System.Reflection.EventInfo">
    <Member Sig="protected EventInfo ();" />
    <Member Sig="public abstract System.Reflection.EventAttributes Attributes { get; }" />
    <Member Sig="public abstract System.Reflection.MethodInfo GetAddMethod (bool nonPublic);" />
    <Member Sig="public abstract System.Reflection.MethodInfo GetRaiseMethod (bool nonPublic);" />
    <Member Sig="public abstract System.Reflection.MethodInfo GetRemoveMethod (bool nonPublic);" />
    <Member Sig="public bool IsMulticast { get; }" />
    <Member Sig="public bool IsSpecialName { get; }" />
    <Member Sig="public override System.Reflection.MemberTypes MemberType { get; }" />
    <Member Sig="public System.Reflection.MethodInfo GetAddMethod ();" />
    <Member Sig="public System.Reflection.MethodInfo GetRaiseMethod ();" />
    <Member Sig="public System.Reflection.MethodInfo GetRemoveMethod ();" />
    <Member Sig="public System.Reflection.MethodInfo[] GetOtherMethods ();" />
    <Member Sig="public Type EventHandlerType { get; }" />
    <Member Sig="public virtual System.Reflection.MethodInfo[] GetOtherMethods (bool nonPublic);" />
    <Member Sig="public void AddEventHandler (object target, Delegate handler);" />
    <Member Sig="public void RemoveEventHandler (object target, Delegate handler);" />
    <Member Sig="Type _EventInfo.GetType ();" />
    <Member Sig="void _EventInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _EventInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _EventInfo.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _EventInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.ExceptionHandlingClause">
    <Member Sig="public int FilterOffset { get; }" />
    <Member Sig="public int HandlerLength { get; }" />
    <Member Sig="public int HandlerOffset { get; }" />
    <Member Sig="public int TryLength { get; }" />
    <Member Sig="public int TryOffset { get; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public System.Reflection.ExceptionHandlingClauseOptions Flags { get; }" />
    <Member Sig="public Type CatchType { get; }" />
  </Type>
  <Type Name="System.Reflection.ExceptionHandlingClauseOptions">
    <Member Sig="Clause" />
    <Member Sig="Fault" />
    <Member Sig="Filter" />
    <Member Sig="Finally" />
  </Type>
  <Type Name="System.Reflection.FieldAttributes">
    <Member Sig="Assembly" />
    <Member Sig="FamANDAssem" />
    <Member Sig="Family" />
    <Member Sig="FamORAssem" />
    <Member Sig="FieldAccessMask" />
    <Member Sig="HasDefault" />
    <Member Sig="HasFieldMarshal" />
    <Member Sig="HasFieldRVA" />
    <Member Sig="InitOnly" />
    <Member Sig="Literal" />
    <Member Sig="NotSerialized" />
    <Member Sig="PinvokeImpl" />
    <Member Sig="Private" />
    <Member Sig="PrivateScope" />
    <Member Sig="Public" />
    <Member Sig="ReservedMask" />
    <Member Sig="RTSpecialName" />
    <Member Sig="SpecialName" />
    <Member Sig="Static" />
  </Type>
  <Type Name="System.Reflection.FieldInfo">
    <Member Sig="protected FieldInfo ();" />
    <Member Sig="public abstract object GetValue (object obj);" />
    <Member Sig="public abstract RuntimeFieldHandle FieldHandle { get; }" />
    <Member Sig="public abstract System.Reflection.FieldAttributes Attributes { get; }" />
    <Member Sig="public abstract Type FieldType { get; }" />
    <Member Sig="public abstract void SetValue (object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);" />
    <Member Sig="public bool IsAssembly { get; }" />
    <Member Sig="public bool IsFamily { get; }" />
    <Member Sig="public bool IsFamilyAndAssembly { get; }" />
    <Member Sig="public bool IsFamilyOrAssembly { get; }" />
    <Member Sig="public bool IsInitOnly { get; }" />
    <Member Sig="public bool IsLiteral { get; }" />
    <Member Sig="public bool IsNotSerialized { get; }" />
    <Member Sig="public bool IsPinvokeImpl { get; }" />
    <Member Sig="public bool IsPrivate { get; }" />
    <Member Sig="public bool IsPublic { get; }" />
    <Member Sig="public bool IsSpecialName { get; }" />
    <Member Sig="public bool IsStatic { get; }" />
    <Member Sig="public override System.Reflection.MemberTypes MemberType { get; }" />
    <Member Sig="public static System.Reflection.FieldInfo GetFieldFromHandle (RuntimeFieldHandle handle);" />
    <Member Sig="public static System.Reflection.FieldInfo GetFieldFromHandle (RuntimeFieldHandle handle, RuntimeTypeHandle declaringType);" />
    <Member Sig="public virtual object GetRawConstantValue ();" />
    <Member Sig="public virtual object GetValueDirect (TypedReference obj);" />
    <Member Sig="public virtual Type[] GetOptionalCustomModifiers ();" />
    <Member Sig="public virtual Type[] GetRequiredCustomModifiers ();" />
    <Member Sig="public virtual void SetValueDirect (TypedReference obj, object value);" />
    <Member Sig="public void SetValue (object obj, object value);" />
    <Member Sig="Type _FieldInfo.GetType ();" />
    <Member Sig="void _FieldInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _FieldInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _FieldInfo.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _FieldInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.GenericParameterAttributes">
    <Member Sig="Contravariant" />
    <Member Sig="Covariant" />
    <Member Sig="DefaultConstructorConstraint" />
    <Member Sig="None" />
    <Member Sig="NotNullableValueTypeConstraint" />
    <Member Sig="ReferenceTypeConstraint" />
    <Member Sig="SpecialConstraintMask" />
    <Member Sig="VarianceMask" />
  </Type>
  <Type Name="System.Reflection.ICustomAttributeProvider">
    <Member Sig="public bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public object[] GetCustomAttributes (Type attributeType, bool inherit);" />
  </Type>
  <Type Name="System.Reflection.ImageFileMachine">
    <Member Sig="AMD64" />
    <Member Sig="I386" />
    <Member Sig="IA64" />
  </Type>
  <Type Name="System.Reflection.InterfaceMapping">
    <Member Sig="public System.Reflection.MethodInfo[] InterfaceMethods;" />
    <Member Sig="public System.Reflection.MethodInfo[] TargetMethods;" />
    <Member Sig="public Type InterfaceType;" />
    <Member Sig="public Type TargetType;" />
  </Type>
  <Type Name="System.Reflection.InvalidFilterCriteriaException">
    <Member Sig="protected InvalidFilterCriteriaException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public InvalidFilterCriteriaException ();" />
    <Member Sig="public InvalidFilterCriteriaException (string message);" />
    <Member Sig="public InvalidFilterCriteriaException (string message, Exception inner);" />
  </Type>
  <Type Name="System.Reflection.IReflect">
    <Member Sig="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
    <Member Sig="public System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="public System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="public System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public Type UnderlyingSystemType { get; }" />
  </Type>
  <Type Name="System.Reflection.LocalVariableInfo">
    <Member Sig="public override string ToString ();" />
    <Member Sig="public virtual bool IsPinned { get; }" />
    <Member Sig="public virtual int LocalIndex { get; }" />
    <Member Sig="public virtual Type LocalType { get; }" />
  </Type>
  <Type Name="System.Reflection.ManifestResourceInfo">
    <Member Sig="public virtual string FileName { get; }" />
    <Member Sig="public virtual System.Reflection.Assembly ReferencedAssembly { get; }" />
    <Member Sig="public virtual System.Reflection.ResourceLocation ResourceLocation { get; }" />
  </Type>
  <Type Name="System.Reflection.MemberFilter" />
  <Type Name="System.Reflection.MemberInfo">
    <Member Sig="protected MemberInfo ();" />
    <Member Sig="public abstract bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public abstract object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public abstract object[] GetCustomAttributes (Type attributeType, bool inherit);" />
    <Member Sig="public abstract string Name { get; }" />
    <Member Sig="public abstract System.Reflection.MemberTypes MemberType { get; }" />
    <Member Sig="public abstract Type DeclaringType { get; }" />
    <Member Sig="public abstract Type ReflectedType { get; }" />
    <Member Sig="public virtual int MetadataToken { get; }" />
    <Member Sig="public virtual System.Reflection.Module Module { get; }" />
    <Member Sig="Type _MemberInfo.GetType ();" />
    <Member Sig="void _MemberInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _MemberInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _MemberInfo.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _MemberInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.MemberTypes">
    <Member Sig="All" />
    <Member Sig="Constructor" />
    <Member Sig="Custom" />
    <Member Sig="Event" />
    <Member Sig="Field" />
    <Member Sig="Method" />
    <Member Sig="NestedType" />
    <Member Sig="Property" />
    <Member Sig="TypeInfo" />
  </Type>
  <Type Name="System.Reflection.MethodAttributes">
    <Member Sig="Abstract" />
    <Member Sig="Assembly" />
    <Member Sig="CheckAccessOnOverride" />
    <Member Sig="FamANDAssem" />
    <Member Sig="Family" />
    <Member Sig="FamORAssem" />
    <Member Sig="Final" />
    <Member Sig="HasSecurity" />
    <Member Sig="HideBySig" />
    <Member Sig="MemberAccessMask" />
    <Member Sig="NewSlot" />
    <Member Sig="PinvokeImpl" />
    <Member Sig="Private" />
    <Member Sig="PrivateScope" />
    <Member Sig="Public" />
    <Member Sig="RequireSecObject" />
    <Member Sig="ReservedMask" />
    <Member Sig="ReuseSlot" />
    <Member Sig="RTSpecialName" />
    <Member Sig="SpecialName" />
    <Member Sig="Static" />
    <Member Sig="UnmanagedExport" />
    <Member Sig="Virtual" />
    <Member Sig="VtableLayoutMask" />
  </Type>
  <Type Name="System.Reflection.MethodBase">
    <Member Sig="bool System.Runtime.InteropServices._MethodBase.IsAbstract { get; }" />
    <Member Sig="bool System.Runtime.InteropServices._MethodBase.IsAssembly { get; }" />
    <Member Sig="bool System.Runtime.InteropServices._MethodBase.IsConstructor { get; }" />
    <Member Sig="bool System.Runtime.InteropServices._MethodBase.IsFamily { get; }" />
    <Member Sig="bool System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly { get; }" />
    <Member Sig="bool System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly { get; }" />
    <Member Sig="bool System.Runtime.InteropServices._MethodBase.IsFinal { get; }" />
    <Member Sig="bool System.Runtime.InteropServices._MethodBase.IsHideBySig { get; }" />
    <Member Sig="bool System.Runtime.InteropServices._MethodBase.IsPrivate { get; }" />
    <Member Sig="bool System.Runtime.InteropServices._MethodBase.IsPublic { get; }" />
    <Member Sig="bool System.Runtime.InteropServices._MethodBase.IsSpecialName { get; }" />
    <Member Sig="bool System.Runtime.InteropServices._MethodBase.IsStatic { get; }" />
    <Member Sig="bool System.Runtime.InteropServices._MethodBase.IsVirtual { get; }" />
    <Member Sig="protected MethodBase ();" />
    <Member Sig="public abstract object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
    <Member Sig="public abstract RuntimeMethodHandle MethodHandle { get; }" />
    <Member Sig="public abstract System.Reflection.MethodAttributes Attributes { get; }" />
    <Member Sig="public abstract System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
    <Member Sig="public abstract System.Reflection.ParameterInfo[] GetParameters ();" />
    <Member Sig="public bool IsAbstract { get; }" />
    <Member Sig="public bool IsAssembly { get; }" />
    <Member Sig="public bool IsConstructor { get; }" />
    <Member Sig="public bool IsFamily { get; }" />
    <Member Sig="public bool IsFamilyAndAssembly { get; }" />
    <Member Sig="public bool IsFamilyOrAssembly { get; }" />
    <Member Sig="public bool IsFinal { get; }" />
    <Member Sig="public bool IsHideBySig { get; }" />
    <Member Sig="public bool IsPrivate { get; }" />
    <Member Sig="public bool IsPublic { get; }" />
    <Member Sig="public bool IsSpecialName { get; }" />
    <Member Sig="public bool IsStatic { get; }" />
    <Member Sig="public bool IsVirtual { get; }" />
    <Member Sig="public object Invoke (object obj, object[] parameters);" />
    <Member Sig="public static System.Reflection.MethodBase GetCurrentMethod ();" />
    <Member Sig="public static System.Reflection.MethodBase GetMethodFromHandle (RuntimeMethodHandle handle);" />
    <Member Sig="public static System.Reflection.MethodBase GetMethodFromHandle (RuntimeMethodHandle handle, RuntimeTypeHandle declaringType);" />
    <Member Sig="public virtual bool ContainsGenericParameters { get; }" />
    <Member Sig="public virtual bool IsGenericMethod { get; }" />
    <Member Sig="public virtual bool IsGenericMethodDefinition { get; }" />
    <Member Sig="public virtual System.Reflection.CallingConventions CallingConvention { get; }" />
    <Member Sig="public virtual System.Reflection.MethodBody GetMethodBody ();" />
    <Member Sig="public virtual Type[] GetGenericArguments ();" />
    <Member Sig="Type _MethodBase.GetType ();" />
    <Member Sig="void _MethodBase.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _MethodBase.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _MethodBase.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _MethodBase.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.MethodBody">
    <Member Sig="public bool InitLocals { get; }" />
    <Member Sig="public byte[] GetILAsByteArray ();" />
    <Member Sig="public int LocalSignatureMetadataToken { get; }" />
    <Member Sig="public int MaxStackSize { get; }" />
    <Member Sig="public System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt; ExceptionHandlingClauses { get; }" />
    <Member Sig="public System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt; LocalVariables { get; }" />
  </Type>
  <Type Name="System.Reflection.MethodImplAttributes">
    <Member Sig="CodeTypeMask" />
    <Member Sig="ForwardRef" />
    <Member Sig="IL" />
    <Member Sig="InternalCall" />
    <Member Sig="Managed" />
    <Member Sig="ManagedMask" />
    <Member Sig="MaxMethodImplVal" />
    <Member Sig="Native" />
    <Member Sig="NoInlining" />
    <Member Sig="NoOptimization" />
    <Member Sig="OPTIL" />
    <Member Sig="PreserveSig" />
    <Member Sig="Runtime" />
    <Member Sig="Synchronized" />
    <Member Sig="Unmanaged" />
  </Type>
  <Type Name="System.Reflection.MethodInfo">
    <Member Sig="protected MethodInfo ();" />
    <Member Sig="public abstract System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }" />
    <Member Sig="public abstract System.Reflection.MethodInfo GetBaseDefinition ();" />
    <Member Sig="public override bool ContainsGenericParameters { get; }" />
    <Member Sig="public override bool IsGenericMethod { get; }" />
    <Member Sig="public override bool IsGenericMethodDefinition { get; }" />
    <Member Sig="public override System.Reflection.MemberTypes MemberType { get; }" />
    <Member Sig="public override Type[] GetGenericArguments ();" />
    <Member Sig="public virtual System.Reflection.MethodInfo GetGenericMethodDefinition ();" />
    <Member Sig="public virtual System.Reflection.MethodInfo MakeGenericMethod (Type[] typeArguments);" />
    <Member Sig="public virtual System.Reflection.ParameterInfo ReturnParameter { get; }" />
    <Member Sig="public virtual Type ReturnType { get; }" />
    <Member Sig="Type _MethodInfo.GetType ();" />
    <Member Sig="void _MethodInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _MethodInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _MethodInfo.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _MethodInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.Missing">
    <Member Sig="public static readonly System.Reflection.Missing Value;" />
    <Member Sig="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.Reflection.Module">
    <Member Sig="protected virtual System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="public bool IsResource ();" />
    <Member Sig="public byte[] ResolveSignature (int metadataToken);" />
    <Member Sig="public Guid ModuleVersionId { get; }" />
    <Member Sig="public int MDStreamVersion { get; }" />
    <Member Sig="public int MetadataToken { get; }" />
    <Member Sig="public ModuleHandle ModuleHandle { get; }" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static readonly System.Reflection.TypeFilter FilterTypeName;" />
    <Member Sig="public static readonly System.Reflection.TypeFilter FilterTypeNameIgnoreCase;" />
    <Member Sig="public string Name { get; }" />
    <Member Sig="public string ResolveString (int metadataToken);" />
    <Member Sig="public string ScopeName { get; }" />
    <Member Sig="public System.Reflection.Assembly Assembly { get; }" />
    <Member Sig="public System.Reflection.FieldInfo GetField (string name);" />
    <Member Sig="public System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.FieldInfo ResolveField (int metadataToken);" />
    <Member Sig="public System.Reflection.FieldInfo ResolveField (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);" />
    <Member Sig="public System.Reflection.FieldInfo[] GetFields ();" />
    <Member Sig="public System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingFlags);" />
    <Member Sig="public System.Reflection.MemberInfo ResolveMember (int metadataToken);" />
    <Member Sig="public System.Reflection.MemberInfo ResolveMember (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);" />
    <Member Sig="public System.Reflection.MethodBase ResolveMethod (int metadataToken);" />
    <Member Sig="public System.Reflection.MethodBase ResolveMethod (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);" />
    <Member Sig="public System.Reflection.MethodInfo GetMethod (string name);" />
    <Member Sig="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="public System.Reflection.MethodInfo GetMethod (string name, Type[] types);" />
    <Member Sig="public System.Reflection.MethodInfo[] GetMethods ();" />
    <Member Sig="public System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingFlags);" />
    <Member Sig="public System.Security.Cryptography.X509Certificates.X509Certificate GetSignerCertificate ();" />
    <Member Sig="public Type ResolveType (int metadataToken);" />
    <Member Sig="public Type ResolveType (int metadataToken, Type[] genericTypeArguments, Type[] genericMethodArguments);" />
    <Member Sig="public virtual bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public virtual object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public virtual object[] GetCustomAttributes (Type attributeType, bool inherit);" />
    <Member Sig="public virtual string FullyQualifiedName { get; }" />
    <Member Sig="public virtual Type GetType (string className);" />
    <Member Sig="public virtual Type GetType (string className, bool ignoreCase);" />
    <Member Sig="public virtual Type GetType (string className, bool throwOnError, bool ignoreCase);" />
    <Member Sig="public virtual Type[] FindTypes (System.Reflection.TypeFilter filter, object filterCriteria);" />
    <Member Sig="public virtual Type[] GetTypes ();" />
    <Member Sig="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public void GetPEKind (out System.Reflection.PortableExecutableKinds peKind, out System.Reflection.ImageFileMachine machine);" />
    <Member Sig="void _Module.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _Module.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _Module.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _Module.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.ModuleResolveEventHandler" />
  <Type Name="System.Reflection.ObfuscateAssemblyAttribute">
    <Member Sig="public bool AssemblyIsPrivate { get; }" />
    <Member Sig="public bool StripAfterObfuscation { get; set; }" />
    <Member Sig="public ObfuscateAssemblyAttribute (bool assemblyIsPrivate);" />
  </Type>
  <Type Name="System.Reflection.ObfuscationAttribute">
    <Member Sig="public bool ApplyToMembers { get; set; }" />
    <Member Sig="public bool Exclude { get; set; }" />
    <Member Sig="public bool StripAfterObfuscation { get; set; }" />
    <Member Sig="public ObfuscationAttribute ();" />
    <Member Sig="public string Feature { get; set; }" />
  </Type>
  <Type Name="System.Reflection.ParameterAttributes">
    <Member Sig="HasDefault" />
    <Member Sig="HasFieldMarshal" />
    <Member Sig="In" />
    <Member Sig="Lcid" />
    <Member Sig="None" />
    <Member Sig="Optional" />
    <Member Sig="Out" />
    <Member Sig="Reserved3" />
    <Member Sig="Reserved4" />
    <Member Sig="ReservedMask" />
    <Member Sig="Retval" />
  </Type>
  <Type Name="System.Reflection.ParameterInfo">
    <Member Sig="protected int PositionImpl;" />
    <Member Sig="protected object DefaultValueImpl;" />
    <Member Sig="protected ParameterInfo ();" />
    <Member Sig="protected string NameImpl;" />
    <Member Sig="protected System.Reflection.MemberInfo MemberImpl;" />
    <Member Sig="protected System.Reflection.ParameterAttributes AttrsImpl;" />
    <Member Sig="protected Type ClassImpl;" />
    <Member Sig="public bool IsIn { get; }" />
    <Member Sig="public bool IsLcid { get; }" />
    <Member Sig="public bool IsOptional { get; }" />
    <Member Sig="public bool IsOut { get; }" />
    <Member Sig="public bool IsRetval { get; }" />
    <Member Sig="public int MetadataToken { get; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public virtual bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public virtual int Position { get; }" />
    <Member Sig="public virtual object DefaultValue { get; }" />
    <Member Sig="public virtual object RawDefaultValue { get; }" />
    <Member Sig="public virtual object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public virtual object[] GetCustomAttributes (Type attributeType, bool inherit);" />
    <Member Sig="public virtual string Name { get; }" />
    <Member Sig="public virtual System.Reflection.MemberInfo Member { get; }" />
    <Member Sig="public virtual System.Reflection.ParameterAttributes Attributes { get; }" />
    <Member Sig="public virtual Type ParameterType { get; }" />
    <Member Sig="public virtual Type[] GetOptionalCustomModifiers ();" />
    <Member Sig="public virtual Type[] GetRequiredCustomModifiers ();" />
    <Member Sig="void _ParameterInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _ParameterInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _ParameterInfo.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _ParameterInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.ParameterModifier">
    <Member Sig="public bool this[int index] { get; set; }" />
    <Member Sig="public ParameterModifier (int parameterCount);" />
  </Type>
  <Type Name="System.Reflection.Pointer">
    <Member Sig="public static object Box (void* ptr, Type type);" />
    <Member Sig="public static void* Unbox (object ptr);" />
    <Member Sig="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.Reflection.PortableExecutableKinds">
    <Member Sig="ILOnly" />
    <Member Sig="NotAPortableExecutableImage" />
    <Member Sig="PE32Plus" />
    <Member Sig="Required32Bit" />
    <Member Sig="Unmanaged32Bit" />
  </Type>
  <Type Name="System.Reflection.ProcessorArchitecture">
    <Member Sig="Amd64" />
    <Member Sig="IA64" />
    <Member Sig="MSIL" />
    <Member Sig="None" />
    <Member Sig="X86" />
  </Type>
  <Type Name="System.Reflection.PropertyAttributes">
    <Member Sig="HasDefault" />
    <Member Sig="None" />
    <Member Sig="Reserved2" />
    <Member Sig="Reserved3" />
    <Member Sig="Reserved4" />
    <Member Sig="ReservedMask" />
    <Member Sig="RTSpecialName" />
    <Member Sig="SpecialName" />
  </Type>
  <Type Name="System.Reflection.PropertyInfo">
    <Member Sig="protected PropertyInfo ();" />
    <Member Sig="public abstract bool CanRead { get; }" />
    <Member Sig="public abstract bool CanWrite { get; }" />
    <Member Sig="public abstract object GetValue (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);" />
    <Member Sig="public abstract System.Reflection.MethodInfo GetGetMethod (bool nonPublic);" />
    <Member Sig="public abstract System.Reflection.MethodInfo GetSetMethod (bool nonPublic);" />
    <Member Sig="public abstract System.Reflection.MethodInfo[] GetAccessors (bool nonPublic);" />
    <Member Sig="public abstract System.Reflection.ParameterInfo[] GetIndexParameters ();" />
    <Member Sig="public abstract System.Reflection.PropertyAttributes Attributes { get; }" />
    <Member Sig="public abstract Type PropertyType { get; }" />
    <Member Sig="public abstract void SetValue (object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);" />
    <Member Sig="public bool IsSpecialName { get; }" />
    <Member Sig="public override System.Reflection.MemberTypes MemberType { get; }" />
    <Member Sig="public System.Reflection.MethodInfo GetGetMethod ();" />
    <Member Sig="public System.Reflection.MethodInfo GetSetMethod ();" />
    <Member Sig="public System.Reflection.MethodInfo[] GetAccessors ();" />
    <Member Sig="public virtual object GetConstantValue ();" />
    <Member Sig="public virtual object GetRawConstantValue ();" />
    <Member Sig="public virtual object GetValue (object obj, object[] index);" />
    <Member Sig="public virtual Type[] GetOptionalCustomModifiers ();" />
    <Member Sig="public virtual Type[] GetRequiredCustomModifiers ();" />
    <Member Sig="public virtual void SetValue (object obj, object value, object[] index);" />
    <Member Sig="Type _PropertyInfo.GetType ();" />
    <Member Sig="void _PropertyInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _PropertyInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _PropertyInfo.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _PropertyInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Reflection.ReflectionTypeLoadException">
    <Member Sig="public Exception[] LoaderExceptions { get; }" />
    <Member Sig="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public ReflectionTypeLoadException (Type[] classes, Exception[] exceptions);" />
    <Member Sig="public ReflectionTypeLoadException (Type[] classes, Exception[] exceptions, string message);" />
    <Member Sig="public Type[] Types { get; }" />
  </Type>
  <Type Name="System.Reflection.ResourceAttributes">
    <Member Sig="Private" />
    <Member Sig="Public" />
  </Type>
  <Type Name="System.Reflection.ResourceLocation">
    <Member Sig="ContainedInAnotherAssembly" />
    <Member Sig="ContainedInManifestFile" />
    <Member Sig="Embedded" />
  </Type>
  <Type Name="System.Reflection.StrongNameKeyPair">
    <Member Sig="protected StrongNameKeyPair (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public byte[] PublicKey { get; }" />
    <Member Sig="public StrongNameKeyPair (byte[] keyPairArray);" />
    <Member Sig="public StrongNameKeyPair (string keyPairContainer);" />
    <Member Sig="public StrongNameKeyPair (System.IO.FileStream keyPairFile);" />
    <Member Sig="void IDeserializationCallback.OnDeserialization (object sender);" />
    <Member Sig="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.Reflection.TargetException">
    <Member Sig="protected TargetException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public TargetException ();" />
    <Member Sig="public TargetException (string message);" />
    <Member Sig="public TargetException (string message, Exception inner);" />
  </Type>
  <Type Name="System.Reflection.TargetInvocationException">
    <Member Sig="public TargetInvocationException (Exception inner);" />
    <Member Sig="public TargetInvocationException (string message, Exception inner);" />
  </Type>
  <Type Name="System.Reflection.TargetParameterCountException">
    <Member Sig="public TargetParameterCountException ();" />
    <Member Sig="public TargetParameterCountException (string message);" />
    <Member Sig="public TargetParameterCountException (string message, Exception inner);" />
  </Type>
  <Type Name="System.Reflection.TypeAttributes">
    <Member Sig="Abstract" />
    <Member Sig="AnsiClass" />
    <Member Sig="AutoClass" />
    <Member Sig="AutoLayout" />
    <Member Sig="BeforeFieldInit" />
    <Member Sig="Class" />
    <Member Sig="ClassSemanticsMask" />
    <Member Sig="CustomFormatClass" />
    <Member Sig="CustomFormatMask" />
    <Member Sig="ExplicitLayout" />
    <Member Sig="HasSecurity" />
    <Member Sig="Import" />
    <Member Sig="Interface" />
    <Member Sig="LayoutMask" />
    <Member Sig="NestedAssembly" />
    <Member Sig="NestedFamANDAssem" />
    <Member Sig="NestedFamily" />
    <Member Sig="NestedFamORAssem" />
    <Member Sig="NestedPrivate" />
    <Member Sig="NestedPublic" />
    <Member Sig="NotPublic" />
    <Member Sig="Public" />
    <Member Sig="ReservedMask" />
    <Member Sig="RTSpecialName" />
    <Member Sig="Sealed" />
    <Member Sig="SequentialLayout" />
    <Member Sig="Serializable" />
    <Member Sig="SpecialName" />
    <Member Sig="StringFormatMask" />
    <Member Sig="UnicodeClass" />
    <Member Sig="VisibilityMask" />
  </Type>
  <Type Name="System.Reflection.TypeDelegator">
    <Member Sig="protected override bool HasElementTypeImpl ();" />
    <Member Sig="protected override bool IsArrayImpl ();" />
    <Member Sig="protected override bool IsByRefImpl ();" />
    <Member Sig="protected override bool IsCOMObjectImpl ();" />
    <Member Sig="protected override bool IsPointerImpl ();" />
    <Member Sig="protected override bool IsPrimitiveImpl ();" />
    <Member Sig="protected override bool IsValueTypeImpl ();" />
    <Member Sig="protected override System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="protected override System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="protected override System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
    <Member Sig="protected Type typeImpl;" />
    <Member Sig="protected TypeDelegator ();" />
    <Member Sig="public override bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public override Guid GUID { get; }" />
    <Member Sig="public override int MetadataToken { get; }" />
    <Member Sig="public override object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
    <Member Sig="public override object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public override object[] GetCustomAttributes (Type attributeType, bool inherit);" />
    <Member Sig="public override RuntimeTypeHandle TypeHandle { get; }" />
    <Member Sig="public override string AssemblyQualifiedName { get; }" />
    <Member Sig="public override string FullName { get; }" />
    <Member Sig="public override string Name { get; }" />
    <Member Sig="public override string Namespace { get; }" />
    <Member Sig="public override System.Reflection.Assembly Assembly { get; }" />
    <Member Sig="public override System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.EventInfo[] GetEvents ();" />
    <Member Sig="public override System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
    <Member Sig="public override System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override System.Reflection.Module Module { get; }" />
    <Member Sig="public override System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override Type BaseType { get; }" />
    <Member Sig="public override Type GetElementType ();" />
    <Member Sig="public override Type GetInterface (string name, bool ignoreCase);" />
    <Member Sig="public override Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public override Type UnderlyingSystemType { get; }" />
    <Member Sig="public override Type[] GetInterfaces ();" />
    <Member Sig="public override Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public TypeDelegator (Type delegatingType);" />
  </Type>
  <Type Name="System.Reflection.TypeFilter" />
  <Type Name="System.ResolveEventArgs">
    <Member Sig="public ResolveEventArgs (string name);" />
    <Member Sig="public string Name { get; }" />
  </Type>
  <Type Name="System.ResolveEventHandler" />
  <Type Name="System.Resources.IResourceReader">
    <Member Sig="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
    <Member Sig="public void Close ();" />
  </Type>
  <Type Name="System.Resources.IResourceWriter">
    <Member Sig="public void AddResource (string name, byte[] value);" />
    <Member Sig="public void AddResource (string name, object value);" />
    <Member Sig="public void AddResource (string name, string value);" />
    <Member Sig="public void Close ();" />
    <Member Sig="public void Generate ();" />
  </Type>
  <Type Name="System.Resources.MissingManifestResourceException">
    <Member Sig="protected MissingManifestResourceException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public MissingManifestResourceException ();" />
    <Member Sig="public MissingManifestResourceException (string message);" />
    <Member Sig="public MissingManifestResourceException (string message, Exception inner);" />
  </Type>
  <Type Name="System.Resources.MissingSatelliteAssemblyException">
    <Member Sig="protected MissingSatelliteAssemblyException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public MissingSatelliteAssemblyException ();" />
    <Member Sig="public MissingSatelliteAssemblyException (string message);" />
    <Member Sig="public MissingSatelliteAssemblyException (string message, Exception inner);" />
    <Member Sig="public MissingSatelliteAssemblyException (string message, string cultureName);" />
    <Member Sig="public string CultureName { get; }" />
  </Type>
  <Type Name="System.Resources.NeutralResourcesLanguageAttribute">
    <Member Sig="public NeutralResourcesLanguageAttribute (string cultureName);" />
    <Member Sig="public NeutralResourcesLanguageAttribute (string cultureName, System.Resources.UltimateResourceFallbackLocation location);" />
    <Member Sig="public string CultureName { get; }" />
    <Member Sig="public System.Resources.UltimateResourceFallbackLocation Location { get; }" />
  </Type>
  <Type Name="System.Resources.ResourceManager">
    <Member Sig="protected ResourceManager ();" />
    <Member Sig="protected static System.Globalization.CultureInfo GetNeutralResourcesLanguage (System.Reflection.Assembly a);" />
    <Member Sig="protected static Version GetSatelliteContractVersion (System.Reflection.Assembly a);" />
    <Member Sig="protected string BaseNameField;" />
    <Member Sig="protected System.Collections.Hashtable ResourceSets;" />
    <Member Sig="protected System.Reflection.Assembly MainAssembly;" />
    <Member Sig="protected System.Resources.UltimateResourceFallbackLocation FallbackLocation { get; set; }" />
    <Member Sig="protected virtual string GetResourceFileName (System.Globalization.CultureInfo culture);" />
    <Member Sig="protected virtual System.Resources.ResourceSet InternalGetResourceSet (System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents);" />
    <Member Sig="public ResourceManager (string baseName, System.Reflection.Assembly assembly);" />
    <Member Sig="public ResourceManager (string baseName, System.Reflection.Assembly assembly, Type usingResourceSet);" />
    <Member Sig="public ResourceManager (Type resourceSource);" />
    <Member Sig="public static readonly int HeaderVersionNumber;" />
    <Member Sig="public static readonly int MagicNumber;" />
    <Member Sig="public static System.Resources.ResourceManager CreateFileBasedResourceManager (string baseName, string resourceDir, Type usingResourceSet);" />
    <Member Sig="public System.IO.UnmanagedMemoryStream GetStream (string name);" />
    <Member Sig="public System.IO.UnmanagedMemoryStream GetStream (string name, System.Globalization.CultureInfo culture);" />
    <Member Sig="public virtual bool IgnoreCase { get; set; }" />
    <Member Sig="public virtual object GetObject (string name);" />
    <Member Sig="public virtual object GetObject (string name, System.Globalization.CultureInfo culture);" />
    <Member Sig="public virtual string BaseName { get; }" />
    <Member Sig="public virtual string GetString (string name);" />
    <Member Sig="public virtual string GetString (string name, System.Globalization.CultureInfo culture);" />
    <Member Sig="public virtual System.Resources.ResourceSet GetResourceSet (System.Globalization.CultureInfo culture, bool createIfNotExists, bool tryParents);" />
    <Member Sig="public virtual Type ResourceSetType { get; }" />
    <Member Sig="public virtual void ReleaseAllResources ();" />
  </Type>
  <Type Name="System.Resources.ResourceReader">
    <Member Sig="public ResourceReader (string fileName);" />
    <Member Sig="public ResourceReader (System.IO.Stream stream);" />
    <Member Sig="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
    <Member Sig="public void Close ();" />
    <Member Sig="public void GetResourceData (string resourceName, out string resourceType, out byte[] resourceData);" />
    <Member Sig="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
    <Member Sig="void IDisposable.Dispose ();" />
  </Type>
  <Type Name="System.Resources.ResourceSet">
    <Member Sig="protected ResourceSet ();" />
    <Member Sig="protected System.Collections.Hashtable Table;" />
    <Member Sig="protected System.Resources.IResourceReader Reader;" />
    <Member Sig="protected virtual void Dispose (bool disposing);" />
    <Member Sig="protected virtual void ReadResources ();" />
    <Member Sig="public ResourceSet (string fileName);" />
    <Member Sig="public ResourceSet (System.IO.Stream stream);" />
    <Member Sig="public ResourceSet (System.Resources.IResourceReader reader);" />
    <Member Sig="public virtual object GetObject (string name);" />
    <Member Sig="public virtual object GetObject (string name, bool ignoreCase);" />
    <Member Sig="public virtual string GetString (string name);" />
    <Member Sig="public virtual string GetString (string name, bool ignoreCase);" />
    <Member Sig="public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();" />
    <Member Sig="public virtual Type GetDefaultReader ();" />
    <Member Sig="public virtual Type GetDefaultWriter ();" />
    <Member Sig="public virtual void Close ();" />
    <Member Sig="public void Dispose ();" />
    <Member Sig="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
  </Type>
  <Type Name="System.Resources.ResourceWriter">
    <Member Sig="public ResourceWriter (string fileName);" />
    <Member Sig="public ResourceWriter (System.IO.Stream stream);" />
    <Member Sig="public void AddResource (string name, byte[] value);" />
    <Member Sig="public void AddResource (string name, object value);" />
    <Member Sig="public void AddResource (string name, string value);" />
    <Member Sig="public void AddResourceData (string name, string typeName, byte[] serializedData);" />
    <Member Sig="public void Close ();" />
    <Member Sig="public void Dispose ();" />
    <Member Sig="public void Generate ();" />
  </Type>
  <Type Name="System.Resources.SatelliteContractVersionAttribute">
    <Member Sig="public SatelliteContractVersionAttribute (string version);" />
    <Member Sig="public string Version { get; }" />
  </Type>
  <Type Name="System.Resources.UltimateResourceFallbackLocation">
    <Member Sig="MainAssembly" />
    <Member Sig="Satellite" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.AccessedThroughPropertyAttribute">
    <Member Sig="public AccessedThroughPropertyAttribute (string propertyName);" />
    <Member Sig="public string PropertyName { get; }" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.CallConvCdecl">
    <Member Sig="public CallConvCdecl ();" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.CallConvFastcall">
    <Member Sig="public CallConvFastcall ();" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.CallConvStdcall">
    <Member Sig="public CallConvStdcall ();" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.CallConvThiscall">
    <Member Sig="public CallConvThiscall ();" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.CompilationRelaxations">
    <Member Sig="NoStringInterning" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.CompilationRelaxationsAttribute">
    <Member Sig="public CompilationRelaxationsAttribute (int relaxations);" />
    <Member Sig="public CompilationRelaxationsAttribute (System.Runtime.CompilerServices.CompilationRelaxations relaxations);" />
    <Member Sig="public int CompilationRelaxations { get; }" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.CompilerGeneratedAttribute">
    <Member Sig="public CompilerGeneratedAttribute ();" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.CompilerGlobalScopeAttribute">
    <Member Sig="public CompilerGlobalScopeAttribute ();" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.CompilerMarshalOverride" />
  <Type Name="System.Runtime.CompilerServices.CustomConstantAttribute">
    <Member Sig="protected CustomConstantAttribute ();" />
    <Member Sig="public abstract object Value { get; }" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.DateTimeConstantAttribute">
    <Member Sig="public DateTimeConstantAttribute (long ticks);" />
    <Member Sig="public override object Value { get; }" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.DecimalConstantAttribute">
    <Member Sig="public decimal Value { get; }" />
    <Member Sig="public DecimalConstantAttribute (byte scale, byte sign, int hi, int mid, int low);" />
    <Member Sig="public DecimalConstantAttribute (byte scale, byte sign, uint hi, uint mid, uint low);" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.DefaultDependencyAttribute">
    <Member Sig="public DefaultDependencyAttribute (System.Runtime.CompilerServices.LoadHint loadHintArgument);" />
    <Member Sig="public System.Runtime.CompilerServices.LoadHint LoadHint { get; }" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.DependencyAttribute">
    <Member Sig="public DependencyAttribute (string dependentAssemblyArgument, System.Runtime.CompilerServices.LoadHint loadHintArgument);" />
    <Member Sig="public string DependentAssembly { get; }" />
    <Member Sig="public System.Runtime.CompilerServices.LoadHint LoadHint { get; }" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.DiscardableAttribute">
    <Member Sig="public DiscardableAttribute ();" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.FixedAddressValueTypeAttribute">
    <Member Sig="public FixedAddressValueTypeAttribute ();" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.FixedBufferAttribute">
    <Member Sig="public FixedBufferAttribute (Type elementType, int length);" />
    <Member Sig="public int Length { get; }" />
    <Member Sig="public Type ElementType { get; }" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.HasCopySemanticsAttribute">
    <Member Sig="public HasCopySemanticsAttribute ();" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.IDispatchConstantAttribute">
    <Member Sig="public IDispatchConstantAttribute ();" />
    <Member Sig="public override object Value { get; }" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.IndexerNameAttribute">
    <Member Sig="public IndexerNameAttribute (string indexerName);" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
    <Member Sig="public bool AllInternalsVisible { get; set; }" />
    <Member Sig="public InternalsVisibleToAttribute (string assemblyName);" />
    <Member Sig="public string AssemblyName { get; }" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.IsBoxed" />
  <Type Name="System.Runtime.CompilerServices.IsByValue" />
  <Type Name="System.Runtime.CompilerServices.IsConst" />
  <Type Name="System.Runtime.CompilerServices.IsCopyConstructed" />
  <Type Name="System.Runtime.CompilerServices.IsExplicitlyDereferenced" />
  <Type Name="System.Runtime.CompilerServices.IsImplicitlyDereferenced" />
  <Type Name="System.Runtime.CompilerServices.IsJitIntrinsic" />
  <Type Name="System.Runtime.CompilerServices.IsLong" />
  <Type Name="System.Runtime.CompilerServices.IsPinned" />
  <Type Name="System.Runtime.CompilerServices.IsSignUnspecifiedByte" />
  <Type Name="System.Runtime.CompilerServices.IsUdtReturn" />
  <Type Name="System.Runtime.CompilerServices.IsVolatile" />
  <Type Name="System.Runtime.CompilerServices.IUnknownConstantAttribute">
    <Member Sig="public IUnknownConstantAttribute ();" />
    <Member Sig="public override object Value { get; }" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.LoadHint">
    <Member Sig="Always" />
    <Member Sig="Default" />
    <Member Sig="Sometimes" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.MethodCodeType">
    <Member Sig="IL" />
    <Member Sig="Native" />
    <Member Sig="OPTIL" />
    <Member Sig="Runtime" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.MethodImplAttribute">
    <Member Sig="public MethodImplAttribute ();" />
    <Member Sig="public MethodImplAttribute (short value);" />
    <Member Sig="public MethodImplAttribute (System.Runtime.CompilerServices.MethodImplOptions methodImplOptions);" />
    <Member Sig="public System.Runtime.CompilerServices.MethodCodeType MethodCodeType;" />
    <Member Sig="public System.Runtime.CompilerServices.MethodImplOptions Value { get; }" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.MethodImplOptions">
    <Member Sig="ForwardRef" />
    <Member Sig="InternalCall" />
    <Member Sig="NoInlining" />
    <Member Sig="NoOptimization" />
    <Member Sig="PreserveSig" />
    <Member Sig="Synchronized" />
    <Member Sig="Unmanaged" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.NativeCppClassAttribute">
    <Member Sig="public NativeCppClassAttribute ();" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.RequiredAttributeAttribute">
    <Member Sig="public RequiredAttributeAttribute (Type requiredContract);" />
    <Member Sig="public Type RequiredContract { get; }" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.RuntimeCompatibilityAttribute">
    <Member Sig="public bool WrapNonExceptionThrows { get; set; }" />
    <Member Sig="public RuntimeCompatibilityAttribute ();" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.RuntimeHelpers">
    <Member Sig="public static bool Equals (object o1, object o2);" />
    <Member Sig="public static int GetHashCode (object o);" />
    <Member Sig="public static int OffsetToStringData { get; }" />
    <Member Sig="public static object GetObjectValue (object obj);" />
    <Member Sig="public static void ExecuteCodeWithGuaranteedCleanup (System.Runtime.CompilerServices.RuntimeHelpers.TryCode code, System.Runtime.CompilerServices.RuntimeHelpers.CleanupCode backoutCode, object userData);" />
    <Member Sig="public static void InitializeArray (Array array, RuntimeFieldHandle fldHandle);" />
    <Member Sig="public static void PrepareConstrainedRegions ();" />
    <Member Sig="public static void PrepareConstrainedRegionsNoOP ();" />
    <Member Sig="public static void PrepareDelegate (Delegate d);" />
    <Member Sig="public static void PrepareMethod (RuntimeMethodHandle method);" />
    <Member Sig="public static void PrepareMethod (RuntimeMethodHandle method, RuntimeTypeHandle[] instantiation);" />
    <Member Sig="public static void ProbeForSufficientStack ();" />
    <Member Sig="public static void RunClassConstructor (RuntimeTypeHandle type);" />
    <Member Sig="public static void RunModuleConstructor (ModuleHandle module);" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.RuntimeHelpers/CleanupCode" />
  <Type Name="System.Runtime.CompilerServices.RuntimeHelpers/TryCode" />
  <Type Name="System.Runtime.CompilerServices.RuntimeWrappedException">
    <Member Sig="public object WrappedException { get; }" />
    <Member Sig="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.ScopelessEnumAttribute">
    <Member Sig="public ScopelessEnumAttribute ();" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.SpecialNameAttribute">
    <Member Sig="public SpecialNameAttribute ();" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.StringFreezingAttribute">
    <Member Sig="public StringFreezingAttribute ();" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.SuppressIldasmAttribute">
    <Member Sig="public SuppressIldasmAttribute ();" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.TypeForwardedToAttribute">
    <Member Sig="public Type Destination { get; }" />
    <Member Sig="public TypeForwardedToAttribute (Type destination);" />
  </Type>
  <Type Name="System.Runtime.CompilerServices.UnsafeValueTypeAttribute">
    <Member Sig="public UnsafeValueTypeAttribute ();" />
  </Type>
  <Type Name="System.Runtime.ConstrainedExecution.Cer">
    <Member Sig="MayFail" />
    <Member Sig="None" />
    <Member Sig="Success" />
  </Type>
  <Type Name="System.Runtime.ConstrainedExecution.Consistency">
    <Member Sig="MayCorruptAppDomain" />
    <Member Sig="MayCorruptInstance" />
    <Member Sig="MayCorruptProcess" />
    <Member Sig="WillNotCorruptState" />
  </Type>
  <Type Name="System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
    <Member Sig="~CriticalFinalizerObject ();" />
    <Member Sig="protected CriticalFinalizerObject ();" />
  </Type>
  <Type Name="System.Runtime.ConstrainedExecution.PrePrepareMethodAttribute">
    <Member Sig="public PrePrepareMethodAttribute ();" />
  </Type>
  <Type Name="System.Runtime.ConstrainedExecution.ReliabilityContractAttribute">
    <Member Sig="public ReliabilityContractAttribute (System.Runtime.ConstrainedExecution.Consistency consistencyGuarantee, System.Runtime.ConstrainedExecution.Cer cer);" />
    <Member Sig="public System.Runtime.ConstrainedExecution.Cer Cer { get; }" />
    <Member Sig="public System.Runtime.ConstrainedExecution.Consistency ConsistencyGuarantee { get; }" />
  </Type>
  <Type Name="System.Runtime.GCLatencyMode">
    <Member Sig="Batch" />
    <Member Sig="Interactive" />
    <Member Sig="LowLatency" />
  </Type>
  <Type Name="System.Runtime.GCSettings">
    <Member Sig="public static bool IsServerGC { get; }" />
    <Member Sig="public static System.Runtime.GCLatencyMode LatencyMode { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Hosting.ActivationArguments">
    <Member Sig="public ActivationArguments (ActivationContext activationContext, string[] activationData);" />
    <Member Sig="public ActivationArguments (ActivationContext activationData);" />
    <Member Sig="public ActivationArguments (ApplicationIdentity applicationIdentity);" />
    <Member Sig="public ActivationArguments (ApplicationIdentity applicationIdentity, string[] activationData);" />
    <Member Sig="public ActivationContext ActivationContext { get; }" />
    <Member Sig="public ApplicationIdentity ApplicationIdentity { get; }" />
    <Member Sig="public string[] ActivationData { get; }" />
  </Type>
  <Type Name="System.Runtime.Hosting.ApplicationActivator">
    <Member Sig="protected static System.Runtime.Remoting.ObjectHandle CreateInstanceHelper (AppDomainSetup adSetup);" />
    <Member Sig="public ApplicationActivator ();" />
    <Member Sig="public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext);" />
    <Member Sig="public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext, string[] activationCustomData);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._Activator">
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._Assembly">
    <Member Sig="public bool Equals (object other);" />
    <Member Sig="public bool GlobalAssemblyCache { get; }" />
    <Member Sig="public bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public event System.Reflection.ModuleResolveEventHandler ModuleResolve;" />
    <Member Sig="public int GetHashCode ();" />
    <Member Sig="public object CreateInstance (string typeName);" />
    <Member Sig="public object CreateInstance (string typeName, bool ignoreCase);" />
    <Member Sig="public object CreateInstance (string typeName, bool ignoreCase, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, object[] args, System.Globalization.CultureInfo culture, object[] activationAttributes);" />
    <Member Sig="public object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public object[] GetCustomAttributes (Type attributeType, bool inherit);" />
    <Member Sig="public string CodeBase { get; }" />
    <Member Sig="public string EscapedCodeBase { get; }" />
    <Member Sig="public string FullName { get; }" />
    <Member Sig="public string Location { get; }" />
    <Member Sig="public string ToString ();" />
    <Member Sig="public string[] GetManifestResourceNames ();" />
    <Member Sig="public System.IO.FileStream GetFile (string name);" />
    <Member Sig="public System.IO.FileStream[] GetFiles ();" />
    <Member Sig="public System.IO.FileStream[] GetFiles (bool getResourceModules);" />
    <Member Sig="public System.IO.Stream GetManifestResourceStream (string name);" />
    <Member Sig="public System.IO.Stream GetManifestResourceStream (Type type, string name);" />
    <Member Sig="public System.Reflection.Assembly GetSatelliteAssembly (System.Globalization.CultureInfo culture);" />
    <Member Sig="public System.Reflection.Assembly GetSatelliteAssembly (System.Globalization.CultureInfo culture, Version version);" />
    <Member Sig="public System.Reflection.AssemblyName GetName ();" />
    <Member Sig="public System.Reflection.AssemblyName GetName (bool copiedName);" />
    <Member Sig="public System.Reflection.AssemblyName[] GetReferencedAssemblies ();" />
    <Member Sig="public System.Reflection.ManifestResourceInfo GetManifestResourceInfo (string resourceName);" />
    <Member Sig="public System.Reflection.MethodInfo EntryPoint { get; }" />
    <Member Sig="public System.Reflection.Module GetModule (string name);" />
    <Member Sig="public System.Reflection.Module LoadModule (string moduleName, byte[] rawModule);" />
    <Member Sig="public System.Reflection.Module LoadModule (string moduleName, byte[] rawModule, byte[] rawSymbolStore);" />
    <Member Sig="public System.Reflection.Module[] GetLoadedModules ();" />
    <Member Sig="public System.Reflection.Module[] GetLoadedModules (bool getResourceModules);" />
    <Member Sig="public System.Reflection.Module[] GetModules ();" />
    <Member Sig="public System.Reflection.Module[] GetModules (bool getResourceModules);" />
    <Member Sig="public System.Security.Policy.Evidence Evidence { get; }" />
    <Member Sig="public Type GetType ();" />
    <Member Sig="public Type GetType (string name);" />
    <Member Sig="public Type GetType (string name, bool throwOnError);" />
    <Member Sig="public Type GetType (string name, bool throwOnError, bool ignoreCase);" />
    <Member Sig="public Type[] GetExportedTypes ();" />
    <Member Sig="public Type[] GetTypes ();" />
    <Member Sig="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._AssemblyBuilder">
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._AssemblyName">
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._Attribute">
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._ConstructorBuilder">
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._ConstructorInfo">
    <Member Sig="public bool Equals (object other);" />
    <Member Sig="public bool IsAbstract { get; }" />
    <Member Sig="public bool IsAssembly { get; }" />
    <Member Sig="public bool IsConstructor { get; }" />
    <Member Sig="public bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public bool IsFamily { get; }" />
    <Member Sig="public bool IsFamilyAndAssembly { get; }" />
    <Member Sig="public bool IsFamilyOrAssembly { get; }" />
    <Member Sig="public bool IsFinal { get; }" />
    <Member Sig="public bool IsHideBySig { get; }" />
    <Member Sig="public bool IsPrivate { get; }" />
    <Member Sig="public bool IsPublic { get; }" />
    <Member Sig="public bool IsSpecialName { get; }" />
    <Member Sig="public bool IsStatic { get; }" />
    <Member Sig="public bool IsVirtual { get; }" />
    <Member Sig="public int GetHashCode ();" />
    <Member Sig="public object Invoke_2 (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
    <Member Sig="public object Invoke_3 (object obj, object[] parameters);" />
    <Member Sig="public object Invoke_4 (System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
    <Member Sig="public object Invoke_5 (object[] parameters);" />
    <Member Sig="public object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public object[] GetCustomAttributes (Type attributeType, bool inherit);" />
    <Member Sig="public RuntimeMethodHandle MethodHandle { get; }" />
    <Member Sig="public string Name { get; }" />
    <Member Sig="public string ToString ();" />
    <Member Sig="public System.Reflection.CallingConventions CallingConvention { get; }" />
    <Member Sig="public System.Reflection.MemberTypes MemberType { get; }" />
    <Member Sig="public System.Reflection.MethodAttributes Attributes { get; }" />
    <Member Sig="public System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
    <Member Sig="public System.Reflection.ParameterInfo[] GetParameters ();" />
    <Member Sig="public Type DeclaringType { get; }" />
    <Member Sig="public Type GetType ();" />
    <Member Sig="public Type ReflectedType { get; }" />
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._CustomAttributeBuilder">
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._EnumBuilder">
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._EventBuilder">
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._EventInfo">
    <Member Sig="public bool Equals (object other);" />
    <Member Sig="public bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public bool IsMulticast { get; }" />
    <Member Sig="public bool IsSpecialName { get; }" />
    <Member Sig="public int GetHashCode ();" />
    <Member Sig="public object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public object[] GetCustomAttributes (Type attributeType, bool inherit);" />
    <Member Sig="public string Name { get; }" />
    <Member Sig="public string ToString ();" />
    <Member Sig="public System.Reflection.EventAttributes Attributes { get; }" />
    <Member Sig="public System.Reflection.MemberTypes MemberType { get; }" />
    <Member Sig="public System.Reflection.MethodInfo GetAddMethod ();" />
    <Member Sig="public System.Reflection.MethodInfo GetAddMethod (bool nonPublic);" />
    <Member Sig="public System.Reflection.MethodInfo GetRaiseMethod ();" />
    <Member Sig="public System.Reflection.MethodInfo GetRaiseMethod (bool nonPublic);" />
    <Member Sig="public System.Reflection.MethodInfo GetRemoveMethod ();" />
    <Member Sig="public System.Reflection.MethodInfo GetRemoveMethod (bool nonPublic);" />
    <Member Sig="public Type DeclaringType { get; }" />
    <Member Sig="public Type EventHandlerType { get; }" />
    <Member Sig="public Type GetType ();" />
    <Member Sig="public Type ReflectedType { get; }" />
    <Member Sig="public void AddEventHandler (object target, Delegate handler);" />
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
    <Member Sig="public void RemoveEventHandler (object target, Delegate handler);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._Exception">
    <Member Sig="public bool Equals (object obj);" />
    <Member Sig="public Exception GetBaseException ();" />
    <Member Sig="public Exception InnerException { get; }" />
    <Member Sig="public int GetHashCode ();" />
    <Member Sig="public string HelpLink { get; set; }" />
    <Member Sig="public string Message { get; }" />
    <Member Sig="public string Source { get; set; }" />
    <Member Sig="public string StackTrace { get; }" />
    <Member Sig="public string ToString ();" />
    <Member Sig="public System.Reflection.MethodBase TargetSite { get; }" />
    <Member Sig="public Type GetType ();" />
    <Member Sig="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._FieldBuilder">
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._FieldInfo">
    <Member Sig="public bool Equals (object other);" />
    <Member Sig="public bool IsAssembly { get; }" />
    <Member Sig="public bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public bool IsFamily { get; }" />
    <Member Sig="public bool IsFamilyAndAssembly { get; }" />
    <Member Sig="public bool IsFamilyOrAssembly { get; }" />
    <Member Sig="public bool IsInitOnly { get; }" />
    <Member Sig="public bool IsLiteral { get; }" />
    <Member Sig="public bool IsNotSerialized { get; }" />
    <Member Sig="public bool IsPinvokeImpl { get; }" />
    <Member Sig="public bool IsPrivate { get; }" />
    <Member Sig="public bool IsPublic { get; }" />
    <Member Sig="public bool IsSpecialName { get; }" />
    <Member Sig="public bool IsStatic { get; }" />
    <Member Sig="public int GetHashCode ();" />
    <Member Sig="public object GetValue (object obj);" />
    <Member Sig="public object GetValueDirect (TypedReference obj);" />
    <Member Sig="public object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public object[] GetCustomAttributes (Type attributeType, bool inherit);" />
    <Member Sig="public RuntimeFieldHandle FieldHandle { get; }" />
    <Member Sig="public string Name { get; }" />
    <Member Sig="public string ToString ();" />
    <Member Sig="public System.Reflection.FieldAttributes Attributes { get; }" />
    <Member Sig="public System.Reflection.MemberTypes MemberType { get; }" />
    <Member Sig="public Type DeclaringType { get; }" />
    <Member Sig="public Type FieldType { get; }" />
    <Member Sig="public Type GetType ();" />
    <Member Sig="public Type ReflectedType { get; }" />
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
    <Member Sig="public void SetValue (object obj, object value);" />
    <Member Sig="public void SetValue (object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, System.Globalization.CultureInfo culture);" />
    <Member Sig="public void SetValueDirect (TypedReference obj, object value);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._ILGenerator">
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._LocalBuilder">
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._MemberInfo">
    <Member Sig="public bool Equals (object other);" />
    <Member Sig="public bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public int GetHashCode ();" />
    <Member Sig="public object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public object[] GetCustomAttributes (Type attributeType, bool inherit);" />
    <Member Sig="public string Name { get; }" />
    <Member Sig="public string ToString ();" />
    <Member Sig="public System.Reflection.MemberTypes MemberType { get; }" />
    <Member Sig="public Type DeclaringType { get; }" />
    <Member Sig="public Type GetType ();" />
    <Member Sig="public Type ReflectedType { get; }" />
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._MethodBase">
    <Member Sig="public bool Equals (object other);" />
    <Member Sig="public bool IsAbstract { get; }" />
    <Member Sig="public bool IsAssembly { get; }" />
    <Member Sig="public bool IsConstructor { get; }" />
    <Member Sig="public bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public bool IsFamily { get; }" />
    <Member Sig="public bool IsFamilyAndAssembly { get; }" />
    <Member Sig="public bool IsFamilyOrAssembly { get; }" />
    <Member Sig="public bool IsFinal { get; }" />
    <Member Sig="public bool IsHideBySig { get; }" />
    <Member Sig="public bool IsPrivate { get; }" />
    <Member Sig="public bool IsPublic { get; }" />
    <Member Sig="public bool IsSpecialName { get; }" />
    <Member Sig="public bool IsStatic { get; }" />
    <Member Sig="public bool IsVirtual { get; }" />
    <Member Sig="public int GetHashCode ();" />
    <Member Sig="public object Invoke (object obj, object[] parameters);" />
    <Member Sig="public object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
    <Member Sig="public object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public object[] GetCustomAttributes (Type attributeType, bool inherit);" />
    <Member Sig="public RuntimeMethodHandle MethodHandle { get; }" />
    <Member Sig="public string Name { get; }" />
    <Member Sig="public string ToString ();" />
    <Member Sig="public System.Reflection.CallingConventions CallingConvention { get; }" />
    <Member Sig="public System.Reflection.MemberTypes MemberType { get; }" />
    <Member Sig="public System.Reflection.MethodAttributes Attributes { get; }" />
    <Member Sig="public System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
    <Member Sig="public System.Reflection.ParameterInfo[] GetParameters ();" />
    <Member Sig="public Type DeclaringType { get; }" />
    <Member Sig="public Type GetType ();" />
    <Member Sig="public Type ReflectedType { get; }" />
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._MethodBuilder">
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._MethodInfo">
    <Member Sig="public bool Equals (object other);" />
    <Member Sig="public bool IsAbstract { get; }" />
    <Member Sig="public bool IsAssembly { get; }" />
    <Member Sig="public bool IsConstructor { get; }" />
    <Member Sig="public bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public bool IsFamily { get; }" />
    <Member Sig="public bool IsFamilyAndAssembly { get; }" />
    <Member Sig="public bool IsFamilyOrAssembly { get; }" />
    <Member Sig="public bool IsFinal { get; }" />
    <Member Sig="public bool IsHideBySig { get; }" />
    <Member Sig="public bool IsPrivate { get; }" />
    <Member Sig="public bool IsPublic { get; }" />
    <Member Sig="public bool IsSpecialName { get; }" />
    <Member Sig="public bool IsStatic { get; }" />
    <Member Sig="public bool IsVirtual { get; }" />
    <Member Sig="public int GetHashCode ();" />
    <Member Sig="public object Invoke (object obj, object[] parameters);" />
    <Member Sig="public object Invoke (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] parameters, System.Globalization.CultureInfo culture);" />
    <Member Sig="public object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public object[] GetCustomAttributes (Type attributeType, bool inherit);" />
    <Member Sig="public RuntimeMethodHandle MethodHandle { get; }" />
    <Member Sig="public string Name { get; }" />
    <Member Sig="public string ToString ();" />
    <Member Sig="public System.Reflection.CallingConventions CallingConvention { get; }" />
    <Member Sig="public System.Reflection.ICustomAttributeProvider ReturnTypeCustomAttributes { get; }" />
    <Member Sig="public System.Reflection.MemberTypes MemberType { get; }" />
    <Member Sig="public System.Reflection.MethodAttributes Attributes { get; }" />
    <Member Sig="public System.Reflection.MethodImplAttributes GetMethodImplementationFlags ();" />
    <Member Sig="public System.Reflection.MethodInfo GetBaseDefinition ();" />
    <Member Sig="public System.Reflection.ParameterInfo[] GetParameters ();" />
    <Member Sig="public Type DeclaringType { get; }" />
    <Member Sig="public Type GetType ();" />
    <Member Sig="public Type ReflectedType { get; }" />
    <Member Sig="public Type ReturnType { get; }" />
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._MethodRental">
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._Module">
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._ModuleBuilder">
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._ParameterBuilder">
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._ParameterInfo">
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._PropertyBuilder">
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._PropertyInfo">
    <Member Sig="public bool CanRead { get; }" />
    <Member Sig="public bool CanWrite { get; }" />
    <Member Sig="public bool Equals (object other);" />
    <Member Sig="public bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public bool IsSpecialName { get; }" />
    <Member Sig="public int GetHashCode ();" />
    <Member Sig="public object GetValue (object obj, object[] index);" />
    <Member Sig="public object GetValue (object obj, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);" />
    <Member Sig="public object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public object[] GetCustomAttributes (Type attributeType, bool inherit);" />
    <Member Sig="public string Name { get; }" />
    <Member Sig="public string ToString ();" />
    <Member Sig="public System.Reflection.MemberTypes MemberType { get; }" />
    <Member Sig="public System.Reflection.MethodInfo GetGetMethod ();" />
    <Member Sig="public System.Reflection.MethodInfo GetGetMethod (bool nonPublic);" />
    <Member Sig="public System.Reflection.MethodInfo GetSetMethod ();" />
    <Member Sig="public System.Reflection.MethodInfo GetSetMethod (bool nonPublic);" />
    <Member Sig="public System.Reflection.MethodInfo[] GetAccessors ();" />
    <Member Sig="public System.Reflection.MethodInfo[] GetAccessors (bool nonPublic);" />
    <Member Sig="public System.Reflection.ParameterInfo[] GetIndexParameters ();" />
    <Member Sig="public System.Reflection.PropertyAttributes Attributes { get; }" />
    <Member Sig="public Type DeclaringType { get; }" />
    <Member Sig="public Type GetType ();" />
    <Member Sig="public Type PropertyType { get; }" />
    <Member Sig="public Type ReflectedType { get; }" />
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
    <Member Sig="public void SetValue (object obj, object value, object[] index);" />
    <Member Sig="public void SetValue (object obj, object value, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object[] index, System.Globalization.CultureInfo culture);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._SignatureHelper">
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._Thread">
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._Type">
    <Member Sig="public bool Equals (object other);" />
    <Member Sig="public bool Equals (Type o);" />
    <Member Sig="public bool HasElementType { get; }" />
    <Member Sig="public bool IsAbstract { get; }" />
    <Member Sig="public bool IsAnsiClass { get; }" />
    <Member Sig="public bool IsArray { get; }" />
    <Member Sig="public bool IsAssignableFrom (Type c);" />
    <Member Sig="public bool IsAutoClass { get; }" />
    <Member Sig="public bool IsAutoLayout { get; }" />
    <Member Sig="public bool IsByRef { get; }" />
    <Member Sig="public bool IsClass { get; }" />
    <Member Sig="public bool IsCOMObject { get; }" />
    <Member Sig="public bool IsContextful { get; }" />
    <Member Sig="public bool IsDefined (Type attributeType, bool inherit);" />
    <Member Sig="public bool IsEnum { get; }" />
    <Member Sig="public bool IsExplicitLayout { get; }" />
    <Member Sig="public bool IsImport { get; }" />
    <Member Sig="public bool IsInstanceOfType (object o);" />
    <Member Sig="public bool IsInterface { get; }" />
    <Member Sig="public bool IsLayoutSequential { get; }" />
    <Member Sig="public bool IsMarshalByRef { get; }" />
    <Member Sig="public bool IsNestedAssembly { get; }" />
    <Member Sig="public bool IsNestedFamANDAssem { get; }" />
    <Member Sig="public bool IsNestedFamily { get; }" />
    <Member Sig="public bool IsNestedFamORAssem { get; }" />
    <Member Sig="public bool IsNestedPrivate { get; }" />
    <Member Sig="public bool IsNestedPublic { get; }" />
    <Member Sig="public bool IsNotPublic { get; }" />
    <Member Sig="public bool IsPointer { get; }" />
    <Member Sig="public bool IsPrimitive { get; }" />
    <Member Sig="public bool IsPublic { get; }" />
    <Member Sig="public bool IsSealed { get; }" />
    <Member Sig="public bool IsSerializable { get; }" />
    <Member Sig="public bool IsSpecialName { get; }" />
    <Member Sig="public bool IsSubclassOf (Type c);" />
    <Member Sig="public bool IsUnicodeClass { get; }" />
    <Member Sig="public bool IsValueType { get; }" />
    <Member Sig="public Guid GUID { get; }" />
    <Member Sig="public int GetArrayRank ();" />
    <Member Sig="public int GetHashCode ();" />
    <Member Sig="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args);" />
    <Member Sig="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Globalization.CultureInfo culture);" />
    <Member Sig="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
    <Member Sig="public object[] GetCustomAttributes (bool inherit);" />
    <Member Sig="public object[] GetCustomAttributes (Type attributeType, bool inherit);" />
    <Member Sig="public RuntimeTypeHandle TypeHandle { get; }" />
    <Member Sig="public string AssemblyQualifiedName { get; }" />
    <Member Sig="public string FullName { get; }" />
    <Member Sig="public string Name { get; }" />
    <Member Sig="public string Namespace { get; }" />
    <Member Sig="public string ToString ();" />
    <Member Sig="public System.Reflection.Assembly Assembly { get; }" />
    <Member Sig="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="public System.Reflection.ConstructorInfo GetConstructor (Type[] types);" />
    <Member Sig="public System.Reflection.ConstructorInfo TypeInitializer { get; }" />
    <Member Sig="public System.Reflection.ConstructorInfo[] GetConstructors ();" />
    <Member Sig="public System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.EventInfo GetEvent (string name);" />
    <Member Sig="public System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.EventInfo[] GetEvents ();" />
    <Member Sig="public System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.FieldInfo GetField (string name);" />
    <Member Sig="public System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.FieldInfo[] GetFields ();" />
    <Member Sig="public System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
    <Member Sig="public System.Reflection.MemberInfo[] FindMembers (System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, object filterCriteria);" />
    <Member Sig="public System.Reflection.MemberInfo[] GetDefaultMembers ();" />
    <Member Sig="public System.Reflection.MemberInfo[] GetMember (string name);" />
    <Member Sig="public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.MemberInfo[] GetMembers ();" />
    <Member Sig="public System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.MemberTypes MemberType { get; }" />
    <Member Sig="public System.Reflection.MethodInfo GetMethod (string name);" />
    <Member Sig="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="public System.Reflection.MethodInfo GetMethod (string name, Type[] types);" />
    <Member Sig="public System.Reflection.MethodInfo GetMethod (string name, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="public System.Reflection.MethodInfo[] GetMethods ();" />
    <Member Sig="public System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.Module Module { get; }" />
    <Member Sig="public System.Reflection.PropertyInfo GetProperty (string name);" />
    <Member Sig="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType);" />
    <Member Sig="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types);" />
    <Member Sig="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="public System.Reflection.PropertyInfo GetProperty (string name, Type[] types);" />
    <Member Sig="public System.Reflection.PropertyInfo[] GetProperties ();" />
    <Member Sig="public System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.TypeAttributes Attributes { get; }" />
    <Member Sig="public Type BaseType { get; }" />
    <Member Sig="public Type DeclaringType { get; }" />
    <Member Sig="public Type GetElementType ();" />
    <Member Sig="public Type GetInterface (string name);" />
    <Member Sig="public Type GetInterface (string name, bool ignoreCase);" />
    <Member Sig="public Type GetNestedType (string name);" />
    <Member Sig="public Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public Type GetType ();" />
    <Member Sig="public Type ReflectedType { get; }" />
    <Member Sig="public Type UnderlyingSystemType { get; }" />
    <Member Sig="public Type[] FindInterfaces (System.Reflection.TypeFilter filter, object filterCriteria);" />
    <Member Sig="public Type[] GetInterfaces ();" />
    <Member Sig="public Type[] GetNestedTypes ();" />
    <Member Sig="public Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices._TypeBuilder">
    <Member Sig="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="public void GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute">
    <Member Sig="public AllowReversePInvokeCallsAttribute ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ArrayWithOffset">
    <Member Sig="public ArrayWithOffset (object array, int offset);" />
    <Member Sig="public bool Equals (System.Runtime.InteropServices.ArrayWithOffset obj);" />
    <Member Sig="public int GetOffset ();" />
    <Member Sig="public object GetArray ();" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static bool op_Equality (System.Runtime.InteropServices.ArrayWithOffset a, System.Runtime.InteropServices.ArrayWithOffset b);" />
    <Member Sig="public static bool op_Inequality (System.Runtime.InteropServices.ArrayWithOffset a, System.Runtime.InteropServices.ArrayWithOffset b);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.AssemblyRegistrationFlags">
    <Member Sig="None" />
    <Member Sig="SetCodeBase" />
  </Type>
  <Type Name="System.Runtime.InteropServices.AutomationProxyAttribute">
    <Member Sig="public AutomationProxyAttribute (bool val);" />
    <Member Sig="public bool Value { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.BestFitMappingAttribute">
    <Member Sig="public BestFitMappingAttribute (bool BestFitMapping);" />
    <Member Sig="public bool BestFitMapping { get; }" />
    <Member Sig="public bool ThrowOnUnmappableChar;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.BIND_OPTS">
    <Member Sig="public int cbStruct;" />
    <Member Sig="public int dwTickCountDeadline;" />
    <Member Sig="public int grfFlags;" />
    <Member Sig="public int grfMode;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.BINDPTR">
    <Member Sig="public IntPtr lpfuncdesc;" />
    <Member Sig="public IntPtr lptcomp;" />
    <Member Sig="public IntPtr lpvardesc;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.BStrWrapper">
    <Member Sig="public BStrWrapper (string value);" />
    <Member Sig="public string WrappedObject { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.CALLCONV">
    <Member Sig="CC_CDECL" />
    <Member Sig="CC_MACPASCAL" />
    <Member Sig="CC_MAX" />
    <Member Sig="CC_MPWCDECL" />
    <Member Sig="CC_MPWPASCAL" />
    <Member Sig="CC_MSCPASCAL" />
    <Member Sig="CC_PASCAL" />
    <Member Sig="CC_RESERVED" />
    <Member Sig="CC_STDCALL" />
    <Member Sig="CC_SYSCALL" />
  </Type>
  <Type Name="System.Runtime.InteropServices.CallingConvention">
    <Member Sig="Cdecl" />
    <Member Sig="FastCall" />
    <Member Sig="StdCall" />
    <Member Sig="ThisCall" />
    <Member Sig="Winapi" />
  </Type>
  <Type Name="System.Runtime.InteropServices.CharSet">
    <Member Sig="Ansi" />
    <Member Sig="Auto" />
    <Member Sig="None" />
    <Member Sig="Unicode" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ClassInterfaceAttribute">
    <Member Sig="public ClassInterfaceAttribute (short classInterfaceType);" />
    <Member Sig="public ClassInterfaceAttribute (System.Runtime.InteropServices.ClassInterfaceType classInterfaceType);" />
    <Member Sig="public System.Runtime.InteropServices.ClassInterfaceType Value { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ClassInterfaceType">
    <Member Sig="AutoDispatch" />
    <Member Sig="AutoDual" />
    <Member Sig="None" />
  </Type>
  <Type Name="System.Runtime.InteropServices.CoClassAttribute">
    <Member Sig="public CoClassAttribute (Type coClass);" />
    <Member Sig="public Type CoClass { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComAliasNameAttribute">
    <Member Sig="public ComAliasNameAttribute (string alias);" />
    <Member Sig="public string Value { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComCompatibleVersionAttribute">
    <Member Sig="public ComCompatibleVersionAttribute (int major, int minor, int build, int revision);" />
    <Member Sig="public int BuildNumber { get; }" />
    <Member Sig="public int MajorVersion { get; }" />
    <Member Sig="public int MinorVersion { get; }" />
    <Member Sig="public int RevisionNumber { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComConversionLossAttribute">
    <Member Sig="public ComConversionLossAttribute ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
    <Member Sig="public ComDefaultInterfaceAttribute (Type defaultInterface);" />
    <Member Sig="public Type Value { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComEventInterfaceAttribute">
    <Member Sig="public ComEventInterfaceAttribute (Type SourceInterface, Type EventProvider);" />
    <Member Sig="public Type EventProvider { get; }" />
    <Member Sig="public Type SourceInterface { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.COMException">
    <Member Sig="protected COMException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public COMException ();" />
    <Member Sig="public COMException (string message);" />
    <Member Sig="public COMException (string message, Exception inner);" />
    <Member Sig="public COMException (string message, int errorCode);" />
    <Member Sig="public override string ToString ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComImportAttribute">
    <Member Sig="public ComImportAttribute ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComInterfaceType">
    <Member Sig="InterfaceIsDual" />
    <Member Sig="InterfaceIsIDispatch" />
    <Member Sig="InterfaceIsIUnknown" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComMemberType">
    <Member Sig="Method" />
    <Member Sig="PropGet" />
    <Member Sig="PropSet" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComRegisterFunctionAttribute">
    <Member Sig="public ComRegisterFunctionAttribute ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComSourceInterfacesAttribute">
    <Member Sig="public ComSourceInterfacesAttribute (string sourceInterfaces);" />
    <Member Sig="public ComSourceInterfacesAttribute (Type sourceInterface);" />
    <Member Sig="public ComSourceInterfacesAttribute (Type sourceInterface1, Type sourceInterface2);" />
    <Member Sig="public ComSourceInterfacesAttribute (Type sourceInterface1, Type sourceInterface2, Type sourceInterface3);" />
    <Member Sig="public ComSourceInterfacesAttribute (Type sourceInterface1, Type sourceInterface2, Type sourceInterface3, Type sourceInterface4);" />
    <Member Sig="public string Value { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.BIND_OPTS">
    <Member Sig="public int cbStruct;" />
    <Member Sig="public int dwTickCountDeadline;" />
    <Member Sig="public int grfFlags;" />
    <Member Sig="public int grfMode;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.BINDPTR">
    <Member Sig="public IntPtr lpfuncdesc;" />
    <Member Sig="public IntPtr lptcomp;" />
    <Member Sig="public IntPtr lpvardesc;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.CALLCONV">
    <Member Sig="CC_CDECL" />
    <Member Sig="CC_MACPASCAL" />
    <Member Sig="CC_MAX" />
    <Member Sig="CC_MPWCDECL" />
    <Member Sig="CC_MPWPASCAL" />
    <Member Sig="CC_MSCPASCAL" />
    <Member Sig="CC_PASCAL" />
    <Member Sig="CC_RESERVED" />
    <Member Sig="CC_STDCALL" />
    <Member Sig="CC_SYSCALL" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.CONNECTDATA">
    <Member Sig="public int dwCookie;" />
    <Member Sig="public object pUnk;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.DESCKIND">
    <Member Sig="DESCKIND_FUNCDESC" />
    <Member Sig="DESCKIND_IMPLICITAPPOBJ" />
    <Member Sig="DESCKIND_MAX" />
    <Member Sig="DESCKIND_NONE" />
    <Member Sig="DESCKIND_TYPECOMP" />
    <Member Sig="DESCKIND_VARDESC" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.DISPPARAMS">
    <Member Sig="public int cArgs;" />
    <Member Sig="public int cNamedArgs;" />
    <Member Sig="public IntPtr rgdispidNamedArgs;" />
    <Member Sig="public IntPtr rgvarg;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.ELEMDESC">
    <Member Sig="public System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION desc;" />
    <Member Sig="public System.Runtime.InteropServices.ComTypes.TYPEDESC tdesc;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.ELEMDESC/DESCUNION">
    <Member Sig="public System.Runtime.InteropServices.ComTypes.IDLDESC idldesc;" />
    <Member Sig="public System.Runtime.InteropServices.ComTypes.PARAMDESC paramdesc;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.EXCEPINFO">
    <Member Sig="public int dwHelpContext;" />
    <Member Sig="public int scode;" />
    <Member Sig="public IntPtr pfnDeferredFillIn;" />
    <Member Sig="public IntPtr pvReserved;" />
    <Member Sig="public short wCode;" />
    <Member Sig="public short wReserved;" />
    <Member Sig="public string bstrDescription;" />
    <Member Sig="public string bstrHelpFile;" />
    <Member Sig="public string bstrSource;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.FILETIME">
    <Member Sig="public int dwHighDateTime;" />
    <Member Sig="public int dwLowDateTime;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.FUNCDESC">
    <Member Sig="public int memid;" />
    <Member Sig="public IntPtr lprgelemdescParam;" />
    <Member Sig="public IntPtr lprgscode;" />
    <Member Sig="public short cParams;" />
    <Member Sig="public short cParamsOpt;" />
    <Member Sig="public short cScodes;" />
    <Member Sig="public short oVft;" />
    <Member Sig="public short wFuncFlags;" />
    <Member Sig="public System.Runtime.InteropServices.ComTypes.CALLCONV callconv;" />
    <Member Sig="public System.Runtime.InteropServices.ComTypes.ELEMDESC elemdescFunc;" />
    <Member Sig="public System.Runtime.InteropServices.ComTypes.FUNCKIND funckind;" />
    <Member Sig="public System.Runtime.InteropServices.ComTypes.INVOKEKIND invkind;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.FUNCFLAGS">
    <Member Sig="FUNCFLAG_FBINDABLE" />
    <Member Sig="FUNCFLAG_FDEFAULTBIND" />
    <Member Sig="FUNCFLAG_FDEFAULTCOLLELEM" />
    <Member Sig="FUNCFLAG_FDISPLAYBIND" />
    <Member Sig="FUNCFLAG_FHIDDEN" />
    <Member Sig="FUNCFLAG_FIMMEDIATEBIND" />
    <Member Sig="FUNCFLAG_FNONBROWSABLE" />
    <Member Sig="FUNCFLAG_FREPLACEABLE" />
    <Member Sig="FUNCFLAG_FREQUESTEDIT" />
    <Member Sig="FUNCFLAG_FRESTRICTED" />
    <Member Sig="FUNCFLAG_FSOURCE" />
    <Member Sig="FUNCFLAG_FUIDEFAULT" />
    <Member Sig="FUNCFLAG_FUSESGETLASTERROR" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.FUNCKIND">
    <Member Sig="FUNC_DISPATCH" />
    <Member Sig="FUNC_NONVIRTUAL" />
    <Member Sig="FUNC_PUREVIRTUAL" />
    <Member Sig="FUNC_STATIC" />
    <Member Sig="FUNC_VIRTUAL" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.IBindCtx">
    <Member Sig="public int RevokeObjectParam (string pszKey);" />
    <Member Sig="public void EnumObjectParam (out System.Runtime.InteropServices.ComTypes.IEnumString ppenum);" />
    <Member Sig="public void GetBindOptions (ref System.Runtime.InteropServices.ComTypes.BIND_OPTS pbindopts);" />
    <Member Sig="public void GetObjectParam (string pszKey, out object ppunk);" />
    <Member Sig="public void GetRunningObjectTable (out System.Runtime.InteropServices.ComTypes.IRunningObjectTable pprot);" />
    <Member Sig="public void RegisterObjectBound (object punk);" />
    <Member Sig="public void RegisterObjectParam (string pszKey, object punk);" />
    <Member Sig="public void ReleaseBoundObjects ();" />
    <Member Sig="public void RevokeObjectBound (object punk);" />
    <Member Sig="public void SetBindOptions (ref System.Runtime.InteropServices.ComTypes.BIND_OPTS pbindopts);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.IConnectionPoint">
    <Member Sig="public void Advise (object pUnkSink, out int pdwCookie);" />
    <Member Sig="public void EnumConnections (out System.Runtime.InteropServices.ComTypes.IEnumConnections ppEnum);" />
    <Member Sig="public void GetConnectionInterface (out Guid pIID);" />
    <Member Sig="public void GetConnectionPointContainer (out System.Runtime.InteropServices.ComTypes.IConnectionPointContainer ppCPC);" />
    <Member Sig="public void Unadvise (int dwCookie);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.IConnectionPointContainer">
    <Member Sig="public void EnumConnectionPoints (out System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints ppEnum);" />
    <Member Sig="public void FindConnectionPoint (ref Guid riid, out System.Runtime.InteropServices.ComTypes.IConnectionPoint ppCP);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.IDLDESC">
    <Member Sig="public IntPtr dwReserved;" />
    <Member Sig="public System.Runtime.InteropServices.ComTypes.IDLFLAG wIDLFlags;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.IDLFLAG">
    <Member Sig="IDLFLAG_FIN" />
    <Member Sig="IDLFLAG_FLCID" />
    <Member Sig="IDLFLAG_FOUT" />
    <Member Sig="IDLFLAG_FRETVAL" />
    <Member Sig="IDLFLAG_NONE" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints">
    <Member Sig="public int Next (int celt, System.Runtime.InteropServices.ComTypes.IConnectionPoint[] rgelt, IntPtr pceltFetched);" />
    <Member Sig="public int Skip (int celt);" />
    <Member Sig="public void Clone (out System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints ppenum);" />
    <Member Sig="public void Reset ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.IEnumConnections">
    <Member Sig="public int Next (int celt, System.Runtime.InteropServices.ComTypes.CONNECTDATA[] rgelt, IntPtr pceltFetched);" />
    <Member Sig="public int Skip (int celt);" />
    <Member Sig="public void Clone (out System.Runtime.InteropServices.ComTypes.IEnumConnections ppenum);" />
    <Member Sig="public void Reset ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.IEnumMoniker">
    <Member Sig="public int Next (int celt, System.Runtime.InteropServices.ComTypes.IMoniker[] rgelt, IntPtr pceltFetched);" />
    <Member Sig="public int Skip (int celt);" />
    <Member Sig="public void Clone (out System.Runtime.InteropServices.ComTypes.IEnumMoniker ppenum);" />
    <Member Sig="public void Reset ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.IEnumString">
    <Member Sig="public int Next (int celt, string[] rgelt, IntPtr pceltFetched);" />
    <Member Sig="public int Skip (int celt);" />
    <Member Sig="public void Clone (out System.Runtime.InteropServices.ComTypes.IEnumString ppenum);" />
    <Member Sig="public void Reset ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.IEnumVARIANT">
    <Member Sig="public int Next (int celt, object[] rgVar, IntPtr pceltFetched);" />
    <Member Sig="public int Reset ();" />
    <Member Sig="public int Skip (int celt);" />
    <Member Sig="public System.Runtime.InteropServices.ComTypes.IEnumVARIANT Clone ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.IMoniker">
    <Member Sig="public int IsDirty ();" />
    <Member Sig="public int IsEqual (System.Runtime.InteropServices.ComTypes.IMoniker pmkOtherMoniker);" />
    <Member Sig="public int IsRunning (System.Runtime.InteropServices.ComTypes.IBindCtx pbc, System.Runtime.InteropServices.ComTypes.IMoniker pmkToLeft, System.Runtime.InteropServices.ComTypes.IMoniker pmkNewlyRunning);" />
    <Member Sig="public int IsSystemMoniker (out int pdwMksys);" />
    <Member Sig="public void BindToObject (System.Runtime.InteropServices.ComTypes.IBindCtx pbc, System.Runtime.InteropServices.ComTypes.IMoniker pmkToLeft, ref Guid riidResult, out object ppvResult);" />
    <Member Sig="public void BindToStorage (System.Runtime.InteropServices.ComTypes.IBindCtx pbc, System.Runtime.InteropServices.ComTypes.IMoniker pmkToLeft, ref Guid riid, out object ppvObj);" />
    <Member Sig="public void CommonPrefixWith (System.Runtime.InteropServices.ComTypes.IMoniker pmkOther, out System.Runtime.InteropServices.ComTypes.IMoniker ppmkPrefix);" />
    <Member Sig="public void ComposeWith (System.Runtime.InteropServices.ComTypes.IMoniker pmkRight, bool fOnlyIfNotGeneric, out System.Runtime.InteropServices.ComTypes.IMoniker ppmkComposite);" />
    <Member Sig="public void Enum (bool fForward, out System.Runtime.InteropServices.ComTypes.IEnumMoniker ppenumMoniker);" />
    <Member Sig="public void GetClassID (out Guid pClassID);" />
    <Member Sig="public void GetDisplayName (System.Runtime.InteropServices.ComTypes.IBindCtx pbc, System.Runtime.InteropServices.ComTypes.IMoniker pmkToLeft, out string ppszDisplayName);" />
    <Member Sig="public void GetSizeMax (out long pcbSize);" />
    <Member Sig="public void GetTimeOfLastChange (System.Runtime.InteropServices.ComTypes.IBindCtx pbc, System.Runtime.InteropServices.ComTypes.IMoniker pmkToLeft, out System.Runtime.InteropServices.ComTypes.FILETIME pFileTime);" />
    <Member Sig="public void Hash (out int pdwHash);" />
    <Member Sig="public void Inverse (out System.Runtime.InteropServices.ComTypes.IMoniker ppmk);" />
    <Member Sig="public void Load (System.Runtime.InteropServices.ComTypes.IStream pStm);" />
    <Member Sig="public void ParseDisplayName (System.Runtime.InteropServices.ComTypes.IBindCtx pbc, System.Runtime.InteropServices.ComTypes.IMoniker pmkToLeft, string pszDisplayName, out int pchEaten, out System.Runtime.InteropServices.ComTypes.IMoniker ppmkOut);" />
    <Member Sig="public void Reduce (System.Runtime.InteropServices.ComTypes.IBindCtx pbc, int dwReduceHowFar, ref System.Runtime.InteropServices.ComTypes.IMoniker ppmkToLeft, out System.Runtime.InteropServices.ComTypes.IMoniker ppmkReduced);" />
    <Member Sig="public void RelativePathTo (System.Runtime.InteropServices.ComTypes.IMoniker pmkOther, out System.Runtime.InteropServices.ComTypes.IMoniker ppmkRelPath);" />
    <Member Sig="public void Save (System.Runtime.InteropServices.ComTypes.IStream pStm, bool fClearDirty);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS">
    <Member Sig="IMPLTYPEFLAG_FDEFAULT" />
    <Member Sig="IMPLTYPEFLAG_FDEFAULTVTABLE" />
    <Member Sig="IMPLTYPEFLAG_FRESTRICTED" />
    <Member Sig="IMPLTYPEFLAG_FSOURCE" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.INVOKEKIND">
    <Member Sig="INVOKE_FUNC" />
    <Member Sig="INVOKE_PROPERTYGET" />
    <Member Sig="INVOKE_PROPERTYPUT" />
    <Member Sig="INVOKE_PROPERTYPUTREF" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.IPersistFile">
    <Member Sig="public int IsDirty ();" />
    <Member Sig="public void GetClassID (out Guid pClassID);" />
    <Member Sig="public void GetCurFile (out string ppszFileName);" />
    <Member Sig="public void Load (string pszFileName, int dwMode);" />
    <Member Sig="public void Save (string pszFileName, bool fRemember);" />
    <Member Sig="public void SaveCompleted (string pszFileName);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.IRunningObjectTable">
    <Member Sig="public int GetObject (System.Runtime.InteropServices.ComTypes.IMoniker pmkObjectName, out object ppunkObject);" />
    <Member Sig="public int GetTimeOfLastChange (System.Runtime.InteropServices.ComTypes.IMoniker pmkObjectName, out System.Runtime.InteropServices.ComTypes.FILETIME pfiletime);" />
    <Member Sig="public int IsRunning (System.Runtime.InteropServices.ComTypes.IMoniker pmkObjectName);" />
    <Member Sig="public int Register (int grfFlags, object punkObject, System.Runtime.InteropServices.ComTypes.IMoniker pmkObjectName);" />
    <Member Sig="public void EnumRunning (out System.Runtime.InteropServices.ComTypes.IEnumMoniker ppenumMoniker);" />
    <Member Sig="public void NoteChangeTime (int dwRegister, ref System.Runtime.InteropServices.ComTypes.FILETIME pfiletime);" />
    <Member Sig="public void Revoke (int dwRegister);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.IStream">
    <Member Sig="public void Clone (out System.Runtime.InteropServices.ComTypes.IStream ppstm);" />
    <Member Sig="public void Commit (int grfCommitFlags);" />
    <Member Sig="public void CopyTo (System.Runtime.InteropServices.ComTypes.IStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten);" />
    <Member Sig="public void LockRegion (long libOffset, long cb, int dwLockType);" />
    <Member Sig="public void Read (byte[] pv, int cb, IntPtr pcbRead);" />
    <Member Sig="public void Revert ();" />
    <Member Sig="public void Seek (long dlibMove, int dwOrigin, IntPtr plibNewPosition);" />
    <Member Sig="public void SetSize (long libNewSize);" />
    <Member Sig="public void Stat (out System.Runtime.InteropServices.ComTypes.STATSTG pstatstg, int grfStatFlag);" />
    <Member Sig="public void UnlockRegion (long libOffset, long cb, int dwLockType);" />
    <Member Sig="public void Write (byte[] pv, int cb, IntPtr pcbWritten);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.ITypeComp">
    <Member Sig="public void Bind (string szName, int lHashVal, short wFlags, out System.Runtime.InteropServices.ComTypes.ITypeInfo ppTInfo, out System.Runtime.InteropServices.ComTypes.DESCKIND pDescKind, out System.Runtime.InteropServices.ComTypes.BINDPTR pBindPtr);" />
    <Member Sig="public void BindType (string szName, int lHashVal, out System.Runtime.InteropServices.ComTypes.ITypeInfo ppTInfo, out System.Runtime.InteropServices.ComTypes.ITypeComp ppTComp);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.ITypeInfo">
    <Member Sig="public void AddressOfMember (int memid, System.Runtime.InteropServices.ComTypes.INVOKEKIND invKind, out IntPtr ppv);" />
    <Member Sig="public void CreateInstance (object pUnkOuter, ref Guid riid, out object ppvObj);" />
    <Member Sig="public void GetContainingTypeLib (out System.Runtime.InteropServices.ComTypes.ITypeLib ppTLB, out int pIndex);" />
    <Member Sig="public void GetDllEntry (int memid, System.Runtime.InteropServices.ComTypes.INVOKEKIND invKind, IntPtr pBstrDllName, IntPtr pBstrName, IntPtr pwOrdinal);" />
    <Member Sig="public void GetDocumentation (int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);" />
    <Member Sig="public void GetFuncDesc (int index, out IntPtr ppFuncDesc);" />
    <Member Sig="public void GetIDsOfNames (string[] rgszNames, int cNames, int[] pMemId);" />
    <Member Sig="public void GetImplTypeFlags (int index, out System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS pImplTypeFlags);" />
    <Member Sig="public void GetMops (int memid, out string pBstrMops);" />
    <Member Sig="public void GetNames (int memid, string[] rgBstrNames, int cMaxNames, out int pcNames);" />
    <Member Sig="public void GetRefTypeInfo (int hRef, out System.Runtime.InteropServices.ComTypes.ITypeInfo ppTI);" />
    <Member Sig="public void GetRefTypeOfImplType (int index, out int href);" />
    <Member Sig="public void GetTypeAttr (out IntPtr ppTypeAttr);" />
    <Member Sig="public void GetTypeComp (out System.Runtime.InteropServices.ComTypes.ITypeComp ppTComp);" />
    <Member Sig="public void GetVarDesc (int index, out IntPtr ppVarDesc);" />
    <Member Sig="public void Invoke (object pvInstance, int memid, short wFlags, ref System.Runtime.InteropServices.ComTypes.DISPPARAMS pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, out int puArgErr);" />
    <Member Sig="public void ReleaseFuncDesc (IntPtr pFuncDesc);" />
    <Member Sig="public void ReleaseTypeAttr (IntPtr pTypeAttr);" />
    <Member Sig="public void ReleaseVarDesc (IntPtr pVarDesc);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.ITypeInfo2">
    <Member Sig="public void AddressOfMember (int memid, System.Runtime.InteropServices.ComTypes.INVOKEKIND invKind, out IntPtr ppv);" />
    <Member Sig="public void CreateInstance (object pUnkOuter, ref Guid riid, out object ppvObj);" />
    <Member Sig="public void GetAllCustData (IntPtr pCustData);" />
    <Member Sig="public void GetAllFuncCustData (int index, IntPtr pCustData);" />
    <Member Sig="public void GetAllImplTypeCustData (int index, IntPtr pCustData);" />
    <Member Sig="public void GetAllParamCustData (int indexFunc, int indexParam, IntPtr pCustData);" />
    <Member Sig="public void GetAllVarCustData (int index, IntPtr pCustData);" />
    <Member Sig="public void GetContainingTypeLib (out System.Runtime.InteropServices.ComTypes.ITypeLib ppTLB, out int pIndex);" />
    <Member Sig="public void GetCustData (ref Guid guid, out object pVarVal);" />
    <Member Sig="public void GetDllEntry (int memid, System.Runtime.InteropServices.ComTypes.INVOKEKIND invKind, IntPtr pBstrDllName, IntPtr pBstrName, IntPtr pwOrdinal);" />
    <Member Sig="public void GetDocumentation (int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);" />
    <Member Sig="public void GetDocumentation2 (int memid, out string pbstrHelpString, out int pdwHelpStringContext, out string pbstrHelpStringDll);" />
    <Member Sig="public void GetFuncCustData (int index, ref Guid guid, out object pVarVal);" />
    <Member Sig="public void GetFuncDesc (int index, out IntPtr ppFuncDesc);" />
    <Member Sig="public void GetFuncIndexOfMemId (int memid, System.Runtime.InteropServices.ComTypes.INVOKEKIND invKind, out int pFuncIndex);" />
    <Member Sig="public void GetIDsOfNames (string[] rgszNames, int cNames, int[] pMemId);" />
    <Member Sig="public void GetImplTypeCustData (int index, ref Guid guid, out object pVarVal);" />
    <Member Sig="public void GetImplTypeFlags (int index, out System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS pImplTypeFlags);" />
    <Member Sig="public void GetMops (int memid, out string pBstrMops);" />
    <Member Sig="public void GetNames (int memid, string[] rgBstrNames, int cMaxNames, out int pcNames);" />
    <Member Sig="public void GetParamCustData (int indexFunc, int indexParam, ref Guid guid, out object pVarVal);" />
    <Member Sig="public void GetRefTypeInfo (int hRef, out System.Runtime.InteropServices.ComTypes.ITypeInfo ppTI);" />
    <Member Sig="public void GetRefTypeOfImplType (int index, out int href);" />
    <Member Sig="public void GetTypeAttr (out IntPtr ppTypeAttr);" />
    <Member Sig="public void GetTypeComp (out System.Runtime.InteropServices.ComTypes.ITypeComp ppTComp);" />
    <Member Sig="public void GetTypeFlags (out int pTypeFlags);" />
    <Member Sig="public void GetTypeKind (out System.Runtime.InteropServices.ComTypes.TYPEKIND pTypeKind);" />
    <Member Sig="public void GetVarCustData (int index, ref Guid guid, out object pVarVal);" />
    <Member Sig="public void GetVarDesc (int index, out IntPtr ppVarDesc);" />
    <Member Sig="public void GetVarIndexOfMemId (int memid, out int pVarIndex);" />
    <Member Sig="public void Invoke (object pvInstance, int memid, short wFlags, ref System.Runtime.InteropServices.ComTypes.DISPPARAMS pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, out int puArgErr);" />
    <Member Sig="public void ReleaseFuncDesc (IntPtr pFuncDesc);" />
    <Member Sig="public void ReleaseTypeAttr (IntPtr pTypeAttr);" />
    <Member Sig="public void ReleaseVarDesc (IntPtr pVarDesc);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.ITypeLib">
    <Member Sig="public bool IsName (string szNameBuf, int lHashVal);" />
    <Member Sig="public int GetTypeInfoCount ();" />
    <Member Sig="public void FindName (string szNameBuf, int lHashVal, System.Runtime.InteropServices.ComTypes.ITypeInfo[] ppTInfo, int[] rgMemId, ref short pcFound);" />
    <Member Sig="public void GetDocumentation (int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);" />
    <Member Sig="public void GetLibAttr (out IntPtr ppTLibAttr);" />
    <Member Sig="public void GetTypeComp (out System.Runtime.InteropServices.ComTypes.ITypeComp ppTComp);" />
    <Member Sig="public void GetTypeInfo (int index, out System.Runtime.InteropServices.ComTypes.ITypeInfo ppTI);" />
    <Member Sig="public void GetTypeInfoOfGuid (ref Guid guid, out System.Runtime.InteropServices.ComTypes.ITypeInfo ppTInfo);" />
    <Member Sig="public void GetTypeInfoType (int index, out System.Runtime.InteropServices.ComTypes.TYPEKIND pTKind);" />
    <Member Sig="public void ReleaseTLibAttr (IntPtr pTLibAttr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.ITypeLib2">
    <Member Sig="public bool IsName (string szNameBuf, int lHashVal);" />
    <Member Sig="public int GetTypeInfoCount ();" />
    <Member Sig="public void FindName (string szNameBuf, int lHashVal, System.Runtime.InteropServices.ComTypes.ITypeInfo[] ppTInfo, int[] rgMemId, ref short pcFound);" />
    <Member Sig="public void GetAllCustData (IntPtr pCustData);" />
    <Member Sig="public void GetCustData (ref Guid guid, out object pVarVal);" />
    <Member Sig="public void GetDocumentation (int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);" />
    <Member Sig="public void GetDocumentation2 (int index, out string pbstrHelpString, out int pdwHelpStringContext, out string pbstrHelpStringDll);" />
    <Member Sig="public void GetLibAttr (out IntPtr ppTLibAttr);" />
    <Member Sig="public void GetLibStatistics (IntPtr pcUniqueNames, out int pcchUniqueNames);" />
    <Member Sig="public void GetTypeComp (out System.Runtime.InteropServices.ComTypes.ITypeComp ppTComp);" />
    <Member Sig="public void GetTypeInfo (int index, out System.Runtime.InteropServices.ComTypes.ITypeInfo ppTI);" />
    <Member Sig="public void GetTypeInfoOfGuid (ref Guid guid, out System.Runtime.InteropServices.ComTypes.ITypeInfo ppTInfo);" />
    <Member Sig="public void GetTypeInfoType (int index, out System.Runtime.InteropServices.ComTypes.TYPEKIND pTKind);" />
    <Member Sig="public void ReleaseTLibAttr (IntPtr pTLibAttr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.LIBFLAGS">
    <Member Sig="LIBFLAG_FCONTROL" />
    <Member Sig="LIBFLAG_FHASDISKIMAGE" />
    <Member Sig="LIBFLAG_FHIDDEN" />
    <Member Sig="LIBFLAG_FRESTRICTED" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.PARAMDESC">
    <Member Sig="public IntPtr lpVarValue;" />
    <Member Sig="public System.Runtime.InteropServices.ComTypes.PARAMFLAG wParamFlags;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.PARAMFLAG">
    <Member Sig="PARAMFLAG_FHASCUSTDATA" />
    <Member Sig="PARAMFLAG_FHASDEFAULT" />
    <Member Sig="PARAMFLAG_FIN" />
    <Member Sig="PARAMFLAG_FLCID" />
    <Member Sig="PARAMFLAG_FOPT" />
    <Member Sig="PARAMFLAG_FOUT" />
    <Member Sig="PARAMFLAG_FRETVAL" />
    <Member Sig="PARAMFLAG_NONE" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.STATSTG">
    <Member Sig="public Guid clsid;" />
    <Member Sig="public int grfLocksSupported;" />
    <Member Sig="public int grfMode;" />
    <Member Sig="public int grfStateBits;" />
    <Member Sig="public int reserved;" />
    <Member Sig="public int type;" />
    <Member Sig="public long cbSize;" />
    <Member Sig="public string pwcsName;" />
    <Member Sig="public System.Runtime.InteropServices.ComTypes.FILETIME atime;" />
    <Member Sig="public System.Runtime.InteropServices.ComTypes.FILETIME ctime;" />
    <Member Sig="public System.Runtime.InteropServices.ComTypes.FILETIME mtime;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.SYSKIND">
    <Member Sig="SYS_MAC" />
    <Member Sig="SYS_WIN16" />
    <Member Sig="SYS_WIN32" />
    <Member Sig="SYS_WIN64" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.TYPEATTR">
    <Member Sig="public const int MEMBER_ID_NIL = -1;" />
    <Member Sig="public Guid guid;" />
    <Member Sig="public int cbSizeInstance;" />
    <Member Sig="public int dwReserved;" />
    <Member Sig="public int lcid;" />
    <Member Sig="public int memidConstructor;" />
    <Member Sig="public int memidDestructor;" />
    <Member Sig="public IntPtr lpstrSchema;" />
    <Member Sig="public short cbAlignment;" />
    <Member Sig="public short cbSizeVft;" />
    <Member Sig="public short cFuncs;" />
    <Member Sig="public short cImplTypes;" />
    <Member Sig="public short cVars;" />
    <Member Sig="public short wMajorVerNum;" />
    <Member Sig="public short wMinorVerNum;" />
    <Member Sig="public System.Runtime.InteropServices.ComTypes.IDLDESC idldescType;" />
    <Member Sig="public System.Runtime.InteropServices.ComTypes.TYPEDESC tdescAlias;" />
    <Member Sig="public System.Runtime.InteropServices.ComTypes.TYPEFLAGS wTypeFlags;" />
    <Member Sig="public System.Runtime.InteropServices.ComTypes.TYPEKIND typekind;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.TYPEDESC">
    <Member Sig="public IntPtr lpValue;" />
    <Member Sig="public short vt;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.TYPEFLAGS">
    <Member Sig="TYPEFLAG_FAGGREGATABLE" />
    <Member Sig="TYPEFLAG_FAPPOBJECT" />
    <Member Sig="TYPEFLAG_FCANCREATE" />
    <Member Sig="TYPEFLAG_FCONTROL" />
    <Member Sig="TYPEFLAG_FDISPATCHABLE" />
    <Member Sig="TYPEFLAG_FDUAL" />
    <Member Sig="TYPEFLAG_FHIDDEN" />
    <Member Sig="TYPEFLAG_FLICENSED" />
    <Member Sig="TYPEFLAG_FNONEXTENSIBLE" />
    <Member Sig="TYPEFLAG_FOLEAUTOMATION" />
    <Member Sig="TYPEFLAG_FPREDECLID" />
    <Member Sig="TYPEFLAG_FPROXY" />
    <Member Sig="TYPEFLAG_FREPLACEABLE" />
    <Member Sig="TYPEFLAG_FRESTRICTED" />
    <Member Sig="TYPEFLAG_FREVERSEBIND" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.TYPEKIND">
    <Member Sig="TKIND_ALIAS" />
    <Member Sig="TKIND_COCLASS" />
    <Member Sig="TKIND_DISPATCH" />
    <Member Sig="TKIND_ENUM" />
    <Member Sig="TKIND_INTERFACE" />
    <Member Sig="TKIND_MAX" />
    <Member Sig="TKIND_MODULE" />
    <Member Sig="TKIND_RECORD" />
    <Member Sig="TKIND_UNION" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.TYPELIBATTR">
    <Member Sig="public Guid guid;" />
    <Member Sig="public int lcid;" />
    <Member Sig="public short wMajorVerNum;" />
    <Member Sig="public short wMinorVerNum;" />
    <Member Sig="public System.Runtime.InteropServices.ComTypes.LIBFLAGS wLibFlags;" />
    <Member Sig="public System.Runtime.InteropServices.ComTypes.SYSKIND syskind;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.VARDESC">
    <Member Sig="public int memid;" />
    <Member Sig="public short wVarFlags;" />
    <Member Sig="public string lpstrSchema;" />
    <Member Sig="public System.Runtime.InteropServices.ComTypes.ELEMDESC elemdescVar;" />
    <Member Sig="public System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION desc;" />
    <Member Sig="public System.Runtime.InteropServices.ComTypes.VARKIND varkind;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.VARDESC/DESCUNION">
    <Member Sig="public int oInst;" />
    <Member Sig="public IntPtr lpvarValue;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.VARFLAGS">
    <Member Sig="VARFLAG_FBINDABLE" />
    <Member Sig="VARFLAG_FDEFAULTBIND" />
    <Member Sig="VARFLAG_FDEFAULTCOLLELEM" />
    <Member Sig="VARFLAG_FDISPLAYBIND" />
    <Member Sig="VARFLAG_FHIDDEN" />
    <Member Sig="VARFLAG_FIMMEDIATEBIND" />
    <Member Sig="VARFLAG_FNONBROWSABLE" />
    <Member Sig="VARFLAG_FREADONLY" />
    <Member Sig="VARFLAG_FREPLACEABLE" />
    <Member Sig="VARFLAG_FREQUESTEDIT" />
    <Member Sig="VARFLAG_FRESTRICTED" />
    <Member Sig="VARFLAG_FSOURCE" />
    <Member Sig="VARFLAG_FUIDEFAULT" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComTypes.VARKIND">
    <Member Sig="VAR_CONST" />
    <Member Sig="VAR_DISPATCH" />
    <Member Sig="VAR_PERINSTANCE" />
    <Member Sig="VAR_STATIC" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComUnregisterFunctionAttribute">
    <Member Sig="public ComUnregisterFunctionAttribute ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ComVisibleAttribute">
    <Member Sig="public bool Value { get; }" />
    <Member Sig="public ComVisibleAttribute (bool visibility);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.CONNECTDATA">
    <Member Sig="public int dwCookie;" />
    <Member Sig="public object pUnk;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.CriticalHandle">
    <Member Sig="~CriticalHandle ();" />
    <Member Sig="protected abstract bool ReleaseHandle ();" />
    <Member Sig="protected CriticalHandle (IntPtr invalidHandleValue);" />
    <Member Sig="protected IntPtr handle;" />
    <Member Sig="protected virtual void Dispose (bool disposing);" />
    <Member Sig="protected void SetHandle (IntPtr handle);" />
    <Member Sig="public abstract bool IsInvalid { get; }" />
    <Member Sig="public bool IsClosed { get; }" />
    <Member Sig="public void Close ();" />
    <Member Sig="public void Dispose ();" />
    <Member Sig="public void SetHandleAsInvalid ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.CurrencyWrapper">
    <Member Sig="public CurrencyWrapper (decimal obj);" />
    <Member Sig="public CurrencyWrapper (object obj);" />
    <Member Sig="public decimal WrappedObject { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.DefaultCharSetAttribute">
    <Member Sig="public DefaultCharSetAttribute (System.Runtime.InteropServices.CharSet charSet);" />
    <Member Sig="public System.Runtime.InteropServices.CharSet CharSet { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.DESCKIND">
    <Member Sig="DESCKIND_FUNCDESC" />
    <Member Sig="DESCKIND_IMPLICITAPPOBJ" />
    <Member Sig="DESCKIND_MAX" />
    <Member Sig="DESCKIND_NONE" />
    <Member Sig="DESCKIND_TYPECOMP" />
    <Member Sig="DESCKIND_VARDESC" />
  </Type>
  <Type Name="System.Runtime.InteropServices.DispatchWrapper">
    <Member Sig="public DispatchWrapper (object obj);" />
    <Member Sig="public object WrappedObject { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.DispIdAttribute">
    <Member Sig="public DispIdAttribute (int dispId);" />
    <Member Sig="public int Value { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.DISPPARAMS">
    <Member Sig="public int cArgs;" />
    <Member Sig="public int cNamedArgs;" />
    <Member Sig="public IntPtr rgdispidNamedArgs;" />
    <Member Sig="public IntPtr rgvarg;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.DllImportAttribute">
    <Member Sig="public bool BestFitMapping;" />
    <Member Sig="public bool ExactSpelling;" />
    <Member Sig="public bool PreserveSig;" />
    <Member Sig="public bool SetLastError;" />
    <Member Sig="public bool ThrowOnUnmappableChar;" />
    <Member Sig="public DllImportAttribute (string dllName);" />
    <Member Sig="public string EntryPoint;" />
    <Member Sig="public string Value { get; }" />
    <Member Sig="public System.Runtime.InteropServices.CallingConvention CallingConvention;" />
    <Member Sig="public System.Runtime.InteropServices.CharSet CharSet;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ELEMDESC">
    <Member Sig="public System.Runtime.InteropServices.ELEMDESC.DESCUNION desc;" />
    <Member Sig="public System.Runtime.InteropServices.TYPEDESC tdesc;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ELEMDESC/DESCUNION">
    <Member Sig="public System.Runtime.InteropServices.IDLDESC idldesc;" />
    <Member Sig="public System.Runtime.InteropServices.PARAMDESC paramdesc;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ErrorWrapper">
    <Member Sig="public ErrorWrapper (Exception e);" />
    <Member Sig="public ErrorWrapper (int errorCode);" />
    <Member Sig="public ErrorWrapper (object errorCode);" />
    <Member Sig="public int ErrorCode { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.EXCEPINFO">
    <Member Sig="public int dwHelpContext;" />
    <Member Sig="public IntPtr pfnDeferredFillIn;" />
    <Member Sig="public IntPtr pvReserved;" />
    <Member Sig="public short wCode;" />
    <Member Sig="public short wReserved;" />
    <Member Sig="public string bstrDescription;" />
    <Member Sig="public string bstrHelpFile;" />
    <Member Sig="public string bstrSource;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.Expando.IExpando">
    <Member Sig="public System.Reflection.FieldInfo AddField (string name);" />
    <Member Sig="public System.Reflection.MethodInfo AddMethod (string name, Delegate method);" />
    <Member Sig="public System.Reflection.PropertyInfo AddProperty (string name);" />
    <Member Sig="public void RemoveMember (System.Reflection.MemberInfo m);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ExporterEventKind">
    <Member Sig="ERROR_REFTOINVALIDASSEMBLY" />
    <Member Sig="NOTIF_CONVERTWARNING" />
    <Member Sig="NOTIF_TYPECONVERTED" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ExtensibleClassFactory">
    <Member Sig="public static void RegisterObjectCreationCallback (System.Runtime.InteropServices.ObjectCreationDelegate callback);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ExternalException">
    <Member Sig="protected ExternalException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public ExternalException ();" />
    <Member Sig="public ExternalException (string message);" />
    <Member Sig="public ExternalException (string message, Exception inner);" />
    <Member Sig="public ExternalException (string message, int errorCode);" />
    <Member Sig="public virtual int ErrorCode { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.FieldOffsetAttribute">
    <Member Sig="public FieldOffsetAttribute (int offset);" />
    <Member Sig="public int Value { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.FILETIME">
    <Member Sig="public int dwHighDateTime;" />
    <Member Sig="public int dwLowDateTime;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.FUNCDESC">
    <Member Sig="public int memid;" />
    <Member Sig="public IntPtr lprgelemdescParam;" />
    <Member Sig="public IntPtr lprgscode;" />
    <Member Sig="public short cParams;" />
    <Member Sig="public short cParamsOpt;" />
    <Member Sig="public short cScodes;" />
    <Member Sig="public short oVft;" />
    <Member Sig="public short wFuncFlags;" />
    <Member Sig="public System.Runtime.InteropServices.CALLCONV callconv;" />
    <Member Sig="public System.Runtime.InteropServices.ELEMDESC elemdescFunc;" />
    <Member Sig="public System.Runtime.InteropServices.FUNCKIND funckind;" />
    <Member Sig="public System.Runtime.InteropServices.INVOKEKIND invkind;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.FUNCFLAGS">
    <Member Sig="FUNCFLAG_FBINDABLE" />
    <Member Sig="FUNCFLAG_FDEFAULTBIND" />
    <Member Sig="FUNCFLAG_FDEFAULTCOLLELEM" />
    <Member Sig="FUNCFLAG_FDISPLAYBIND" />
    <Member Sig="FUNCFLAG_FHIDDEN" />
    <Member Sig="FUNCFLAG_FIMMEDIATEBIND" />
    <Member Sig="FUNCFLAG_FNONBROWSABLE" />
    <Member Sig="FUNCFLAG_FREPLACEABLE" />
    <Member Sig="FUNCFLAG_FREQUESTEDIT" />
    <Member Sig="FUNCFLAG_FRESTRICTED" />
    <Member Sig="FUNCFLAG_FSOURCE" />
    <Member Sig="FUNCFLAG_FUIDEFAULT" />
    <Member Sig="FUNCFLAG_FUSESGETLASTERROR" />
  </Type>
  <Type Name="System.Runtime.InteropServices.FUNCKIND">
    <Member Sig="FUNC_DISPATCH" />
    <Member Sig="FUNC_NONVIRTUAL" />
    <Member Sig="FUNC_PUREVIRTUAL" />
    <Member Sig="FUNC_STATIC" />
    <Member Sig="FUNC_VIRTUAL" />
  </Type>
  <Type Name="System.Runtime.InteropServices.GCHandle">
    <Member Sig="public bool IsAllocated { get; }" />
    <Member Sig="public IntPtr AddrOfPinnedObject ();" />
    <Member Sig="public object Target { get; set; }" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static bool op_Equality (System.Runtime.InteropServices.GCHandle a, System.Runtime.InteropServices.GCHandle b);" />
    <Member Sig="public static bool op_Inequality (System.Runtime.InteropServices.GCHandle a, System.Runtime.InteropServices.GCHandle b);" />
    <Member Sig="public static IntPtr op_Explicit (System.Runtime.InteropServices.GCHandle value);" />
    <Member Sig="public static IntPtr ToIntPtr (System.Runtime.InteropServices.GCHandle value);" />
    <Member Sig="public static System.Runtime.InteropServices.GCHandle Alloc (object value);" />
    <Member Sig="public static System.Runtime.InteropServices.GCHandle Alloc (object value, System.Runtime.InteropServices.GCHandleType type);" />
    <Member Sig="public static System.Runtime.InteropServices.GCHandle FromIntPtr (IntPtr value);" />
    <Member Sig="public static System.Runtime.InteropServices.GCHandle op_Explicit (IntPtr value);" />
    <Member Sig="public void Free ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.GCHandleType">
    <Member Sig="Normal" />
    <Member Sig="Pinned" />
    <Member Sig="Weak" />
    <Member Sig="WeakTrackResurrection" />
  </Type>
  <Type Name="System.Runtime.InteropServices.GuidAttribute">
    <Member Sig="public GuidAttribute (string guid);" />
    <Member Sig="public string Value { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.HandleRef">
    <Member Sig="public HandleRef (object wrapper, IntPtr handle);" />
    <Member Sig="public IntPtr Handle { get; }" />
    <Member Sig="public object Wrapper { get; }" />
    <Member Sig="public static IntPtr op_Explicit (System.Runtime.InteropServices.HandleRef value);" />
    <Member Sig="public static IntPtr ToIntPtr (System.Runtime.InteropServices.HandleRef value);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ICustomAdapter">
    <Member Sig="public object GetUnderlyingObject ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ICustomFactory">
    <Member Sig="public MarshalByRefObject CreateInstance (Type serverType);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ICustomMarshaler">
    <Member Sig="public int GetNativeDataSize ();" />
    <Member Sig="public IntPtr MarshalManagedToNative (object ManagedObj);" />
    <Member Sig="public object MarshalNativeToManaged (IntPtr pNativeData);" />
    <Member Sig="public void CleanUpManagedData (object ManagedObj);" />
    <Member Sig="public void CleanUpNativeData (IntPtr pNativeData);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.IDispatchImplAttribute">
    <Member Sig="public IDispatchImplAttribute (short implType);" />
    <Member Sig="public IDispatchImplAttribute (System.Runtime.InteropServices.IDispatchImplType implType);" />
    <Member Sig="public System.Runtime.InteropServices.IDispatchImplType Value { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.IDispatchImplType">
    <Member Sig="CompatibleImpl" />
    <Member Sig="InternalImpl" />
    <Member Sig="SystemDefinedImpl" />
  </Type>
  <Type Name="System.Runtime.InteropServices.IDLDESC">
    <Member Sig="public int dwReserved;" />
    <Member Sig="public System.Runtime.InteropServices.IDLFLAG wIDLFlags;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.IDLFLAG">
    <Member Sig="IDLFLAG_FIN" />
    <Member Sig="IDLFLAG_FLCID" />
    <Member Sig="IDLFLAG_FOUT" />
    <Member Sig="IDLFLAG_FRETVAL" />
    <Member Sig="IDLFLAG_NONE" />
  </Type>
  <Type Name="System.Runtime.InteropServices.IMPLTYPEFLAGS">
    <Member Sig="IMPLTYPEFLAG_FDEFAULT" />
    <Member Sig="IMPLTYPEFLAG_FDEFAULTVTABLE" />
    <Member Sig="IMPLTYPEFLAG_FRESTRICTED" />
    <Member Sig="IMPLTYPEFLAG_FSOURCE" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ImportedFromTypeLibAttribute">
    <Member Sig="public ImportedFromTypeLibAttribute (string tlbFile);" />
    <Member Sig="public string Value { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ImporterEventKind">
    <Member Sig="ERROR_REFTOINVALIDTYPELIB" />
    <Member Sig="NOTIF_CONVERTWARNING" />
    <Member Sig="NOTIF_TYPECONVERTED" />
  </Type>
  <Type Name="System.Runtime.InteropServices.InAttribute">
    <Member Sig="public InAttribute ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.InterfaceTypeAttribute">
    <Member Sig="public InterfaceTypeAttribute (short interfaceType);" />
    <Member Sig="public InterfaceTypeAttribute (System.Runtime.InteropServices.ComInterfaceType interfaceType);" />
    <Member Sig="public System.Runtime.InteropServices.ComInterfaceType Value { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.InvalidComObjectException">
    <Member Sig="protected InvalidComObjectException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public InvalidComObjectException ();" />
    <Member Sig="public InvalidComObjectException (string message);" />
    <Member Sig="public InvalidComObjectException (string message, Exception inner);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.InvalidOleVariantTypeException">
    <Member Sig="protected InvalidOleVariantTypeException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public InvalidOleVariantTypeException ();" />
    <Member Sig="public InvalidOleVariantTypeException (string message);" />
    <Member Sig="public InvalidOleVariantTypeException (string message, Exception inner);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.INVOKEKIND">
    <Member Sig="INVOKE_FUNC" />
    <Member Sig="INVOKE_PROPERTYGET" />
    <Member Sig="INVOKE_PROPERTYPUT" />
    <Member Sig="INVOKE_PROPERTYPUTREF" />
  </Type>
  <Type Name="System.Runtime.InteropServices.IRegistrationServices">
    <Member Sig="public bool RegisterAssembly (System.Reflection.Assembly assembly, System.Runtime.InteropServices.AssemblyRegistrationFlags flags);" />
    <Member Sig="public bool TypeRepresentsComType (Type type);" />
    <Member Sig="public bool TypeRequiresRegistration (Type type);" />
    <Member Sig="public bool UnregisterAssembly (System.Reflection.Assembly assembly);" />
    <Member Sig="public Guid GetManagedCategoryGuid ();" />
    <Member Sig="public string GetProgIdForType (Type type);" />
    <Member Sig="public Type[] GetRegistrableTypesInAssembly (System.Reflection.Assembly assembly);" />
    <Member Sig="public void RegisterTypeForComClients (Type type, ref Guid g);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ITypeLibConverter">
    <Member Sig="public bool GetPrimaryInteropAssembly (Guid g, int major, int minor, int lcid, out string asmName, out string asmCodeBase);" />
    <Member Sig="public object ConvertAssemblyToTypeLib (System.Reflection.Assembly assembly, string typeLibName, System.Runtime.InteropServices.TypeLibExporterFlags flags, System.Runtime.InteropServices.ITypeLibExporterNotifySink notifySink);" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder ConvertTypeLibToAssembly (object typeLib, string asmFileName, int flags, System.Runtime.InteropServices.ITypeLibImporterNotifySink notifySink, byte[] publicKey, System.Reflection.StrongNameKeyPair keyPair, bool unsafeInterfaces);" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder ConvertTypeLibToAssembly (object typeLib, string asmFileName, System.Runtime.InteropServices.TypeLibImporterFlags flags, System.Runtime.InteropServices.ITypeLibImporterNotifySink notifySink, byte[] publicKey, System.Reflection.StrongNameKeyPair keyPair, string asmNamespace, Version asmVersion);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ITypeLibExporterNameProvider">
    <Member Sig="public string[] GetNames ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ITypeLibExporterNotifySink">
    <Member Sig="public object ResolveRef (System.Reflection.Assembly assembly);" />
    <Member Sig="public void ReportEvent (System.Runtime.InteropServices.ExporterEventKind eventKind, int eventCode, string eventMsg);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ITypeLibImporterNotifySink">
    <Member Sig="public System.Reflection.Assembly ResolveRef (object typeLib);" />
    <Member Sig="public void ReportEvent (System.Runtime.InteropServices.ImporterEventKind eventKind, int eventCode, string eventMsg);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.LayoutKind">
    <Member Sig="Auto" />
    <Member Sig="Explicit" />
    <Member Sig="Sequential" />
  </Type>
  <Type Name="System.Runtime.InteropServices.LCIDConversionAttribute">
    <Member Sig="public int Value { get; }" />
    <Member Sig="public LCIDConversionAttribute (int lcid);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.LIBFLAGS">
    <Member Sig="LIBFLAG_FCONTROL" />
    <Member Sig="LIBFLAG_FHASDISKIMAGE" />
    <Member Sig="LIBFLAG_FHIDDEN" />
    <Member Sig="LIBFLAG_FRESTRICTED" />
  </Type>
  <Type Name="System.Runtime.InteropServices.Marshal">
    <Member Sig="public static bool IsComObject (object o);" />
    <Member Sig="public static bool IsTypeVisibleFromCom (Type t);" />
    <Member Sig="public static bool SetComObjectData (object obj, object key, object data);" />
    <Member Sig="public static byte ReadByte (IntPtr ptr);" />
    <Member Sig="public static byte ReadByte (IntPtr ptr, int ofs);" />
    <Member Sig="public static byte ReadByte (object ptr, int ofs);" />
    <Member Sig="public static Delegate GetDelegateForFunctionPointer (IntPtr ptr, Type t);" />
    <Member Sig="public static Exception GetExceptionForHR (int errorCode);" />
    <Member Sig="public static Exception GetExceptionForHR (int errorCode, IntPtr errorInfo);" />
    <Member Sig="public static Guid GenerateGuidForType (Type type);" />
    <Member Sig="public static Guid GetTypeLibGuid (System.Runtime.InteropServices.ComTypes.ITypeLib typelib);" />
    <Member Sig="public static Guid GetTypeLibGuid (System.Runtime.InteropServices.UCOMITypeLib pTLB);" />
    <Member Sig="public static Guid GetTypeLibGuidForAssembly (System.Reflection.Assembly asm);" />
    <Member Sig="public static int AddRef (IntPtr pUnk);" />
    <Member Sig="public static int FinalReleaseComObject (object o);" />
    <Member Sig="public static int GetComSlotForMethodInfo (System.Reflection.MemberInfo m);" />
    <Member Sig="public static int GetEndComSlot (Type t);" />
    <Member Sig="public static int GetExceptionCode ();" />
    <Member Sig="public static int GetHRForException (Exception e);" />
    <Member Sig="public static int GetHRForLastWin32Error ();" />
    <Member Sig="public static int GetLastWin32Error ();" />
    <Member Sig="public static int GetStartComSlot (Type t);" />
    <Member Sig="public static int GetTypeLibLcid (System.Runtime.InteropServices.ComTypes.ITypeLib typelib);" />
    <Member Sig="public static int GetTypeLibLcid (System.Runtime.InteropServices.UCOMITypeLib pTLB);" />
    <Member Sig="public static int NumParamBytes (System.Reflection.MethodInfo m);" />
    <Member Sig="public static int QueryInterface (IntPtr pUnk, ref Guid iid, out IntPtr ppv);" />
    <Member Sig="public static int ReadInt32 (IntPtr ptr);" />
    <Member Sig="public static int ReadInt32 (IntPtr ptr, int ofs);" />
    <Member Sig="public static int ReadInt32 (object ptr, int ofs);" />
    <Member Sig="public static int Release (IntPtr pUnk);" />
    <Member Sig="public static int ReleaseComObject (object o);" />
    <Member Sig="public static int SizeOf (object structure);" />
    <Member Sig="public static int SizeOf (Type t);" />
    <Member Sig="public static IntPtr AllocCoTaskMem (int cb);" />
    <Member Sig="public static IntPtr AllocHGlobal (int cb);" />
    <Member Sig="public static IntPtr AllocHGlobal (IntPtr cb);" />
    <Member Sig="public static IntPtr CreateAggregatedObject (IntPtr pOuter, object o);" />
    <Member Sig="public static IntPtr GetComInterfaceForObject (object o, Type T);" />
    <Member Sig="public static IntPtr GetComInterfaceForObjectInContext (object o, Type t);" />
    <Member Sig="public static IntPtr GetExceptionPointers ();" />
    <Member Sig="public static IntPtr GetFunctionPointerForDelegate (Delegate d);" />
    <Member Sig="public static IntPtr GetHINSTANCE (System.Reflection.Module m);" />
    <Member Sig="public static IntPtr GetIDispatchForObject (object o);" />
    <Member Sig="public static IntPtr GetIDispatchForObjectInContext (object o);" />
    <Member Sig="public static IntPtr GetITypeInfoForType (Type t);" />
    <Member Sig="public static IntPtr GetIUnknownForObject (object o);" />
    <Member Sig="public static IntPtr GetIUnknownForObjectInContext (object o);" />
    <Member Sig="public static IntPtr GetManagedThunkForUnmanagedMethodPtr (IntPtr pfnMethodToWrap, IntPtr pbSignature, int cbSignature);" />
    <Member Sig="public static IntPtr GetUnmanagedThunkForManagedMethodPtr (IntPtr pfnMethodToWrap, IntPtr pbSignature, int cbSignature);" />
    <Member Sig="public static IntPtr OffsetOf (Type t, string fieldName);" />
    <Member Sig="public static IntPtr ReadIntPtr (IntPtr ptr);" />
    <Member Sig="public static IntPtr ReadIntPtr (IntPtr ptr, int ofs);" />
    <Member Sig="public static IntPtr ReadIntPtr (object ptr, int ofs);" />
    <Member Sig="public static IntPtr ReAllocCoTaskMem (IntPtr pv, int cb);" />
    <Member Sig="public static IntPtr ReAllocHGlobal (IntPtr pv, IntPtr cb);" />
    <Member Sig="public static IntPtr SecureStringToBSTR (System.Security.SecureString s);" />
    <Member Sig="public static IntPtr SecureStringToCoTaskMemAnsi (System.Security.SecureString s);" />
    <Member Sig="public static IntPtr SecureStringToCoTaskMemUnicode (System.Security.SecureString s);" />
    <Member Sig="public static IntPtr SecureStringToGlobalAllocAnsi (System.Security.SecureString s);" />
    <Member Sig="public static IntPtr SecureStringToGlobalAllocUnicode (System.Security.SecureString s);" />
    <Member Sig="public static IntPtr StringToBSTR (string s);" />
    <Member Sig="public static IntPtr StringToCoTaskMemAnsi (string s);" />
    <Member Sig="public static IntPtr StringToCoTaskMemAuto (string s);" />
    <Member Sig="public static IntPtr StringToCoTaskMemUni (string s);" />
    <Member Sig="public static IntPtr StringToHGlobalAnsi (string s);" />
    <Member Sig="public static IntPtr StringToHGlobalAuto (string s);" />
    <Member Sig="public static IntPtr StringToHGlobalUni (string s);" />
    <Member Sig="public static IntPtr UnsafeAddrOfPinnedArrayElement (Array arr, int index);" />
    <Member Sig="public static long ReadInt64 (IntPtr ptr);" />
    <Member Sig="public static long ReadInt64 (IntPtr ptr, int ofs);" />
    <Member Sig="public static long ReadInt64 (object ptr, int ofs);" />
    <Member Sig="public static object BindToMoniker (string monikerName);" />
    <Member Sig="public static object CreateWrapperOfType (object o, Type t);" />
    <Member Sig="public static object GetActiveObject (string progID);" />
    <Member Sig="public static object GetComObjectData (object obj, object key);" />
    <Member Sig="public static object GetObjectForIUnknown (IntPtr pUnk);" />
    <Member Sig="public static object GetObjectForNativeVariant (IntPtr pSrcNativeVariant);" />
    <Member Sig="public static object GetTypedObjectForIUnknown (IntPtr pUnk, Type t);" />
    <Member Sig="public static object GetUniqueObjectForIUnknown (IntPtr unknown);" />
    <Member Sig="public static object PtrToStructure (IntPtr ptr, Type structureType);" />
    <Member Sig="public static object[] GetObjectsForNativeVariants (IntPtr aSrcNativeVariant, int cVars);" />
    <Member Sig="public static readonly int SystemDefaultCharSize;" />
    <Member Sig="public static readonly int SystemMaxDBCSCharSize;" />
    <Member Sig="public static short ReadInt16 (IntPtr ptr);" />
    <Member Sig="public static short ReadInt16 (IntPtr ptr, int ofs);" />
    <Member Sig="public static short ReadInt16 (object ptr, int ofs);" />
    <Member Sig="public static string GenerateProgIdForType (Type type);" />
    <Member Sig="public static string GetTypeInfoName (System.Runtime.InteropServices.ComTypes.ITypeInfo typeInfo);" />
    <Member Sig="public static string GetTypeInfoName (System.Runtime.InteropServices.UCOMITypeInfo pTI);" />
    <Member Sig="public static string GetTypeLibName (System.Runtime.InteropServices.ComTypes.ITypeLib typelib);" />
    <Member Sig="public static string GetTypeLibName (System.Runtime.InteropServices.UCOMITypeLib pTLB);" />
    <Member Sig="public static string PtrToStringAnsi (IntPtr ptr);" />
    <Member Sig="public static string PtrToStringAnsi (IntPtr ptr, int len);" />
    <Member Sig="public static string PtrToStringAuto (IntPtr ptr);" />
    <Member Sig="public static string PtrToStringAuto (IntPtr ptr, int len);" />
    <Member Sig="public static string PtrToStringBSTR (IntPtr ptr);" />
    <Member Sig="public static string PtrToStringUni (IntPtr ptr);" />
    <Member Sig="public static string PtrToStringUni (IntPtr ptr, int len);" />
    <Member Sig="public static System.Reflection.MemberInfo GetMethodInfoForComSlot (Type t, int slot, ref System.Runtime.InteropServices.ComMemberType memberType);" />
    <Member Sig="public static System.Threading.Thread GetThreadFromFiberCookie (int cookie);" />
    <Member Sig="public static Type GetTypeForITypeInfo (IntPtr piTypeInfo);" />
    <Member Sig="public static void ChangeWrapperHandleStrength (object otp, bool fIsWeak);" />
    <Member Sig="public static void Copy (byte[] source, int startIndex, IntPtr destination, int length);" />
    <Member Sig="public static void Copy (char[] source, int startIndex, IntPtr destination, int length);" />
    <Member Sig="public static void Copy (double[] source, int startIndex, IntPtr destination, int length);" />
    <Member Sig="public static void Copy (float[] source, int startIndex, IntPtr destination, int length);" />
    <Member Sig="public static void Copy (int[] source, int startIndex, IntPtr destination, int length);" />
    <Member Sig="public static void Copy (IntPtr source, byte[] destination, int startIndex, int length);" />
    <Member Sig="public static void Copy (IntPtr source, char[] destination, int startIndex, int length);" />
    <Member Sig="public static void Copy (IntPtr source, double[] destination, int startIndex, int length);" />
    <Member Sig="public static void Copy (IntPtr source, float[] destination, int startIndex, int length);" />
    <Member Sig="public static void Copy (IntPtr source, int[] destination, int startIndex, int length);" />
    <Member Sig="public static void Copy (IntPtr source, IntPtr[] destination, int startIndex, int length);" />
    <Member Sig="public static void Copy (IntPtr source, long[] destination, int startIndex, int length);" />
    <Member Sig="public static void Copy (IntPtr source, short[] destination, int startIndex, int length);" />
    <Member Sig="public static void Copy (IntPtr[] source, int startIndex, IntPtr destination, int length);" />
    <Member Sig="public static void Copy (long[] source, int startIndex, IntPtr destination, int length);" />
    <Member Sig="public static void Copy (short[] source, int startIndex, IntPtr destination, int length);" />
    <Member Sig="public static void DestroyStructure (IntPtr ptr, Type structuretype);" />
    <Member Sig="public static void FreeBSTR (IntPtr ptr);" />
    <Member Sig="public static void FreeCoTaskMem (IntPtr ptr);" />
    <Member Sig="public static void FreeHGlobal (IntPtr hglobal);" />
    <Member Sig="public static void GetNativeVariantForObject (object obj, IntPtr pDstNativeVariant);" />
    <Member Sig="public static void GetTypeLibVersionForAssembly (System.Reflection.Assembly inputAssembly, out int majorVersion, out int minorVersion);" />
    <Member Sig="public static void Prelink (System.Reflection.MethodInfo m);" />
    <Member Sig="public static void PrelinkAll (Type c);" />
    <Member Sig="public static void PtrToStructure (IntPtr ptr, object structure);" />
    <Member Sig="public static void ReleaseThreadCache ();" />
    <Member Sig="public static void StructureToPtr (object structure, IntPtr ptr, bool fDeleteOld);" />
    <Member Sig="public static void ThrowExceptionForHR (int errorCode);" />
    <Member Sig="public static void ThrowExceptionForHR (int errorCode, IntPtr errorInfo);" />
    <Member Sig="public static void WriteByte (IntPtr ptr, byte val);" />
    <Member Sig="public static void WriteByte (IntPtr ptr, int ofs, byte val);" />
    <Member Sig="public static void WriteByte (object ptr, int ofs, byte val);" />
    <Member Sig="public static void WriteInt16 (IntPtr ptr, char val);" />
    <Member Sig="public static void WriteInt16 (IntPtr ptr, int ofs, char val);" />
    <Member Sig="public static void WriteInt16 (IntPtr ptr, int ofs, short val);" />
    <Member Sig="public static void WriteInt16 (IntPtr ptr, short val);" />
    <Member Sig="public static void WriteInt16 (object ptr, int ofs, char val);" />
    <Member Sig="public static void WriteInt16 (object ptr, int ofs, short val);" />
    <Member Sig="public static void WriteInt32 (IntPtr ptr, int ofs, int val);" />
    <Member Sig="public static void WriteInt32 (IntPtr ptr, int val);" />
    <Member Sig="public static void WriteInt32 (object ptr, int ofs, int val);" />
    <Member Sig="public static void WriteInt64 (IntPtr ptr, int ofs, long val);" />
    <Member Sig="public static void WriteInt64 (IntPtr ptr, long val);" />
    <Member Sig="public static void WriteInt64 (object ptr, int ofs, long val);" />
    <Member Sig="public static void WriteIntPtr (IntPtr ptr, int ofs, IntPtr val);" />
    <Member Sig="public static void WriteIntPtr (IntPtr ptr, IntPtr val);" />
    <Member Sig="public static void WriteIntPtr (object ptr, int ofs, IntPtr val);" />
    <Member Sig="public static void ZeroFreeBSTR (IntPtr s);" />
    <Member Sig="public static void ZeroFreeCoTaskMemAnsi (IntPtr s);" />
    <Member Sig="public static void ZeroFreeCoTaskMemUnicode (IntPtr s);" />
    <Member Sig="public static void ZeroFreeGlobalAllocAnsi (IntPtr s);" />
    <Member Sig="public static void ZeroFreeGlobalAllocUnicode (IntPtr s);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.MarshalAsAttribute">
    <Member Sig="public int IidParameterIndex;" />
    <Member Sig="public int SizeConst;" />
    <Member Sig="public MarshalAsAttribute (short unmanagedType);" />
    <Member Sig="public MarshalAsAttribute (System.Runtime.InteropServices.UnmanagedType unmanagedType);" />
    <Member Sig="public short SizeParamIndex;" />
    <Member Sig="public string MarshalCookie;" />
    <Member Sig="public string MarshalType;" />
    <Member Sig="public System.Runtime.InteropServices.UnmanagedType ArraySubType;" />
    <Member Sig="public System.Runtime.InteropServices.UnmanagedType Value { get; }" />
    <Member Sig="public System.Runtime.InteropServices.VarEnum SafeArraySubType;" />
    <Member Sig="public Type MarshalTypeRef;" />
    <Member Sig="public Type SafeArrayUserDefinedSubType;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.MarshalDirectiveException">
    <Member Sig="protected MarshalDirectiveException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public MarshalDirectiveException ();" />
    <Member Sig="public MarshalDirectiveException (string message);" />
    <Member Sig="public MarshalDirectiveException (string message, Exception inner);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ObjectCreationDelegate" />
  <Type Name="System.Runtime.InteropServices.OptionalAttribute">
    <Member Sig="public OptionalAttribute ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.OutAttribute">
    <Member Sig="public OutAttribute ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.PARAMDESC">
    <Member Sig="public IntPtr lpVarValue;" />
    <Member Sig="public System.Runtime.InteropServices.PARAMFLAG wParamFlags;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.PARAMFLAG">
    <Member Sig="PARAMFLAG_FHASCUSTDATA" />
    <Member Sig="PARAMFLAG_FHASDEFAULT" />
    <Member Sig="PARAMFLAG_FIN" />
    <Member Sig="PARAMFLAG_FLCID" />
    <Member Sig="PARAMFLAG_FOPT" />
    <Member Sig="PARAMFLAG_FOUT" />
    <Member Sig="PARAMFLAG_FRETVAL" />
    <Member Sig="PARAMFLAG_NONE" />
  </Type>
  <Type Name="System.Runtime.InteropServices.PreserveSigAttribute">
    <Member Sig="public PreserveSigAttribute ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute">
    <Member Sig="public int MajorVersion { get; }" />
    <Member Sig="public int MinorVersion { get; }" />
    <Member Sig="public PrimaryInteropAssemblyAttribute (int major, int minor);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.ProgIdAttribute">
    <Member Sig="public ProgIdAttribute (string progId);" />
    <Member Sig="public string Value { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.RegistrationClassContext">
    <Member Sig="DisableActivateAsActivator" />
    <Member Sig="EnableActivateAsActivator" />
    <Member Sig="EnableCodeDownload" />
    <Member Sig="FromDefaultContext" />
    <Member Sig="InProcessHandler" />
    <Member Sig="InProcessHandler16" />
    <Member Sig="InProcessServer" />
    <Member Sig="InProcessServer16" />
    <Member Sig="LocalServer" />
    <Member Sig="NoCodeDownload" />
    <Member Sig="NoCustomMarshal" />
    <Member Sig="NoFailureLog" />
    <Member Sig="RemoteServer" />
    <Member Sig="Reserved1" />
    <Member Sig="Reserved2" />
    <Member Sig="Reserved3" />
    <Member Sig="Reserved4" />
    <Member Sig="Reserved5" />
  </Type>
  <Type Name="System.Runtime.InteropServices.RegistrationConnectionType">
    <Member Sig="MultipleUse" />
    <Member Sig="MultiSeparate" />
    <Member Sig="SingleUse" />
    <Member Sig="Surrogate" />
    <Member Sig="Suspended" />
  </Type>
  <Type Name="System.Runtime.InteropServices.RegistrationServices">
    <Member Sig="public RegistrationServices ();" />
    <Member Sig="public virtual bool RegisterAssembly (System.Reflection.Assembly assembly, System.Runtime.InteropServices.AssemblyRegistrationFlags flags);" />
    <Member Sig="public virtual bool TypeRepresentsComType (Type type);" />
    <Member Sig="public virtual bool TypeRequiresRegistration (Type type);" />
    <Member Sig="public virtual bool UnregisterAssembly (System.Reflection.Assembly assembly);" />
    <Member Sig="public virtual Guid GetManagedCategoryGuid ();" />
    <Member Sig="public virtual int RegisterTypeForComClients (Type type, System.Runtime.InteropServices.RegistrationClassContext classContext, System.Runtime.InteropServices.RegistrationConnectionType flags);" />
    <Member Sig="public virtual string GetProgIdForType (Type type);" />
    <Member Sig="public virtual Type[] GetRegistrableTypesInAssembly (System.Reflection.Assembly assembly);" />
    <Member Sig="public virtual void RegisterTypeForComClients (Type type, ref Guid g);" />
    <Member Sig="public virtual void UnregisterTypeForComClients (int cookie);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.RuntimeEnvironment">
    <Member Sig="public RuntimeEnvironment ();" />
    <Member Sig="public static bool FromGlobalAccessCache (System.Reflection.Assembly a);" />
    <Member Sig="public static string GetRuntimeDirectory ();" />
    <Member Sig="public static string GetSystemVersion ();" />
    <Member Sig="public static string SystemConfigurationFile { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.SafeArrayRankMismatchException">
    <Member Sig="protected SafeArrayRankMismatchException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public SafeArrayRankMismatchException ();" />
    <Member Sig="public SafeArrayRankMismatchException (string message);" />
    <Member Sig="public SafeArrayRankMismatchException (string message, Exception inner);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.SafeArrayTypeMismatchException">
    <Member Sig="protected SafeArrayTypeMismatchException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public SafeArrayTypeMismatchException ();" />
    <Member Sig="public SafeArrayTypeMismatchException (string message);" />
    <Member Sig="public SafeArrayTypeMismatchException (string message, Exception inner);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.SafeHandle">
    <Member Sig="~SafeHandle ();" />
    <Member Sig="protected abstract bool ReleaseHandle ();" />
    <Member Sig="protected IntPtr handle;" />
    <Member Sig="protected SafeHandle (IntPtr invalidHandleValue, bool ownsHandle);" />
    <Member Sig="protected virtual void Dispose (bool disposing);" />
    <Member Sig="protected void SetHandle (IntPtr handle);" />
    <Member Sig="public abstract bool IsInvalid { get; }" />
    <Member Sig="public bool IsClosed { get; }" />
    <Member Sig="public IntPtr DangerousGetHandle ();" />
    <Member Sig="public void Close ();" />
    <Member Sig="public void DangerousAddRef (ref bool success);" />
    <Member Sig="public void DangerousRelease ();" />
    <Member Sig="public void Dispose ();" />
    <Member Sig="public void SetHandleAsInvalid ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.SEHException">
    <Member Sig="protected SEHException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public SEHException ();" />
    <Member Sig="public SEHException (string message);" />
    <Member Sig="public SEHException (string message, Exception inner);" />
    <Member Sig="public virtual bool CanResume ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.SetWin32ContextInIDispatchAttribute">
    <Member Sig="public SetWin32ContextInIDispatchAttribute ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.STATSTG">
    <Member Sig="public Guid clsid;" />
    <Member Sig="public int grfLocksSupported;" />
    <Member Sig="public int grfMode;" />
    <Member Sig="public int grfStateBits;" />
    <Member Sig="public int reserved;" />
    <Member Sig="public int type;" />
    <Member Sig="public long cbSize;" />
    <Member Sig="public string pwcsName;" />
    <Member Sig="public System.Runtime.InteropServices.FILETIME atime;" />
    <Member Sig="public System.Runtime.InteropServices.FILETIME ctime;" />
    <Member Sig="public System.Runtime.InteropServices.FILETIME mtime;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.StructLayoutAttribute">
    <Member Sig="public int Pack;" />
    <Member Sig="public int Size;" />
    <Member Sig="public StructLayoutAttribute (short layoutKind);" />
    <Member Sig="public StructLayoutAttribute (System.Runtime.InteropServices.LayoutKind layoutKind);" />
    <Member Sig="public System.Runtime.InteropServices.CharSet CharSet;" />
    <Member Sig="public System.Runtime.InteropServices.LayoutKind Value { get; }" />
  </Type>
  <Type Name="System.Runtime.InteropServices.SYSKIND">
    <Member Sig="SYS_MAC" />
    <Member Sig="SYS_WIN16" />
    <Member Sig="SYS_WIN32" />
  </Type>
  <Type Name="System.Runtime.InteropServices.TYPEATTR">
    <Member Sig="public const int MEMBER_ID_NIL = -1;" />
    <Member Sig="public Guid guid;" />
    <Member Sig="public int cbSizeInstance;" />
    <Member Sig="public int dwReserved;" />
    <Member Sig="public int lcid;" />
    <Member Sig="public int memidConstructor;" />
    <Member Sig="public int memidDestructor;" />
    <Member Sig="public IntPtr lpstrSchema;" />
    <Member Sig="public short cbAlignment;" />
    <Member Sig="public short cbSizeVft;" />
    <Member Sig="public short cFuncs;" />
    <Member Sig="public short cImplTypes;" />
    <Member Sig="public short cVars;" />
    <Member Sig="public short wMajorVerNum;" />
    <Member Sig="public short wMinorVerNum;" />
    <Member Sig="public System.Runtime.InteropServices.IDLDESC idldescType;" />
    <Member Sig="public System.Runtime.InteropServices.TYPEDESC tdescAlias;" />
    <Member Sig="public System.Runtime.InteropServices.TYPEFLAGS wTypeFlags;" />
    <Member Sig="public System.Runtime.InteropServices.TYPEKIND typekind;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.TYPEDESC">
    <Member Sig="public IntPtr lpValue;" />
    <Member Sig="public short vt;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.TYPEFLAGS">
    <Member Sig="TYPEFLAG_FAGGREGATABLE" />
    <Member Sig="TYPEFLAG_FAPPOBJECT" />
    <Member Sig="TYPEFLAG_FCANCREATE" />
    <Member Sig="TYPEFLAG_FCONTROL" />
    <Member Sig="TYPEFLAG_FDISPATCHABLE" />
    <Member Sig="TYPEFLAG_FDUAL" />
    <Member Sig="TYPEFLAG_FHIDDEN" />
    <Member Sig="TYPEFLAG_FLICENSED" />
    <Member Sig="TYPEFLAG_FNONEXTENSIBLE" />
    <Member Sig="TYPEFLAG_FOLEAUTOMATION" />
    <Member Sig="TYPEFLAG_FPREDECLID" />
    <Member Sig="TYPEFLAG_FPROXY" />
    <Member Sig="TYPEFLAG_FREPLACEABLE" />
    <Member Sig="TYPEFLAG_FRESTRICTED" />
    <Member Sig="TYPEFLAG_FREVERSEBIND" />
  </Type>
  <Type Name="System.Runtime.InteropServices.TYPEKIND">
    <Member Sig="TKIND_ALIAS" />
    <Member Sig="TKIND_COCLASS" />
    <Member Sig="TKIND_DISPATCH" />
    <Member Sig="TKIND_ENUM" />
    <Member Sig="TKIND_INTERFACE" />
    <Member Sig="TKIND_MAX" />
    <Member Sig="TKIND_MODULE" />
    <Member Sig="TKIND_RECORD" />
    <Member Sig="TKIND_UNION" />
  </Type>
  <Type Name="System.Runtime.InteropServices.TYPELIBATTR">
    <Member Sig="public Guid guid;" />
    <Member Sig="public int lcid;" />
    <Member Sig="public short wMajorVerNum;" />
    <Member Sig="public short wMinorVerNum;" />
    <Member Sig="public System.Runtime.InteropServices.LIBFLAGS wLibFlags;" />
    <Member Sig="public System.Runtime.InteropServices.SYSKIND syskind;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.TypeLibConverter">
    <Member Sig="public bool GetPrimaryInteropAssembly (Guid g, int major, int minor, int lcid, out string asmName, out string asmCodeBase);" />
    <Member Sig="public object ConvertAssemblyToTypeLib (System.Reflection.Assembly assembly, string strTypeLibName, System.Runtime.InteropServices.TypeLibExporterFlags flags, System.Runtime.InteropServices.ITypeLibExporterNotifySink notifySink);" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder ConvertTypeLibToAssembly (object typeLib, string asmFileName, int flags, System.Runtime.InteropServices.ITypeLibImporterNotifySink notifySink, byte[] publicKey, System.Reflection.StrongNameKeyPair keyPair, bool unsafeInterfaces);" />
    <Member Sig="public System.Reflection.Emit.AssemblyBuilder ConvertTypeLibToAssembly (object typeLib, string asmFileName, System.Runtime.InteropServices.TypeLibImporterFlags flags, System.Runtime.InteropServices.ITypeLibImporterNotifySink notifySink, byte[] publicKey, System.Reflection.StrongNameKeyPair keyPair, string asmNamespace, Version asmVersion);" />
    <Member Sig="public TypeLibConverter ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.TypeLibExporterFlags">
    <Member Sig="CallerResolvedReferences" />
    <Member Sig="ExportAs32Bit" />
    <Member Sig="ExportAs64Bit" />
    <Member Sig="None" />
    <Member Sig="OldNames" />
    <Member Sig="OnlyReferenceRegistered" />
  </Type>
  <Type Name="System.Runtime.InteropServices.TypeLibFuncAttribute">
    <Member Sig="public System.Runtime.InteropServices.TypeLibFuncFlags Value { get; }" />
    <Member Sig="public TypeLibFuncAttribute (short flags);" />
    <Member Sig="public TypeLibFuncAttribute (System.Runtime.InteropServices.TypeLibFuncFlags flags);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.TypeLibFuncFlags">
    <Member Sig="FBindable" />
    <Member Sig="FDefaultBind" />
    <Member Sig="FDefaultCollelem" />
    <Member Sig="FDisplayBind" />
    <Member Sig="FHidden" />
    <Member Sig="FImmediateBind" />
    <Member Sig="FNonBrowsable" />
    <Member Sig="FReplaceable" />
    <Member Sig="FRequestEdit" />
    <Member Sig="FRestricted" />
    <Member Sig="FSource" />
    <Member Sig="FUiDefault" />
    <Member Sig="FUsesGetLastError" />
  </Type>
  <Type Name="System.Runtime.InteropServices.TypeLibImportClassAttribute">
    <Member Sig="public string Value { get; }" />
    <Member Sig="public TypeLibImportClassAttribute (Type importClass);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.TypeLibImporterFlags">
    <Member Sig="ImportAsAgnostic" />
    <Member Sig="ImportAsItanium" />
    <Member Sig="ImportAsX64" />
    <Member Sig="ImportAsX86" />
    <Member Sig="None" />
    <Member Sig="PreventClassMembers" />
    <Member Sig="PrimaryInteropAssembly" />
    <Member Sig="ReflectionOnlyLoading" />
    <Member Sig="SafeArrayAsSystemArray" />
    <Member Sig="SerializableValueClasses" />
    <Member Sig="TransformDispRetVals" />
    <Member Sig="UnsafeInterfaces" />
  </Type>
  <Type Name="System.Runtime.InteropServices.TypeLibTypeAttribute">
    <Member Sig="public System.Runtime.InteropServices.TypeLibTypeFlags Value { get; }" />
    <Member Sig="public TypeLibTypeAttribute (short flags);" />
    <Member Sig="public TypeLibTypeAttribute (System.Runtime.InteropServices.TypeLibTypeFlags flags);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.TypeLibTypeFlags">
    <Member Sig="FAggregatable" />
    <Member Sig="FAppObject" />
    <Member Sig="FCanCreate" />
    <Member Sig="FControl" />
    <Member Sig="FDispatchable" />
    <Member Sig="FDual" />
    <Member Sig="FHidden" />
    <Member Sig="FLicensed" />
    <Member Sig="FNonExtensible" />
    <Member Sig="FOleAutomation" />
    <Member Sig="FPreDeclId" />
    <Member Sig="FReplaceable" />
    <Member Sig="FRestricted" />
    <Member Sig="FReverseBind" />
  </Type>
  <Type Name="System.Runtime.InteropServices.TypeLibVarAttribute">
    <Member Sig="public System.Runtime.InteropServices.TypeLibVarFlags Value { get; }" />
    <Member Sig="public TypeLibVarAttribute (short flags);" />
    <Member Sig="public TypeLibVarAttribute (System.Runtime.InteropServices.TypeLibVarFlags flags);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.TypeLibVarFlags">
    <Member Sig="FBindable" />
    <Member Sig="FDefaultBind" />
    <Member Sig="FDefaultCollelem" />
    <Member Sig="FDisplayBind" />
    <Member Sig="FHidden" />
    <Member Sig="FImmediateBind" />
    <Member Sig="FNonBrowsable" />
    <Member Sig="FReadOnly" />
    <Member Sig="FReplaceable" />
    <Member Sig="FRequestEdit" />
    <Member Sig="FRestricted" />
    <Member Sig="FSource" />
    <Member Sig="FUiDefault" />
  </Type>
  <Type Name="System.Runtime.InteropServices.TypeLibVersionAttribute">
    <Member Sig="public int MajorVersion { get; }" />
    <Member Sig="public int MinorVersion { get; }" />
    <Member Sig="public TypeLibVersionAttribute (int major, int minor);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.UCOMIBindCtx">
    <Member Sig="public void EnumObjectParam (out System.Runtime.InteropServices.UCOMIEnumString ppenum);" />
    <Member Sig="public void GetBindOptions (ref System.Runtime.InteropServices.BIND_OPTS pbindopts);" />
    <Member Sig="public void GetObjectParam (string pszKey, out object ppunk);" />
    <Member Sig="public void GetRunningObjectTable (out System.Runtime.InteropServices.UCOMIRunningObjectTable pprot);" />
    <Member Sig="public void RegisterObjectBound (object punk);" />
    <Member Sig="public void RegisterObjectParam (string pszKey, object punk);" />
    <Member Sig="public void ReleaseBoundObjects ();" />
    <Member Sig="public void RevokeObjectBound (object punk);" />
    <Member Sig="public void RevokeObjectParam (string pszKey);" />
    <Member Sig="public void SetBindOptions (ref System.Runtime.InteropServices.BIND_OPTS pbindopts);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.UCOMIConnectionPoint">
    <Member Sig="public void Advise (object pUnkSink, out int pdwCookie);" />
    <Member Sig="public void EnumConnections (out System.Runtime.InteropServices.UCOMIEnumConnections ppEnum);" />
    <Member Sig="public void GetConnectionInterface (out Guid pIID);" />
    <Member Sig="public void GetConnectionPointContainer (out System.Runtime.InteropServices.UCOMIConnectionPointContainer ppCPC);" />
    <Member Sig="public void Unadvise (int dwCookie);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.UCOMIConnectionPointContainer">
    <Member Sig="public void EnumConnectionPoints (out System.Runtime.InteropServices.UCOMIEnumConnectionPoints ppEnum);" />
    <Member Sig="public void FindConnectionPoint (ref Guid riid, out System.Runtime.InteropServices.UCOMIConnectionPoint ppCP);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.UCOMIEnumConnectionPoints">
    <Member Sig="public int Next (int celt, System.Runtime.InteropServices.UCOMIConnectionPoint[] rgelt, out int pceltFetched);" />
    <Member Sig="public int Reset ();" />
    <Member Sig="public int Skip (int celt);" />
    <Member Sig="public void Clone (out System.Runtime.InteropServices.UCOMIEnumConnectionPoints ppenum);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.UCOMIEnumConnections">
    <Member Sig="public int Next (int celt, System.Runtime.InteropServices.CONNECTDATA[] rgelt, out int pceltFetched);" />
    <Member Sig="public int Skip (int celt);" />
    <Member Sig="public void Clone (out System.Runtime.InteropServices.UCOMIEnumConnections ppenum);" />
    <Member Sig="public void Reset ();" />
  </Type>
  <Type Name="System.Runtime.InteropServices.UCOMIEnumMoniker">
    <Member Sig="public int Next (int celt, System.Runtime.InteropServices.UCOMIMoniker[] rgelt, out int pceltFetched);" />
    <Member Sig="public int Reset ();" />
    <Member Sig="public int Skip (int celt);" />
    <Member Sig="public void Clone (out System.Runtime.InteropServices.UCOMIEnumMoniker ppenum);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.UCOMIEnumString">
    <Member Sig="public int Next (int celt, string[] rgelt, out int pceltFetched);" />
    <Member Sig="public int Reset ();" />
    <Member Sig="public int Skip (int celt);" />
    <Member Sig="public void Clone (out System.Runtime.InteropServices.UCOMIEnumString ppenum);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.UCOMIEnumVARIANT">
    <Member Sig="public int Next (int celt, int rgvar, int pceltFetched);" />
    <Member Sig="public int Reset ();" />
    <Member Sig="public int Skip (int celt);" />
    <Member Sig="public void Clone (int ppenum);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.UCOMIMoniker">
    <Member Sig="public int IsDirty ();" />
    <Member Sig="public void BindToObject (System.Runtime.InteropServices.UCOMIBindCtx pbc, System.Runtime.InteropServices.UCOMIMoniker pmkToLeft, ref Guid riidResult, out object ppvResult);" />
    <Member Sig="public void BindToStorage (System.Runtime.InteropServices.UCOMIBindCtx pbc, System.Runtime.InteropServices.UCOMIMoniker pmkToLeft, ref Guid riid, out object ppvObj);" />
    <Member Sig="public void CommonPrefixWith (System.Runtime.InteropServices.UCOMIMoniker pmkOther, out System.Runtime.InteropServices.UCOMIMoniker ppmkPrefix);" />
    <Member Sig="public void ComposeWith (System.Runtime.InteropServices.UCOMIMoniker pmkRight, bool fOnlyIfNotGeneric, out System.Runtime.InteropServices.UCOMIMoniker ppmkComposite);" />
    <Member Sig="public void Enum (bool fForward, out System.Runtime.InteropServices.UCOMIEnumMoniker ppenumMoniker);" />
    <Member Sig="public void GetClassID (out Guid pClassID);" />
    <Member Sig="public void GetDisplayName (System.Runtime.InteropServices.UCOMIBindCtx pbc, System.Runtime.InteropServices.UCOMIMoniker pmkToLeft, out string ppszDisplayName);" />
    <Member Sig="public void GetSizeMax (out long pcbSize);" />
    <Member Sig="public void GetTimeOfLastChange (System.Runtime.InteropServices.UCOMIBindCtx pbc, System.Runtime.InteropServices.UCOMIMoniker pmkToLeft, out System.Runtime.InteropServices.FILETIME pFileTime);" />
    <Member Sig="public void Hash (out int pdwHash);" />
    <Member Sig="public void Inverse (out System.Runtime.InteropServices.UCOMIMoniker ppmk);" />
    <Member Sig="public void IsEqual (System.Runtime.InteropServices.UCOMIMoniker pmkOtherMoniker);" />
    <Member Sig="public void IsRunning (System.Runtime.InteropServices.UCOMIBindCtx pbc, System.Runtime.InteropServices.UCOMIMoniker pmkToLeft, System.Runtime.InteropServices.UCOMIMoniker pmkNewlyRunning);" />
    <Member Sig="public void IsSystemMoniker (out int pdwMksys);" />
    <Member Sig="public void Load (System.Runtime.InteropServices.UCOMIStream pStm);" />
    <Member Sig="public void ParseDisplayName (System.Runtime.InteropServices.UCOMIBindCtx pbc, System.Runtime.InteropServices.UCOMIMoniker pmkToLeft, string pszDisplayName, out int pchEaten, out System.Runtime.InteropServices.UCOMIMoniker ppmkOut);" />
    <Member Sig="public void Reduce (System.Runtime.InteropServices.UCOMIBindCtx pbc, int dwReduceHowFar, ref System.Runtime.InteropServices.UCOMIMoniker ppmkToLeft, out System.Runtime.InteropServices.UCOMIMoniker ppmkReduced);" />
    <Member Sig="public void RelativePathTo (System.Runtime.InteropServices.UCOMIMoniker pmkOther, out System.Runtime.InteropServices.UCOMIMoniker ppmkRelPath);" />
    <Member Sig="public void Save (System.Runtime.InteropServices.UCOMIStream pStm, bool fClearDirty);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.UCOMIPersistFile">
    <Member Sig="public int IsDirty ();" />
    <Member Sig="public void GetClassID (out Guid pClassID);" />
    <Member Sig="public void GetCurFile (out string ppszFileName);" />
    <Member Sig="public void Load (string pszFileName, int dwMode);" />
    <Member Sig="public void Save (string pszFileName, bool fRemember);" />
    <Member Sig="public void SaveCompleted (string pszFileName);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.UCOMIRunningObjectTable">
    <Member Sig="public void EnumRunning (out System.Runtime.InteropServices.UCOMIEnumMoniker ppenumMoniker);" />
    <Member Sig="public void GetObject (System.Runtime.InteropServices.UCOMIMoniker pmkObjectName, out object ppunkObject);" />
    <Member Sig="public void GetTimeOfLastChange (System.Runtime.InteropServices.UCOMIMoniker pmkObjectName, out System.Runtime.InteropServices.FILETIME pfiletime);" />
    <Member Sig="public void IsRunning (System.Runtime.InteropServices.UCOMIMoniker pmkObjectName);" />
    <Member Sig="public void NoteChangeTime (int dwRegister, ref System.Runtime.InteropServices.FILETIME pfiletime);" />
    <Member Sig="public void Register (int grfFlags, object punkObject, System.Runtime.InteropServices.UCOMIMoniker pmkObjectName, out int pdwRegister);" />
    <Member Sig="public void Revoke (int dwRegister);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.UCOMIStream">
    <Member Sig="public void Clone (out System.Runtime.InteropServices.UCOMIStream ppstm);" />
    <Member Sig="public void Commit (int grfCommitFlags);" />
    <Member Sig="public void CopyTo (System.Runtime.InteropServices.UCOMIStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten);" />
    <Member Sig="public void LockRegion (long libOffset, long cb, int dwLockType);" />
    <Member Sig="public void Read (byte[] pv, int cb, IntPtr pcbRead);" />
    <Member Sig="public void Revert ();" />
    <Member Sig="public void Seek (long dlibMove, int dwOrigin, IntPtr plibNewPosition);" />
    <Member Sig="public void SetSize (long libNewSize);" />
    <Member Sig="public void Stat (out System.Runtime.InteropServices.STATSTG pstatstg, int grfStatFlag);" />
    <Member Sig="public void UnlockRegion (long libOffset, long cb, int dwLockType);" />
    <Member Sig="public void Write (byte[] pv, int cb, IntPtr pcbWritten);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.UCOMITypeComp">
    <Member Sig="public void Bind (string szName, int lHashVal, short wFlags, out System.Runtime.InteropServices.UCOMITypeInfo ppTInfo, out System.Runtime.InteropServices.DESCKIND pDescKind, out System.Runtime.InteropServices.BINDPTR pBindPtr);" />
    <Member Sig="public void BindType (string szName, int lHashVal, out System.Runtime.InteropServices.UCOMITypeInfo ppTInfo, out System.Runtime.InteropServices.UCOMITypeComp ppTComp);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.UCOMITypeInfo">
    <Member Sig="public void AddressOfMember (int memid, System.Runtime.InteropServices.INVOKEKIND invKind, out IntPtr ppv);" />
    <Member Sig="public void CreateInstance (object pUnkOuter, ref Guid riid, out object ppvObj);" />
    <Member Sig="public void GetContainingTypeLib (out System.Runtime.InteropServices.UCOMITypeLib ppTLB, out int pIndex);" />
    <Member Sig="public void GetDllEntry (int memid, System.Runtime.InteropServices.INVOKEKIND invKind, out string pBstrDllName, out string pBstrName, out short pwOrdinal);" />
    <Member Sig="public void GetDocumentation (int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);" />
    <Member Sig="public void GetFuncDesc (int index, out IntPtr ppFuncDesc);" />
    <Member Sig="public void GetIDsOfNames (string[] rgszNames, int cNames, int[] pMemId);" />
    <Member Sig="public void GetImplTypeFlags (int index, out int pImplTypeFlags);" />
    <Member Sig="public void GetMops (int memid, out string pBstrMops);" />
    <Member Sig="public void GetNames (int memid, string[] rgBstrNames, int cMaxNames, out int pcNames);" />
    <Member Sig="public void GetRefTypeInfo (int hRef, out System.Runtime.InteropServices.UCOMITypeInfo ppTI);" />
    <Member Sig="public void GetRefTypeOfImplType (int index, out int href);" />
    <Member Sig="public void GetTypeAttr (out IntPtr ppTypeAttr);" />
    <Member Sig="public void GetTypeComp (out System.Runtime.InteropServices.UCOMITypeComp ppTComp);" />
    <Member Sig="public void GetVarDesc (int index, out IntPtr ppVarDesc);" />
    <Member Sig="public void Invoke (object pvInstance, int memid, short wFlags, ref System.Runtime.InteropServices.DISPPARAMS pDispParams, out object pVarResult, out System.Runtime.InteropServices.EXCEPINFO pExcepInfo, out int puArgErr);" />
    <Member Sig="public void ReleaseFuncDesc (IntPtr pFuncDesc);" />
    <Member Sig="public void ReleaseTypeAttr (IntPtr pTypeAttr);" />
    <Member Sig="public void ReleaseVarDesc (IntPtr pVarDesc);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.UCOMITypeLib">
    <Member Sig="public bool IsName (string szNameBuf, int lHashVal);" />
    <Member Sig="public int GetTypeInfoCount ();" />
    <Member Sig="public void FindName (string szNameBuf, int lHashVal, System.Runtime.InteropServices.UCOMITypeInfo[] ppTInfo, int[] rgMemId, ref short pcFound);" />
    <Member Sig="public void GetDocumentation (int index, out string strName, out string strDocString, out int dwHelpContext, out string strHelpFile);" />
    <Member Sig="public void GetLibAttr (out IntPtr ppTLibAttr);" />
    <Member Sig="public void GetTypeComp (out System.Runtime.InteropServices.UCOMITypeComp ppTComp);" />
    <Member Sig="public void GetTypeInfo (int index, out System.Runtime.InteropServices.UCOMITypeInfo ppTI);" />
    <Member Sig="public void GetTypeInfoOfGuid (ref Guid guid, out System.Runtime.InteropServices.UCOMITypeInfo ppTInfo);" />
    <Member Sig="public void GetTypeInfoType (int index, out System.Runtime.InteropServices.TYPEKIND pTKind);" />
    <Member Sig="public void ReleaseTLibAttr (IntPtr pTLibAttr);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.UnknownWrapper">
    <Member Sig="public object WrappedObject { get; }" />
    <Member Sig="public UnknownWrapper (object obj);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute">
    <Member Sig="public bool BestFitMapping;" />
    <Member Sig="public bool SetLastError;" />
    <Member Sig="public bool ThrowOnUnmappableChar;" />
    <Member Sig="public System.Runtime.InteropServices.CallingConvention CallingConvention { get; }" />
    <Member Sig="public System.Runtime.InteropServices.CharSet CharSet;" />
    <Member Sig="public UnmanagedFunctionPointerAttribute (System.Runtime.InteropServices.CallingConvention callingConvention);" />
  </Type>
  <Type Name="System.Runtime.InteropServices.UnmanagedType">
    <Member Sig="AnsiBStr" />
    <Member Sig="AsAny" />
    <Member Sig="Bool" />
    <Member Sig="BStr" />
    <Member Sig="ByValArray" />
    <Member Sig="ByValTStr" />
    <Member Sig="Currency" />
    <Member Sig="CustomMarshaler" />
    <Member Sig="Error" />
    <Member Sig="FunctionPtr" />
    <Member Sig="I1" />
    <Member Sig="I2" />
    <Member Sig="I4" />
    <Member Sig="I8" />
    <Member Sig="IDispatch" />
    <Member Sig="Interface" />
    <Member Sig="IUnknown" />
    <Member Sig="LPArray" />
    <Member Sig="LPStr" />
    <Member Sig="LPStruct" />
    <Member Sig="LPTStr" />
    <Member Sig="LPWStr" />
    <Member Sig="R4" />
    <Member Sig="R8" />
    <Member Sig="SafeArray" />
    <Member Sig="Struct" />
    <Member Sig="SysInt" />
    <Member Sig="SysUInt" />
    <Member Sig="TBStr" />
    <Member Sig="U1" />
    <Member Sig="U2" />
    <Member Sig="U4" />
    <Member Sig="U8" />
    <Member Sig="VariantBool" />
    <Member Sig="VBByRefStr" />
  </Type>
  <Type Name="System.Runtime.InteropServices.VARDESC">
    <Member Sig="public int memid;" />
    <Member Sig="public short wVarFlags;" />
    <Member Sig="public string lpstrSchema;" />
    <Member Sig="public System.Runtime.InteropServices.ELEMDESC elemdescVar;" />
    <Member Sig="public System.Runtime.InteropServices.VarEnum varkind;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.VARDESC/DESCUNION">
    <Member Sig="public int oInst;" />
    <Member Sig="public IntPtr lpvarValue;" />
  </Type>
  <Type Name="System.Runtime.InteropServices.VarEnum">
    <Member Sig="VT_ARRAY" />
    <Member Sig="VT_BLOB" />
    <Member Sig="VT_BLOB_OBJECT" />
    <Member Sig="VT_BOOL" />
    <Member Sig="VT_BSTR" />
    <Member Sig="VT_BYREF" />
    <Member Sig="VT_CARRAY" />
    <Member Sig="VT_CF" />
    <Member Sig="VT_CLSID" />
    <Member Sig="VT_CY" />
    <Member Sig="VT_DATE" />
    <Member Sig="VT_DECIMAL" />
    <Member Sig="VT_DISPATCH" />
    <Member Sig="VT_EMPTY" />
    <Member Sig="VT_ERROR" />
    <Member Sig="VT_FILETIME" />
    <Member Sig="VT_HRESULT" />
    <Member Sig="VT_I1" />
    <Member Sig="VT_I2" />
    <Member Sig="VT_I4" />
    <Member Sig="VT_I8" />
    <Member Sig="VT_INT" />
    <Member Sig="VT_LPSTR" />
    <Member Sig="VT_LPWSTR" />
    <Member Sig="VT_NULL" />
    <Member Sig="VT_PTR" />
    <Member Sig="VT_R4" />
    <Member Sig="VT_R8" />
    <Member Sig="VT_RECORD" />
    <Member Sig="VT_SAFEARRAY" />
    <Member Sig="VT_STORAGE" />
    <Member Sig="VT_STORED_OBJECT" />
    <Member Sig="VT_STREAM" />
    <Member Sig="VT_STREAMED_OBJECT" />
    <Member Sig="VT_UI1" />
    <Member Sig="VT_UI2" />
    <Member Sig="VT_UI4" />
    <Member Sig="VT_UI8" />
    <Member Sig="VT_UINT" />
    <Member Sig="VT_UNKNOWN" />
    <Member Sig="VT_USERDEFINED" />
    <Member Sig="VT_VARIANT" />
    <Member Sig="VT_VECTOR" />
    <Member Sig="VT_VOID" />
  </Type>
  <Type Name="System.Runtime.InteropServices.VARFLAGS">
    <Member Sig="VARFLAG_FBINDABLE" />
    <Member Sig="VARFLAG_FDEFAULTBIND" />
    <Member Sig="VARFLAG_FDEFAULTCOLLELEM" />
    <Member Sig="VARFLAG_FDISPLAYBIND" />
    <Member Sig="VARFLAG_FHIDDEN" />
    <Member Sig="VARFLAG_FIMMEDIATEBIND" />
    <Member Sig="VARFLAG_FNONBROWSABLE" />
    <Member Sig="VARFLAG_FREADONLY" />
    <Member Sig="VARFLAG_FREPLACEABLE" />
    <Member Sig="VARFLAG_FREQUESTEDIT" />
    <Member Sig="VARFLAG_FRESTRICTED" />
    <Member Sig="VARFLAG_FSOURCE" />
    <Member Sig="VARFLAG_FUIDEFAULT" />
  </Type>
  <Type Name="System.Runtime.InteropServices.VariantWrapper">
    <Member Sig="public object WrappedObject { get; }" />
    <Member Sig="public VariantWrapper (object obj);" />
  </Type>
  <Type Name="System.Runtime.MemoryFailPoint">
    <Member Sig="~MemoryFailPoint ();" />
    <Member Sig="public MemoryFailPoint (int sizeInMegabytes);" />
    <Member Sig="public void Dispose ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.ActivatedClientTypeEntry">
    <Member Sig="public ActivatedClientTypeEntry (string typeName, string assemblyName, string appUrl);" />
    <Member Sig="public ActivatedClientTypeEntry (Type type, string appUrl);" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public string ApplicationUrl { get; }" />
    <Member Sig="public System.Runtime.Remoting.Contexts.IContextAttribute[] ContextAttributes { get; set; }" />
    <Member Sig="public Type ObjectType { get; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.ActivatedServiceTypeEntry">
    <Member Sig="public ActivatedServiceTypeEntry (string typeName, string assemblyName);" />
    <Member Sig="public ActivatedServiceTypeEntry (Type type);" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public System.Runtime.Remoting.Contexts.IContextAttribute[] ContextAttributes { get; set; }" />
    <Member Sig="public Type ObjectType { get; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Activation.ActivatorLevel">
    <Member Sig="AppDomain" />
    <Member Sig="Construction" />
    <Member Sig="Context" />
    <Member Sig="Machine" />
    <Member Sig="Process" />
  </Type>
  <Type Name="System.Runtime.Remoting.Activation.IActivator">
    <Member Sig="public System.Runtime.Remoting.Activation.ActivatorLevel Level { get; }" />
    <Member Sig="public System.Runtime.Remoting.Activation.IActivator NextActivator { get; set; }" />
    <Member Sig="public System.Runtime.Remoting.Activation.IConstructionReturnMessage Activate (System.Runtime.Remoting.Activation.IConstructionCallMessage msg);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Activation.IConstructionCallMessage">
    <Member Sig="public object[] CallSiteActivationAttributes { get; }" />
    <Member Sig="public string ActivationTypeName { get; }" />
    <Member Sig="public System.Collections.IList ContextProperties { get; }" />
    <Member Sig="public System.Runtime.Remoting.Activation.IActivator Activator { get; set; }" />
    <Member Sig="public Type ActivationType { get; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Activation.IConstructionReturnMessage" />
  <Type Name="System.Runtime.Remoting.Activation.UrlAttribute">
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override bool IsContextOK (System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Activation.IConstructionCallMessage msg);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override void GetPropertiesForNewContext (System.Runtime.Remoting.Activation.IConstructionCallMessage ctorMsg);" />
    <Member Sig="public string UrlValue { get; }" />
    <Member Sig="public UrlAttribute (string callsiteURL);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.BaseChannelObjectWithProperties">
    <Member Sig="protected BaseChannelObjectWithProperties ();" />
    <Member Sig="public virtual bool Contains (object key);" />
    <Member Sig="public virtual bool IsFixedSize { get; }" />
    <Member Sig="public virtual bool IsReadOnly { get; }" />
    <Member Sig="public virtual bool IsSynchronized { get; }" />
    <Member Sig="public virtual int Count { get; }" />
    <Member Sig="public virtual object SyncRoot { get; }" />
    <Member Sig="public virtual object this[object key] { get; set; }" />
    <Member Sig="public virtual System.Collections.ICollection Keys { get; }" />
    <Member Sig="public virtual System.Collections.ICollection Values { get; }" />
    <Member Sig="public virtual System.Collections.IDictionary Properties { get; }" />
    <Member Sig="public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();" />
    <Member Sig="public virtual void Add (object key, object value);" />
    <Member Sig="public virtual void Clear ();" />
    <Member Sig="public virtual void CopyTo (Array array, int index);" />
    <Member Sig="public virtual void Remove (object key);" />
    <Member Sig="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.BaseChannelSinkWithProperties">
    <Member Sig="protected BaseChannelSinkWithProperties ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.BaseChannelWithProperties">
    <Member Sig="protected BaseChannelWithProperties ();" />
    <Member Sig="protected System.Runtime.Remoting.Channels.IChannelSinkBase SinksWithProperties;" />
    <Member Sig="public override System.Collections.IDictionary Properties { get; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.ChannelDataStore">
    <Member Sig="public ChannelDataStore (string[] channelURIs);" />
    <Member Sig="public object this[object key] { get; set; }" />
    <Member Sig="public string[] ChannelUris { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.ChannelServices">
    <Member Sig="public static string[] GetUrlsForObject (MarshalByRefObject obj);" />
    <Member Sig="public static System.Collections.IDictionary GetChannelSinkProperties (object obj);" />
    <Member Sig="public static System.Runtime.Remoting.Channels.IChannel GetChannel (string name);" />
    <Member Sig="public static System.Runtime.Remoting.Channels.IChannel[] RegisteredChannels { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Channels.IServerChannelSink CreateServerChannelSinkChain (System.Runtime.Remoting.Channels.IServerChannelSinkProvider provider, System.Runtime.Remoting.Channels.IChannelReceiver channel);" />
    <Member Sig="public static System.Runtime.Remoting.Channels.ServerProcessing DispatchMessage (System.Runtime.Remoting.Channels.IServerChannelSinkStack sinkStack, System.Runtime.Remoting.Messaging.IMessage msg, out System.Runtime.Remoting.Messaging.IMessage replyMsg);" />
    <Member Sig="public static System.Runtime.Remoting.Messaging.IMessage SyncDispatchMessage (System.Runtime.Remoting.Messaging.IMessage msg);" />
    <Member Sig="public static System.Runtime.Remoting.Messaging.IMessageCtrl AsyncDispatchMessage (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);" />
    <Member Sig="public static void RegisterChannel (System.Runtime.Remoting.Channels.IChannel chnl);" />
    <Member Sig="public static void RegisterChannel (System.Runtime.Remoting.Channels.IChannel chnl, bool ensureSecurity);" />
    <Member Sig="public static void UnregisterChannel (System.Runtime.Remoting.Channels.IChannel chnl);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.ClientChannelSinkStack">
    <Member Sig="public ClientChannelSinkStack ();" />
    <Member Sig="public ClientChannelSinkStack (System.Runtime.Remoting.Messaging.IMessageSink replySink);" />
    <Member Sig="public object Pop (System.Runtime.Remoting.Channels.IClientChannelSink sink);" />
    <Member Sig="public void AsyncProcessResponse (System.Runtime.Remoting.Channels.ITransportHeaders headers, System.IO.Stream stream);" />
    <Member Sig="public void DispatchException (Exception e);" />
    <Member Sig="public void DispatchReplyMessage (System.Runtime.Remoting.Messaging.IMessage msg);" />
    <Member Sig="public void Push (System.Runtime.Remoting.Channels.IClientChannelSink sink, object state);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.IChannel">
    <Member Sig="public int ChannelPriority { get; }" />
    <Member Sig="public string ChannelName { get; }" />
    <Member Sig="public string Parse (string url, out string objectURI);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.IChannelDataStore">
    <Member Sig="public object this[object key] { get; set; }" />
    <Member Sig="public string[] ChannelUris { get; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.IChannelReceiver">
    <Member Sig="public object ChannelData { get; }" />
    <Member Sig="public string[] GetUrlsForUri (string objectURI);" />
    <Member Sig="public void StartListening (object data);" />
    <Member Sig="public void StopListening (object data);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.IChannelReceiverHook">
    <Member Sig="public bool WantsToListen { get; }" />
    <Member Sig="public string ChannelScheme { get; }" />
    <Member Sig="public System.Runtime.Remoting.Channels.IServerChannelSink ChannelSinkChain { get; }" />
    <Member Sig="public void AddHookChannelUri (string channelUri);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.IChannelSender">
    <Member Sig="public System.Runtime.Remoting.Messaging.IMessageSink CreateMessageSink (string url, object remoteChannelData, out string objectURI);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.IChannelSinkBase">
    <Member Sig="public System.Collections.IDictionary Properties { get; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.IClientChannelSink">
    <Member Sig="public System.IO.Stream GetRequestStream (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders headers);" />
    <Member Sig="public System.Runtime.Remoting.Channels.IClientChannelSink NextChannelSink { get; }" />
    <Member Sig="public void AsyncProcessRequest (System.Runtime.Remoting.Channels.IClientChannelSinkStack sinkStack, System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders headers, System.IO.Stream stream);" />
    <Member Sig="public void AsyncProcessResponse (System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack sinkStack, object state, System.Runtime.Remoting.Channels.ITransportHeaders headers, System.IO.Stream stream);" />
    <Member Sig="public void ProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, System.IO.Stream requestStream, out System.Runtime.Remoting.Channels.ITransportHeaders responseHeaders, out System.IO.Stream responseStream);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.IClientChannelSinkProvider">
    <Member Sig="public System.Runtime.Remoting.Channels.IClientChannelSink CreateSink (System.Runtime.Remoting.Channels.IChannelSender channel, string url, object remoteChannelData);" />
    <Member Sig="public System.Runtime.Remoting.Channels.IClientChannelSinkProvider Next { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.IClientChannelSinkStack">
    <Member Sig="public object Pop (System.Runtime.Remoting.Channels.IClientChannelSink sink);" />
    <Member Sig="public void Push (System.Runtime.Remoting.Channels.IClientChannelSink sink, object state);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.IClientFormatterSink" />
  <Type Name="System.Runtime.Remoting.Channels.IClientFormatterSinkProvider" />
  <Type Name="System.Runtime.Remoting.Channels.IClientResponseChannelSinkStack">
    <Member Sig="public void AsyncProcessResponse (System.Runtime.Remoting.Channels.ITransportHeaders headers, System.IO.Stream stream);" />
    <Member Sig="public void DispatchException (Exception e);" />
    <Member Sig="public void DispatchReplyMessage (System.Runtime.Remoting.Messaging.IMessage msg);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.ISecurableChannel">
    <Member Sig="public bool IsSecured { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.IServerChannelSink">
    <Member Sig="public System.IO.Stream GetResponseStream (System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders headers);" />
    <Member Sig="public System.Runtime.Remoting.Channels.IServerChannelSink NextChannelSink { get; }" />
    <Member Sig="public System.Runtime.Remoting.Channels.ServerProcessing ProcessMessage (System.Runtime.Remoting.Channels.IServerChannelSinkStack sinkStack, System.Runtime.Remoting.Messaging.IMessage requestMsg, System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, System.IO.Stream requestStream, out System.Runtime.Remoting.Messaging.IMessage responseMsg, out System.Runtime.Remoting.Channels.ITransportHeaders responseHeaders, out System.IO.Stream responseStream);" />
    <Member Sig="public void AsyncProcessResponse (System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders headers, System.IO.Stream stream);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.IServerChannelSinkProvider">
    <Member Sig="public System.Runtime.Remoting.Channels.IServerChannelSink CreateSink (System.Runtime.Remoting.Channels.IChannelReceiver channel);" />
    <Member Sig="public System.Runtime.Remoting.Channels.IServerChannelSinkProvider Next { get; set; }" />
    <Member Sig="public void GetChannelData (System.Runtime.Remoting.Channels.IChannelDataStore channelData);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.IServerChannelSinkStack">
    <Member Sig="public object Pop (System.Runtime.Remoting.Channels.IServerChannelSink sink);" />
    <Member Sig="public void Push (System.Runtime.Remoting.Channels.IServerChannelSink sink, object state);" />
    <Member Sig="public void ServerCallback (IAsyncResult ar);" />
    <Member Sig="public void Store (System.Runtime.Remoting.Channels.IServerChannelSink sink, object state);" />
    <Member Sig="public void StoreAndDispatch (System.Runtime.Remoting.Channels.IServerChannelSink sink, object state);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.IServerFormatterSinkProvider" />
  <Type Name="System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack">
    <Member Sig="public System.IO.Stream GetResponseStream (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders headers);" />
    <Member Sig="public void AsyncProcessResponse (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders headers, System.IO.Stream stream);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.ITransportHeaders">
    <Member Sig="public object this[object key] { get; set; }" />
    <Member Sig="public System.Collections.IEnumerator GetEnumerator ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.ServerChannelSinkStack">
    <Member Sig="public object Pop (System.Runtime.Remoting.Channels.IServerChannelSink sink);" />
    <Member Sig="public ServerChannelSinkStack ();" />
    <Member Sig="public System.IO.Stream GetResponseStream (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders headers);" />
    <Member Sig="public void AsyncProcessResponse (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders headers, System.IO.Stream stream);" />
    <Member Sig="public void Push (System.Runtime.Remoting.Channels.IServerChannelSink sink, object state);" />
    <Member Sig="public void ServerCallback (IAsyncResult ar);" />
    <Member Sig="public void Store (System.Runtime.Remoting.Channels.IServerChannelSink sink, object state);" />
    <Member Sig="public void StoreAndDispatch (System.Runtime.Remoting.Channels.IServerChannelSink sink, object state);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.ServerProcessing">
    <Member Sig="Async" />
    <Member Sig="Complete" />
    <Member Sig="OneWay" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.SinkProviderData">
    <Member Sig="public SinkProviderData (string name);" />
    <Member Sig="public string Name { get; }" />
    <Member Sig="public System.Collections.IDictionary Properties { get; }" />
    <Member Sig="public System.Collections.IList Children { get; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Channels.TransportHeaders">
    <Member Sig="public object this[object key] { get; set; }" />
    <Member Sig="public System.Collections.IEnumerator GetEnumerator ();" />
    <Member Sig="public TransportHeaders ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.Contexts.Context">
    <Member Sig="~Context ();" />
    <Member Sig="public Context ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool RegisterDynamicProperty (System.Runtime.Remoting.Contexts.IDynamicProperty prop, ContextBoundObject obj, System.Runtime.Remoting.Contexts.Context ctx);" />
    <Member Sig="public static bool UnregisterDynamicProperty (string name, ContextBoundObject obj, System.Runtime.Remoting.Contexts.Context ctx);" />
    <Member Sig="public static LocalDataStoreSlot AllocateDataSlot ();" />
    <Member Sig="public static LocalDataStoreSlot AllocateNamedDataSlot (string name);" />
    <Member Sig="public static LocalDataStoreSlot GetNamedDataSlot (string name);" />
    <Member Sig="public static object GetData (LocalDataStoreSlot slot);" />
    <Member Sig="public static System.Runtime.Remoting.Contexts.Context DefaultContext { get; }" />
    <Member Sig="public static void FreeNamedDataSlot (string name);" />
    <Member Sig="public static void SetData (LocalDataStoreSlot slot, object data);" />
    <Member Sig="public virtual int ContextID { get; }" />
    <Member Sig="public virtual System.Runtime.Remoting.Contexts.IContextProperty GetProperty (string name);" />
    <Member Sig="public virtual System.Runtime.Remoting.Contexts.IContextProperty[] ContextProperties { get; }" />
    <Member Sig="public virtual void Freeze ();" />
    <Member Sig="public virtual void SetProperty (System.Runtime.Remoting.Contexts.IContextProperty prop);" />
    <Member Sig="public void DoCallBack (System.Runtime.Remoting.Contexts.CrossContextDelegate deleg);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Contexts.ContextAttribute">
    <Member Sig="protected string AttributeName;" />
    <Member Sig="public ContextAttribute (string name);" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public virtual bool IsContextOK (System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Activation.IConstructionCallMessage ctorMsg);" />
    <Member Sig="public virtual bool IsNewContextOK (System.Runtime.Remoting.Contexts.Context newCtx);" />
    <Member Sig="public virtual string Name { get; }" />
    <Member Sig="public virtual void Freeze (System.Runtime.Remoting.Contexts.Context newContext);" />
    <Member Sig="public virtual void GetPropertiesForNewContext (System.Runtime.Remoting.Activation.IConstructionCallMessage ctorMsg);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Contexts.ContextProperty">
    <Member Sig="public virtual object Property { get; }" />
    <Member Sig="public virtual string Name { get; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Contexts.CrossContextDelegate" />
  <Type Name="System.Runtime.Remoting.Contexts.IContextAttribute">
    <Member Sig="public bool IsContextOK (System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Activation.IConstructionCallMessage msg);" />
    <Member Sig="public void GetPropertiesForNewContext (System.Runtime.Remoting.Activation.IConstructionCallMessage msg);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Contexts.IContextProperty">
    <Member Sig="public bool IsNewContextOK (System.Runtime.Remoting.Contexts.Context newCtx);" />
    <Member Sig="public string Name { get; }" />
    <Member Sig="public void Freeze (System.Runtime.Remoting.Contexts.Context newContext);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Contexts.IContextPropertyActivator">
    <Member Sig="public bool DeliverClientContextToServerContext (System.Runtime.Remoting.Activation.IConstructionCallMessage msg);" />
    <Member Sig="public bool DeliverServerContextToClientContext (System.Runtime.Remoting.Activation.IConstructionReturnMessage msg);" />
    <Member Sig="public bool IsOKToActivate (System.Runtime.Remoting.Activation.IConstructionCallMessage msg);" />
    <Member Sig="public void CollectFromClientContext (System.Runtime.Remoting.Activation.IConstructionCallMessage msg);" />
    <Member Sig="public void CollectFromServerContext (System.Runtime.Remoting.Activation.IConstructionReturnMessage msg);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Contexts.IContributeClientContextSink">
    <Member Sig="public System.Runtime.Remoting.Messaging.IMessageSink GetClientContextSink (System.Runtime.Remoting.Messaging.IMessageSink nextSink);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Contexts.IContributeDynamicSink">
    <Member Sig="public System.Runtime.Remoting.Contexts.IDynamicMessageSink GetDynamicSink ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.Contexts.IContributeEnvoySink">
    <Member Sig="public System.Runtime.Remoting.Messaging.IMessageSink GetEnvoySink (MarshalByRefObject obj, System.Runtime.Remoting.Messaging.IMessageSink nextSink);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Contexts.IContributeObjectSink">
    <Member Sig="public System.Runtime.Remoting.Messaging.IMessageSink GetObjectSink (MarshalByRefObject obj, System.Runtime.Remoting.Messaging.IMessageSink nextSink);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Contexts.IContributeServerContextSink">
    <Member Sig="public System.Runtime.Remoting.Messaging.IMessageSink GetServerContextSink (System.Runtime.Remoting.Messaging.IMessageSink nextSink);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Contexts.IDynamicMessageSink">
    <Member Sig="public void ProcessMessageFinish (System.Runtime.Remoting.Messaging.IMessage replyMsg, bool bCliSide, bool bAsync);" />
    <Member Sig="public void ProcessMessageStart (System.Runtime.Remoting.Messaging.IMessage reqMsg, bool bCliSide, bool bAsync);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Contexts.IDynamicProperty">
    <Member Sig="public string Name { get; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Contexts.SynchronizationAttribute">
    <Member Sig="public const int NOT_SUPPORTED = 1;" />
    <Member Sig="public const int REQUIRED = 4;" />
    <Member Sig="public const int REQUIRES_NEW = 8;" />
    <Member Sig="public const int SUPPORTED = 2;" />
    <Member Sig="public override bool IsContextOK (System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Activation.IConstructionCallMessage msg);" />
    <Member Sig="public override void GetPropertiesForNewContext (System.Runtime.Remoting.Activation.IConstructionCallMessage ctorMsg);" />
    <Member Sig="public SynchronizationAttribute ();" />
    <Member Sig="public SynchronizationAttribute (bool reEntrant);" />
    <Member Sig="public SynchronizationAttribute (int flag);" />
    <Member Sig="public SynchronizationAttribute (int flag, bool reEntrant);" />
    <Member Sig="public virtual bool IsReEntrant { get; }" />
    <Member Sig="public virtual bool Locked { get; set; }" />
    <Member Sig="public virtual System.Runtime.Remoting.Messaging.IMessageSink GetClientContextSink (System.Runtime.Remoting.Messaging.IMessageSink nextSink);" />
    <Member Sig="public virtual System.Runtime.Remoting.Messaging.IMessageSink GetServerContextSink (System.Runtime.Remoting.Messaging.IMessageSink nextSink);" />
  </Type>
  <Type Name="System.Runtime.Remoting.CustomErrorsModes">
    <Member Sig="Off" />
    <Member Sig="On" />
    <Member Sig="RemoteOnly" />
  </Type>
  <Type Name="System.Runtime.Remoting.IChannelInfo">
    <Member Sig="public object[] ChannelData { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.IEnvoyInfo">
    <Member Sig="public System.Runtime.Remoting.Messaging.IMessageSink EnvoySinks { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.InternalRemotingServices">
    <Member Sig="public InternalRemotingServices ();" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.SoapAttribute GetCachedSoapAttribute (object reflectionObject);" />
    <Member Sig="public static void DebugOutChnl (string s);" />
    <Member Sig="public static void RemotingAssert (bool condition, string message);" />
    <Member Sig="public static void RemotingTrace (object[] messages);" />
    <Member Sig="public static void SetServerIdentity (System.Runtime.Remoting.Messaging.MethodCall m, object srvID);" />
  </Type>
  <Type Name="System.Runtime.Remoting.IObjectHandle">
    <Member Sig="public object Unwrap ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.IRemotingTypeInfo">
    <Member Sig="public bool CanCastTo (Type fromType, object o);" />
    <Member Sig="public string TypeName { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Lifetime.ClientSponsor">
    <Member Sig="~ClientSponsor ();" />
    <Member Sig="public bool Register (MarshalByRefObject obj);" />
    <Member Sig="public ClientSponsor ();" />
    <Member Sig="public ClientSponsor (TimeSpan renewalTime);" />
    <Member Sig="public override object InitializeLifetimeService ();" />
    <Member Sig="public TimeSpan Renewal (System.Runtime.Remoting.Lifetime.ILease lease);" />
    <Member Sig="public TimeSpan RenewalTime { get; set; }" />
    <Member Sig="public void Close ();" />
    <Member Sig="public void Unregister (MarshalByRefObject obj);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Lifetime.ILease">
    <Member Sig="public System.Runtime.Remoting.Lifetime.LeaseState CurrentState { get; }" />
    <Member Sig="public TimeSpan CurrentLeaseTime { get; }" />
    <Member Sig="public TimeSpan InitialLeaseTime { get; set; }" />
    <Member Sig="public TimeSpan Renew (TimeSpan renewalTime);" />
    <Member Sig="public TimeSpan RenewOnCallTime { get; set; }" />
    <Member Sig="public TimeSpan SponsorshipTimeout { get; set; }" />
    <Member Sig="public void Register (System.Runtime.Remoting.Lifetime.ISponsor obj);" />
    <Member Sig="public void Register (System.Runtime.Remoting.Lifetime.ISponsor obj, TimeSpan renewalTime);" />
    <Member Sig="public void Unregister (System.Runtime.Remoting.Lifetime.ISponsor obj);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Lifetime.ISponsor">
    <Member Sig="public TimeSpan Renewal (System.Runtime.Remoting.Lifetime.ILease lease);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Lifetime.LeaseState">
    <Member Sig="Active" />
    <Member Sig="Expired" />
    <Member Sig="Initial" />
    <Member Sig="Null" />
    <Member Sig="Renewing" />
  </Type>
  <Type Name="System.Runtime.Remoting.Lifetime.LifetimeServices">
    <Member Sig="public LifetimeServices ();" />
    <Member Sig="public static TimeSpan LeaseManagerPollTime { get; set; }" />
    <Member Sig="public static TimeSpan LeaseTime { get; set; }" />
    <Member Sig="public static TimeSpan RenewOnCallTime { get; set; }" />
    <Member Sig="public static TimeSpan SponsorshipTimeout { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Messaging.AsyncResult">
    <Member Sig="public bool EndInvokeCalled { get; set; }" />
    <Member Sig="public System.Runtime.Remoting.Messaging.IMessageSink NextSink { get; }" />
    <Member Sig="public virtual bool CompletedSynchronously { get; }" />
    <Member Sig="public virtual bool IsCompleted { get; }" />
    <Member Sig="public virtual object AsyncDelegate { get; }" />
    <Member Sig="public virtual object AsyncState { get; }" />
    <Member Sig="public virtual System.Runtime.Remoting.Messaging.IMessage GetReplyMessage ();" />
    <Member Sig="public virtual System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg);" />
    <Member Sig="public virtual System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);" />
    <Member Sig="public virtual System.Threading.WaitHandle AsyncWaitHandle { get; }" />
    <Member Sig="public virtual void SetMessageCtrl (System.Runtime.Remoting.Messaging.IMessageCtrl mc);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Messaging.CallContext">
    <Member Sig="public static object GetData (string name);" />
    <Member Sig="public static object HostContext { get; set; }" />
    <Member Sig="public static object LogicalGetData (string name);" />
    <Member Sig="public static System.Runtime.Remoting.Messaging.Header[] GetHeaders ();" />
    <Member Sig="public static void FreeNamedDataSlot (string name);" />
    <Member Sig="public static void LogicalSetData (string name, object data);" />
    <Member Sig="public static void SetData (string name, object data);" />
    <Member Sig="public static void SetHeaders (System.Runtime.Remoting.Messaging.Header[] headers);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Messaging.ConstructionCall">
    <Member Sig="public ConstructionCall (System.Runtime.Remoting.Messaging.Header[] headers);" />
    <Member Sig="public ConstructionCall (System.Runtime.Remoting.Messaging.IMessage m);" />
    <Member Sig="public object[] CallSiteActivationAttributes { get; }" />
    <Member Sig="public override System.Collections.IDictionary Properties { get; }" />
    <Member Sig="public string ActivationTypeName { get; }" />
    <Member Sig="public System.Collections.IList ContextProperties { get; }" />
    <Member Sig="public System.Runtime.Remoting.Activation.IActivator Activator { get; set; }" />
    <Member Sig="public Type ActivationType { get; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Messaging.ConstructionResponse">
    <Member Sig="public ConstructionResponse (System.Runtime.Remoting.Messaging.Header[] h, System.Runtime.Remoting.Messaging.IMethodCallMessage mcm);" />
    <Member Sig="public override System.Collections.IDictionary Properties { get; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Messaging.Header">
    <Member Sig="public bool MustUnderstand;" />
    <Member Sig="public Header (string _Name, object _Value);" />
    <Member Sig="public Header (string _Name, object _Value, bool _MustUnderstand);" />
    <Member Sig="public Header (string _Name, object _Value, bool _MustUnderstand, string _HeaderNamespace);" />
    <Member Sig="public object Value;" />
    <Member Sig="public string HeaderNamespace;" />
    <Member Sig="public string Name;" />
  </Type>
  <Type Name="System.Runtime.Remoting.Messaging.HeaderHandler" />
  <Type Name="System.Runtime.Remoting.Messaging.ILogicalThreadAffinative" />
  <Type Name="System.Runtime.Remoting.Messaging.IMessage">
    <Member Sig="public System.Collections.IDictionary Properties { get; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Messaging.IMessageCtrl">
    <Member Sig="public void Cancel (int msToCancel);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Messaging.IMessageSink">
    <Member Sig="public System.Runtime.Remoting.Messaging.IMessage SyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg);" />
    <Member Sig="public System.Runtime.Remoting.Messaging.IMessageCtrl AsyncProcessMessage (System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Messaging.IMessageSink replySink);" />
    <Member Sig="public System.Runtime.Remoting.Messaging.IMessageSink NextSink { get; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Messaging.IMethodCallMessage">
    <Member Sig="public int InArgCount { get; }" />
    <Member Sig="public object GetInArg (int argNum);" />
    <Member Sig="public object[] InArgs { get; }" />
    <Member Sig="public string GetInArgName (int index);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Messaging.IMethodMessage">
    <Member Sig="public bool HasVarArgs { get; }" />
    <Member Sig="public int ArgCount { get; }" />
    <Member Sig="public object GetArg (int argNum);" />
    <Member Sig="public object MethodSignature { get; }" />
    <Member Sig="public object[] Args { get; }" />
    <Member Sig="public string GetArgName (int index);" />
    <Member Sig="public string MethodName { get; }" />
    <Member Sig="public string TypeName { get; }" />
    <Member Sig="public string Uri { get; }" />
    <Member Sig="public System.Reflection.MethodBase MethodBase { get; }" />
    <Member Sig="public System.Runtime.Remoting.Messaging.LogicalCallContext LogicalCallContext { get; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Messaging.IMethodReturnMessage">
    <Member Sig="public Exception Exception { get; }" />
    <Member Sig="public int OutArgCount { get; }" />
    <Member Sig="public object GetOutArg (int argNum);" />
    <Member Sig="public object ReturnValue { get; }" />
    <Member Sig="public object[] OutArgs { get; }" />
    <Member Sig="public string GetOutArgName (int index);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Messaging.InternalMessageWrapper">
    <Member Sig="protected System.Runtime.Remoting.Messaging.IMessage WrappedMessage;" />
    <Member Sig="public InternalMessageWrapper (System.Runtime.Remoting.Messaging.IMessage msg);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Messaging.IRemotingFormatter">
    <Member Sig="public object Deserialize (System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler);" />
    <Member Sig="public void Serialize (System.IO.Stream serializationStream, object graph, System.Runtime.Remoting.Messaging.Header[] headers);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Messaging.LogicalCallContext">
    <Member Sig="public bool HasInfo { get; }" />
    <Member Sig="public object Clone ();" />
    <Member Sig="public object GetData (string name);" />
    <Member Sig="public void FreeNamedDataSlot (string name);" />
    <Member Sig="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public void SetData (string name, object data);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Messaging.MessageSurrogateFilter" />
  <Type Name="System.Runtime.Remoting.Messaging.MethodCall">
    <Member Sig="protected System.Collections.IDictionary ExternalProperties;" />
    <Member Sig="protected System.Collections.IDictionary InternalProperties;" />
    <Member Sig="public bool HasVarArgs { get; }" />
    <Member Sig="public int ArgCount { get; }" />
    <Member Sig="public int InArgCount { get; }" />
    <Member Sig="public MethodCall (System.Runtime.Remoting.Messaging.Header[] h1);" />
    <Member Sig="public MethodCall (System.Runtime.Remoting.Messaging.IMessage msg);" />
    <Member Sig="public object GetArg (int argNum);" />
    <Member Sig="public object GetInArg (int argNum);" />
    <Member Sig="public object MethodSignature { get; }" />
    <Member Sig="public object[] Args { get; }" />
    <Member Sig="public object[] InArgs { get; }" />
    <Member Sig="public string GetArgName (int index);" />
    <Member Sig="public string GetInArgName (int index);" />
    <Member Sig="public string MethodName { get; }" />
    <Member Sig="public string TypeName { get; }" />
    <Member Sig="public string Uri { get; set; }" />
    <Member Sig="public System.Reflection.MethodBase MethodBase { get; }" />
    <Member Sig="public System.Runtime.Remoting.Messaging.LogicalCallContext LogicalCallContext { get; }" />
    <Member Sig="public virtual object HeaderHandler (System.Runtime.Remoting.Messaging.Header[] h);" />
    <Member Sig="public virtual System.Collections.IDictionary Properties { get; }" />
    <Member Sig="public virtual void Init ();" />
    <Member Sig="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public void ResolveMethod ();" />
    <Member Sig="public void RootSetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext ctx);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Messaging.MethodCallMessageWrapper">
    <Member Sig="public MethodCallMessageWrapper (System.Runtime.Remoting.Messaging.IMethodCallMessage msg);" />
    <Member Sig="public virtual bool HasVarArgs { get; }" />
    <Member Sig="public virtual int ArgCount { get; }" />
    <Member Sig="public virtual int InArgCount { get; }" />
    <Member Sig="public virtual object GetArg (int argNum);" />
    <Member Sig="public virtual object GetInArg (int argNum);" />
    <Member Sig="public virtual object MethodSignature { get; }" />
    <Member Sig="public virtual object[] Args { get; set; }" />
    <Member Sig="public virtual object[] InArgs { get; }" />
    <Member Sig="public virtual string GetArgName (int index);" />
    <Member Sig="public virtual string GetInArgName (int index);" />
    <Member Sig="public virtual string MethodName { get; }" />
    <Member Sig="public virtual string TypeName { get; }" />
    <Member Sig="public virtual string Uri { get; set; }" />
    <Member Sig="public virtual System.Collections.IDictionary Properties { get; }" />
    <Member Sig="public virtual System.Reflection.MethodBase MethodBase { get; }" />
    <Member Sig="public virtual System.Runtime.Remoting.Messaging.LogicalCallContext LogicalCallContext { get; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Messaging.MethodResponse">
    <Member Sig="protected System.Collections.IDictionary ExternalProperties;" />
    <Member Sig="protected System.Collections.IDictionary InternalProperties;" />
    <Member Sig="public bool HasVarArgs { get; }" />
    <Member Sig="public Exception Exception { get; }" />
    <Member Sig="public int ArgCount { get; }" />
    <Member Sig="public int OutArgCount { get; }" />
    <Member Sig="public MethodResponse (System.Runtime.Remoting.Messaging.Header[] h1, System.Runtime.Remoting.Messaging.IMethodCallMessage mcm);" />
    <Member Sig="public object GetArg (int argNum);" />
    <Member Sig="public object GetOutArg (int argNum);" />
    <Member Sig="public object MethodSignature { get; }" />
    <Member Sig="public object ReturnValue { get; }" />
    <Member Sig="public object[] Args { get; }" />
    <Member Sig="public object[] OutArgs { get; }" />
    <Member Sig="public string GetArgName (int index);" />
    <Member Sig="public string GetOutArgName (int index);" />
    <Member Sig="public string MethodName { get; }" />
    <Member Sig="public string TypeName { get; }" />
    <Member Sig="public string Uri { get; set; }" />
    <Member Sig="public System.Reflection.MethodBase MethodBase { get; }" />
    <Member Sig="public System.Runtime.Remoting.Messaging.LogicalCallContext LogicalCallContext { get; }" />
    <Member Sig="public virtual object HeaderHandler (System.Runtime.Remoting.Messaging.Header[] h);" />
    <Member Sig="public virtual System.Collections.IDictionary Properties { get; }" />
    <Member Sig="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public void RootSetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext ctx);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Messaging.MethodReturnMessageWrapper">
    <Member Sig="public MethodReturnMessageWrapper (System.Runtime.Remoting.Messaging.IMethodReturnMessage msg);" />
    <Member Sig="public string Uri { get; set; }" />
    <Member Sig="public virtual bool HasVarArgs { get; }" />
    <Member Sig="public virtual Exception Exception { get; set; }" />
    <Member Sig="public virtual int ArgCount { get; }" />
    <Member Sig="public virtual int OutArgCount { get; }" />
    <Member Sig="public virtual object GetArg (int argNum);" />
    <Member Sig="public virtual object GetOutArg (int argNum);" />
    <Member Sig="public virtual object MethodSignature { get; }" />
    <Member Sig="public virtual object ReturnValue { get; set; }" />
    <Member Sig="public virtual object[] Args { get; set; }" />
    <Member Sig="public virtual object[] OutArgs { get; }" />
    <Member Sig="public virtual string GetArgName (int index);" />
    <Member Sig="public virtual string GetOutArgName (int index);" />
    <Member Sig="public virtual string MethodName { get; }" />
    <Member Sig="public virtual string TypeName { get; }" />
    <Member Sig="public virtual System.Collections.IDictionary Properties { get; }" />
    <Member Sig="public virtual System.Reflection.MethodBase MethodBase { get; }" />
    <Member Sig="public virtual System.Runtime.Remoting.Messaging.LogicalCallContext LogicalCallContext { get; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Messaging.OneWayAttribute">
    <Member Sig="public OneWayAttribute ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.Messaging.RemotingSurrogateSelector">
    <Member Sig="public object GetRootObject ();" />
    <Member Sig="public RemotingSurrogateSelector ();" />
    <Member Sig="public System.Runtime.Remoting.Messaging.MessageSurrogateFilter Filter { get; set; }" />
    <Member Sig="public virtual System.Runtime.Serialization.ISerializationSurrogate GetSurrogate (Type type, System.Runtime.Serialization.StreamingContext context, out System.Runtime.Serialization.ISurrogateSelector ssout);" />
    <Member Sig="public virtual System.Runtime.Serialization.ISurrogateSelector GetNextSelector ();" />
    <Member Sig="public virtual void ChainSelector (System.Runtime.Serialization.ISurrogateSelector selector);" />
    <Member Sig="public virtual void UseSoapFormat ();" />
    <Member Sig="public void SetRootObject (object obj);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Messaging.ReturnMessage">
    <Member Sig="public bool HasVarArgs { get; }" />
    <Member Sig="public Exception Exception { get; }" />
    <Member Sig="public int ArgCount { get; }" />
    <Member Sig="public int OutArgCount { get; }" />
    <Member Sig="public object GetArg (int argNum);" />
    <Member Sig="public object GetOutArg (int argNum);" />
    <Member Sig="public object MethodSignature { get; }" />
    <Member Sig="public object[] Args { get; }" />
    <Member Sig="public object[] OutArgs { get; }" />
    <Member Sig="public ReturnMessage (Exception e, System.Runtime.Remoting.Messaging.IMethodCallMessage mcm);" />
    <Member Sig="public ReturnMessage (object ret, object[] outArgs, int outArgsCount, System.Runtime.Remoting.Messaging.LogicalCallContext callCtx, System.Runtime.Remoting.Messaging.IMethodCallMessage mcm);" />
    <Member Sig="public string GetArgName (int index);" />
    <Member Sig="public string GetOutArgName (int index);" />
    <Member Sig="public string MethodName { get; }" />
    <Member Sig="public string TypeName { get; }" />
    <Member Sig="public string Uri { get; set; }" />
    <Member Sig="public System.Reflection.MethodBase MethodBase { get; }" />
    <Member Sig="public System.Runtime.Remoting.Messaging.LogicalCallContext LogicalCallContext { get; }" />
    <Member Sig="public virtual object ReturnValue { get; }" />
    <Member Sig="public virtual System.Collections.IDictionary Properties { get; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.SoapAttribute">
    <Member Sig="protected object ReflectInfo;" />
    <Member Sig="protected string ProtXmlNamespace;" />
    <Member Sig="public SoapAttribute ();" />
    <Member Sig="public virtual bool Embedded { get; set; }" />
    <Member Sig="public virtual bool UseAttribute { get; set; }" />
    <Member Sig="public virtual string XmlNamespace { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.SoapFieldAttribute">
    <Member Sig="public bool IsInteropXmlElement ();" />
    <Member Sig="public int Order { get; set; }" />
    <Member Sig="public SoapFieldAttribute ();" />
    <Member Sig="public string XmlElementName { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.SoapMethodAttribute">
    <Member Sig="public override bool UseAttribute { get; set; }" />
    <Member Sig="public override string XmlNamespace { get; set; }" />
    <Member Sig="public SoapMethodAttribute ();" />
    <Member Sig="public string ResponseXmlElementName { get; set; }" />
    <Member Sig="public string ResponseXmlNamespace { get; set; }" />
    <Member Sig="public string ReturnXmlElementName { get; set; }" />
    <Member Sig="public string SoapAction { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.SoapOption">
    <Member Sig="AlwaysIncludeTypes" />
    <Member Sig="EmbedAll" />
    <Member Sig="None" />
    <Member Sig="Option1" />
    <Member Sig="Option2" />
    <Member Sig="XsdString" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.SoapParameterAttribute">
    <Member Sig="public SoapParameterAttribute ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.SoapTypeAttribute">
    <Member Sig="public override bool UseAttribute { get; set; }" />
    <Member Sig="public override string XmlNamespace { get; set; }" />
    <Member Sig="public SoapTypeAttribute ();" />
    <Member Sig="public string XmlElementName { get; set; }" />
    <Member Sig="public string XmlTypeName { get; set; }" />
    <Member Sig="public string XmlTypeNamespace { get; set; }" />
    <Member Sig="public System.Runtime.Remoting.Metadata.SoapOption SoapOptions { get; set; }" />
    <Member Sig="public System.Runtime.Remoting.Metadata.XmlFieldOrderOption XmlFieldOrder { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.ISoapXsd">
    <Member Sig="public string GetXsdType ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri">
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapAnyUri ();" />
    <Member Sig="public SoapAnyUri (string value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapAnyUri Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
    <Member Sig="public string Value { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary">
    <Member Sig="public byte[] Value { get; set; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapBase64Binary ();" />
    <Member Sig="public SoapBase64Binary (byte[] value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapBase64Binary Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate">
    <Member Sig="public DateTime Value { get; set; }" />
    <Member Sig="public int Sign { get; set; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapDate ();" />
    <Member Sig="public SoapDate (DateTime value);" />
    <Member Sig="public SoapDate (DateTime value, int sign);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDate Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDateTime">
    <Member Sig="public SoapDateTime ();" />
    <Member Sig="public static DateTime Parse (string value);" />
    <Member Sig="public static string ToString (DateTime value);" />
    <Member Sig="public static string XsdType { get; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay">
    <Member Sig="public DateTime Value { get; set; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapDay ();" />
    <Member Sig="public SoapDay (DateTime value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDay Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapDuration">
    <Member Sig="public SoapDuration ();" />
    <Member Sig="public static string ToString (TimeSpan timeSpan);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static TimeSpan Parse (string value);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities">
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapEntities ();" />
    <Member Sig="public SoapEntities (string value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntities Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
    <Member Sig="public string Value { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity">
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapEntity ();" />
    <Member Sig="public SoapEntity (string value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapEntity Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
    <Member Sig="public string Value { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary">
    <Member Sig="public byte[] Value { get; set; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapHexBinary ();" />
    <Member Sig="public SoapHexBinary (byte[] value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapHexBinary Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId">
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapId ();" />
    <Member Sig="public SoapId (string value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapId Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
    <Member Sig="public string Value { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref">
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapIdref ();" />
    <Member Sig="public SoapIdref (string value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdref Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
    <Member Sig="public string Value { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs">
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapIdrefs ();" />
    <Member Sig="public SoapIdrefs (string value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapIdrefs Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
    <Member Sig="public string Value { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger">
    <Member Sig="public decimal Value { get; set; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapInteger ();" />
    <Member Sig="public SoapInteger (decimal value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapInteger Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage">
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapLanguage ();" />
    <Member Sig="public SoapLanguage (string value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapLanguage Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
    <Member Sig="public string Value { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth">
    <Member Sig="public DateTime Value { get; set; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapMonth ();" />
    <Member Sig="public SoapMonth (DateTime value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonth Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay">
    <Member Sig="public DateTime Value { get; set; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapMonthDay ();" />
    <Member Sig="public SoapMonthDay (DateTime value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapMonthDay Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName">
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapName ();" />
    <Member Sig="public SoapName (string value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapName Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
    <Member Sig="public string Value { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName">
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapNcName ();" />
    <Member Sig="public SoapNcName (string value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNcName Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
    <Member Sig="public string Value { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger">
    <Member Sig="public decimal Value { get; set; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapNegativeInteger ();" />
    <Member Sig="public SoapNegativeInteger (decimal value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNegativeInteger Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken">
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapNmtoken ();" />
    <Member Sig="public SoapNmtoken (string value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtoken Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
    <Member Sig="public string Value { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens">
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapNmtokens ();" />
    <Member Sig="public SoapNmtokens (string value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNmtokens Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
    <Member Sig="public string Value { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger">
    <Member Sig="public decimal Value { get; set; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapNonNegativeInteger ();" />
    <Member Sig="public SoapNonNegativeInteger (decimal value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonNegativeInteger Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger">
    <Member Sig="public decimal Value { get; set; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapNonPositiveInteger ();" />
    <Member Sig="public SoapNonPositiveInteger (decimal value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNonPositiveInteger Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString">
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapNormalizedString ();" />
    <Member Sig="public SoapNormalizedString (string value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNormalizedString Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
    <Member Sig="public string Value { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation">
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapNotation ();" />
    <Member Sig="public SoapNotation (string value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapNotation Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
    <Member Sig="public string Value { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger">
    <Member Sig="public decimal Value { get; set; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapPositiveInteger ();" />
    <Member Sig="public SoapPositiveInteger (decimal value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapPositiveInteger Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName">
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapQName ();" />
    <Member Sig="public SoapQName (string key, string name);" />
    <Member Sig="public SoapQName (string key, string name, string namespaceValue);" />
    <Member Sig="public SoapQName (string value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapQName Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
    <Member Sig="public string Key { get; set; }" />
    <Member Sig="public string Name { get; set; }" />
    <Member Sig="public string Namespace { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime">
    <Member Sig="public DateTime Value { get; set; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapTime ();" />
    <Member Sig="public SoapTime (DateTime value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapTime Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken">
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapToken ();" />
    <Member Sig="public SoapToken (string value);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapToken Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
    <Member Sig="public string Value { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear">
    <Member Sig="public DateTime Value { get; set; }" />
    <Member Sig="public int Sign { get; set; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapYear ();" />
    <Member Sig="public SoapYear (DateTime value);" />
    <Member Sig="public SoapYear (DateTime value, int sign);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYear Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth">
    <Member Sig="public DateTime Value { get; set; }" />
    <Member Sig="public int Sign { get; set; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SoapYearMonth ();" />
    <Member Sig="public SoapYearMonth (DateTime value);" />
    <Member Sig="public SoapYearMonth (DateTime value, int sign);" />
    <Member Sig="public static string XsdType { get; }" />
    <Member Sig="public static System.Runtime.Remoting.Metadata.W3cXsd2001.SoapYearMonth Parse (string value);" />
    <Member Sig="public string GetXsdType ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.Metadata.XmlFieldOrderOption">
    <Member Sig="All" />
    <Member Sig="Choice" />
    <Member Sig="Sequence" />
  </Type>
  <Type Name="System.Runtime.Remoting.ObjectHandle">
    <Member Sig="public object Unwrap ();" />
    <Member Sig="public ObjectHandle (object o);" />
    <Member Sig="public override object InitializeLifetimeService ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.ObjRef">
    <Member Sig="protected ObjRef (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public bool IsFromThisAppDomain ();" />
    <Member Sig="public bool IsFromThisProcess ();" />
    <Member Sig="public ObjRef ();" />
    <Member Sig="public ObjRef (MarshalByRefObject o, Type requestedType);" />
    <Member Sig="public virtual object GetRealObject (System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public virtual string URI { get; set; }" />
    <Member Sig="public virtual System.Runtime.Remoting.IChannelInfo ChannelInfo { get; set; }" />
    <Member Sig="public virtual System.Runtime.Remoting.IEnvoyInfo EnvoyInfo { get; set; }" />
    <Member Sig="public virtual System.Runtime.Remoting.IRemotingTypeInfo TypeInfo { get; set; }" />
    <Member Sig="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Proxies.ProxyAttribute">
    <Member Sig="public bool IsContextOK (System.Runtime.Remoting.Contexts.Context ctx, System.Runtime.Remoting.Activation.IConstructionCallMessage msg);" />
    <Member Sig="public ProxyAttribute ();" />
    <Member Sig="public virtual MarshalByRefObject CreateInstance (Type serverType);" />
    <Member Sig="public virtual System.Runtime.Remoting.Proxies.RealProxy CreateProxy (System.Runtime.Remoting.ObjRef objRef, Type serverType, object serverObject, System.Runtime.Remoting.Contexts.Context serverContext);" />
    <Member Sig="public void GetPropertiesForNewContext (System.Runtime.Remoting.Activation.IConstructionCallMessage msg);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Proxies.RealProxy">
    <Member Sig="protected MarshalByRefObject DetachServer ();" />
    <Member Sig="protected MarshalByRefObject GetUnwrappedServer ();" />
    <Member Sig="protected RealProxy ();" />
    <Member Sig="protected RealProxy (Type classToProxy);" />
    <Member Sig="protected RealProxy (Type classToProxy, IntPtr stub, object stubData);" />
    <Member Sig="protected void AttachServer (MarshalByRefObject s);" />
    <Member Sig="public abstract System.Runtime.Remoting.Messaging.IMessage Invoke (System.Runtime.Remoting.Messaging.IMessage msg);" />
    <Member Sig="public static object GetStubData (System.Runtime.Remoting.Proxies.RealProxy rp);" />
    <Member Sig="public static void SetStubData (System.Runtime.Remoting.Proxies.RealProxy rp, object stubData);" />
    <Member Sig="public System.Runtime.Remoting.Activation.IConstructionReturnMessage InitializeServerObject (System.Runtime.Remoting.Activation.IConstructionCallMessage ctorMsg);" />
    <Member Sig="public Type GetProxiedType ();" />
    <Member Sig="public virtual IntPtr GetCOMIUnknown (bool fIsMarshalled);" />
    <Member Sig="public virtual IntPtr SupportsInterface (ref Guid iid);" />
    <Member Sig="public virtual object GetTransparentProxy ();" />
    <Member Sig="public virtual System.Runtime.Remoting.ObjRef CreateObjRef (Type requestedType);" />
    <Member Sig="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public virtual void SetCOMIUnknown (IntPtr i);" />
  </Type>
  <Type Name="System.Runtime.Remoting.RemotingConfiguration">
    <Member Sig="public static bool CustomErrorsEnabled (bool isLocalRequest);" />
    <Member Sig="public static bool IsActivationAllowed (Type svrType);" />
    <Member Sig="public static string ApplicationId { get; }" />
    <Member Sig="public static string ApplicationName { get; set; }" />
    <Member Sig="public static string ProcessId { get; }" />
    <Member Sig="public static System.Runtime.Remoting.ActivatedClientTypeEntry IsRemotelyActivatedClientType (string typeName, string assemblyName);" />
    <Member Sig="public static System.Runtime.Remoting.ActivatedClientTypeEntry IsRemotelyActivatedClientType (Type svrType);" />
    <Member Sig="public static System.Runtime.Remoting.ActivatedClientTypeEntry[] GetRegisteredActivatedClientTypes ();" />
    <Member Sig="public static System.Runtime.Remoting.ActivatedServiceTypeEntry[] GetRegisteredActivatedServiceTypes ();" />
    <Member Sig="public static System.Runtime.Remoting.CustomErrorsModes CustomErrorsMode { get; set; }" />
    <Member Sig="public static System.Runtime.Remoting.WellKnownClientTypeEntry IsWellKnownClientType (string typeName, string assemblyName);" />
    <Member Sig="public static System.Runtime.Remoting.WellKnownClientTypeEntry IsWellKnownClientType (Type svrType);" />
    <Member Sig="public static System.Runtime.Remoting.WellKnownClientTypeEntry[] GetRegisteredWellKnownClientTypes ();" />
    <Member Sig="public static System.Runtime.Remoting.WellKnownServiceTypeEntry[] GetRegisteredWellKnownServiceTypes ();" />
    <Member Sig="public static void Configure (string filename);" />
    <Member Sig="public static void Configure (string filename, bool ensureSecurity);" />
    <Member Sig="public static void RegisterActivatedClientType (System.Runtime.Remoting.ActivatedClientTypeEntry entry);" />
    <Member Sig="public static void RegisterActivatedClientType (Type type, string appUrl);" />
    <Member Sig="public static void RegisterActivatedServiceType (System.Runtime.Remoting.ActivatedServiceTypeEntry entry);" />
    <Member Sig="public static void RegisterActivatedServiceType (Type type);" />
    <Member Sig="public static void RegisterWellKnownClientType (System.Runtime.Remoting.WellKnownClientTypeEntry entry);" />
    <Member Sig="public static void RegisterWellKnownClientType (Type type, string objectUrl);" />
    <Member Sig="public static void RegisterWellKnownServiceType (System.Runtime.Remoting.WellKnownServiceTypeEntry entry);" />
    <Member Sig="public static void RegisterWellKnownServiceType (Type type, string objectUri, System.Runtime.Remoting.WellKnownObjectMode mode);" />
  </Type>
  <Type Name="System.Runtime.Remoting.RemotingException">
    <Member Sig="protected RemotingException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public RemotingException ();" />
    <Member Sig="public RemotingException (string message);" />
    <Member Sig="public RemotingException (string message, Exception InnerException);" />
  </Type>
  <Type Name="System.Runtime.Remoting.RemotingServices">
    <Member Sig="public static bool Disconnect (MarshalByRefObject obj);" />
    <Member Sig="public static bool IsMethodOverloaded (System.Runtime.Remoting.Messaging.IMethodMessage msg);" />
    <Member Sig="public static bool IsObjectOutOfAppDomain (object tp);" />
    <Member Sig="public static bool IsObjectOutOfContext (object tp);" />
    <Member Sig="public static bool IsOneWay (System.Reflection.MethodBase method);" />
    <Member Sig="public static bool IsTransparentProxy (object proxy);" />
    <Member Sig="public static object Connect (Type classToProxy, string url);" />
    <Member Sig="public static object Connect (Type classToProxy, string url, object data);" />
    <Member Sig="public static object GetLifetimeService (MarshalByRefObject obj);" />
    <Member Sig="public static object Unmarshal (System.Runtime.Remoting.ObjRef objectRef);" />
    <Member Sig="public static object Unmarshal (System.Runtime.Remoting.ObjRef objectRef, bool fRefine);" />
    <Member Sig="public static string GetObjectUri (MarshalByRefObject obj);" />
    <Member Sig="public static string GetSessionIdForMethodMessage (System.Runtime.Remoting.Messaging.IMethodMessage msg);" />
    <Member Sig="public static System.Reflection.MethodBase GetMethodBaseFromMethodMessage (System.Runtime.Remoting.Messaging.IMethodMessage msg);" />
    <Member Sig="public static System.Runtime.Remoting.Messaging.IMessageSink GetEnvoyChainForProxy (MarshalByRefObject obj);" />
    <Member Sig="public static System.Runtime.Remoting.Messaging.IMethodReturnMessage ExecuteMessage (MarshalByRefObject target, System.Runtime.Remoting.Messaging.IMethodCallMessage reqMsg);" />
    <Member Sig="public static System.Runtime.Remoting.ObjRef GetObjRefForProxy (MarshalByRefObject obj);" />
    <Member Sig="public static System.Runtime.Remoting.ObjRef Marshal (MarshalByRefObject Obj);" />
    <Member Sig="public static System.Runtime.Remoting.ObjRef Marshal (MarshalByRefObject Obj, string ObjURI, Type RequestedType);" />
    <Member Sig="public static System.Runtime.Remoting.ObjRef Marshal (MarshalByRefObject Obj, string URI);" />
    <Member Sig="public static System.Runtime.Remoting.Proxies.RealProxy GetRealProxy (object proxy);" />
    <Member Sig="public static Type GetServerTypeForUri (string URI);" />
    <Member Sig="public static void GetObjectData (object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public static void LogRemotingStage (int stage);" />
    <Member Sig="public static void SetObjectUriForMarshal (MarshalByRefObject obj, string uri);" />
  </Type>
  <Type Name="System.Runtime.Remoting.RemotingTimeoutException">
    <Member Sig="public RemotingTimeoutException ();" />
    <Member Sig="public RemotingTimeoutException (string message);" />
    <Member Sig="public RemotingTimeoutException (string message, Exception InnerException);" />
  </Type>
  <Type Name="System.Runtime.Remoting.ServerException">
    <Member Sig="public ServerException ();" />
    <Member Sig="public ServerException (string message);" />
    <Member Sig="public ServerException (string message, Exception InnerException);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Services.EnterpriseServicesHelper">
    <Member Sig="public EnterpriseServicesHelper ();" />
    <Member Sig="public static object WrapIUnknownWithComObject (IntPtr punk);" />
    <Member Sig="public static System.Runtime.Remoting.Activation.IConstructionReturnMessage CreateConstructionReturnMessage (System.Runtime.Remoting.Activation.IConstructionCallMessage ctorMsg, MarshalByRefObject retObj);" />
    <Member Sig="public static void SwitchWrappers (System.Runtime.Remoting.Proxies.RealProxy oldcp, System.Runtime.Remoting.Proxies.RealProxy newcp);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Services.ITrackingHandler">
    <Member Sig="public void DisconnectedObject (object obj);" />
    <Member Sig="public void MarshaledObject (object obj, System.Runtime.Remoting.ObjRef or);" />
    <Member Sig="public void UnmarshaledObject (object obj, System.Runtime.Remoting.ObjRef or);" />
  </Type>
  <Type Name="System.Runtime.Remoting.Services.TrackingServices">
    <Member Sig="public static System.Runtime.Remoting.Services.ITrackingHandler[] RegisteredHandlers { get; }" />
    <Member Sig="public static void RegisterTrackingHandler (System.Runtime.Remoting.Services.ITrackingHandler handler);" />
    <Member Sig="public static void UnregisterTrackingHandler (System.Runtime.Remoting.Services.ITrackingHandler handler);" />
    <Member Sig="public TrackingServices ();" />
  </Type>
  <Type Name="System.Runtime.Remoting.SoapServices">
    <Member Sig="public static bool DecodeXmlNamespaceForClrTypeNamespace (string inNamespace, out string typeNamespace, out string assemblyName);" />
    <Member Sig="public static bool GetTypeAndMethodNameFromSoapAction (string soapAction, out string typeName, out string methodName);" />
    <Member Sig="public static bool GetXmlElementForInteropType (Type type, out string xmlElement, out string xmlNamespace);" />
    <Member Sig="public static bool GetXmlTypeForInteropType (Type type, out string xmlType, out string xmlTypeNamespace);" />
    <Member Sig="public static bool IsClrTypeNamespace (string namespaceString);" />
    <Member Sig="public static bool IsSoapActionValidForMethodBase (string soapAction, System.Reflection.MethodBase mb);" />
    <Member Sig="public static string CodeXmlNamespaceForClrTypeNamespace (string typeNamespace, string assemblyName);" />
    <Member Sig="public static string GetSoapActionFromMethodBase (System.Reflection.MethodBase mb);" />
    <Member Sig="public static string GetXmlNamespaceForMethodCall (System.Reflection.MethodBase mb);" />
    <Member Sig="public static string GetXmlNamespaceForMethodResponse (System.Reflection.MethodBase mb);" />
    <Member Sig="public static string XmlNsForClrType { get; }" />
    <Member Sig="public static string XmlNsForClrTypeWithAssembly { get; }" />
    <Member Sig="public static string XmlNsForClrTypeWithNs { get; }" />
    <Member Sig="public static string XmlNsForClrTypeWithNsAndAssembly { get; }" />
    <Member Sig="public static Type GetInteropTypeFromXmlElement (string xmlElement, string xmlNamespace);" />
    <Member Sig="public static Type GetInteropTypeFromXmlType (string xmlType, string xmlTypeNamespace);" />
    <Member Sig="public static void GetInteropFieldTypeAndNameFromXmlAttribute (Type containingType, string xmlAttribute, string xmlNamespace, out Type type, out string name);" />
    <Member Sig="public static void GetInteropFieldTypeAndNameFromXmlElement (Type containingType, string xmlElement, string xmlNamespace, out Type type, out string name);" />
    <Member Sig="public static void PreLoad (System.Reflection.Assembly assembly);" />
    <Member Sig="public static void PreLoad (Type type);" />
    <Member Sig="public static void RegisterInteropXmlElement (string xmlElement, string xmlNamespace, Type type);" />
    <Member Sig="public static void RegisterInteropXmlType (string xmlType, string xmlTypeNamespace, Type type);" />
    <Member Sig="public static void RegisterSoapActionForMethodBase (System.Reflection.MethodBase mb);" />
    <Member Sig="public static void RegisterSoapActionForMethodBase (System.Reflection.MethodBase mb, string soapAction);" />
  </Type>
  <Type Name="System.Runtime.Remoting.TypeEntry">
    <Member Sig="protected TypeEntry ();" />
    <Member Sig="public string AssemblyName { get; set; }" />
    <Member Sig="public string TypeName { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Remoting.WellKnownClientTypeEntry">
    <Member Sig="public override string ToString ();" />
    <Member Sig="public string ApplicationUrl { get; set; }" />
    <Member Sig="public string ObjectUrl { get; }" />
    <Member Sig="public Type ObjectType { get; }" />
    <Member Sig="public WellKnownClientTypeEntry (string typeName, string assemblyName, string objectUrl);" />
    <Member Sig="public WellKnownClientTypeEntry (Type type, string objectUrl);" />
  </Type>
  <Type Name="System.Runtime.Remoting.WellKnownObjectMode">
    <Member Sig="SingleCall" />
    <Member Sig="Singleton" />
  </Type>
  <Type Name="System.Runtime.Remoting.WellKnownServiceTypeEntry">
    <Member Sig="public override string ToString ();" />
    <Member Sig="public string ObjectUri { get; }" />
    <Member Sig="public System.Runtime.Remoting.Contexts.IContextAttribute[] ContextAttributes { get; set; }" />
    <Member Sig="public System.Runtime.Remoting.WellKnownObjectMode Mode { get; }" />
    <Member Sig="public Type ObjectType { get; }" />
    <Member Sig="public WellKnownServiceTypeEntry (string typeName, string assemblyName, string objectUri, System.Runtime.Remoting.WellKnownObjectMode mode);" />
    <Member Sig="public WellKnownServiceTypeEntry (Type type, string objectUri, System.Runtime.Remoting.WellKnownObjectMode mode);" />
  </Type>
  <Type Name="System.Runtime.Serialization.Formatter">
    <Member Sig="protected abstract void WriteArray (object obj, string name, Type memberType);" />
    <Member Sig="protected abstract void WriteBoolean (bool val, string name);" />
    <Member Sig="protected abstract void WriteByte (byte val, string name);" />
    <Member Sig="protected abstract void WriteChar (char val, string name);" />
    <Member Sig="protected abstract void WriteDateTime (DateTime val, string name);" />
    <Member Sig="protected abstract void WriteDecimal (decimal val, string name);" />
    <Member Sig="protected abstract void WriteDouble (double val, string name);" />
    <Member Sig="protected abstract void WriteInt16 (short val, string name);" />
    <Member Sig="protected abstract void WriteInt32 (int val, string name);" />
    <Member Sig="protected abstract void WriteInt64 (long val, string name);" />
    <Member Sig="protected abstract void WriteObjectRef (object obj, string name, Type memberType);" />
    <Member Sig="protected abstract void WriteSByte (sbyte val, string name);" />
    <Member Sig="protected abstract void WriteSingle (float val, string name);" />
    <Member Sig="protected abstract void WriteTimeSpan (TimeSpan val, string name);" />
    <Member Sig="protected abstract void WriteUInt16 (ushort val, string name);" />
    <Member Sig="protected abstract void WriteUInt32 (uint val, string name);" />
    <Member Sig="protected abstract void WriteUInt64 (ulong val, string name);" />
    <Member Sig="protected abstract void WriteValueType (object obj, string name, Type memberType);" />
    <Member Sig="protected Formatter ();" />
    <Member Sig="protected System.Collections.Queue m_objectQueue;" />
    <Member Sig="protected System.Runtime.Serialization.ObjectIDGenerator m_idGenerator;" />
    <Member Sig="protected virtual long Schedule (object obj);" />
    <Member Sig="protected virtual object GetNext (out long objID);" />
    <Member Sig="protected virtual void WriteMember (string memberName, object data);" />
    <Member Sig="public abstract object Deserialize (System.IO.Stream serializationStream);" />
    <Member Sig="public abstract System.Runtime.Serialization.ISurrogateSelector SurrogateSelector { get; set; }" />
    <Member Sig="public abstract System.Runtime.Serialization.SerializationBinder Binder { get; set; }" />
    <Member Sig="public abstract System.Runtime.Serialization.StreamingContext Context { get; set; }" />
    <Member Sig="public abstract void Serialize (System.IO.Stream serializationStream, object graph);" />
  </Type>
  <Type Name="System.Runtime.Serialization.FormatterConverter">
    <Member Sig="public bool ToBoolean (object value);" />
    <Member Sig="public byte ToByte (object value);" />
    <Member Sig="public char ToChar (object value);" />
    <Member Sig="public DateTime ToDateTime (object value);" />
    <Member Sig="public decimal ToDecimal (object value);" />
    <Member Sig="public double ToDouble (object value);" />
    <Member Sig="public float ToSingle (object value);" />
    <Member Sig="public FormatterConverter ();" />
    <Member Sig="public int ToInt32 (object value);" />
    <Member Sig="public long ToInt64 (object value);" />
    <Member Sig="public object Convert (object value, Type type);" />
    <Member Sig="public object Convert (object value, TypeCode typeCode);" />
    <Member Sig="public sbyte ToSByte (object value);" />
    <Member Sig="public short ToInt16 (object value);" />
    <Member Sig="public string ToString (object value);" />
    <Member Sig="public uint ToUInt32 (object value);" />
    <Member Sig="public ulong ToUInt64 (object value);" />
    <Member Sig="public ushort ToUInt16 (object value);" />
  </Type>
  <Type Name="System.Runtime.Serialization.Formatters.Binary.BinaryFormatter">
    <Member Sig="public BinaryFormatter ();" />
    <Member Sig="public BinaryFormatter (System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public object Deserialize (System.IO.Stream serializationStream);" />
    <Member Sig="public object Deserialize (System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler);" />
    <Member Sig="public object DeserializeMethodResponse (System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler, System.Runtime.Remoting.Messaging.IMethodCallMessage methodCallMessage);" />
    <Member Sig="public object UnsafeDeserialize (System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler);" />
    <Member Sig="public object UnsafeDeserializeMethodResponse (System.IO.Stream serializationStream, System.Runtime.Remoting.Messaging.HeaderHandler handler, System.Runtime.Remoting.Messaging.IMethodCallMessage methodCallMessage);" />
    <Member Sig="public System.Runtime.Serialization.Formatters.FormatterAssemblyStyle AssemblyFormat { get; set; }" />
    <Member Sig="public System.Runtime.Serialization.Formatters.FormatterTypeStyle TypeFormat { get; set; }" />
    <Member Sig="public System.Runtime.Serialization.Formatters.TypeFilterLevel FilterLevel { get; set; }" />
    <Member Sig="public System.Runtime.Serialization.ISurrogateSelector SurrogateSelector { get; set; }" />
    <Member Sig="public System.Runtime.Serialization.SerializationBinder Binder { get; set; }" />
    <Member Sig="public System.Runtime.Serialization.StreamingContext Context { get; set; }" />
    <Member Sig="public void Serialize (System.IO.Stream serializationStream, object graph);" />
    <Member Sig="public void Serialize (System.IO.Stream serializationStream, object graph, System.Runtime.Remoting.Messaging.Header[] headers);" />
  </Type>
  <Type Name="System.Runtime.Serialization.Formatters.FormatterAssemblyStyle">
    <Member Sig="Full" />
    <Member Sig="Simple" />
  </Type>
  <Type Name="System.Runtime.Serialization.Formatters.FormatterTypeStyle">
    <Member Sig="TypesAlways" />
    <Member Sig="TypesWhenNeeded" />
    <Member Sig="XsdString" />
  </Type>
  <Type Name="System.Runtime.Serialization.Formatters.IFieldInfo">
    <Member Sig="public string[] FieldNames { get; set; }" />
    <Member Sig="public Type[] FieldTypes { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Serialization.Formatters.InternalRM">
    <Member Sig="public InternalRM ();" />
    <Member Sig="public static bool SoapCheckEnabled ();" />
    <Member Sig="public static void InfoSoap (object[] messages);" />
  </Type>
  <Type Name="System.Runtime.Serialization.Formatters.InternalST">
    <Member Sig="public static bool SoapCheckEnabled ();" />
    <Member Sig="public static System.Reflection.Assembly LoadAssemblyFromString (string assemblyString);" />
    <Member Sig="public static void InfoSoap (object[] messages);" />
    <Member Sig="public static void SerializationSetValue (System.Reflection.FieldInfo fi, object target, object value);" />
    <Member Sig="public static void Soap (object[] messages);" />
    <Member Sig="public static void SoapAssert (bool condition, string message);" />
  </Type>
  <Type Name="System.Runtime.Serialization.Formatters.ISoapMessage">
    <Member Sig="public object[] ParamValues { get; set; }" />
    <Member Sig="public string MethodName { get; set; }" />
    <Member Sig="public string XmlNameSpace { get; set; }" />
    <Member Sig="public string[] ParamNames { get; set; }" />
    <Member Sig="public System.Runtime.Remoting.Messaging.Header[] Headers { get; set; }" />
    <Member Sig="public Type[] ParamTypes { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Serialization.Formatters.ServerFault">
    <Member Sig="public ServerFault (string exceptionType, string message, string stackTrace);" />
    <Member Sig="public string ExceptionMessage { get; set; }" />
    <Member Sig="public string ExceptionType { get; set; }" />
    <Member Sig="public string StackTrace { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Serialization.Formatters.SoapFault">
    <Member Sig="public object Detail { get; set; }" />
    <Member Sig="public SoapFault ();" />
    <Member Sig="public SoapFault (string faultCode, string faultString, string faultActor, System.Runtime.Serialization.Formatters.ServerFault serverFault);" />
    <Member Sig="public string FaultActor { get; set; }" />
    <Member Sig="public string FaultCode { get; set; }" />
    <Member Sig="public string FaultString { get; set; }" />
    <Member Sig="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.Runtime.Serialization.Formatters.SoapMessage">
    <Member Sig="public object[] ParamValues { get; set; }" />
    <Member Sig="public SoapMessage ();" />
    <Member Sig="public string MethodName { get; set; }" />
    <Member Sig="public string XmlNameSpace { get; set; }" />
    <Member Sig="public string[] ParamNames { get; set; }" />
    <Member Sig="public System.Runtime.Remoting.Messaging.Header[] Headers { get; set; }" />
    <Member Sig="public Type[] ParamTypes { get; set; }" />
  </Type>
  <Type Name="System.Runtime.Serialization.Formatters.TypeFilterLevel">
    <Member Sig="Full" />
    <Member Sig="Low" />
  </Type>
  <Type Name="System.Runtime.Serialization.FormatterServices">
    <Member Sig="public static object GetSafeUninitializedObject (Type type);" />
    <Member Sig="public static object GetUninitializedObject (Type type);" />
    <Member Sig="public static object PopulateObjectMembers (object obj, System.Reflection.MemberInfo[] members, object[] data);" />
    <Member Sig="public static object[] GetObjectData (object obj, System.Reflection.MemberInfo[] members);" />
    <Member Sig="public static System.Reflection.MemberInfo[] GetSerializableMembers (Type type);" />
    <Member Sig="public static System.Reflection.MemberInfo[] GetSerializableMembers (Type type, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public static System.Runtime.Serialization.ISerializationSurrogate GetSurrogateForCyclicalReference (System.Runtime.Serialization.ISerializationSurrogate innerSurrogate);" />
    <Member Sig="public static Type GetTypeFromAssembly (System.Reflection.Assembly assem, string name);" />
    <Member Sig="public static void CheckTypeSecurity (Type t, System.Runtime.Serialization.Formatters.TypeFilterLevel securityLevel);" />
  </Type>
  <Type Name="System.Runtime.Serialization.IDeserializationCallback">
    <Member Sig="public void OnDeserialization (object sender);" />
  </Type>
  <Type Name="System.Runtime.Serialization.IFormatter">
    <Member Sig="public object Deserialize (System.IO.Stream serializationStream);" />
    <Member Sig="public System.Runtime.Serialization.ISurrogateSelector SurrogateSelector { get; set; }" />
    <Member Sig="public System.Runtime.Serialization.SerializationBinder Binder { get; set; }" />
    <Member Sig="public System.Runtime.Serialization.StreamingContext Context { get; set; }" />
    <Member Sig="public void Serialize (System.IO.Stream serializationStream, object graph);" />
  </Type>
  <Type Name="System.Runtime.Serialization.IFormatterConverter">
    <Member Sig="public bool ToBoolean (object value);" />
    <Member Sig="public byte ToByte (object value);" />
    <Member Sig="public char ToChar (object value);" />
    <Member Sig="public DateTime ToDateTime (object value);" />
    <Member Sig="public decimal ToDecimal (object value);" />
    <Member Sig="public double ToDouble (object value);" />
    <Member Sig="public float ToSingle (object value);" />
    <Member Sig="public int ToInt32 (object value);" />
    <Member Sig="public long ToInt64 (object value);" />
    <Member Sig="public object Convert (object value, Type type);" />
    <Member Sig="public object Convert (object value, TypeCode typeCode);" />
    <Member Sig="public sbyte ToSByte (object value);" />
    <Member Sig="public short ToInt16 (object value);" />
    <Member Sig="public string ToString (object value);" />
    <Member Sig="public uint ToUInt32 (object value);" />
    <Member Sig="public ulong ToUInt64 (object value);" />
    <Member Sig="public ushort ToUInt16 (object value);" />
  </Type>
  <Type Name="System.Runtime.Serialization.IObjectReference">
    <Member Sig="public object GetRealObject (System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.Runtime.Serialization.ISerializable">
    <Member Sig="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.Runtime.Serialization.ISerializationSurrogate">
    <Member Sig="public object SetObjectData (object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ISurrogateSelector selector);" />
    <Member Sig="public void GetObjectData (object obj, System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.Runtime.Serialization.ISurrogateSelector">
    <Member Sig="public System.Runtime.Serialization.ISerializationSurrogate GetSurrogate (Type type, System.Runtime.Serialization.StreamingContext context, out System.Runtime.Serialization.ISurrogateSelector selector);" />
    <Member Sig="public System.Runtime.Serialization.ISurrogateSelector GetNextSelector ();" />
    <Member Sig="public void ChainSelector (System.Runtime.Serialization.ISurrogateSelector selector);" />
  </Type>
  <Type Name="System.Runtime.Serialization.ObjectIDGenerator">
    <Member Sig="public ObjectIDGenerator ();" />
    <Member Sig="public virtual long GetId (object obj, out bool firstTime);" />
    <Member Sig="public virtual long HasId (object obj, out bool firstTime);" />
  </Type>
  <Type Name="System.Runtime.Serialization.ObjectManager">
    <Member Sig="public ObjectManager (System.Runtime.Serialization.ISurrogateSelector selector, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public virtual object GetObject (long objectID);" />
    <Member Sig="public virtual void DoFixups ();" />
    <Member Sig="public virtual void RaiseDeserializationEvent ();" />
    <Member Sig="public virtual void RecordArrayElementFixup (long arrayToBeFixed, int index, long objectRequired);" />
    <Member Sig="public virtual void RecordArrayElementFixup (long arrayToBeFixed, int[] indices, long objectRequired);" />
    <Member Sig="public virtual void RecordDelayedFixup (long objectToBeFixed, string memberName, long objectRequired);" />
    <Member Sig="public virtual void RecordFixup (long objectToBeFixed, System.Reflection.MemberInfo member, long objectRequired);" />
    <Member Sig="public virtual void RegisterObject (object obj, long objectID);" />
    <Member Sig="public void RaiseOnDeserializingEvent (object obj);" />
    <Member Sig="public void RegisterObject (object obj, long objectID, System.Runtime.Serialization.SerializationInfo info);" />
    <Member Sig="public void RegisterObject (object obj, long objectID, System.Runtime.Serialization.SerializationInfo info, long idOfContainingObj, System.Reflection.MemberInfo member);" />
    <Member Sig="public void RegisterObject (object obj, long objectID, System.Runtime.Serialization.SerializationInfo info, long idOfContainingObj, System.Reflection.MemberInfo member, int[] arrayIndex);" />
  </Type>
  <Type Name="System.Runtime.Serialization.OnDeserializedAttribute">
    <Member Sig="public OnDeserializedAttribute ();" />
  </Type>
  <Type Name="System.Runtime.Serialization.OnDeserializingAttribute">
    <Member Sig="public OnDeserializingAttribute ();" />
  </Type>
  <Type Name="System.Runtime.Serialization.OnSerializedAttribute">
    <Member Sig="public OnSerializedAttribute ();" />
  </Type>
  <Type Name="System.Runtime.Serialization.OnSerializingAttribute">
    <Member Sig="public OnSerializingAttribute ();" />
  </Type>
  <Type Name="System.Runtime.Serialization.OptionalFieldAttribute">
    <Member Sig="public int VersionAdded { get; set; }" />
    <Member Sig="public OptionalFieldAttribute ();" />
  </Type>
  <Type Name="System.Runtime.Serialization.SerializationBinder">
    <Member Sig="protected SerializationBinder ();" />
    <Member Sig="public abstract Type BindToType (string assemblyName, string typeName);" />
  </Type>
  <Type Name="System.Runtime.Serialization.SerializationEntry">
    <Member Sig="public object Value { get; }" />
    <Member Sig="public string Name { get; }" />
    <Member Sig="public Type ObjectType { get; }" />
  </Type>
  <Type Name="System.Runtime.Serialization.SerializationException">
    <Member Sig="protected SerializationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public SerializationException ();" />
    <Member Sig="public SerializationException (string message);" />
    <Member Sig="public SerializationException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.Runtime.Serialization.SerializationInfo">
    <Member Sig="public bool GetBoolean (string name);" />
    <Member Sig="public byte GetByte (string name);" />
    <Member Sig="public char GetChar (string name);" />
    <Member Sig="public DateTime GetDateTime (string name);" />
    <Member Sig="public decimal GetDecimal (string name);" />
    <Member Sig="public double GetDouble (string name);" />
    <Member Sig="public float GetSingle (string name);" />
    <Member Sig="public int GetInt32 (string name);" />
    <Member Sig="public int MemberCount { get; }" />
    <Member Sig="public long GetInt64 (string name);" />
    <Member Sig="public object GetValue (string name, Type type);" />
    <Member Sig="public sbyte GetSByte (string name);" />
    <Member Sig="public SerializationInfo (Type type, System.Runtime.Serialization.IFormatterConverter converter);" />
    <Member Sig="public SerializationInfo (Type type, System.Runtime.Serialization.IFormatterConverter converter, bool requireSameTokenInPartialTrust);" />
    <Member Sig="public short GetInt16 (string name);" />
    <Member Sig="public string AssemblyName { get; set; }" />
    <Member Sig="public string FullTypeName { get; set; }" />
    <Member Sig="public string GetString (string name);" />
    <Member Sig="public System.Runtime.Serialization.SerializationInfoEnumerator GetEnumerator ();" />
    <Member Sig="public uint GetUInt32 (string name);" />
    <Member Sig="public ulong GetUInt64 (string name);" />
    <Member Sig="public ushort GetUInt16 (string name);" />
    <Member Sig="public void AddValue (string name, bool value);" />
    <Member Sig="public void AddValue (string name, byte value);" />
    <Member Sig="public void AddValue (string name, char value);" />
    <Member Sig="public void AddValue (string name, DateTime value);" />
    <Member Sig="public void AddValue (string name, decimal value);" />
    <Member Sig="public void AddValue (string name, double value);" />
    <Member Sig="public void AddValue (string name, float value);" />
    <Member Sig="public void AddValue (string name, int value);" />
    <Member Sig="public void AddValue (string name, long value);" />
    <Member Sig="public void AddValue (string name, object value);" />
    <Member Sig="public void AddValue (string name, object value, Type type);" />
    <Member Sig="public void AddValue (string name, sbyte value);" />
    <Member Sig="public void AddValue (string name, short value);" />
    <Member Sig="public void AddValue (string name, uint value);" />
    <Member Sig="public void AddValue (string name, ulong value);" />
    <Member Sig="public void AddValue (string name, ushort value);" />
    <Member Sig="public void SetType (Type type);" />
  </Type>
  <Type Name="System.Runtime.Serialization.SerializationInfoEnumerator">
    <Member Sig="object System.Collections.IEnumerator.Current { get; }" />
    <Member Sig="public bool MoveNext ();" />
    <Member Sig="public object Value { get; }" />
    <Member Sig="public string Name { get; }" />
    <Member Sig="public System.Runtime.Serialization.SerializationEntry Current { get; }" />
    <Member Sig="public Type ObjectType { get; }" />
    <Member Sig="public void Reset ();" />
  </Type>
  <Type Name="System.Runtime.Serialization.SerializationObjectManager">
    <Member Sig="public SerializationObjectManager (System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public void RaiseOnSerializedEvent ();" />
    <Member Sig="public void RegisterObject (object obj);" />
  </Type>
  <Type Name="System.Runtime.Serialization.StreamingContext">
    <Member Sig="public object Context { get; }" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public StreamingContext (System.Runtime.Serialization.StreamingContextStates state);" />
    <Member Sig="public StreamingContext (System.Runtime.Serialization.StreamingContextStates state, object additional);" />
    <Member Sig="public System.Runtime.Serialization.StreamingContextStates State { get; }" />
  </Type>
  <Type Name="System.Runtime.Serialization.StreamingContextStates">
    <Member Sig="All" />
    <Member Sig="Clone" />
    <Member Sig="CrossAppDomain" />
    <Member Sig="CrossMachine" />
    <Member Sig="CrossProcess" />
    <Member Sig="File" />
    <Member Sig="Other" />
    <Member Sig="Persistence" />
    <Member Sig="Remoting" />
  </Type>
  <Type Name="System.Runtime.Serialization.SurrogateSelector">
    <Member Sig="public SurrogateSelector ();" />
    <Member Sig="public virtual System.Runtime.Serialization.ISerializationSurrogate GetSurrogate (Type type, System.Runtime.Serialization.StreamingContext context, out System.Runtime.Serialization.ISurrogateSelector selector);" />
    <Member Sig="public virtual System.Runtime.Serialization.ISurrogateSelector GetNextSelector ();" />
    <Member Sig="public virtual void AddSurrogate (Type type, System.Runtime.Serialization.StreamingContext context, System.Runtime.Serialization.ISerializationSurrogate surrogate);" />
    <Member Sig="public virtual void ChainSelector (System.Runtime.Serialization.ISurrogateSelector selector);" />
    <Member Sig="public virtual void RemoveSurrogate (Type type, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.Runtime.Versioning.ResourceConsumptionAttribute">
    <Member Sig="public ResourceConsumptionAttribute (System.Runtime.Versioning.ResourceScope resourceScope);" />
    <Member Sig="public ResourceConsumptionAttribute (System.Runtime.Versioning.ResourceScope resourceScope, System.Runtime.Versioning.ResourceScope consumptionScope);" />
    <Member Sig="public System.Runtime.Versioning.ResourceScope ConsumptionScope { get; }" />
    <Member Sig="public System.Runtime.Versioning.ResourceScope ResourceScope { get; }" />
  </Type>
  <Type Name="System.Runtime.Versioning.ResourceExposureAttribute">
    <Member Sig="public ResourceExposureAttribute (System.Runtime.Versioning.ResourceScope exposureLevel);" />
    <Member Sig="public System.Runtime.Versioning.ResourceScope ResourceExposureLevel { get; }" />
  </Type>
  <Type Name="System.Runtime.Versioning.ResourceScope">
    <Member Sig="AppDomain" />
    <Member Sig="Assembly" />
    <Member Sig="Library" />
    <Member Sig="Machine" />
    <Member Sig="None" />
    <Member Sig="Private" />
    <Member Sig="Process" />
  </Type>
  <Type Name="System.Runtime.Versioning.VersioningHelper">
    <Member Sig="public static string MakeVersionSafeName (string name, System.Runtime.Versioning.ResourceScope from, System.Runtime.Versioning.ResourceScope to);" />
    <Member Sig="public static string MakeVersionSafeName (string name, System.Runtime.Versioning.ResourceScope from, System.Runtime.Versioning.ResourceScope to, Type type);" />
  </Type>
  <Type Name="System.RuntimeArgumentHandle" />
  <Type Name="System.RuntimeFieldHandle">
    <Member Sig="public bool Equals (RuntimeFieldHandle handle);" />
    <Member Sig="public IntPtr Value { get; }" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static bool op_Equality (RuntimeFieldHandle left, RuntimeFieldHandle right);" />
    <Member Sig="public static bool op_Inequality (RuntimeFieldHandle left, RuntimeFieldHandle right);" />
    <Member Sig="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.RuntimeMethodHandle">
    <Member Sig="public bool Equals (RuntimeMethodHandle handle);" />
    <Member Sig="public IntPtr GetFunctionPointer ();" />
    <Member Sig="public IntPtr Value { get; }" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static bool op_Equality (RuntimeMethodHandle left, RuntimeMethodHandle right);" />
    <Member Sig="public static bool op_Inequality (RuntimeMethodHandle left, RuntimeMethodHandle right);" />
    <Member Sig="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.RuntimeTypeHandle">
    <Member Sig="public bool Equals (RuntimeTypeHandle handle);" />
    <Member Sig="public IntPtr Value { get; }" />
    <Member Sig="public ModuleHandle GetModuleHandle ();" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static bool op_Equality (object left, RuntimeTypeHandle right);" />
    <Member Sig="public static bool op_Equality (RuntimeTypeHandle left, object right);" />
    <Member Sig="public static bool op_Inequality (object left, RuntimeTypeHandle right);" />
    <Member Sig="public static bool op_Inequality (RuntimeTypeHandle left, object right);" />
    <Member Sig="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.SByte">
    <Member Sig="bool IConvertible.ToBoolean (IFormatProvider provider);" />
    <Member Sig="byte IConvertible.ToByte (IFormatProvider provider);" />
    <Member Sig="char IConvertible.ToChar (IFormatProvider provider);" />
    <Member Sig="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
    <Member Sig="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
    <Member Sig="double IConvertible.ToDouble (IFormatProvider provider);" />
    <Member Sig="float IConvertible.ToSingle (IFormatProvider provider);" />
    <Member Sig="int IConvertible.ToInt32 (IFormatProvider provider);" />
    <Member Sig="long IConvertible.ToInt64 (IFormatProvider provider);" />
    <Member Sig="object IConvertible.ToType (Type type, IFormatProvider provider);" />
    <Member Sig="public bool Equals (sbyte obj);" />
    <Member Sig="public const sbyte MaxValue = 127;" />
    <Member Sig="public const sbyte MinValue = -128;" />
    <Member Sig="public int CompareTo (object obj);" />
    <Member Sig="public int CompareTo (sbyte value);" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool TryParse (string s, out sbyte result);" />
    <Member Sig="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out sbyte result);" />
    <Member Sig="public static sbyte Parse (string s);" />
    <Member Sig="public static sbyte Parse (string s, IFormatProvider provider);" />
    <Member Sig="public static sbyte Parse (string s, System.Globalization.NumberStyles style);" />
    <Member Sig="public static sbyte Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
    <Member Sig="public string ToString (IFormatProvider provider);" />
    <Member Sig="public string ToString (string format);" />
    <Member Sig="public string ToString (string format, IFormatProvider provider);" />
    <Member Sig="public TypeCode GetTypeCode ();" />
    <Member Sig="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
    <Member Sig="short IConvertible.ToInt16 (IFormatProvider provider);" />
    <Member Sig="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
    <Member Sig="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
    <Member Sig="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
  </Type>
  <Type Name="System.Security.AccessControl.AccessControlActions">
    <Member Sig="Change" />
    <Member Sig="None" />
    <Member Sig="View" />
  </Type>
  <Type Name="System.Security.AccessControl.AccessControlModification">
    <Member Sig="Add" />
    <Member Sig="Remove" />
    <Member Sig="RemoveAll" />
    <Member Sig="RemoveSpecific" />
    <Member Sig="Reset" />
    <Member Sig="Set" />
  </Type>
  <Type Name="System.Security.AccessControl.AccessControlSections">
    <Member Sig="Access" />
    <Member Sig="All" />
    <Member Sig="Audit" />
    <Member Sig="Group" />
    <Member Sig="None" />
    <Member Sig="Owner" />
  </Type>
  <Type Name="System.Security.AccessControl.AccessControlType">
    <Member Sig="Allow" />
    <Member Sig="Deny" />
  </Type>
  <Type Name="System.Security.AccessControl.AccessRule">
    <Member Sig="protected AccessRule (System.Security.Principal.IdentityReference identity, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
    <Member Sig="public System.Security.AccessControl.AccessControlType AccessControlType { get; }" />
  </Type>
  <Type Name="System.Security.AccessControl.AceEnumerator">
    <Member Sig="object System.Collections.IEnumerator.Current { get; }" />
    <Member Sig="public bool MoveNext ();" />
    <Member Sig="public System.Security.AccessControl.GenericAce Current { get; }" />
    <Member Sig="public void Reset ();" />
  </Type>
  <Type Name="System.Security.AccessControl.AceFlags">
    <Member Sig="AuditFlags" />
    <Member Sig="ContainerInherit" />
    <Member Sig="FailedAccess" />
    <Member Sig="InheritanceFlags" />
    <Member Sig="Inherited" />
    <Member Sig="InheritOnly" />
    <Member Sig="None" />
    <Member Sig="NoPropagateInherit" />
    <Member Sig="ObjectInherit" />
    <Member Sig="SuccessfulAccess" />
  </Type>
  <Type Name="System.Security.AccessControl.AceQualifier">
    <Member Sig="AccessAllowed" />
    <Member Sig="AccessDenied" />
    <Member Sig="SystemAlarm" />
    <Member Sig="SystemAudit" />
  </Type>
  <Type Name="System.Security.AccessControl.AceType">
    <Member Sig="AccessAllowed" />
    <Member Sig="AccessAllowedCallback" />
    <Member Sig="AccessAllowedCallbackObject" />
    <Member Sig="AccessAllowedCompound" />
    <Member Sig="AccessAllowedObject" />
    <Member Sig="AccessDenied" />
    <Member Sig="AccessDeniedCallback" />
    <Member Sig="AccessDeniedCallbackObject" />
    <Member Sig="AccessDeniedObject" />
    <Member Sig="MaxDefinedAceType" />
    <Member Sig="SystemAlarm" />
    <Member Sig="SystemAlarmCallback" />
    <Member Sig="SystemAlarmCallbackObject" />
    <Member Sig="SystemAlarmObject" />
    <Member Sig="SystemAudit" />
    <Member Sig="SystemAuditCallback" />
    <Member Sig="SystemAuditCallbackObject" />
    <Member Sig="SystemAuditObject" />
  </Type>
  <Type Name="System.Security.AccessControl.AuditFlags">
    <Member Sig="Failure" />
    <Member Sig="None" />
    <Member Sig="Success" />
  </Type>
  <Type Name="System.Security.AccessControl.AuditRule">
    <Member Sig="protected AuditRule (System.Security.Principal.IdentityReference identity, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags auditFlags);" />
    <Member Sig="public System.Security.AccessControl.AuditFlags AuditFlags { get; }" />
  </Type>
  <Type Name="System.Security.AccessControl.AuthorizationRule">
    <Member Sig="protected AuthorizationRule (System.Security.Principal.IdentityReference identity, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags);" />
    <Member Sig="protected int AccessMask { get; }" />
    <Member Sig="public bool IsInherited { get; }" />
    <Member Sig="public System.Security.AccessControl.InheritanceFlags InheritanceFlags { get; }" />
    <Member Sig="public System.Security.AccessControl.PropagationFlags PropagationFlags { get; }" />
    <Member Sig="public System.Security.Principal.IdentityReference IdentityReference { get; }" />
  </Type>
  <Type Name="System.Security.AccessControl.AuthorizationRuleCollection">
    <Member Sig="public System.Security.AccessControl.AuthorizationRule this[int index] { get; }" />
    <Member Sig="public void CopyTo (System.Security.AccessControl.AuthorizationRule[] rules, int index);" />
  </Type>
  <Type Name="System.Security.AccessControl.CommonAce">
    <Member Sig="public CommonAce (System.Security.AccessControl.AceFlags flags, System.Security.AccessControl.AceQualifier qualifier, int accessMask, System.Security.Principal.SecurityIdentifier sid, bool isCallback, byte[] opaque);" />
    <Member Sig="public override int BinaryLength { get; }" />
    <Member Sig="public override void GetBinaryForm (byte[] binaryForm, int offset);" />
    <Member Sig="public static int MaxOpaqueLength (bool isCallback);" />
  </Type>
  <Type Name="System.Security.AccessControl.CommonAcl">
    <Member Sig="public bool IsCanonical { get; }" />
    <Member Sig="public bool IsContainer { get; }" />
    <Member Sig="public bool IsDS { get; }" />
    <Member Sig="public override sealed byte Revision { get; }" />
    <Member Sig="public override sealed int BinaryLength { get; }" />
    <Member Sig="public override sealed int Count { get; }" />
    <Member Sig="public override sealed System.Security.AccessControl.GenericAce this[int index] { get; set; }" />
    <Member Sig="public override sealed void GetBinaryForm (byte[] binaryForm, int offset);" />
    <Member Sig="public void Purge (System.Security.Principal.SecurityIdentifier sid);" />
    <Member Sig="public void RemoveInheritedAces ();" />
  </Type>
  <Type Name="System.Security.AccessControl.CommonObjectSecurity">
    <Member Sig="protected bool RemoveAccessRule (System.Security.AccessControl.AccessRule rule);" />
    <Member Sig="protected bool RemoveAuditRule (System.Security.AccessControl.AuditRule rule);" />
    <Member Sig="protected CommonObjectSecurity (bool isContainer);" />
    <Member Sig="protected override bool ModifyAccess (System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AccessRule rule, out bool modified);" />
    <Member Sig="protected override bool ModifyAudit (System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AuditRule rule, out bool modified);" />
    <Member Sig="protected void AddAccessRule (System.Security.AccessControl.AccessRule rule);" />
    <Member Sig="protected void AddAuditRule (System.Security.AccessControl.AuditRule rule);" />
    <Member Sig="protected void RemoveAccessRuleAll (System.Security.AccessControl.AccessRule rule);" />
    <Member Sig="protected void RemoveAccessRuleSpecific (System.Security.AccessControl.AccessRule rule);" />
    <Member Sig="protected void RemoveAuditRuleAll (System.Security.AccessControl.AuditRule rule);" />
    <Member Sig="protected void RemoveAuditRuleSpecific (System.Security.AccessControl.AuditRule rule);" />
    <Member Sig="protected void ResetAccessRule (System.Security.AccessControl.AccessRule rule);" />
    <Member Sig="protected void SetAccessRule (System.Security.AccessControl.AccessRule rule);" />
    <Member Sig="protected void SetAuditRule (System.Security.AccessControl.AuditRule rule);" />
    <Member Sig="public System.Security.AccessControl.AuthorizationRuleCollection GetAccessRules (bool includeExplicit, bool includeInherited, Type targetType);" />
    <Member Sig="public System.Security.AccessControl.AuthorizationRuleCollection GetAuditRules (bool includeExplicit, bool includeInherited, Type targetType);" />
  </Type>
  <Type Name="System.Security.AccessControl.CommonSecurityDescriptor">
    <Member Sig="public bool IsContainer { get; }" />
    <Member Sig="public bool IsDiscretionaryAclCanonical { get; }" />
    <Member Sig="public bool IsDS { get; }" />
    <Member Sig="public bool IsSystemAclCanonical { get; }" />
    <Member Sig="public CommonSecurityDescriptor (bool isContainer, bool isDS, byte[] binaryForm, int offset);" />
    <Member Sig="public CommonSecurityDescriptor (bool isContainer, bool isDS, string sddlForm);" />
    <Member Sig="public CommonSecurityDescriptor (bool isContainer, bool isDS, System.Security.AccessControl.ControlFlags flags, System.Security.Principal.SecurityIdentifier owner, System.Security.Principal.SecurityIdentifier group, System.Security.AccessControl.SystemAcl systemAcl, System.Security.AccessControl.DiscretionaryAcl discretionaryAcl);" />
    <Member Sig="public CommonSecurityDescriptor (bool isContainer, bool isDS, System.Security.AccessControl.RawSecurityDescriptor rawSecurityDescriptor);" />
    <Member Sig="public override System.Security.AccessControl.ControlFlags ControlFlags { get; }" />
    <Member Sig="public override System.Security.Principal.SecurityIdentifier Group { get; set; }" />
    <Member Sig="public override System.Security.Principal.SecurityIdentifier Owner { get; set; }" />
    <Member Sig="public System.Security.AccessControl.DiscretionaryAcl DiscretionaryAcl { get; set; }" />
    <Member Sig="public System.Security.AccessControl.SystemAcl SystemAcl { get; set; }" />
    <Member Sig="public void PurgeAccessControl (System.Security.Principal.SecurityIdentifier sid);" />
    <Member Sig="public void PurgeAudit (System.Security.Principal.SecurityIdentifier sid);" />
    <Member Sig="public void SetDiscretionaryAclProtection (bool isProtected, bool preserveInheritance);" />
    <Member Sig="public void SetSystemAclProtection (bool isProtected, bool preserveInheritance);" />
  </Type>
  <Type Name="System.Security.AccessControl.CompoundAce">
    <Member Sig="public CompoundAce (System.Security.AccessControl.AceFlags flags, int accessMask, System.Security.AccessControl.CompoundAceType compoundAceType, System.Security.Principal.SecurityIdentifier sid);" />
    <Member Sig="public override int BinaryLength { get; }" />
    <Member Sig="public override void GetBinaryForm (byte[] binaryForm, int offset);" />
    <Member Sig="public System.Security.AccessControl.CompoundAceType CompoundAceType { get; set; }" />
  </Type>
  <Type Name="System.Security.AccessControl.CompoundAceType">
    <Member Sig="Impersonation" />
  </Type>
  <Type Name="System.Security.AccessControl.ControlFlags">
    <Member Sig="DiscretionaryAclAutoInherited" />
    <Member Sig="DiscretionaryAclAutoInheritRequired" />
    <Member Sig="DiscretionaryAclDefaulted" />
    <Member Sig="DiscretionaryAclPresent" />
    <Member Sig="DiscretionaryAclProtected" />
    <Member Sig="DiscretionaryAclUntrusted" />
    <Member Sig="GroupDefaulted" />
    <Member Sig="None" />
    <Member Sig="OwnerDefaulted" />
    <Member Sig="RMControlValid" />
    <Member Sig="SelfRelative" />
    <Member Sig="ServerSecurity" />
    <Member Sig="SystemAclAutoInherited" />
    <Member Sig="SystemAclAutoInheritRequired" />
    <Member Sig="SystemAclDefaulted" />
    <Member Sig="SystemAclPresent" />
    <Member Sig="SystemAclProtected" />
  </Type>
  <Type Name="System.Security.AccessControl.CryptoKeyAccessRule">
    <Member Sig="public CryptoKeyAccessRule (string identity, System.Security.AccessControl.CryptoKeyRights cryptoKeyRights, System.Security.AccessControl.AccessControlType type);" />
    <Member Sig="public CryptoKeyAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.CryptoKeyRights cryptoKeyRights, System.Security.AccessControl.AccessControlType type);" />
    <Member Sig="public System.Security.AccessControl.CryptoKeyRights CryptoKeyRights { get; }" />
  </Type>
  <Type Name="System.Security.AccessControl.CryptoKeyAuditRule">
    <Member Sig="public CryptoKeyAuditRule (string identity, System.Security.AccessControl.CryptoKeyRights cryptoKeyRights, System.Security.AccessControl.AuditFlags flags);" />
    <Member Sig="public CryptoKeyAuditRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.CryptoKeyRights cryptoKeyRights, System.Security.AccessControl.AuditFlags flags);" />
    <Member Sig="public System.Security.AccessControl.CryptoKeyRights CryptoKeyRights { get; }" />
  </Type>
  <Type Name="System.Security.AccessControl.CryptoKeyRights">
    <Member Sig="ChangePermissions" />
    <Member Sig="Delete" />
    <Member Sig="FullControl" />
    <Member Sig="GenericAll" />
    <Member Sig="GenericExecute" />
    <Member Sig="GenericRead" />
    <Member Sig="GenericWrite" />
    <Member Sig="ReadAttributes" />
    <Member Sig="ReadData" />
    <Member Sig="ReadExtendedAttributes" />
    <Member Sig="ReadPermissions" />
    <Member Sig="Synchronize" />
    <Member Sig="TakeOwnership" />
    <Member Sig="WriteAttributes" />
    <Member Sig="WriteData" />
    <Member Sig="WriteExtendedAttributes" />
  </Type>
  <Type Name="System.Security.AccessControl.CryptoKeySecurity">
    <Member Sig="public bool RemoveAccessRule (System.Security.AccessControl.CryptoKeyAccessRule rule);" />
    <Member Sig="public bool RemoveAuditRule (System.Security.AccessControl.CryptoKeyAuditRule rule);" />
    <Member Sig="public CryptoKeySecurity ();" />
    <Member Sig="public CryptoKeySecurity (System.Security.AccessControl.CommonSecurityDescriptor securityDescriptor);" />
    <Member Sig="public override sealed System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
    <Member Sig="public override sealed System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
    <Member Sig="public override Type AccessRightType { get; }" />
    <Member Sig="public override Type AccessRuleType { get; }" />
    <Member Sig="public override Type AuditRuleType { get; }" />
    <Member Sig="public void AddAccessRule (System.Security.AccessControl.CryptoKeyAccessRule rule);" />
    <Member Sig="public void AddAuditRule (System.Security.AccessControl.CryptoKeyAuditRule rule);" />
    <Member Sig="public void RemoveAccessRuleAll (System.Security.AccessControl.CryptoKeyAccessRule rule);" />
    <Member Sig="public void RemoveAccessRuleSpecific (System.Security.AccessControl.CryptoKeyAccessRule rule);" />
    <Member Sig="public void RemoveAuditRuleAll (System.Security.AccessControl.CryptoKeyAuditRule rule);" />
    <Member Sig="public void RemoveAuditRuleSpecific (System.Security.AccessControl.CryptoKeyAuditRule rule);" />
    <Member Sig="public void ResetAccessRule (System.Security.AccessControl.CryptoKeyAccessRule rule);" />
    <Member Sig="public void SetAccessRule (System.Security.AccessControl.CryptoKeyAccessRule rule);" />
    <Member Sig="public void SetAuditRule (System.Security.AccessControl.CryptoKeyAuditRule rule);" />
  </Type>
  <Type Name="System.Security.AccessControl.CustomAce">
    <Member Sig="public byte[] GetOpaque ();" />
    <Member Sig="public CustomAce (System.Security.AccessControl.AceType type, System.Security.AccessControl.AceFlags flags, byte[] opaque);" />
    <Member Sig="public int OpaqueLength { get; }" />
    <Member Sig="public override int BinaryLength { get; }" />
    <Member Sig="public override void GetBinaryForm (byte[] binaryForm, int offset);" />
    <Member Sig="public static readonly int MaxOpaqueLength;" />
    <Member Sig="public void SetOpaque (byte[] opaque);" />
  </Type>
  <Type Name="System.Security.AccessControl.DirectoryObjectSecurity">
    <Member Sig="protected bool RemoveAccessRule (System.Security.AccessControl.ObjectAccessRule rule);" />
    <Member Sig="protected bool RemoveAuditRule (System.Security.AccessControl.ObjectAuditRule rule);" />
    <Member Sig="protected DirectoryObjectSecurity ();" />
    <Member Sig="protected DirectoryObjectSecurity (System.Security.AccessControl.CommonSecurityDescriptor securityDescriptor);" />
    <Member Sig="protected override bool ModifyAccess (System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AccessRule rule, out bool modified);" />
    <Member Sig="protected override bool ModifyAudit (System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AuditRule rule, out bool modified);" />
    <Member Sig="protected void AddAccessRule (System.Security.AccessControl.ObjectAccessRule rule);" />
    <Member Sig="protected void AddAuditRule (System.Security.AccessControl.ObjectAuditRule rule);" />
    <Member Sig="protected void RemoveAccessRuleAll (System.Security.AccessControl.ObjectAccessRule rule);" />
    <Member Sig="protected void RemoveAccessRuleSpecific (System.Security.AccessControl.ObjectAccessRule rule);" />
    <Member Sig="protected void RemoveAuditRuleAll (System.Security.AccessControl.ObjectAuditRule rule);" />
    <Member Sig="protected void RemoveAuditRuleSpecific (System.Security.AccessControl.ObjectAuditRule rule);" />
    <Member Sig="protected void ResetAccessRule (System.Security.AccessControl.ObjectAccessRule rule);" />
    <Member Sig="protected void SetAccessRule (System.Security.AccessControl.ObjectAccessRule rule);" />
    <Member Sig="protected void SetAuditRule (System.Security.AccessControl.ObjectAuditRule rule);" />
    <Member Sig="public System.Security.AccessControl.AuthorizationRuleCollection GetAccessRules (bool includeExplicit, bool includeInherited, Type targetType);" />
    <Member Sig="public System.Security.AccessControl.AuthorizationRuleCollection GetAuditRules (bool includeExplicit, bool includeInherited, Type targetType);" />
    <Member Sig="public virtual System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type, Guid objectType, Guid inheritedObjectType);" />
    <Member Sig="public virtual System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags, Guid objectType, Guid inheritedObjectType);" />
  </Type>
  <Type Name="System.Security.AccessControl.DirectorySecurity">
    <Member Sig="public DirectorySecurity ();" />
    <Member Sig="public DirectorySecurity (string name, System.Security.AccessControl.AccessControlSections includeSections);" />
  </Type>
  <Type Name="System.Security.AccessControl.DiscretionaryAcl">
    <Member Sig="public bool RemoveAccess (System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags);" />
    <Member Sig="public bool RemoveAccess (System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType);" />
    <Member Sig="public DiscretionaryAcl (bool isContainer, bool isDS, byte revision, int capacity);" />
    <Member Sig="public DiscretionaryAcl (bool isContainer, bool isDS, int capacity);" />
    <Member Sig="public DiscretionaryAcl (bool isContainer, bool isDS, System.Security.AccessControl.RawAcl rawAcl);" />
    <Member Sig="public void AddAccess (System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags);" />
    <Member Sig="public void AddAccess (System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType);" />
    <Member Sig="public void RemoveAccessSpecific (System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags);" />
    <Member Sig="public void RemoveAccessSpecific (System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType);" />
    <Member Sig="public void SetAccess (System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags);" />
    <Member Sig="public void SetAccess (System.Security.AccessControl.AccessControlType accessType, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType);" />
  </Type>
  <Type Name="System.Security.AccessControl.EventWaitHandleAccessRule">
    <Member Sig="public EventWaitHandleAccessRule (string identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);" />
    <Member Sig="public EventWaitHandleAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);" />
    <Member Sig="public System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights { get; }" />
  </Type>
  <Type Name="System.Security.AccessControl.EventWaitHandleAuditRule">
    <Member Sig="public EventWaitHandleAuditRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AuditFlags flags);" />
    <Member Sig="public System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights { get; }" />
  </Type>
  <Type Name="System.Security.AccessControl.EventWaitHandleRights">
    <Member Sig="ChangePermissions" />
    <Member Sig="Delete" />
    <Member Sig="FullControl" />
    <Member Sig="Modify" />
    <Member Sig="ReadPermissions" />
    <Member Sig="Synchronize" />
    <Member Sig="TakeOwnership" />
  </Type>
  <Type Name="System.Security.AccessControl.EventWaitHandleSecurity">
    <Member Sig="public bool RemoveAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);" />
    <Member Sig="public bool RemoveAuditRule (System.Security.AccessControl.EventWaitHandleAuditRule rule);" />
    <Member Sig="public EventWaitHandleSecurity ();" />
    <Member Sig="public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
    <Member Sig="public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
    <Member Sig="public override Type AccessRightType { get; }" />
    <Member Sig="public override Type AccessRuleType { get; }" />
    <Member Sig="public override Type AuditRuleType { get; }" />
    <Member Sig="public void AddAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);" />
    <Member Sig="public void AddAuditRule (System.Security.AccessControl.EventWaitHandleAuditRule rule);" />
    <Member Sig="public void RemoveAccessRuleAll (System.Security.AccessControl.EventWaitHandleAccessRule rule);" />
    <Member Sig="public void RemoveAccessRuleSpecific (System.Security.AccessControl.EventWaitHandleAccessRule rule);" />
    <Member Sig="public void RemoveAuditRuleAll (System.Security.AccessControl.EventWaitHandleAuditRule rule);" />
    <Member Sig="public void RemoveAuditRuleSpecific (System.Security.AccessControl.EventWaitHandleAuditRule rule);" />
    <Member Sig="public void ResetAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);" />
    <Member Sig="public void SetAccessRule (System.Security.AccessControl.EventWaitHandleAccessRule rule);" />
    <Member Sig="public void SetAuditRule (System.Security.AccessControl.EventWaitHandleAuditRule rule);" />
  </Type>
  <Type Name="System.Security.AccessControl.FileSecurity">
    <Member Sig="public FileSecurity ();" />
    <Member Sig="public FileSecurity (string fileName, System.Security.AccessControl.AccessControlSections includeSections);" />
  </Type>
  <Type Name="System.Security.AccessControl.FileSystemAccessRule">
    <Member Sig="public FileSystemAccessRule (string identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.AccessControlType type);" />
    <Member Sig="public FileSystemAccessRule (string identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
    <Member Sig="public FileSystemAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.AccessControlType type);" />
    <Member Sig="public FileSystemAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
    <Member Sig="public System.Security.AccessControl.FileSystemRights FileSystemRights { get; }" />
  </Type>
  <Type Name="System.Security.AccessControl.FileSystemAuditRule">
    <Member Sig="public FileSystemAuditRule (string identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.AuditFlags flags);" />
    <Member Sig="public FileSystemAuditRule (string identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
    <Member Sig="public FileSystemAuditRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.AuditFlags flags);" />
    <Member Sig="public FileSystemAuditRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.FileSystemRights fileSystemRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
    <Member Sig="public System.Security.AccessControl.FileSystemRights FileSystemRights { get; }" />
  </Type>
  <Type Name="System.Security.AccessControl.FileSystemRights">
    <Member Sig="AppendData" />
    <Member Sig="ChangePermissions" />
    <Member Sig="CreateDirectories" />
    <Member Sig="CreateFiles" />
    <Member Sig="Delete" />
    <Member Sig="DeleteSubdirectoriesAndFiles" />
    <Member Sig="ExecuteFile" />
    <Member Sig="FullControl" />
    <Member Sig="ListDirectory" />
    <Member Sig="Modify" />
    <Member Sig="Read" />
    <Member Sig="ReadAndExecute" />
    <Member Sig="ReadAttributes" />
    <Member Sig="ReadData" />
    <Member Sig="ReadExtendedAttributes" />
    <Member Sig="ReadPermissions" />
    <Member Sig="Synchronize" />
    <Member Sig="TakeOwnership" />
    <Member Sig="Traverse" />
    <Member Sig="Write" />
    <Member Sig="WriteAttributes" />
    <Member Sig="WriteData" />
    <Member Sig="WriteExtendedAttributes" />
  </Type>
  <Type Name="System.Security.AccessControl.FileSystemSecurity">
    <Member Sig="public bool RemoveAccessRule (System.Security.AccessControl.FileSystemAccessRule rule);" />
    <Member Sig="public bool RemoveAuditRule (System.Security.AccessControl.FileSystemAuditRule rule);" />
    <Member Sig="public override sealed System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
    <Member Sig="public override sealed System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
    <Member Sig="public override Type AccessRightType { get; }" />
    <Member Sig="public override Type AccessRuleType { get; }" />
    <Member Sig="public override Type AuditRuleType { get; }" />
    <Member Sig="public void AddAccessRule (System.Security.AccessControl.FileSystemAccessRule rule);" />
    <Member Sig="public void AddAuditRule (System.Security.AccessControl.FileSystemAuditRule rule);" />
    <Member Sig="public void RemoveAccessRuleAll (System.Security.AccessControl.FileSystemAccessRule rule);" />
    <Member Sig="public void RemoveAccessRuleSpecific (System.Security.AccessControl.FileSystemAccessRule rule);" />
    <Member Sig="public void RemoveAuditRuleAll (System.Security.AccessControl.FileSystemAuditRule rule);" />
    <Member Sig="public void RemoveAuditRuleSpecific (System.Security.AccessControl.FileSystemAuditRule rule);" />
    <Member Sig="public void ResetAccessRule (System.Security.AccessControl.FileSystemAccessRule rule);" />
    <Member Sig="public void SetAccessRule (System.Security.AccessControl.FileSystemAccessRule rule);" />
    <Member Sig="public void SetAuditRule (System.Security.AccessControl.FileSystemAuditRule rule);" />
  </Type>
  <Type Name="System.Security.AccessControl.GenericAce">
    <Member Sig="public abstract int BinaryLength { get; }" />
    <Member Sig="public abstract void GetBinaryForm (byte[] binaryForm, int offset);" />
    <Member Sig="public bool IsInherited { get; }" />
    <Member Sig="public override sealed bool Equals (object o);" />
    <Member Sig="public override sealed int GetHashCode ();" />
    <Member Sig="public static bool op_Equality (System.Security.AccessControl.GenericAce left, System.Security.AccessControl.GenericAce right);" />
    <Member Sig="public static bool op_Inequality (System.Security.AccessControl.GenericAce left, System.Security.AccessControl.GenericAce right);" />
    <Member Sig="public static System.Security.AccessControl.GenericAce CreateFromBinaryForm (byte[] binaryForm, int offset);" />
    <Member Sig="public System.Security.AccessControl.AceFlags AceFlags { get; set; }" />
    <Member Sig="public System.Security.AccessControl.AceType AceType { get; }" />
    <Member Sig="public System.Security.AccessControl.AuditFlags AuditFlags { get; }" />
    <Member Sig="public System.Security.AccessControl.GenericAce Copy ();" />
    <Member Sig="public System.Security.AccessControl.InheritanceFlags InheritanceFlags { get; }" />
    <Member Sig="public System.Security.AccessControl.PropagationFlags PropagationFlags { get; }" />
  </Type>
  <Type Name="System.Security.AccessControl.GenericAcl">
    <Member Sig="protected GenericAcl ();" />
    <Member Sig="public abstract byte Revision { get; }" />
    <Member Sig="public abstract int BinaryLength { get; }" />
    <Member Sig="public abstract int Count { get; }" />
    <Member Sig="public abstract System.Security.AccessControl.GenericAce this[int index] { get; set; }" />
    <Member Sig="public abstract void GetBinaryForm (byte[] binaryForm, int offset);" />
    <Member Sig="public bool IsSynchronized { get; }" />
    <Member Sig="public object SyncRoot { get; }" />
    <Member Sig="public static readonly byte AclRevision;" />
    <Member Sig="public static readonly byte AclRevisionDS;" />
    <Member Sig="public static readonly int MaxBinaryLength;" />
    <Member Sig="public System.Security.AccessControl.AceEnumerator GetEnumerator ();" />
    <Member Sig="public void CopyTo (System.Security.AccessControl.GenericAce[] array, int index);" />
    <Member Sig="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
    <Member Sig="void ICollection.CopyTo (Array array, int index);" />
  </Type>
  <Type Name="System.Security.AccessControl.GenericSecurityDescriptor">
    <Member Sig="protected GenericSecurityDescriptor ();" />
    <Member Sig="public abstract System.Security.AccessControl.ControlFlags ControlFlags { get; }" />
    <Member Sig="public abstract System.Security.Principal.SecurityIdentifier Group { get; set; }" />
    <Member Sig="public abstract System.Security.Principal.SecurityIdentifier Owner { get; set; }" />
    <Member Sig="public int BinaryLength { get; }" />
    <Member Sig="public static bool IsSddlConversionSupported ();" />
    <Member Sig="public static byte Revision { get; }" />
    <Member Sig="public string GetSddlForm (System.Security.AccessControl.AccessControlSections includeSections);" />
    <Member Sig="public void GetBinaryForm (byte[] binaryForm, int offset);" />
  </Type>
  <Type Name="System.Security.AccessControl.InheritanceFlags">
    <Member Sig="ContainerInherit" />
    <Member Sig="None" />
    <Member Sig="ObjectInherit" />
  </Type>
  <Type Name="System.Security.AccessControl.KnownAce">
    <Member Sig="public int AccessMask { get; set; }" />
    <Member Sig="public System.Security.Principal.SecurityIdentifier SecurityIdentifier { get; set; }" />
  </Type>
  <Type Name="System.Security.AccessControl.MutexAccessRule">
    <Member Sig="public MutexAccessRule (string identity, System.Security.AccessControl.MutexRights eventRights, System.Security.AccessControl.AccessControlType type);" />
    <Member Sig="public MutexAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.MutexRights eventRights, System.Security.AccessControl.AccessControlType type);" />
    <Member Sig="public System.Security.AccessControl.MutexRights MutexRights { get; }" />
  </Type>
  <Type Name="System.Security.AccessControl.MutexAuditRule">
    <Member Sig="public MutexAuditRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.MutexRights eventRights, System.Security.AccessControl.AuditFlags flags);" />
    <Member Sig="public System.Security.AccessControl.MutexRights MutexRights { get; }" />
  </Type>
  <Type Name="System.Security.AccessControl.MutexRights">
    <Member Sig="ChangePermissions" />
    <Member Sig="Delete" />
    <Member Sig="FullControl" />
    <Member Sig="Modify" />
    <Member Sig="ReadPermissions" />
    <Member Sig="Synchronize" />
    <Member Sig="TakeOwnership" />
  </Type>
  <Type Name="System.Security.AccessControl.MutexSecurity">
    <Member Sig="public bool RemoveAccessRule (System.Security.AccessControl.MutexAccessRule rule);" />
    <Member Sig="public bool RemoveAuditRule (System.Security.AccessControl.MutexAuditRule rule);" />
    <Member Sig="public MutexSecurity ();" />
    <Member Sig="public MutexSecurity (string name, System.Security.AccessControl.AccessControlSections includeSections);" />
    <Member Sig="public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
    <Member Sig="public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
    <Member Sig="public override Type AccessRightType { get; }" />
    <Member Sig="public override Type AccessRuleType { get; }" />
    <Member Sig="public override Type AuditRuleType { get; }" />
    <Member Sig="public void AddAccessRule (System.Security.AccessControl.MutexAccessRule rule);" />
    <Member Sig="public void AddAuditRule (System.Security.AccessControl.MutexAuditRule rule);" />
    <Member Sig="public void RemoveAccessRuleAll (System.Security.AccessControl.MutexAccessRule rule);" />
    <Member Sig="public void RemoveAccessRuleSpecific (System.Security.AccessControl.MutexAccessRule rule);" />
    <Member Sig="public void RemoveAuditRuleAll (System.Security.AccessControl.MutexAuditRule rule);" />
    <Member Sig="public void RemoveAuditRuleSpecific (System.Security.AccessControl.MutexAuditRule rule);" />
    <Member Sig="public void ResetAccessRule (System.Security.AccessControl.MutexAccessRule rule);" />
    <Member Sig="public void SetAccessRule (System.Security.AccessControl.MutexAccessRule rule);" />
    <Member Sig="public void SetAuditRule (System.Security.AccessControl.MutexAuditRule rule);" />
  </Type>
  <Type Name="System.Security.AccessControl.NativeObjectSecurity">
    <Member Sig="protected NativeObjectSecurity (bool isContainer, System.Security.AccessControl.ResourceType resourceType);" />
    <Member Sig="protected NativeObjectSecurity (bool isContainer, System.Security.AccessControl.ResourceType resourceType, string name, System.Security.AccessControl.AccessControlSections includeSections);" />
    <Member Sig="protected NativeObjectSecurity (bool isContainer, System.Security.AccessControl.ResourceType resourceType, string name, System.Security.AccessControl.AccessControlSections includeSections, System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext);" />
    <Member Sig="protected NativeObjectSecurity (bool isContainer, System.Security.AccessControl.ResourceType resourceType, System.Runtime.InteropServices.SafeHandle handle, System.Security.AccessControl.AccessControlSections includeSections);" />
    <Member Sig="protected NativeObjectSecurity (bool isContainer, System.Security.AccessControl.ResourceType resourceType, System.Runtime.InteropServices.SafeHandle handle, System.Security.AccessControl.AccessControlSections includeSections, System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext);" />
    <Member Sig="protected NativeObjectSecurity (bool isContainer, System.Security.AccessControl.ResourceType resourceType, System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext);" />
    <Member Sig="protected override sealed void Persist (string name, System.Security.AccessControl.AccessControlSections includeSections);" />
    <Member Sig="protected override sealed void Persist (System.Runtime.InteropServices.SafeHandle handle, System.Security.AccessControl.AccessControlSections includeSections);" />
    <Member Sig="protected void Persist (string name, System.Security.AccessControl.AccessControlSections includeSections, object exceptionContext);" />
    <Member Sig="protected void Persist (System.Runtime.InteropServices.SafeHandle handle, System.Security.AccessControl.AccessControlSections includeSections, object exceptionContext);" />
  </Type>
  <Type Name="System.Security.AccessControl.NativeObjectSecurity/ExceptionFromErrorCode" />
  <Type Name="System.Security.AccessControl.ObjectAccessRule">
    <Member Sig="protected ObjectAccessRule (System.Security.Principal.IdentityReference identity, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, Guid objectType, Guid inheritedObjectType, System.Security.AccessControl.AccessControlType type);" />
    <Member Sig="public Guid InheritedObjectType { get; }" />
    <Member Sig="public Guid ObjectType { get; }" />
    <Member Sig="public System.Security.AccessControl.ObjectAceFlags ObjectFlags { get; }" />
  </Type>
  <Type Name="System.Security.AccessControl.ObjectAce">
    <Member Sig="public Guid InheritedObjectAceType { get; set; }" />
    <Member Sig="public Guid ObjectAceType { get; set; }" />
    <Member Sig="public ObjectAce (System.Security.AccessControl.AceFlags aceFlags, System.Security.AccessControl.AceQualifier qualifier, int accessMask, System.Security.Principal.SecurityIdentifier sid, System.Security.AccessControl.ObjectAceFlags flags, Guid type, Guid inheritedType, bool isCallback, byte[] opaque);" />
    <Member Sig="public override int BinaryLength { get; }" />
    <Member Sig="public override void GetBinaryForm (byte[] binaryForm, int offset);" />
    <Member Sig="public static int MaxOpaqueLength (bool isCallback);" />
    <Member Sig="public System.Security.AccessControl.ObjectAceFlags ObjectAceFlags { get; set; }" />
  </Type>
  <Type Name="System.Security.AccessControl.ObjectAceFlags">
    <Member Sig="InheritedObjectAceTypePresent" />
    <Member Sig="None" />
    <Member Sig="ObjectAceTypePresent" />
  </Type>
  <Type Name="System.Security.AccessControl.ObjectAuditRule">
    <Member Sig="protected ObjectAuditRule (System.Security.Principal.IdentityReference identity, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, Guid objectType, Guid inheritedObjectType, System.Security.AccessControl.AuditFlags auditFlags);" />
    <Member Sig="public Guid InheritedObjectType { get; }" />
    <Member Sig="public Guid ObjectType { get; }" />
    <Member Sig="public System.Security.AccessControl.ObjectAceFlags ObjectFlags { get; }" />
  </Type>
  <Type Name="System.Security.AccessControl.ObjectSecurity">
    <Member Sig="protected abstract bool ModifyAccess (System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AccessRule rule, out bool modified);" />
    <Member Sig="protected abstract bool ModifyAudit (System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AuditRule rule, out bool modified);" />
    <Member Sig="protected bool AccessRulesModified { get; set; }" />
    <Member Sig="protected bool AuditRulesModified { get; set; }" />
    <Member Sig="protected bool GroupModified { get; set; }" />
    <Member Sig="protected bool IsContainer { get; }" />
    <Member Sig="protected bool IsDS { get; }" />
    <Member Sig="protected bool OwnerModified { get; set; }" />
    <Member Sig="protected ObjectSecurity (bool isContainer, bool isDS);" />
    <Member Sig="protected virtual void Persist (bool enableOwnershipPrivilege, string name, System.Security.AccessControl.AccessControlSections includeSections);" />
    <Member Sig="protected virtual void Persist (string name, System.Security.AccessControl.AccessControlSections includeSections);" />
    <Member Sig="protected virtual void Persist (System.Runtime.InteropServices.SafeHandle handle, System.Security.AccessControl.AccessControlSections includeSections);" />
    <Member Sig="protected void ReadLock ();" />
    <Member Sig="protected void ReadUnlock ();" />
    <Member Sig="protected void WriteLock ();" />
    <Member Sig="protected void WriteUnlock ();" />
    <Member Sig="public abstract System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
    <Member Sig="public abstract System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
    <Member Sig="public abstract Type AccessRightType { get; }" />
    <Member Sig="public abstract Type AccessRuleType { get; }" />
    <Member Sig="public abstract Type AuditRuleType { get; }" />
    <Member Sig="public bool AreAccessRulesCanonical { get; }" />
    <Member Sig="public bool AreAccessRulesProtected { get; }" />
    <Member Sig="public bool AreAuditRulesCanonical { get; }" />
    <Member Sig="public bool AreAuditRulesProtected { get; }" />
    <Member Sig="public byte[] GetSecurityDescriptorBinaryForm ();" />
    <Member Sig="public static bool IsSddlConversionSupported ();" />
    <Member Sig="public string GetSecurityDescriptorSddlForm (System.Security.AccessControl.AccessControlSections includeSections);" />
    <Member Sig="public System.Security.Principal.IdentityReference GetGroup (Type targetType);" />
    <Member Sig="public System.Security.Principal.IdentityReference GetOwner (Type targetType);" />
    <Member Sig="public virtual bool ModifyAccessRule (System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AccessRule rule, out bool modified);" />
    <Member Sig="public virtual bool ModifyAuditRule (System.Security.AccessControl.AccessControlModification modification, System.Security.AccessControl.AuditRule rule, out bool modified);" />
    <Member Sig="public virtual void PurgeAccessRules (System.Security.Principal.IdentityReference identity);" />
    <Member Sig="public virtual void PurgeAuditRules (System.Security.Principal.IdentityReference identity);" />
    <Member Sig="public void SetAccessRuleProtection (bool isProtected, bool preserveInheritance);" />
    <Member Sig="public void SetAuditRuleProtection (bool isProtected, bool preserveInheritance);" />
    <Member Sig="public void SetGroup (System.Security.Principal.IdentityReference identity);" />
    <Member Sig="public void SetOwner (System.Security.Principal.IdentityReference identity);" />
    <Member Sig="public void SetSecurityDescriptorBinaryForm (byte[] binaryForm);" />
    <Member Sig="public void SetSecurityDescriptorBinaryForm (byte[] binaryForm, System.Security.AccessControl.AccessControlSections includeSections);" />
    <Member Sig="public void SetSecurityDescriptorSddlForm (string sddlForm);" />
    <Member Sig="public void SetSecurityDescriptorSddlForm (string sddlForm, System.Security.AccessControl.AccessControlSections includeSections);" />
  </Type>
  <Type Name="System.Security.AccessControl.PrivilegeNotHeldException">
    <Member Sig="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public PrivilegeNotHeldException ();" />
    <Member Sig="public PrivilegeNotHeldException (string privilege);" />
    <Member Sig="public PrivilegeNotHeldException (string privilege, Exception inner);" />
    <Member Sig="public string PrivilegeName { get; }" />
  </Type>
  <Type Name="System.Security.AccessControl.PropagationFlags">
    <Member Sig="InheritOnly" />
    <Member Sig="None" />
    <Member Sig="NoPropagateInherit" />
  </Type>
  <Type Name="System.Security.AccessControl.QualifiedAce">
    <Member Sig="public bool IsCallback { get; }" />
    <Member Sig="public byte[] GetOpaque ();" />
    <Member Sig="public int OpaqueLength { get; }" />
    <Member Sig="public System.Security.AccessControl.AceQualifier AceQualifier { get; }" />
    <Member Sig="public void SetOpaque (byte[] opaque);" />
  </Type>
  <Type Name="System.Security.AccessControl.RawAcl">
    <Member Sig="public override byte Revision { get; }" />
    <Member Sig="public override int BinaryLength { get; }" />
    <Member Sig="public override int Count { get; }" />
    <Member Sig="public override System.Security.AccessControl.GenericAce this[int index] { get; set; }" />
    <Member Sig="public override void GetBinaryForm (byte[] binaryForm, int offset);" />
    <Member Sig="public RawAcl (byte revision, int capacity);" />
    <Member Sig="public RawAcl (byte[] binaryForm, int offset);" />
    <Member Sig="public void InsertAce (int index, System.Security.AccessControl.GenericAce ace);" />
    <Member Sig="public void RemoveAce (int index);" />
  </Type>
  <Type Name="System.Security.AccessControl.RawSecurityDescriptor">
    <Member Sig="public byte ResourceManagerControl { get; set; }" />
    <Member Sig="public override System.Security.AccessControl.ControlFlags ControlFlags { get; }" />
    <Member Sig="public override System.Security.Principal.SecurityIdentifier Group { get; set; }" />
    <Member Sig="public override System.Security.Principal.SecurityIdentifier Owner { get; set; }" />
    <Member Sig="public RawSecurityDescriptor (byte[] binaryForm, int offset);" />
    <Member Sig="public RawSecurityDescriptor (string sddlForm);" />
    <Member Sig="public RawSecurityDescriptor (System.Security.AccessControl.ControlFlags flags, System.Security.Principal.SecurityIdentifier owner, System.Security.Principal.SecurityIdentifier group, System.Security.AccessControl.RawAcl systemAcl, System.Security.AccessControl.RawAcl discretionaryAcl);" />
    <Member Sig="public System.Security.AccessControl.RawAcl DiscretionaryAcl { get; set; }" />
    <Member Sig="public System.Security.AccessControl.RawAcl SystemAcl { get; set; }" />
    <Member Sig="public void SetFlags (System.Security.AccessControl.ControlFlags flags);" />
  </Type>
  <Type Name="System.Security.AccessControl.RegistryAccessRule">
    <Member Sig="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
    <Member Sig="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
    <Member Sig="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
    <Member Sig="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
    <Member Sig="public System.Security.AccessControl.RegistryRights RegistryRights { get; }" />
  </Type>
  <Type Name="System.Security.AccessControl.RegistryAuditRule">
    <Member Sig="public RegistryAuditRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
    <Member Sig="public RegistryAuditRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
    <Member Sig="public System.Security.AccessControl.RegistryRights RegistryRights { get; }" />
  </Type>
  <Type Name="System.Security.AccessControl.RegistryRights">
    <Member Sig="ChangePermissions" />
    <Member Sig="CreateLink" />
    <Member Sig="CreateSubKey" />
    <Member Sig="Delete" />
    <Member Sig="EnumerateSubKeys" />
    <Member Sig="ExecuteKey" />
    <Member Sig="FullControl" />
    <Member Sig="Notify" />
    <Member Sig="QueryValues" />
    <Member Sig="ReadKey" />
    <Member Sig="ReadPermissions" />
    <Member Sig="SetValue" />
    <Member Sig="TakeOwnership" />
    <Member Sig="WriteKey" />
  </Type>
  <Type Name="System.Security.AccessControl.RegistrySecurity">
    <Member Sig="public bool RemoveAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
    <Member Sig="public bool RemoveAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
    <Member Sig="public override System.Security.AccessControl.AccessRule AccessRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
    <Member Sig="public override System.Security.AccessControl.AuditRule AuditRuleFactory (System.Security.Principal.IdentityReference identityReference, int accessMask, bool isInherited, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
    <Member Sig="public override Type AccessRightType { get; }" />
    <Member Sig="public override Type AccessRuleType { get; }" />
    <Member Sig="public override Type AuditRuleType { get; }" />
    <Member Sig="public RegistrySecurity ();" />
    <Member Sig="public void AddAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
    <Member Sig="public void AddAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
    <Member Sig="public void RemoveAccessRuleAll (System.Security.AccessControl.RegistryAccessRule rule);" />
    <Member Sig="public void RemoveAccessRuleSpecific (System.Security.AccessControl.RegistryAccessRule rule);" />
    <Member Sig="public void RemoveAuditRuleAll (System.Security.AccessControl.RegistryAuditRule rule);" />
    <Member Sig="public void RemoveAuditRuleSpecific (System.Security.AccessControl.RegistryAuditRule rule);" />
    <Member Sig="public void ResetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
    <Member Sig="public void SetAccessRule (System.Security.AccessControl.RegistryAccessRule rule);" />
    <Member Sig="public void SetAuditRule (System.Security.AccessControl.RegistryAuditRule rule);" />
  </Type>
  <Type Name="System.Security.AccessControl.ResourceType">
    <Member Sig="DSObject" />
    <Member Sig="DSObjectAll" />
    <Member Sig="FileObject" />
    <Member Sig="KernelObject" />
    <Member Sig="LMShare" />
    <Member Sig="Printer" />
    <Member Sig="ProviderDefined" />
    <Member Sig="RegistryKey" />
    <Member Sig="RegistryWow6432Key" />
    <Member Sig="Service" />
    <Member Sig="Unknown" />
    <Member Sig="WindowObject" />
    <Member Sig="WmiGuidObject" />
  </Type>
  <Type Name="System.Security.AccessControl.SecurityInfos">
    <Member Sig="DiscretionaryAcl" />
    <Member Sig="Group" />
    <Member Sig="Owner" />
    <Member Sig="SystemAcl" />
  </Type>
  <Type Name="System.Security.AccessControl.SystemAcl">
    <Member Sig="public bool RemoveAudit (System.Security.AccessControl.AuditFlags auditFlags, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags);" />
    <Member Sig="public bool RemoveAudit (System.Security.AccessControl.AuditFlags auditFlags, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType);" />
    <Member Sig="public SystemAcl (bool isContainer, bool isDS, byte revision, int capacity);" />
    <Member Sig="public SystemAcl (bool isContainer, bool isDS, int capacity);" />
    <Member Sig="public SystemAcl (bool isContainer, bool isDS, System.Security.AccessControl.RawAcl rawAcl);" />
    <Member Sig="public void AddAudit (System.Security.AccessControl.AuditFlags auditFlags, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags);" />
    <Member Sig="public void AddAudit (System.Security.AccessControl.AuditFlags auditFlags, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType);" />
    <Member Sig="public void RemoveAuditSpecific (System.Security.AccessControl.AuditFlags auditFlags, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags);" />
    <Member Sig="public void RemoveAuditSpecific (System.Security.AccessControl.AuditFlags auditFlags, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType);" />
    <Member Sig="public void SetAudit (System.Security.AccessControl.AuditFlags auditFlags, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags);" />
    <Member Sig="public void SetAudit (System.Security.AccessControl.AuditFlags auditFlags, System.Security.Principal.SecurityIdentifier sid, int accessMask, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.ObjectAceFlags objectFlags, Guid objectType, Guid inheritedObjectType);" />
  </Type>
  <Type Name="System.Security.AllowPartiallyTrustedCallersAttribute">
    <Member Sig="public AllowPartiallyTrustedCallersAttribute ();" />
  </Type>
  <Type Name="System.Security.CodeAccessPermission">
    <Member Sig="protected CodeAccessPermission ();" />
    <Member Sig="public abstract bool IsSubsetOf (System.Security.IPermission target);" />
    <Member Sig="public abstract System.Security.IPermission Copy ();" />
    <Member Sig="public abstract System.Security.IPermission Intersect (System.Security.IPermission target);" />
    <Member Sig="public abstract System.Security.SecurityElement ToXml ();" />
    <Member Sig="public abstract void FromXml (System.Security.SecurityElement elem);" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static void RevertAll ();" />
    <Member Sig="public static void RevertAssert ();" />
    <Member Sig="public static void RevertDeny ();" />
    <Member Sig="public static void RevertPermitOnly ();" />
    <Member Sig="public virtual System.Security.IPermission Union (System.Security.IPermission other);" />
    <Member Sig="public void Assert ();" />
    <Member Sig="public void Demand ();" />
    <Member Sig="public void Deny ();" />
    <Member Sig="public void PermitOnly ();" />
  </Type>
  <Type Name="System.Security.Cryptography.AsymmetricAlgorithm">
    <Member Sig="protected abstract void Dispose (bool disposing);" />
    <Member Sig="protected AsymmetricAlgorithm ();" />
    <Member Sig="protected int KeySizeValue;" />
    <Member Sig="protected System.Security.Cryptography.KeySizes[] LegalKeySizesValue;" />
    <Member Sig="public abstract string KeyExchangeAlgorithm { get; }" />
    <Member Sig="public abstract string SignatureAlgorithm { get; }" />
    <Member Sig="public abstract string ToXmlString (bool includePrivateParameters);" />
    <Member Sig="public abstract void FromXmlString (string xmlString);" />
    <Member Sig="public static System.Security.Cryptography.AsymmetricAlgorithm Create ();" />
    <Member Sig="public static System.Security.Cryptography.AsymmetricAlgorithm Create (string algName);" />
    <Member Sig="public virtual int KeySize { get; set; }" />
    <Member Sig="public virtual System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }" />
    <Member Sig="public void Clear ();" />
    <Member Sig="void IDisposable.Dispose ();" />
  </Type>
  <Type Name="System.Security.Cryptography.AsymmetricKeyExchangeDeformatter">
    <Member Sig="protected AsymmetricKeyExchangeDeformatter ();" />
    <Member Sig="public abstract byte[] DecryptKeyExchange (byte[] rgb);" />
    <Member Sig="public abstract string Parameters { get; set; }" />
    <Member Sig="public abstract void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);" />
  </Type>
  <Type Name="System.Security.Cryptography.AsymmetricKeyExchangeFormatter">
    <Member Sig="protected AsymmetricKeyExchangeFormatter ();" />
    <Member Sig="public abstract byte[] CreateKeyExchange (byte[] data);" />
    <Member Sig="public abstract byte[] CreateKeyExchange (byte[] data, Type symAlgType);" />
    <Member Sig="public abstract string Parameters { get; }" />
    <Member Sig="public abstract void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);" />
  </Type>
  <Type Name="System.Security.Cryptography.AsymmetricSignatureDeformatter">
    <Member Sig="protected AsymmetricSignatureDeformatter ();" />
    <Member Sig="public abstract bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);" />
    <Member Sig="public abstract void SetHashAlgorithm (string strName);" />
    <Member Sig="public abstract void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);" />
    <Member Sig="public virtual bool VerifySignature (System.Security.Cryptography.HashAlgorithm hash, byte[] rgbSignature);" />
  </Type>
  <Type Name="System.Security.Cryptography.AsymmetricSignatureFormatter">
    <Member Sig="protected AsymmetricSignatureFormatter ();" />
    <Member Sig="public abstract byte[] CreateSignature (byte[] rgbHash);" />
    <Member Sig="public abstract void SetHashAlgorithm (string strName);" />
    <Member Sig="public abstract void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);" />
    <Member Sig="public virtual byte[] CreateSignature (System.Security.Cryptography.HashAlgorithm hash);" />
  </Type>
  <Type Name="System.Security.Cryptography.CipherMode">
    <Member Sig="CBC" />
    <Member Sig="CFB" />
    <Member Sig="CTS" />
    <Member Sig="ECB" />
    <Member Sig="OFB" />
  </Type>
  <Type Name="System.Security.Cryptography.CryptoAPITransform">
    <Member Sig="public bool CanReuseTransform { get; }" />
    <Member Sig="public bool CanTransformMultipleBlocks { get; }" />
    <Member Sig="public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);" />
    <Member Sig="public int InputBlockSize { get; }" />
    <Member Sig="public int OutputBlockSize { get; }" />
    <Member Sig="public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);" />
    <Member Sig="public IntPtr KeyHandle { get; }" />
    <Member Sig="public void Clear ();" />
    <Member Sig="public void Reset ();" />
    <Member Sig="void IDisposable.Dispose ();" />
  </Type>
  <Type Name="System.Security.Cryptography.CryptoConfig">
    <Member Sig="public CryptoConfig ();" />
    <Member Sig="public static byte[] EncodeOID (string str);" />
    <Member Sig="public static object CreateFromName (string name);" />
    <Member Sig="public static object CreateFromName (string name, object[] args);" />
    <Member Sig="public static string MapNameToOID (string name);" />
  </Type>
  <Type Name="System.Security.Cryptography.CryptographicException">
    <Member Sig="protected CryptographicException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public CryptographicException ();" />
    <Member Sig="public CryptographicException (int hr);" />
    <Member Sig="public CryptographicException (string format, string insert);" />
    <Member Sig="public CryptographicException (string message);" />
    <Member Sig="public CryptographicException (string message, Exception inner);" />
  </Type>
  <Type Name="System.Security.Cryptography.CryptographicUnexpectedOperationException">
    <Member Sig="protected CryptographicUnexpectedOperationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public CryptographicUnexpectedOperationException ();" />
    <Member Sig="public CryptographicUnexpectedOperationException (string format, string insert);" />
    <Member Sig="public CryptographicUnexpectedOperationException (string message);" />
    <Member Sig="public CryptographicUnexpectedOperationException (string message, Exception inner);" />
  </Type>
  <Type Name="System.Security.Cryptography.CryptoStream">
    <Member Sig="protected override void Dispose (bool disposing);" />
    <Member Sig="public CryptoStream (System.IO.Stream stream, System.Security.Cryptography.ICryptoTransform transform, System.Security.Cryptography.CryptoStreamMode mode);" />
    <Member Sig="public override bool CanRead { get; }" />
    <Member Sig="public override bool CanSeek { get; }" />
    <Member Sig="public override bool CanWrite { get; }" />
    <Member Sig="public override int Read (byte[] buffer, int offset, int count);" />
    <Member Sig="public override long Length { get; }" />
    <Member Sig="public override long Position { get; set; }" />
    <Member Sig="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
    <Member Sig="public override void Flush ();" />
    <Member Sig="public override void SetLength (long value);" />
    <Member Sig="public override void Write (byte[] buffer, int offset, int count);" />
    <Member Sig="public void Clear ();" />
    <Member Sig="public void FlushFinalBlock ();" />
  </Type>
  <Type Name="System.Security.Cryptography.CryptoStreamMode">
    <Member Sig="Read" />
    <Member Sig="Write" />
  </Type>
  <Type Name="System.Security.Cryptography.CspKeyContainerInfo">
    <Member Sig="public bool Accessible { get; }" />
    <Member Sig="public bool Exportable { get; }" />
    <Member Sig="public bool HardwareDevice { get; }" />
    <Member Sig="public bool MachineKeyStore { get; }" />
    <Member Sig="public bool Protected { get; }" />
    <Member Sig="public bool RandomlyGenerated { get; }" />
    <Member Sig="public bool Removable { get; }" />
    <Member Sig="public CspKeyContainerInfo (System.Security.Cryptography.CspParameters parameters);" />
    <Member Sig="public int ProviderType { get; }" />
    <Member Sig="public string KeyContainerName { get; }" />
    <Member Sig="public string ProviderName { get; }" />
    <Member Sig="public string UniqueKeyContainerName { get; }" />
    <Member Sig="public System.Security.AccessControl.CryptoKeySecurity CryptoKeySecurity { get; }" />
    <Member Sig="public System.Security.Cryptography.KeyNumber KeyNumber { get; }" />
  </Type>
  <Type Name="System.Security.Cryptography.CspParameters">
    <Member Sig="public CspParameters ();" />
    <Member Sig="public CspParameters (int dwTypeIn);" />
    <Member Sig="public CspParameters (int dwTypeIn, string strProviderNameIn);" />
    <Member Sig="public CspParameters (int dwTypeIn, string strProviderNameIn, string strContainerNameIn);" />
    <Member Sig="public CspParameters (int providerType, string providerName, string keyContainerName, System.Security.AccessControl.CryptoKeySecurity cryptoKeySecurity, IntPtr parentWindowHandle);" />
    <Member Sig="public CspParameters (int providerType, string providerName, string keyContainerName, System.Security.AccessControl.CryptoKeySecurity cryptoKeySecurity, System.Security.SecureString keyPassword);" />
    <Member Sig="public int KeyNumber;" />
    <Member Sig="public int ProviderType;" />
    <Member Sig="public IntPtr ParentWindowHandle { get; set; }" />
    <Member Sig="public string KeyContainerName;" />
    <Member Sig="public string ProviderName;" />
    <Member Sig="public System.Security.AccessControl.CryptoKeySecurity CryptoKeySecurity { get; set; }" />
    <Member Sig="public System.Security.Cryptography.CspProviderFlags Flags { get; set; }" />
    <Member Sig="public System.Security.SecureString KeyPassword { get; set; }" />
  </Type>
  <Type Name="System.Security.Cryptography.CspProviderFlags">
    <Member Sig="NoFlags" />
    <Member Sig="NoPrompt" />
    <Member Sig="UseArchivableKey" />
    <Member Sig="UseDefaultKeyContainer" />
    <Member Sig="UseExistingKey" />
    <Member Sig="UseMachineKeyStore" />
    <Member Sig="UseNonExportableKey" />
    <Member Sig="UseUserProtectedKey" />
  </Type>
  <Type Name="System.Security.Cryptography.DeriveBytes">
    <Member Sig="protected DeriveBytes ();" />
    <Member Sig="public abstract byte[] GetBytes (int cb);" />
    <Member Sig="public abstract void Reset ();" />
  </Type>
  <Type Name="System.Security.Cryptography.DES">
    <Member Sig="protected DES ();" />
    <Member Sig="public override byte[] Key { get; set; }" />
    <Member Sig="public static bool IsSemiWeakKey (byte[] rgbKey);" />
    <Member Sig="public static bool IsWeakKey (byte[] rgbKey);" />
    <Member Sig="public static System.Security.Cryptography.DES Create ();" />
    <Member Sig="public static System.Security.Cryptography.DES Create (string algName);" />
  </Type>
  <Type Name="System.Security.Cryptography.DESCryptoServiceProvider">
    <Member Sig="public DESCryptoServiceProvider ();" />
    <Member Sig="public override System.Security.Cryptography.ICryptoTransform CreateDecryptor (byte[] rgbKey, byte[] rgbIV);" />
    <Member Sig="public override System.Security.Cryptography.ICryptoTransform CreateEncryptor (byte[] rgbKey, byte[] rgbIV);" />
    <Member Sig="public override void GenerateIV ();" />
    <Member Sig="public override void GenerateKey ();" />
  </Type>
  <Type Name="System.Security.Cryptography.DSA">
    <Member Sig="protected DSA ();" />
    <Member Sig="public abstract bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);" />
    <Member Sig="public abstract byte[] CreateSignature (byte[] rgbHash);" />
    <Member Sig="public abstract System.Security.Cryptography.DSAParameters ExportParameters (bool includePrivateParameters);" />
    <Member Sig="public abstract void ImportParameters (System.Security.Cryptography.DSAParameters parameters);" />
    <Member Sig="public override string ToXmlString (bool includePrivateParameters);" />
    <Member Sig="public override void FromXmlString (string xmlString);" />
    <Member Sig="public static System.Security.Cryptography.DSA Create ();" />
    <Member Sig="public static System.Security.Cryptography.DSA Create (string algName);" />
  </Type>
  <Type Name="System.Security.Cryptography.DSACryptoServiceProvider">
    <Member Sig="protected override void Dispose (bool disposing);" />
    <Member Sig="public bool PersistKeyInCsp { get; set; }" />
    <Member Sig="public bool PublicOnly { get; }" />
    <Member Sig="public bool VerifyData (byte[] rgbData, byte[] rgbSignature);" />
    <Member Sig="public bool VerifyHash (byte[] rgbHash, string str, byte[] rgbSignature);" />
    <Member Sig="public byte[] ExportCspBlob (bool includePrivateParameters);" />
    <Member Sig="public byte[] SignData (byte[] buffer);" />
    <Member Sig="public byte[] SignData (byte[] buffer, int offset, int count);" />
    <Member Sig="public byte[] SignData (System.IO.Stream inputStream);" />
    <Member Sig="public byte[] SignHash (byte[] rgbHash, string str);" />
    <Member Sig="public DSACryptoServiceProvider ();" />
    <Member Sig="public DSACryptoServiceProvider (int dwKeySize);" />
    <Member Sig="public DSACryptoServiceProvider (int dwKeySize, System.Security.Cryptography.CspParameters parameters);" />
    <Member Sig="public DSACryptoServiceProvider (System.Security.Cryptography.CspParameters parameters);" />
    <Member Sig="public override bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);" />
    <Member Sig="public override byte[] CreateSignature (byte[] rgbHash);" />
    <Member Sig="public override int KeySize { get; }" />
    <Member Sig="public override string KeyExchangeAlgorithm { get; }" />
    <Member Sig="public override string SignatureAlgorithm { get; }" />
    <Member Sig="public override System.Security.Cryptography.DSAParameters ExportParameters (bool includePrivateParameters);" />
    <Member Sig="public override void ImportParameters (System.Security.Cryptography.DSAParameters parameters);" />
    <Member Sig="public static bool UseMachineKeyStore { get; set; }" />
    <Member Sig="public System.Security.Cryptography.CspKeyContainerInfo CspKeyContainerInfo { get; }" />
    <Member Sig="public void ImportCspBlob (byte[] keyBlob);" />
  </Type>
  <Type Name="System.Security.Cryptography.DSAParameters">
    <Member Sig="public byte[] G;" />
    <Member Sig="public byte[] J;" />
    <Member Sig="public byte[] P;" />
    <Member Sig="public byte[] Q;" />
    <Member Sig="public byte[] Seed;" />
    <Member Sig="public byte[] X;" />
    <Member Sig="public byte[] Y;" />
    <Member Sig="public int Counter;" />
  </Type>
  <Type Name="System.Security.Cryptography.DSASignatureDeformatter">
    <Member Sig="public DSASignatureDeformatter ();" />
    <Member Sig="public DSASignatureDeformatter (System.Security.Cryptography.AsymmetricAlgorithm key);" />
    <Member Sig="public override bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);" />
    <Member Sig="public override void SetHashAlgorithm (string strName);" />
    <Member Sig="public override void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);" />
  </Type>
  <Type Name="System.Security.Cryptography.DSASignatureFormatter">
    <Member Sig="public DSASignatureFormatter ();" />
    <Member Sig="public DSASignatureFormatter (System.Security.Cryptography.AsymmetricAlgorithm key);" />
    <Member Sig="public override byte[] CreateSignature (byte[] rgbHash);" />
    <Member Sig="public override void SetHashAlgorithm (string strName);" />
    <Member Sig="public override void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);" />
  </Type>
  <Type Name="System.Security.Cryptography.FromBase64Transform">
    <Member Sig="~FromBase64Transform ();" />
    <Member Sig="protected virtual void Dispose (bool disposing);" />
    <Member Sig="public bool CanTransformMultipleBlocks { get; }" />
    <Member Sig="public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);" />
    <Member Sig="public FromBase64Transform ();" />
    <Member Sig="public FromBase64Transform (System.Security.Cryptography.FromBase64TransformMode whitespaces);" />
    <Member Sig="public int InputBlockSize { get; }" />
    <Member Sig="public int OutputBlockSize { get; }" />
    <Member Sig="public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);" />
    <Member Sig="public virtual bool CanReuseTransform { get; }" />
    <Member Sig="public void Clear ();" />
    <Member Sig="void IDisposable.Dispose ();" />
  </Type>
  <Type Name="System.Security.Cryptography.FromBase64TransformMode">
    <Member Sig="DoNotIgnoreWhiteSpaces" />
    <Member Sig="IgnoreWhiteSpaces" />
  </Type>
  <Type Name="System.Security.Cryptography.HashAlgorithm">
    <Member Sig="protected abstract byte[] HashFinal ();" />
    <Member Sig="protected abstract void HashCore (byte[] array, int ibStart, int cbSize);" />
    <Member Sig="protected byte[] HashValue;" />
    <Member Sig="protected HashAlgorithm ();" />
    <Member Sig="protected int HashSizeValue;" />
    <Member Sig="protected int State;" />
    <Member Sig="protected virtual void Dispose (bool disposing);" />
    <Member Sig="public abstract void Initialize ();" />
    <Member Sig="public byte[] ComputeHash (byte[] buffer);" />
    <Member Sig="public byte[] ComputeHash (byte[] buffer, int offset, int count);" />
    <Member Sig="public byte[] ComputeHash (System.IO.Stream inputStream);" />
    <Member Sig="public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);" />
    <Member Sig="public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);" />
    <Member Sig="public static System.Security.Cryptography.HashAlgorithm Create ();" />
    <Member Sig="public static System.Security.Cryptography.HashAlgorithm Create (string hashName);" />
    <Member Sig="public virtual bool CanReuseTransform { get; }" />
    <Member Sig="public virtual bool CanTransformMultipleBlocks { get; }" />
    <Member Sig="public virtual byte[] Hash { get; }" />
    <Member Sig="public virtual int HashSize { get; }" />
    <Member Sig="public virtual int InputBlockSize { get; }" />
    <Member Sig="public virtual int OutputBlockSize { get; }" />
    <Member Sig="public void Clear ();" />
    <Member Sig="void IDisposable.Dispose ();" />
  </Type>
  <Type Name="System.Security.Cryptography.HMAC">
    <Member Sig="protected HMAC ();" />
    <Member Sig="protected int BlockSizeValue { get; set; }" />
    <Member Sig="protected override byte[] HashFinal ();" />
    <Member Sig="protected override void Dispose (bool disposing);" />
    <Member Sig="protected override void HashCore (byte[] rgb, int ib, int cb);" />
    <Member Sig="public override byte[] Key { get; set; }" />
    <Member Sig="public override void Initialize ();" />
    <Member Sig="public static System.Security.Cryptography.HMAC Create ();" />
    <Member Sig="public static System.Security.Cryptography.HMAC Create (string algorithmName);" />
    <Member Sig="public string HashName { get; set; }" />
  </Type>
  <Type Name="System.Security.Cryptography.HMACMD5">
    <Member Sig="public HMACMD5 ();" />
    <Member Sig="public HMACMD5 (byte[] key);" />
  </Type>
  <Type Name="System.Security.Cryptography.HMACRIPEMD160">
    <Member Sig="public HMACRIPEMD160 ();" />
    <Member Sig="public HMACRIPEMD160 (byte[] key);" />
  </Type>
  <Type Name="System.Security.Cryptography.HMACSHA1">
    <Member Sig="public HMACSHA1 ();" />
    <Member Sig="public HMACSHA1 (byte[] key);" />
    <Member Sig="public HMACSHA1 (byte[] key, bool useManagedSha1);" />
  </Type>
  <Type Name="System.Security.Cryptography.HMACSHA256">
    <Member Sig="public HMACSHA256 ();" />
    <Member Sig="public HMACSHA256 (byte[] key);" />
  </Type>
  <Type Name="System.Security.Cryptography.HMACSHA384">
    <Member Sig="public bool ProduceLegacyHmacValues { get; set; }" />
    <Member Sig="public HMACSHA384 ();" />
    <Member Sig="public HMACSHA384 (byte[] key);" />
  </Type>
  <Type Name="System.Security.Cryptography.HMACSHA512">
    <Member Sig="public bool ProduceLegacyHmacValues { get; set; }" />
    <Member Sig="public HMACSHA512 ();" />
    <Member Sig="public HMACSHA512 (byte[] key);" />
  </Type>
  <Type Name="System.Security.Cryptography.ICryptoTransform">
    <Member Sig="public bool CanReuseTransform { get; }" />
    <Member Sig="public bool CanTransformMultipleBlocks { get; }" />
    <Member Sig="public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);" />
    <Member Sig="public int InputBlockSize { get; }" />
    <Member Sig="public int OutputBlockSize { get; }" />
    <Member Sig="public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);" />
  </Type>
  <Type Name="System.Security.Cryptography.ICspAsymmetricAlgorithm">
    <Member Sig="public byte[] ExportCspBlob (bool includePrivateParameters);" />
    <Member Sig="public System.Security.Cryptography.CspKeyContainerInfo CspKeyContainerInfo { get; }" />
    <Member Sig="public void ImportCspBlob (byte[] rawData);" />
  </Type>
  <Type Name="System.Security.Cryptography.KeyedHashAlgorithm">
    <Member Sig="protected byte[] KeyValue;" />
    <Member Sig="protected KeyedHashAlgorithm ();" />
    <Member Sig="protected override void Dispose (bool disposing);" />
    <Member Sig="public static System.Security.Cryptography.KeyedHashAlgorithm Create ();" />
    <Member Sig="public static System.Security.Cryptography.KeyedHashAlgorithm Create (string algName);" />
    <Member Sig="public virtual byte[] Key { get; set; }" />
  </Type>
  <Type Name="System.Security.Cryptography.KeyNumber">
    <Member Sig="Exchange" />
    <Member Sig="Signature" />
  </Type>
  <Type Name="System.Security.Cryptography.KeySizes">
    <Member Sig="public int MaxSize { get; }" />
    <Member Sig="public int MinSize { get; }" />
    <Member Sig="public int SkipSize { get; }" />
    <Member Sig="public KeySizes (int minSize, int maxSize, int skipSize);" />
  </Type>
  <Type Name="System.Security.Cryptography.MACTripleDES">
    <Member Sig="protected override byte[] HashFinal ();" />
    <Member Sig="protected override void Dispose (bool disposing);" />
    <Member Sig="protected override void HashCore (byte[] rgbData, int ibStart, int cbSize);" />
    <Member Sig="public MACTripleDES ();" />
    <Member Sig="public MACTripleDES (byte[] rgbKey);" />
    <Member Sig="public MACTripleDES (string strTripleDES, byte[] rgbKey);" />
    <Member Sig="public override void Initialize ();" />
    <Member Sig="public System.Security.Cryptography.PaddingMode Padding { get; set; }" />
  </Type>
  <Type Name="System.Security.Cryptography.MaskGenerationMethod">
    <Member Sig="protected MaskGenerationMethod ();" />
    <Member Sig="public abstract byte[] GenerateMask (byte[] rgbSeed, int cbReturn);" />
  </Type>
  <Type Name="System.Security.Cryptography.MD5">
    <Member Sig="protected MD5 ();" />
    <Member Sig="public static System.Security.Cryptography.MD5 Create ();" />
    <Member Sig="public static System.Security.Cryptography.MD5 Create (string algName);" />
  </Type>
  <Type Name="System.Security.Cryptography.MD5CryptoServiceProvider">
    <Member Sig="protected override byte[] HashFinal ();" />
    <Member Sig="protected override void Dispose (bool disposing);" />
    <Member Sig="protected override void HashCore (byte[] rgb, int ibStart, int cbSize);" />
    <Member Sig="public MD5CryptoServiceProvider ();" />
    <Member Sig="public override void Initialize ();" />
  </Type>
  <Type Name="System.Security.Cryptography.PaddingMode">
    <Member Sig="ANSIX923" />
    <Member Sig="ISO10126" />
    <Member Sig="None" />
    <Member Sig="PKCS7" />
    <Member Sig="Zeros" />
  </Type>
  <Type Name="System.Security.Cryptography.PasswordDeriveBytes">
    <Member Sig="public byte[] CryptDeriveKey (string algname, string alghashname, int keySize, byte[] rgbIV);" />
    <Member Sig="public byte[] Salt { get; set; }" />
    <Member Sig="public int IterationCount { get; set; }" />
    <Member Sig="public override byte[] GetBytes (int cb);" />
    <Member Sig="public override void Reset ();" />
    <Member Sig="public PasswordDeriveBytes (byte[] password, byte[] salt);" />
    <Member Sig="public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations);" />
    <Member Sig="public PasswordDeriveBytes (byte[] password, byte[] salt, string hashName, int iterations, System.Security.Cryptography.CspParameters cspParams);" />
    <Member Sig="public PasswordDeriveBytes (byte[] password, byte[] salt, System.Security.Cryptography.CspParameters cspParams);" />
    <Member Sig="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt);" />
    <Member Sig="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations);" />
    <Member Sig="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, string strHashName, int iterations, System.Security.Cryptography.CspParameters cspParams);" />
    <Member Sig="public PasswordDeriveBytes (string strPassword, byte[] rgbSalt, System.Security.Cryptography.CspParameters cspParams);" />
    <Member Sig="public string HashName { get; set; }" />
  </Type>
  <Type Name="System.Security.Cryptography.PKCS1MaskGenerationMethod">
    <Member Sig="public override byte[] GenerateMask (byte[] rgbSeed, int cbReturn);" />
    <Member Sig="public PKCS1MaskGenerationMethod ();" />
    <Member Sig="public string HashName { get; set; }" />
  </Type>
  <Type Name="System.Security.Cryptography.RandomNumberGenerator">
    <Member Sig="protected RandomNumberGenerator ();" />
    <Member Sig="public abstract void GetBytes (byte[] data);" />
    <Member Sig="public abstract void GetNonZeroBytes (byte[] data);" />
    <Member Sig="public static System.Security.Cryptography.RandomNumberGenerator Create ();" />
    <Member Sig="public static System.Security.Cryptography.RandomNumberGenerator Create (string rngName);" />
  </Type>
  <Type Name="System.Security.Cryptography.RC2">
    <Member Sig="protected int EffectiveKeySizeValue;" />
    <Member Sig="protected RC2 ();" />
    <Member Sig="public override int KeySize { get; set; }" />
    <Member Sig="public static System.Security.Cryptography.RC2 Create ();" />
    <Member Sig="public static System.Security.Cryptography.RC2 Create (string AlgName);" />
    <Member Sig="public virtual int EffectiveKeySize { get; set; }" />
  </Type>
  <Type Name="System.Security.Cryptography.RC2CryptoServiceProvider">
    <Member Sig="public bool UseSalt { get; set; }" />
    <Member Sig="public override int EffectiveKeySize { get; set; }" />
    <Member Sig="public override System.Security.Cryptography.ICryptoTransform CreateDecryptor (byte[] rgbKey, byte[] rgbIV);" />
    <Member Sig="public override System.Security.Cryptography.ICryptoTransform CreateEncryptor (byte[] rgbKey, byte[] rgbIV);" />
    <Member Sig="public override void GenerateIV ();" />
    <Member Sig="public override void GenerateKey ();" />
    <Member Sig="public RC2CryptoServiceProvider ();" />
  </Type>
  <Type Name="System.Security.Cryptography.Rfc2898DeriveBytes">
    <Member Sig="public byte[] Salt { get; set; }" />
    <Member Sig="public int IterationCount { get; set; }" />
    <Member Sig="public override byte[] GetBytes (int cb);" />
    <Member Sig="public override void Reset ();" />
    <Member Sig="public Rfc2898DeriveBytes (byte[] password, byte[] salt, int iterations);" />
    <Member Sig="public Rfc2898DeriveBytes (string password, byte[] salt);" />
    <Member Sig="public Rfc2898DeriveBytes (string password, byte[] salt, int iterations);" />
    <Member Sig="public Rfc2898DeriveBytes (string password, int saltSize);" />
    <Member Sig="public Rfc2898DeriveBytes (string password, int saltSize, int iterations);" />
  </Type>
  <Type Name="System.Security.Cryptography.Rijndael">
    <Member Sig="protected Rijndael ();" />
    <Member Sig="public static System.Security.Cryptography.Rijndael Create ();" />
    <Member Sig="public static System.Security.Cryptography.Rijndael Create (string algName);" />
  </Type>
  <Type Name="System.Security.Cryptography.RijndaelManaged">
    <Member Sig="public override System.Security.Cryptography.ICryptoTransform CreateDecryptor (byte[] rgbKey, byte[] rgbIV);" />
    <Member Sig="public override System.Security.Cryptography.ICryptoTransform CreateEncryptor (byte[] rgbKey, byte[] rgbIV);" />
    <Member Sig="public override void GenerateIV ();" />
    <Member Sig="public override void GenerateKey ();" />
    <Member Sig="public RijndaelManaged ();" />
  </Type>
  <Type Name="System.Security.Cryptography.RijndaelManagedTransform">
    <Member Sig="public bool CanReuseTransform { get; }" />
    <Member Sig="public bool CanTransformMultipleBlocks { get; }" />
    <Member Sig="public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);" />
    <Member Sig="public int BlockSizeValue { get; }" />
    <Member Sig="public int InputBlockSize { get; }" />
    <Member Sig="public int OutputBlockSize { get; }" />
    <Member Sig="public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);" />
    <Member Sig="public void Clear ();" />
    <Member Sig="public void Reset ();" />
    <Member Sig="void IDisposable.Dispose ();" />
  </Type>
  <Type Name="System.Security.Cryptography.RIPEMD160">
    <Member Sig="protected RIPEMD160 ();" />
    <Member Sig="public static System.Security.Cryptography.RIPEMD160 Create ();" />
    <Member Sig="public static System.Security.Cryptography.RIPEMD160 Create (string hashName);" />
  </Type>
  <Type Name="System.Security.Cryptography.RIPEMD160Managed">
    <Member Sig="protected override byte[] HashFinal ();" />
    <Member Sig="protected override void HashCore (byte[] rgb, int ibStart, int cbSize);" />
    <Member Sig="public override void Initialize ();" />
    <Member Sig="public RIPEMD160Managed ();" />
  </Type>
  <Type Name="System.Security.Cryptography.RNGCryptoServiceProvider">
    <Member Sig="public override void GetBytes (byte[] data);" />
    <Member Sig="public override void GetNonZeroBytes (byte[] data);" />
    <Member Sig="public RNGCryptoServiceProvider ();" />
    <Member Sig="public RNGCryptoServiceProvider (byte[] rgb);" />
    <Member Sig="public RNGCryptoServiceProvider (string str);" />
    <Member Sig="public RNGCryptoServiceProvider (System.Security.Cryptography.CspParameters cspParams);" />
  </Type>
  <Type Name="System.Security.Cryptography.RSA">
    <Member Sig="protected RSA ();" />
    <Member Sig="public abstract byte[] DecryptValue (byte[] rgb);" />
    <Member Sig="public abstract byte[] EncryptValue (byte[] rgb);" />
    <Member Sig="public abstract System.Security.Cryptography.RSAParameters ExportParameters (bool includePrivateParameters);" />
    <Member Sig="public abstract void ImportParameters (System.Security.Cryptography.RSAParameters parameters);" />
    <Member Sig="public override string ToXmlString (bool includePrivateParameters);" />
    <Member Sig="public override void FromXmlString (string xmlString);" />
    <Member Sig="public static System.Security.Cryptography.RSA Create ();" />
    <Member Sig="public static System.Security.Cryptography.RSA Create (string algName);" />
  </Type>
  <Type Name="System.Security.Cryptography.RSACryptoServiceProvider">
    <Member Sig="protected override void Dispose (bool disposing);" />
    <Member Sig="public bool PersistKeyInCsp { get; set; }" />
    <Member Sig="public bool PublicOnly { get; }" />
    <Member Sig="public bool VerifyData (byte[] buffer, object halg, byte[] signature);" />
    <Member Sig="public bool VerifyHash (byte[] rgbHash, string str, byte[] rgbSignature);" />
    <Member Sig="public byte[] Decrypt (byte[] rgb, bool fOAEP);" />
    <Member Sig="public byte[] Encrypt (byte[] rgb, bool fOAEP);" />
    <Member Sig="public byte[] ExportCspBlob (bool includePrivateParameters);" />
    <Member Sig="public byte[] SignData (byte[] buffer, int offset, int count, object halg);" />
    <Member Sig="public byte[] SignData (byte[] buffer, object halg);" />
    <Member Sig="public byte[] SignData (System.IO.Stream inputStream, object halg);" />
    <Member Sig="public byte[] SignHash (byte[] rgbHash, string str);" />
    <Member Sig="public override byte[] DecryptValue (byte[] rgb);" />
    <Member Sig="public override byte[] EncryptValue (byte[] rgb);" />
    <Member Sig="public override int KeySize { get; }" />
    <Member Sig="public override string KeyExchangeAlgorithm { get; }" />
    <Member Sig="public override string SignatureAlgorithm { get; }" />
    <Member Sig="public override System.Security.Cryptography.RSAParameters ExportParameters (bool includePrivateParameters);" />
    <Member Sig="public override void ImportParameters (System.Security.Cryptography.RSAParameters parameters);" />
    <Member Sig="public RSACryptoServiceProvider ();" />
    <Member Sig="public RSACryptoServiceProvider (int dwKeySize);" />
    <Member Sig="public RSACryptoServiceProvider (int dwKeySize, System.Security.Cryptography.CspParameters parameters);" />
    <Member Sig="public RSACryptoServiceProvider (System.Security.Cryptography.CspParameters parameters);" />
    <Member Sig="public static bool UseMachineKeyStore { get; set; }" />
    <Member Sig="public System.Security.Cryptography.CspKeyContainerInfo CspKeyContainerInfo { get; }" />
    <Member Sig="public void ImportCspBlob (byte[] keyBlob);" />
  </Type>
  <Type Name="System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter">
    <Member Sig="public override byte[] DecryptKeyExchange (byte[] rgbData);" />
    <Member Sig="public override string Parameters { get; set; }" />
    <Member Sig="public override void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);" />
    <Member Sig="public RSAOAEPKeyExchangeDeformatter ();" />
    <Member Sig="public RSAOAEPKeyExchangeDeformatter (System.Security.Cryptography.AsymmetricAlgorithm key);" />
  </Type>
  <Type Name="System.Security.Cryptography.RSAOAEPKeyExchangeFormatter">
    <Member Sig="public byte[] Parameter { get; set; }" />
    <Member Sig="public override byte[] CreateKeyExchange (byte[] rgbData);" />
    <Member Sig="public override byte[] CreateKeyExchange (byte[] rgbData, Type symAlgType);" />
    <Member Sig="public override string Parameters { get; }" />
    <Member Sig="public override void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);" />
    <Member Sig="public RSAOAEPKeyExchangeFormatter ();" />
    <Member Sig="public RSAOAEPKeyExchangeFormatter (System.Security.Cryptography.AsymmetricAlgorithm key);" />
    <Member Sig="public System.Security.Cryptography.RandomNumberGenerator Rng { get; set; }" />
  </Type>
  <Type Name="System.Security.Cryptography.RSAParameters">
    <Member Sig="public byte[] D;" />
    <Member Sig="public byte[] DP;" />
    <Member Sig="public byte[] DQ;" />
    <Member Sig="public byte[] Exponent;" />
    <Member Sig="public byte[] InverseQ;" />
    <Member Sig="public byte[] Modulus;" />
    <Member Sig="public byte[] P;" />
    <Member Sig="public byte[] Q;" />
  </Type>
  <Type Name="System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter">
    <Member Sig="public override byte[] DecryptKeyExchange (byte[] rgbIn);" />
    <Member Sig="public override string Parameters { get; set; }" />
    <Member Sig="public override void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);" />
    <Member Sig="public RSAPKCS1KeyExchangeDeformatter ();" />
    <Member Sig="public RSAPKCS1KeyExchangeDeformatter (System.Security.Cryptography.AsymmetricAlgorithm key);" />
    <Member Sig="public System.Security.Cryptography.RandomNumberGenerator RNG { get; set; }" />
  </Type>
  <Type Name="System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter">
    <Member Sig="public override byte[] CreateKeyExchange (byte[] rgbData);" />
    <Member Sig="public override byte[] CreateKeyExchange (byte[] rgbData, Type symAlgType);" />
    <Member Sig="public override string Parameters { get; }" />
    <Member Sig="public override void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);" />
    <Member Sig="public RSAPKCS1KeyExchangeFormatter ();" />
    <Member Sig="public RSAPKCS1KeyExchangeFormatter (System.Security.Cryptography.AsymmetricAlgorithm key);" />
    <Member Sig="public System.Security.Cryptography.RandomNumberGenerator Rng { get; set; }" />
  </Type>
  <Type Name="System.Security.Cryptography.RSAPKCS1SignatureDeformatter">
    <Member Sig="public override bool VerifySignature (byte[] rgbHash, byte[] rgbSignature);" />
    <Member Sig="public override void SetHashAlgorithm (string strName);" />
    <Member Sig="public override void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);" />
    <Member Sig="public RSAPKCS1SignatureDeformatter ();" />
    <Member Sig="public RSAPKCS1SignatureDeformatter (System.Security.Cryptography.AsymmetricAlgorithm key);" />
  </Type>
  <Type Name="System.Security.Cryptography.RSAPKCS1SignatureFormatter">
    <Member Sig="public override byte[] CreateSignature (byte[] rgbHash);" />
    <Member Sig="public override void SetHashAlgorithm (string strName);" />
    <Member Sig="public override void SetKey (System.Security.Cryptography.AsymmetricAlgorithm key);" />
    <Member Sig="public RSAPKCS1SignatureFormatter ();" />
    <Member Sig="public RSAPKCS1SignatureFormatter (System.Security.Cryptography.AsymmetricAlgorithm key);" />
  </Type>
  <Type Name="System.Security.Cryptography.SHA1">
    <Member Sig="protected SHA1 ();" />
    <Member Sig="public static System.Security.Cryptography.SHA1 Create ();" />
    <Member Sig="public static System.Security.Cryptography.SHA1 Create (string hashName);" />
  </Type>
  <Type Name="System.Security.Cryptography.SHA1CryptoServiceProvider">
    <Member Sig="protected override byte[] HashFinal ();" />
    <Member Sig="protected override void Dispose (bool disposing);" />
    <Member Sig="protected override void HashCore (byte[] rgb, int ibStart, int cbSize);" />
    <Member Sig="public override void Initialize ();" />
    <Member Sig="public SHA1CryptoServiceProvider ();" />
  </Type>
  <Type Name="System.Security.Cryptography.SHA1Managed">
    <Member Sig="protected override byte[] HashFinal ();" />
    <Member Sig="protected override void HashCore (byte[] rgb, int ibStart, int cbSize);" />
    <Member Sig="public override void Initialize ();" />
    <Member Sig="public SHA1Managed ();" />
  </Type>
  <Type Name="System.Security.Cryptography.SHA256">
    <Member Sig="protected SHA256 ();" />
    <Member Sig="public static System.Security.Cryptography.SHA256 Create ();" />
    <Member Sig="public static System.Security.Cryptography.SHA256 Create (string hashName);" />
  </Type>
  <Type Name="System.Security.Cryptography.SHA256Managed">
    <Member Sig="protected override byte[] HashFinal ();" />
    <Member Sig="protected override void HashCore (byte[] rgb, int ibStart, int cbSize);" />
    <Member Sig="public override void Initialize ();" />
    <Member Sig="public SHA256Managed ();" />
  </Type>
  <Type Name="System.Security.Cryptography.SHA384">
    <Member Sig="protected SHA384 ();" />
    <Member Sig="public static System.Security.Cryptography.SHA384 Create ();" />
    <Member Sig="public static System.Security.Cryptography.SHA384 Create (string hashName);" />
  </Type>
  <Type Name="System.Security.Cryptography.SHA384Managed">
    <Member Sig="protected override byte[] HashFinal ();" />
    <Member Sig="protected override void HashCore (byte[] rgb, int ibStart, int cbSize);" />
    <Member Sig="public override void Initialize ();" />
    <Member Sig="public SHA384Managed ();" />
  </Type>
  <Type Name="System.Security.Cryptography.SHA512">
    <Member Sig="protected SHA512 ();" />
    <Member Sig="public static System.Security.Cryptography.SHA512 Create ();" />
    <Member Sig="public static System.Security.Cryptography.SHA512 Create (string hashName);" />
  </Type>
  <Type Name="System.Security.Cryptography.SHA512Managed">
    <Member Sig="protected override byte[] HashFinal ();" />
    <Member Sig="protected override void HashCore (byte[] rgb, int ibStart, int cbSize);" />
    <Member Sig="public override void Initialize ();" />
    <Member Sig="public SHA512Managed ();" />
  </Type>
  <Type Name="System.Security.Cryptography.SignatureDescription">
    <Member Sig="public SignatureDescription ();" />
    <Member Sig="public SignatureDescription (System.Security.SecurityElement el);" />
    <Member Sig="public string DeformatterAlgorithm { get; set; }" />
    <Member Sig="public string DigestAlgorithm { get; set; }" />
    <Member Sig="public string FormatterAlgorithm { get; set; }" />
    <Member Sig="public string KeyAlgorithm { get; set; }" />
    <Member Sig="public virtual System.Security.Cryptography.AsymmetricSignatureDeformatter CreateDeformatter (System.Security.Cryptography.AsymmetricAlgorithm key);" />
    <Member Sig="public virtual System.Security.Cryptography.AsymmetricSignatureFormatter CreateFormatter (System.Security.Cryptography.AsymmetricAlgorithm key);" />
    <Member Sig="public virtual System.Security.Cryptography.HashAlgorithm CreateDigest ();" />
  </Type>
  <Type Name="System.Security.Cryptography.SymmetricAlgorithm">
    <Member Sig="protected byte[] IVValue;" />
    <Member Sig="protected byte[] KeyValue;" />
    <Member Sig="protected int BlockSizeValue;" />
    <Member Sig="protected int FeedbackSizeValue;" />
    <Member Sig="protected int KeySizeValue;" />
    <Member Sig="protected SymmetricAlgorithm ();" />
    <Member Sig="protected System.Security.Cryptography.CipherMode ModeValue;" />
    <Member Sig="protected System.Security.Cryptography.KeySizes[] LegalBlockSizesValue;" />
    <Member Sig="protected System.Security.Cryptography.KeySizes[] LegalKeySizesValue;" />
    <Member Sig="protected System.Security.Cryptography.PaddingMode PaddingValue;" />
    <Member Sig="protected virtual void Dispose (bool disposing);" />
    <Member Sig="public abstract System.Security.Cryptography.ICryptoTransform CreateDecryptor (byte[] rgbKey, byte[] rgbIV);" />
    <Member Sig="public abstract System.Security.Cryptography.ICryptoTransform CreateEncryptor (byte[] rgbKey, byte[] rgbIV);" />
    <Member Sig="public abstract void GenerateIV ();" />
    <Member Sig="public abstract void GenerateKey ();" />
    <Member Sig="public bool ValidKeySize (int bitLength);" />
    <Member Sig="public static System.Security.Cryptography.SymmetricAlgorithm Create ();" />
    <Member Sig="public static System.Security.Cryptography.SymmetricAlgorithm Create (string algName);" />
    <Member Sig="public virtual byte[] IV { get; set; }" />
    <Member Sig="public virtual byte[] Key { get; set; }" />
    <Member Sig="public virtual int BlockSize { get; set; }" />
    <Member Sig="public virtual int FeedbackSize { get; set; }" />
    <Member Sig="public virtual int KeySize { get; set; }" />
    <Member Sig="public virtual System.Security.Cryptography.CipherMode Mode { get; set; }" />
    <Member Sig="public virtual System.Security.Cryptography.ICryptoTransform CreateDecryptor ();" />
    <Member Sig="public virtual System.Security.Cryptography.ICryptoTransform CreateEncryptor ();" />
    <Member Sig="public virtual System.Security.Cryptography.KeySizes[] LegalBlockSizes { get; }" />
    <Member Sig="public virtual System.Security.Cryptography.KeySizes[] LegalKeySizes { get; }" />
    <Member Sig="public virtual System.Security.Cryptography.PaddingMode Padding { get; set; }" />
    <Member Sig="public void Clear ();" />
    <Member Sig="void IDisposable.Dispose ();" />
  </Type>
  <Type Name="System.Security.Cryptography.ToBase64Transform">
    <Member Sig="~ToBase64Transform ();" />
    <Member Sig="protected virtual void Dispose (bool disposing);" />
    <Member Sig="public bool CanTransformMultipleBlocks { get; }" />
    <Member Sig="public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);" />
    <Member Sig="public int InputBlockSize { get; }" />
    <Member Sig="public int OutputBlockSize { get; }" />
    <Member Sig="public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);" />
    <Member Sig="public ToBase64Transform ();" />
    <Member Sig="public virtual bool CanReuseTransform { get; }" />
    <Member Sig="public void Clear ();" />
    <Member Sig="void IDisposable.Dispose ();" />
  </Type>
  <Type Name="System.Security.Cryptography.TripleDES">
    <Member Sig="protected TripleDES ();" />
    <Member Sig="public override byte[] Key { get; set; }" />
    <Member Sig="public static bool IsWeakKey (byte[] rgbKey);" />
    <Member Sig="public static System.Security.Cryptography.TripleDES Create ();" />
    <Member Sig="public static System.Security.Cryptography.TripleDES Create (string str);" />
  </Type>
  <Type Name="System.Security.Cryptography.TripleDESCryptoServiceProvider">
    <Member Sig="public override System.Security.Cryptography.ICryptoTransform CreateDecryptor (byte[] rgbKey, byte[] rgbIV);" />
    <Member Sig="public override System.Security.Cryptography.ICryptoTransform CreateEncryptor (byte[] rgbKey, byte[] rgbIV);" />
    <Member Sig="public override void GenerateIV ();" />
    <Member Sig="public override void GenerateKey ();" />
    <Member Sig="public TripleDESCryptoServiceProvider ();" />
  </Type>
  <Type Name="System.Security.Cryptography.X509Certificates.X509Certificate">
    <Member Sig="public IntPtr Handle { get; }" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static System.Security.Cryptography.X509Certificates.X509Certificate CreateFromCertFile (string filename);" />
    <Member Sig="public static System.Security.Cryptography.X509Certificates.X509Certificate CreateFromSignedFile (string filename);" />
    <Member Sig="public string Issuer { get; }" />
    <Member Sig="public string Subject { get; }" />
    <Member Sig="public virtual bool Equals (System.Security.Cryptography.X509Certificates.X509Certificate other);" />
    <Member Sig="public virtual byte[] Export (System.Security.Cryptography.X509Certificates.X509ContentType contentType);" />
    <Member Sig="public virtual byte[] Export (System.Security.Cryptography.X509Certificates.X509ContentType contentType, string password);" />
    <Member Sig="public virtual byte[] Export (System.Security.Cryptography.X509Certificates.X509ContentType contentType, System.Security.SecureString password);" />
    <Member Sig="public virtual byte[] GetCertHash ();" />
    <Member Sig="public virtual byte[] GetKeyAlgorithmParameters ();" />
    <Member Sig="public virtual byte[] GetPublicKey ();" />
    <Member Sig="public virtual byte[] GetRawCertData ();" />
    <Member Sig="public virtual byte[] GetSerialNumber ();" />
    <Member Sig="public virtual string GetCertHashString ();" />
    <Member Sig="public virtual string GetEffectiveDateString ();" />
    <Member Sig="public virtual string GetExpirationDateString ();" />
    <Member Sig="public virtual string GetFormat ();" />
    <Member Sig="public virtual string GetIssuerName ();" />
    <Member Sig="public virtual string GetKeyAlgorithm ();" />
    <Member Sig="public virtual string GetKeyAlgorithmParametersString ();" />
    <Member Sig="public virtual string GetName ();" />
    <Member Sig="public virtual string GetPublicKeyString ();" />
    <Member Sig="public virtual string GetRawCertDataString ();" />
    <Member Sig="public virtual string GetSerialNumberString ();" />
    <Member Sig="public virtual string ToString (bool fVerbose);" />
    <Member Sig="public virtual void Import (byte[] rawData);" />
    <Member Sig="public virtual void Import (byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
    <Member Sig="public virtual void Import (byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
    <Member Sig="public virtual void Import (string fileName);" />
    <Member Sig="public virtual void Import (string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
    <Member Sig="public virtual void Import (string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
    <Member Sig="public virtual void Reset ();" />
    <Member Sig="public X509Certificate ();" />
    <Member Sig="public X509Certificate (byte[] data);" />
    <Member Sig="public X509Certificate (byte[] rawData, string password);" />
    <Member Sig="public X509Certificate (byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
    <Member Sig="public X509Certificate (byte[] rawData, System.Security.SecureString password);" />
    <Member Sig="public X509Certificate (byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
    <Member Sig="public X509Certificate (IntPtr handle);" />
    <Member Sig="public X509Certificate (string fileName);" />
    <Member Sig="public X509Certificate (string fileName, string password);" />
    <Member Sig="public X509Certificate (string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
    <Member Sig="public X509Certificate (string fileName, System.Security.SecureString password);" />
    <Member Sig="public X509Certificate (string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
    <Member Sig="public X509Certificate (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public X509Certificate (System.Security.Cryptography.X509Certificates.X509Certificate cert);" />
    <Member Sig="void IDeserializationCallback.OnDeserialization (object sender);" />
    <Member Sig="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.Security.Cryptography.X509Certificates.X509ContentType">
    <Member Sig="Authenticode" />
    <Member Sig="Cert" />
    <Member Sig="Pfx" />
    <Member Sig="Pkcs12" />
    <Member Sig="Pkcs7" />
    <Member Sig="SerializedCert" />
    <Member Sig="SerializedStore" />
    <Member Sig="Unknown" />
  </Type>
  <Type Name="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags">
    <Member Sig="DefaultKeySet" />
    <Member Sig="Exportable" />
    <Member Sig="MachineKeySet" />
    <Member Sig="PersistKeySet" />
    <Member Sig="UserKeySet" />
    <Member Sig="UserProtected" />
  </Type>
  <Type Name="System.Security.HostProtectionException">
    <Member Sig="protected HostProtectionException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public HostProtectionException ();" />
    <Member Sig="public HostProtectionException (string message);" />
    <Member Sig="public HostProtectionException (string message, Exception e);" />
    <Member Sig="public HostProtectionException (string message, System.Security.Permissions.HostProtectionResource protectedResources, System.Security.Permissions.HostProtectionResource demandedResources);" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public System.Security.Permissions.HostProtectionResource DemandedResources { get; }" />
    <Member Sig="public System.Security.Permissions.HostProtectionResource ProtectedResources { get; }" />
  </Type>
  <Type Name="System.Security.HostSecurityManager">
    <Member Sig="public HostSecurityManager ();" />
    <Member Sig="public virtual System.Security.HostSecurityManagerOptions Flags { get; }" />
    <Member Sig="public virtual System.Security.PermissionSet ResolvePolicy (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public virtual System.Security.Policy.ApplicationTrust DetermineApplicationTrust (System.Security.Policy.Evidence applicationEvidence, System.Security.Policy.Evidence activatorEvidence, System.Security.Policy.TrustManagerContext context);" />
    <Member Sig="public virtual System.Security.Policy.Evidence ProvideAppDomainEvidence (System.Security.Policy.Evidence inputEvidence);" />
    <Member Sig="public virtual System.Security.Policy.Evidence ProvideAssemblyEvidence (System.Reflection.Assembly loadedAssembly, System.Security.Policy.Evidence inputEvidence);" />
    <Member Sig="public virtual System.Security.Policy.PolicyLevel DomainPolicy { get; }" />
  </Type>
  <Type Name="System.Security.HostSecurityManagerOptions">
    <Member Sig="AllFlags" />
    <Member Sig="HostAppDomainEvidence" />
    <Member Sig="HostAssemblyEvidence" />
    <Member Sig="HostDetermineApplicationTrust" />
    <Member Sig="HostPolicyLevel" />
    <Member Sig="HostResolvePolicy" />
    <Member Sig="None" />
  </Type>
  <Type Name="System.Security.IEvidenceFactory">
    <Member Sig="public System.Security.Policy.Evidence Evidence { get; }" />
  </Type>
  <Type Name="System.Security.IPermission">
    <Member Sig="public bool IsSubsetOf (System.Security.IPermission target);" />
    <Member Sig="public System.Security.IPermission Copy ();" />
    <Member Sig="public System.Security.IPermission Intersect (System.Security.IPermission target);" />
    <Member Sig="public System.Security.IPermission Union (System.Security.IPermission target);" />
    <Member Sig="public void Demand ();" />
  </Type>
  <Type Name="System.Security.ISecurityEncodable">
    <Member Sig="public System.Security.SecurityElement ToXml ();" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e);" />
  </Type>
  <Type Name="System.Security.ISecurityPolicyEncodable">
    <Member Sig="public System.Security.SecurityElement ToXml (System.Security.Policy.PolicyLevel level);" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e, System.Security.Policy.PolicyLevel level);" />
  </Type>
  <Type Name="System.Security.IStackWalk">
    <Member Sig="public void Assert ();" />
    <Member Sig="public void Demand ();" />
    <Member Sig="public void Deny ();" />
    <Member Sig="public void PermitOnly ();" />
  </Type>
  <Type Name="System.Security.NamedPermissionSet">
    <Member Sig="public NamedPermissionSet (string name);" />
    <Member Sig="public NamedPermissionSet (string name, System.Security.Permissions.PermissionState state);" />
    <Member Sig="public NamedPermissionSet (string name, System.Security.PermissionSet permSet);" />
    <Member Sig="public NamedPermissionSet (System.Security.NamedPermissionSet permSet);" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override System.Security.PermissionSet Copy ();" />
    <Member Sig="public override System.Security.SecurityElement ToXml ();" />
    <Member Sig="public override void FromXml (System.Security.SecurityElement et);" />
    <Member Sig="public string Description { get; set; }" />
    <Member Sig="public string Name { get; set; }" />
    <Member Sig="public System.Security.NamedPermissionSet Copy (string name);" />
  </Type>
  <Type Name="System.Security.Permissions.CodeAccessSecurityAttribute">
    <Member Sig="protected CodeAccessSecurityAttribute (System.Security.Permissions.SecurityAction action);" />
  </Type>
  <Type Name="System.Security.Permissions.EnvironmentPermission">
    <Member Sig="public bool IsUnrestricted ();" />
    <Member Sig="public EnvironmentPermission (System.Security.Permissions.EnvironmentPermissionAccess flag, string pathList);" />
    <Member Sig="public EnvironmentPermission (System.Security.Permissions.PermissionState state);" />
    <Member Sig="public override bool IsSubsetOf (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Copy ();" />
    <Member Sig="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Union (System.Security.IPermission other);" />
    <Member Sig="public override System.Security.SecurityElement ToXml ();" />
    <Member Sig="public override void FromXml (System.Security.SecurityElement esd);" />
    <Member Sig="public string GetPathList (System.Security.Permissions.EnvironmentPermissionAccess flag);" />
    <Member Sig="public void AddPathList (System.Security.Permissions.EnvironmentPermissionAccess flag, string pathList);" />
    <Member Sig="public void SetPathList (System.Security.Permissions.EnvironmentPermissionAccess flag, string pathList);" />
  </Type>
  <Type Name="System.Security.Permissions.EnvironmentPermissionAccess">
    <Member Sig="AllAccess" />
    <Member Sig="NoAccess" />
    <Member Sig="Read" />
    <Member Sig="Write" />
  </Type>
  <Type Name="System.Security.Permissions.EnvironmentPermissionAttribute">
    <Member Sig="public EnvironmentPermissionAttribute (System.Security.Permissions.SecurityAction action);" />
    <Member Sig="public override System.Security.IPermission CreatePermission ();" />
    <Member Sig="public string All { get; set; }" />
    <Member Sig="public string Read { get; set; }" />
    <Member Sig="public string Write { get; set; }" />
  </Type>
  <Type Name="System.Security.Permissions.FileDialogPermission">
    <Member Sig="public bool IsUnrestricted ();" />
    <Member Sig="public FileDialogPermission (System.Security.Permissions.FileDialogPermissionAccess access);" />
    <Member Sig="public FileDialogPermission (System.Security.Permissions.PermissionState state);" />
    <Member Sig="public override bool IsSubsetOf (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Copy ();" />
    <Member Sig="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Union (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.SecurityElement ToXml ();" />
    <Member Sig="public override void FromXml (System.Security.SecurityElement esd);" />
    <Member Sig="public System.Security.Permissions.FileDialogPermissionAccess Access { get; set; }" />
  </Type>
  <Type Name="System.Security.Permissions.FileDialogPermissionAccess">
    <Member Sig="None" />
    <Member Sig="Open" />
    <Member Sig="OpenSave" />
    <Member Sig="Save" />
  </Type>
  <Type Name="System.Security.Permissions.FileDialogPermissionAttribute">
    <Member Sig="public bool Open { get; set; }" />
    <Member Sig="public bool Save { get; set; }" />
    <Member Sig="public FileDialogPermissionAttribute (System.Security.Permissions.SecurityAction action);" />
    <Member Sig="public override System.Security.IPermission CreatePermission ();" />
  </Type>
  <Type Name="System.Security.Permissions.FileIOPermission">
    <Member Sig="public bool IsUnrestricted ();" />
    <Member Sig="public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, string path);" />
    <Member Sig="public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, string[] pathList);" />
    <Member Sig="public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, System.Security.AccessControl.AccessControlActions control, string path);" />
    <Member Sig="public FileIOPermission (System.Security.Permissions.FileIOPermissionAccess access, System.Security.AccessControl.AccessControlActions control, string[] pathList);" />
    <Member Sig="public FileIOPermission (System.Security.Permissions.PermissionState state);" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override bool IsSubsetOf (System.Security.IPermission target);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override System.Security.IPermission Copy ();" />
    <Member Sig="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Union (System.Security.IPermission other);" />
    <Member Sig="public override System.Security.SecurityElement ToXml ();" />
    <Member Sig="public override void FromXml (System.Security.SecurityElement esd);" />
    <Member Sig="public string[] GetPathList (System.Security.Permissions.FileIOPermissionAccess access);" />
    <Member Sig="public System.Security.Permissions.FileIOPermissionAccess AllFiles { get; set; }" />
    <Member Sig="public System.Security.Permissions.FileIOPermissionAccess AllLocalFiles { get; set; }" />
    <Member Sig="public void AddPathList (System.Security.Permissions.FileIOPermissionAccess access, string path);" />
    <Member Sig="public void AddPathList (System.Security.Permissions.FileIOPermissionAccess access, string[] pathList);" />
    <Member Sig="public void SetPathList (System.Security.Permissions.FileIOPermissionAccess access, string path);" />
    <Member Sig="public void SetPathList (System.Security.Permissions.FileIOPermissionAccess access, string[] pathList);" />
  </Type>
  <Type Name="System.Security.Permissions.FileIOPermissionAccess">
    <Member Sig="AllAccess" />
    <Member Sig="Append" />
    <Member Sig="NoAccess" />
    <Member Sig="PathDiscovery" />
    <Member Sig="Read" />
    <Member Sig="Write" />
  </Type>
  <Type Name="System.Security.Permissions.FileIOPermissionAttribute">
    <Member Sig="public FileIOPermissionAttribute (System.Security.Permissions.SecurityAction action);" />
    <Member Sig="public override System.Security.IPermission CreatePermission ();" />
    <Member Sig="public string All { get; set; }" />
    <Member Sig="public string Append { get; set; }" />
    <Member Sig="public string ChangeAccessControl { get; set; }" />
    <Member Sig="public string PathDiscovery { get; set; }" />
    <Member Sig="public string Read { get; set; }" />
    <Member Sig="public string ViewAccessControl { get; set; }" />
    <Member Sig="public string ViewAndModify { get; set; }" />
    <Member Sig="public string Write { get; set; }" />
    <Member Sig="public System.Security.Permissions.FileIOPermissionAccess AllFiles { get; set; }" />
    <Member Sig="public System.Security.Permissions.FileIOPermissionAccess AllLocalFiles { get; set; }" />
  </Type>
  <Type Name="System.Security.Permissions.GacIdentityPermission">
    <Member Sig="public GacIdentityPermission ();" />
    <Member Sig="public GacIdentityPermission (System.Security.Permissions.PermissionState state);" />
    <Member Sig="public override bool IsSubsetOf (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Copy ();" />
    <Member Sig="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Union (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.SecurityElement ToXml ();" />
    <Member Sig="public override void FromXml (System.Security.SecurityElement securityElement);" />
  </Type>
  <Type Name="System.Security.Permissions.GacIdentityPermissionAttribute">
    <Member Sig="public GacIdentityPermissionAttribute (System.Security.Permissions.SecurityAction action);" />
    <Member Sig="public override System.Security.IPermission CreatePermission ();" />
  </Type>
  <Type Name="System.Security.Permissions.HostProtectionAttribute">
    <Member Sig="public bool ExternalProcessMgmt { get; set; }" />
    <Member Sig="public bool ExternalThreading { get; set; }" />
    <Member Sig="public bool MayLeakOnAbort { get; set; }" />
    <Member Sig="public bool SecurityInfrastructure { get; set; }" />
    <Member Sig="public bool SelfAffectingProcessMgmt { get; set; }" />
    <Member Sig="public bool SelfAffectingThreading { get; set; }" />
    <Member Sig="public bool SharedState { get; set; }" />
    <Member Sig="public bool Synchronization { get; set; }" />
    <Member Sig="public bool UI { get; set; }" />
    <Member Sig="public HostProtectionAttribute ();" />
    <Member Sig="public HostProtectionAttribute (System.Security.Permissions.SecurityAction action);" />
    <Member Sig="public override System.Security.IPermission CreatePermission ();" />
    <Member Sig="public System.Security.Permissions.HostProtectionResource Resources { get; set; }" />
  </Type>
  <Type Name="System.Security.Permissions.HostProtectionResource">
    <Member Sig="All" />
    <Member Sig="ExternalProcessMgmt" />
    <Member Sig="ExternalThreading" />
    <Member Sig="MayLeakOnAbort" />
    <Member Sig="None" />
    <Member Sig="SecurityInfrastructure" />
    <Member Sig="SelfAffectingProcessMgmt" />
    <Member Sig="SelfAffectingThreading" />
    <Member Sig="SharedState" />
    <Member Sig="Synchronization" />
    <Member Sig="UI" />
  </Type>
  <Type Name="System.Security.Permissions.IsolatedStorageContainment">
    <Member Sig="AdministerIsolatedStorageByUser" />
    <Member Sig="ApplicationIsolationByMachine" />
    <Member Sig="ApplicationIsolationByRoamingUser" />
    <Member Sig="ApplicationIsolationByUser" />
    <Member Sig="AssemblyIsolationByMachine" />
    <Member Sig="AssemblyIsolationByRoamingUser" />
    <Member Sig="AssemblyIsolationByUser" />
    <Member Sig="DomainIsolationByMachine" />
    <Member Sig="DomainIsolationByRoamingUser" />
    <Member Sig="DomainIsolationByUser" />
    <Member Sig="None" />
    <Member Sig="UnrestrictedIsolatedStorage" />
  </Type>
  <Type Name="System.Security.Permissions.IsolatedStorageFilePermission">
    <Member Sig="public IsolatedStorageFilePermission (System.Security.Permissions.PermissionState state);" />
    <Member Sig="public override bool IsSubsetOf (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Copy ();" />
    <Member Sig="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Union (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.SecurityElement ToXml ();" />
  </Type>
  <Type Name="System.Security.Permissions.IsolatedStorageFilePermissionAttribute">
    <Member Sig="public IsolatedStorageFilePermissionAttribute (System.Security.Permissions.SecurityAction action);" />
    <Member Sig="public override System.Security.IPermission CreatePermission ();" />
  </Type>
  <Type Name="System.Security.Permissions.IsolatedStoragePermission">
    <Member Sig="protected IsolatedStoragePermission (System.Security.Permissions.PermissionState state);" />
    <Member Sig="public bool IsUnrestricted ();" />
    <Member Sig="public long UserQuota { get; set; }" />
    <Member Sig="public override System.Security.SecurityElement ToXml ();" />
    <Member Sig="public override void FromXml (System.Security.SecurityElement esd);" />
    <Member Sig="public System.Security.Permissions.IsolatedStorageContainment UsageAllowed { get; set; }" />
  </Type>
  <Type Name="System.Security.Permissions.IsolatedStoragePermissionAttribute">
    <Member Sig="protected IsolatedStoragePermissionAttribute (System.Security.Permissions.SecurityAction action);" />
    <Member Sig="public long UserQuota { get; set; }" />
    <Member Sig="public System.Security.Permissions.IsolatedStorageContainment UsageAllowed { get; set; }" />
  </Type>
  <Type Name="System.Security.Permissions.IUnrestrictedPermission">
    <Member Sig="public bool IsUnrestricted ();" />
  </Type>
  <Type Name="System.Security.Permissions.KeyContainerPermission">
    <Member Sig="public bool IsUnrestricted ();" />
    <Member Sig="public KeyContainerPermission (System.Security.Permissions.KeyContainerPermissionFlags flags);" />
    <Member Sig="public KeyContainerPermission (System.Security.Permissions.KeyContainerPermissionFlags flags, System.Security.Permissions.KeyContainerPermissionAccessEntry[] accessList);" />
    <Member Sig="public KeyContainerPermission (System.Security.Permissions.PermissionState state);" />
    <Member Sig="public override bool IsSubsetOf (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Copy ();" />
    <Member Sig="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Union (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.SecurityElement ToXml ();" />
    <Member Sig="public override void FromXml (System.Security.SecurityElement securityElement);" />
    <Member Sig="public System.Security.Permissions.KeyContainerPermissionAccessEntryCollection AccessEntries { get; }" />
    <Member Sig="public System.Security.Permissions.KeyContainerPermissionFlags Flags { get; }" />
  </Type>
  <Type Name="System.Security.Permissions.KeyContainerPermissionAccessEntry">
    <Member Sig="public int KeySpec { get; set; }" />
    <Member Sig="public int ProviderType { get; set; }" />
    <Member Sig="public KeyContainerPermissionAccessEntry (string keyContainerName, System.Security.Permissions.KeyContainerPermissionFlags flags);" />
    <Member Sig="public KeyContainerPermissionAccessEntry (string keyStore, string providerName, int providerType, string keyContainerName, int keySpec, System.Security.Permissions.KeyContainerPermissionFlags flags);" />
    <Member Sig="public KeyContainerPermissionAccessEntry (System.Security.Cryptography.CspParameters parameters, System.Security.Permissions.KeyContainerPermissionFlags flags);" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public string KeyContainerName { get; set; }" />
    <Member Sig="public string KeyStore { get; set; }" />
    <Member Sig="public string ProviderName { get; set; }" />
    <Member Sig="public System.Security.Permissions.KeyContainerPermissionFlags Flags { get; set; }" />
  </Type>
  <Type Name="System.Security.Permissions.KeyContainerPermissionAccessEntryCollection">
    <Member Sig="public bool IsSynchronized { get; }" />
    <Member Sig="public int Add (System.Security.Permissions.KeyContainerPermissionAccessEntry accessEntry);" />
    <Member Sig="public int Count { get; }" />
    <Member Sig="public int IndexOf (System.Security.Permissions.KeyContainerPermissionAccessEntry accessEntry);" />
    <Member Sig="public object SyncRoot { get; }" />
    <Member Sig="public System.Security.Permissions.KeyContainerPermissionAccessEntry this[int index] { get; }" />
    <Member Sig="public System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator GetEnumerator ();" />
    <Member Sig="public void Clear ();" />
    <Member Sig="public void CopyTo (System.Security.Permissions.KeyContainerPermissionAccessEntry[] array, int index);" />
    <Member Sig="public void Remove (System.Security.Permissions.KeyContainerPermissionAccessEntry accessEntry);" />
    <Member Sig="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
    <Member Sig="void ICollection.CopyTo (Array array, int index);" />
  </Type>
  <Type Name="System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator">
    <Member Sig="object System.Collections.IEnumerator.Current { get; }" />
    <Member Sig="public bool MoveNext ();" />
    <Member Sig="public System.Security.Permissions.KeyContainerPermissionAccessEntry Current { get; }" />
    <Member Sig="public void Reset ();" />
  </Type>
  <Type Name="System.Security.Permissions.KeyContainerPermissionAttribute">
    <Member Sig="public int KeySpec { get; set; }" />
    <Member Sig="public int ProviderType { get; set; }" />
    <Member Sig="public KeyContainerPermissionAttribute (System.Security.Permissions.SecurityAction action);" />
    <Member Sig="public override System.Security.IPermission CreatePermission ();" />
    <Member Sig="public string KeyContainerName { get; set; }" />
    <Member Sig="public string KeyStore { get; set; }" />
    <Member Sig="public string ProviderName { get; set; }" />
    <Member Sig="public System.Security.Permissions.KeyContainerPermissionFlags Flags { get; set; }" />
  </Type>
  <Type Name="System.Security.Permissions.KeyContainerPermissionFlags">
    <Member Sig="AllFlags" />
    <Member Sig="ChangeAcl" />
    <Member Sig="Create" />
    <Member Sig="Decrypt" />
    <Member Sig="Delete" />
    <Member Sig="Export" />
    <Member Sig="Import" />
    <Member Sig="NoFlags" />
    <Member Sig="Open" />
    <Member Sig="Sign" />
    <Member Sig="ViewAcl" />
  </Type>
  <Type Name="System.Security.Permissions.PermissionSetAttribute">
    <Member Sig="public bool UnicodeEncoded { get; set; }" />
    <Member Sig="public override System.Security.IPermission CreatePermission ();" />
    <Member Sig="public PermissionSetAttribute (System.Security.Permissions.SecurityAction action);" />
    <Member Sig="public string File { get; set; }" />
    <Member Sig="public string Hex { get; set; }" />
    <Member Sig="public string Name { get; set; }" />
    <Member Sig="public string XML { get; set; }" />
    <Member Sig="public System.Security.PermissionSet CreatePermissionSet ();" />
  </Type>
  <Type Name="System.Security.Permissions.PermissionState">
    <Member Sig="None" />
    <Member Sig="Unrestricted" />
  </Type>
  <Type Name="System.Security.Permissions.PrincipalPermission">
    <Member Sig="public bool IsSubsetOf (System.Security.IPermission target);" />
    <Member Sig="public bool IsUnrestricted ();" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public PrincipalPermission (string name, string role);" />
    <Member Sig="public PrincipalPermission (string name, string role, bool isAuthenticated);" />
    <Member Sig="public PrincipalPermission (System.Security.Permissions.PermissionState state);" />
    <Member Sig="public System.Security.IPermission Copy ();" />
    <Member Sig="public System.Security.IPermission Intersect (System.Security.IPermission target);" />
    <Member Sig="public System.Security.IPermission Union (System.Security.IPermission other);" />
    <Member Sig="public System.Security.SecurityElement ToXml ();" />
    <Member Sig="public void Demand ();" />
    <Member Sig="public void FromXml (System.Security.SecurityElement elem);" />
  </Type>
  <Type Name="System.Security.Permissions.PrincipalPermissionAttribute">
    <Member Sig="public bool Authenticated { get; set; }" />
    <Member Sig="public override System.Security.IPermission CreatePermission ();" />
    <Member Sig="public PrincipalPermissionAttribute (System.Security.Permissions.SecurityAction action);" />
    <Member Sig="public string Name { get; set; }" />
    <Member Sig="public string Role { get; set; }" />
  </Type>
  <Type Name="System.Security.Permissions.PublisherIdentityPermission">
    <Member Sig="public override bool IsSubsetOf (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Copy ();" />
    <Member Sig="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Union (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.SecurityElement ToXml ();" />
    <Member Sig="public override void FromXml (System.Security.SecurityElement esd);" />
    <Member Sig="public PublisherIdentityPermission (System.Security.Cryptography.X509Certificates.X509Certificate certificate);" />
    <Member Sig="public PublisherIdentityPermission (System.Security.Permissions.PermissionState state);" />
    <Member Sig="public System.Security.Cryptography.X509Certificates.X509Certificate Certificate { get; set; }" />
  </Type>
  <Type Name="System.Security.Permissions.PublisherIdentityPermissionAttribute">
    <Member Sig="public override System.Security.IPermission CreatePermission ();" />
    <Member Sig="public PublisherIdentityPermissionAttribute (System.Security.Permissions.SecurityAction action);" />
    <Member Sig="public string CertFile { get; set; }" />
    <Member Sig="public string SignedFile { get; set; }" />
    <Member Sig="public string X509Certificate { get; set; }" />
  </Type>
  <Type Name="System.Security.Permissions.ReflectionPermission">
    <Member Sig="public bool IsUnrestricted ();" />
    <Member Sig="public override bool IsSubsetOf (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Copy ();" />
    <Member Sig="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Union (System.Security.IPermission other);" />
    <Member Sig="public override System.Security.SecurityElement ToXml ();" />
    <Member Sig="public override void FromXml (System.Security.SecurityElement esd);" />
    <Member Sig="public ReflectionPermission (System.Security.Permissions.PermissionState state);" />
    <Member Sig="public ReflectionPermission (System.Security.Permissions.ReflectionPermissionFlag flag);" />
    <Member Sig="public System.Security.Permissions.ReflectionPermissionFlag Flags { get; set; }" />
  </Type>
  <Type Name="System.Security.Permissions.ReflectionPermissionAttribute">
    <Member Sig="public bool MemberAccess { get; set; }" />
    <Member Sig="public bool ReflectionEmit { get; set; }" />
    <Member Sig="public bool RestrictedMemberAccess { get; set; }" />
    <Member Sig="public bool TypeInformation { get; set; }" />
    <Member Sig="public override System.Security.IPermission CreatePermission ();" />
    <Member Sig="public ReflectionPermissionAttribute (System.Security.Permissions.SecurityAction action);" />
    <Member Sig="public System.Security.Permissions.ReflectionPermissionFlag Flags { get; set; }" />
  </Type>
  <Type Name="System.Security.Permissions.ReflectionPermissionFlag">
    <Member Sig="AllFlags" />
    <Member Sig="MemberAccess" />
    <Member Sig="NoFlags" />
    <Member Sig="ReflectionEmit" />
    <Member Sig="RestrictedMemberAccess" />
    <Member Sig="TypeInformation" />
  </Type>
  <Type Name="System.Security.Permissions.RegistryPermission">
    <Member Sig="public bool IsUnrestricted ();" />
    <Member Sig="public override bool IsSubsetOf (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Copy ();" />
    <Member Sig="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Union (System.Security.IPermission other);" />
    <Member Sig="public override System.Security.SecurityElement ToXml ();" />
    <Member Sig="public override void FromXml (System.Security.SecurityElement esd);" />
    <Member Sig="public RegistryPermission (System.Security.Permissions.PermissionState state);" />
    <Member Sig="public RegistryPermission (System.Security.Permissions.RegistryPermissionAccess access, string pathList);" />
    <Member Sig="public RegistryPermission (System.Security.Permissions.RegistryPermissionAccess access, System.Security.AccessControl.AccessControlActions control, string pathList);" />
    <Member Sig="public string GetPathList (System.Security.Permissions.RegistryPermissionAccess access);" />
    <Member Sig="public void AddPathList (System.Security.Permissions.RegistryPermissionAccess access, string pathList);" />
    <Member Sig="public void AddPathList (System.Security.Permissions.RegistryPermissionAccess access, System.Security.AccessControl.AccessControlActions control, string pathList);" />
    <Member Sig="public void SetPathList (System.Security.Permissions.RegistryPermissionAccess access, string pathList);" />
  </Type>
  <Type Name="System.Security.Permissions.RegistryPermissionAccess">
    <Member Sig="AllAccess" />
    <Member Sig="Create" />
    <Member Sig="NoAccess" />
    <Member Sig="Read" />
    <Member Sig="Write" />
  </Type>
  <Type Name="System.Security.Permissions.RegistryPermissionAttribute">
    <Member Sig="public override System.Security.IPermission CreatePermission ();" />
    <Member Sig="public RegistryPermissionAttribute (System.Security.Permissions.SecurityAction action);" />
    <Member Sig="public string All { get; set; }" />
    <Member Sig="public string ChangeAccessControl { get; set; }" />
    <Member Sig="public string Create { get; set; }" />
    <Member Sig="public string Read { get; set; }" />
    <Member Sig="public string ViewAccessControl { get; set; }" />
    <Member Sig="public string ViewAndModify { get; set; }" />
    <Member Sig="public string Write { get; set; }" />
  </Type>
  <Type Name="System.Security.Permissions.SecurityAction">
    <Member Sig="Assert" />
    <Member Sig="Demand" />
    <Member Sig="Deny" />
    <Member Sig="InheritanceDemand" />
    <Member Sig="LinkDemand" />
    <Member Sig="PermitOnly" />
    <Member Sig="RequestMinimum" />
    <Member Sig="RequestOptional" />
    <Member Sig="RequestRefuse" />
  </Type>
  <Type Name="System.Security.Permissions.SecurityAttribute">
    <Member Sig="protected SecurityAttribute (System.Security.Permissions.SecurityAction action);" />
    <Member Sig="public abstract System.Security.IPermission CreatePermission ();" />
    <Member Sig="public bool Unrestricted { get; set; }" />
    <Member Sig="public System.Security.Permissions.SecurityAction Action { get; set; }" />
  </Type>
  <Type Name="System.Security.Permissions.SecurityPermission">
    <Member Sig="public bool IsUnrestricted ();" />
    <Member Sig="public override bool IsSubsetOf (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Copy ();" />
    <Member Sig="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Union (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.SecurityElement ToXml ();" />
    <Member Sig="public override void FromXml (System.Security.SecurityElement esd);" />
    <Member Sig="public SecurityPermission (System.Security.Permissions.PermissionState state);" />
    <Member Sig="public SecurityPermission (System.Security.Permissions.SecurityPermissionFlag flag);" />
    <Member Sig="public System.Security.Permissions.SecurityPermissionFlag Flags { get; set; }" />
  </Type>
  <Type Name="System.Security.Permissions.SecurityPermissionAttribute">
    <Member Sig="public bool Assertion { get; set; }" />
    <Member Sig="public bool BindingRedirects { get; set; }" />
    <Member Sig="public bool ControlAppDomain { get; set; }" />
    <Member Sig="public bool ControlDomainPolicy { get; set; }" />
    <Member Sig="public bool ControlEvidence { get; set; }" />
    <Member Sig="public bool ControlPolicy { get; set; }" />
    <Member Sig="public bool ControlPrincipal { get; set; }" />
    <Member Sig="public bool ControlThread { get; set; }" />
    <Member Sig="public bool Execution { get; set; }" />
    <Member Sig="public bool Infrastructure { get; set; }" />
    <Member Sig="public bool RemotingConfiguration { get; set; }" />
    <Member Sig="public bool SerializationFormatter { get; set; }" />
    <Member Sig="public bool SkipVerification { get; set; }" />
    <Member Sig="public bool UnmanagedCode { get; set; }" />
    <Member Sig="public override System.Security.IPermission CreatePermission ();" />
    <Member Sig="public SecurityPermissionAttribute (System.Security.Permissions.SecurityAction action);" />
    <Member Sig="public System.Security.Permissions.SecurityPermissionFlag Flags { get; set; }" />
  </Type>
  <Type Name="System.Security.Permissions.SecurityPermissionFlag">
    <Member Sig="AllFlags" />
    <Member Sig="Assertion" />
    <Member Sig="BindingRedirects" />
    <Member Sig="ControlAppDomain" />
    <Member Sig="ControlDomainPolicy" />
    <Member Sig="ControlEvidence" />
    <Member Sig="ControlPolicy" />
    <Member Sig="ControlPrincipal" />
    <Member Sig="ControlThread" />
    <Member Sig="Execution" />
    <Member Sig="Infrastructure" />
    <Member Sig="NoFlags" />
    <Member Sig="RemotingConfiguration" />
    <Member Sig="SerializationFormatter" />
    <Member Sig="SkipVerification" />
    <Member Sig="UnmanagedCode" />
  </Type>
  <Type Name="System.Security.Permissions.SiteIdentityPermission">
    <Member Sig="public override bool IsSubsetOf (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Copy ();" />
    <Member Sig="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Union (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.SecurityElement ToXml ();" />
    <Member Sig="public override void FromXml (System.Security.SecurityElement esd);" />
    <Member Sig="public SiteIdentityPermission (string site);" />
    <Member Sig="public SiteIdentityPermission (System.Security.Permissions.PermissionState state);" />
    <Member Sig="public string Site { get; set; }" />
  </Type>
  <Type Name="System.Security.Permissions.SiteIdentityPermissionAttribute">
    <Member Sig="public override System.Security.IPermission CreatePermission ();" />
    <Member Sig="public SiteIdentityPermissionAttribute (System.Security.Permissions.SecurityAction action);" />
    <Member Sig="public string Site { get; set; }" />
  </Type>
  <Type Name="System.Security.Permissions.StrongNameIdentityPermission">
    <Member Sig="public override bool IsSubsetOf (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Copy ();" />
    <Member Sig="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Union (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.SecurityElement ToXml ();" />
    <Member Sig="public override void FromXml (System.Security.SecurityElement e);" />
    <Member Sig="public string Name { get; set; }" />
    <Member Sig="public StrongNameIdentityPermission (System.Security.Permissions.PermissionState state);" />
    <Member Sig="public StrongNameIdentityPermission (System.Security.Permissions.StrongNamePublicKeyBlob blob, string name, Version version);" />
    <Member Sig="public System.Security.Permissions.StrongNamePublicKeyBlob PublicKey { get; set; }" />
    <Member Sig="public Version Version { get; set; }" />
  </Type>
  <Type Name="System.Security.Permissions.StrongNameIdentityPermissionAttribute">
    <Member Sig="public override System.Security.IPermission CreatePermission ();" />
    <Member Sig="public string Name { get; set; }" />
    <Member Sig="public string PublicKey { get; set; }" />
    <Member Sig="public string Version { get; set; }" />
    <Member Sig="public StrongNameIdentityPermissionAttribute (System.Security.Permissions.SecurityAction action);" />
  </Type>
  <Type Name="System.Security.Permissions.StrongNamePublicKeyBlob">
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public StrongNamePublicKeyBlob (byte[] publicKey);" />
  </Type>
  <Type Name="System.Security.Permissions.UIPermission">
    <Member Sig="public bool IsUnrestricted ();" />
    <Member Sig="public override bool IsSubsetOf (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Copy ();" />
    <Member Sig="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Union (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.SecurityElement ToXml ();" />
    <Member Sig="public override void FromXml (System.Security.SecurityElement esd);" />
    <Member Sig="public System.Security.Permissions.UIPermissionClipboard Clipboard { get; set; }" />
    <Member Sig="public System.Security.Permissions.UIPermissionWindow Window { get; set; }" />
    <Member Sig="public UIPermission (System.Security.Permissions.PermissionState state);" />
    <Member Sig="public UIPermission (System.Security.Permissions.UIPermissionClipboard clipboardFlag);" />
    <Member Sig="public UIPermission (System.Security.Permissions.UIPermissionWindow windowFlag);" />
    <Member Sig="public UIPermission (System.Security.Permissions.UIPermissionWindow windowFlag, System.Security.Permissions.UIPermissionClipboard clipboardFlag);" />
  </Type>
  <Type Name="System.Security.Permissions.UIPermissionAttribute">
    <Member Sig="public override System.Security.IPermission CreatePermission ();" />
    <Member Sig="public System.Security.Permissions.UIPermissionClipboard Clipboard { get; set; }" />
    <Member Sig="public System.Security.Permissions.UIPermissionWindow Window { get; set; }" />
    <Member Sig="public UIPermissionAttribute (System.Security.Permissions.SecurityAction action);" />
  </Type>
  <Type Name="System.Security.Permissions.UIPermissionClipboard">
    <Member Sig="AllClipboard" />
    <Member Sig="NoClipboard" />
    <Member Sig="OwnClipboard" />
  </Type>
  <Type Name="System.Security.Permissions.UIPermissionWindow">
    <Member Sig="AllWindows" />
    <Member Sig="NoWindows" />
    <Member Sig="SafeSubWindows" />
    <Member Sig="SafeTopLevelWindows" />
  </Type>
  <Type Name="System.Security.Permissions.UrlIdentityPermission">
    <Member Sig="public override bool IsSubsetOf (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Copy ();" />
    <Member Sig="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Union (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.SecurityElement ToXml ();" />
    <Member Sig="public override void FromXml (System.Security.SecurityElement esd);" />
    <Member Sig="public string Url { get; set; }" />
    <Member Sig="public UrlIdentityPermission (string site);" />
    <Member Sig="public UrlIdentityPermission (System.Security.Permissions.PermissionState state);" />
  </Type>
  <Type Name="System.Security.Permissions.UrlIdentityPermissionAttribute">
    <Member Sig="public override System.Security.IPermission CreatePermission ();" />
    <Member Sig="public string Url { get; set; }" />
    <Member Sig="public UrlIdentityPermissionAttribute (System.Security.Permissions.SecurityAction action);" />
  </Type>
  <Type Name="System.Security.Permissions.ZoneIdentityPermission">
    <Member Sig="public override bool IsSubsetOf (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Copy ();" />
    <Member Sig="public override System.Security.IPermission Intersect (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.IPermission Union (System.Security.IPermission target);" />
    <Member Sig="public override System.Security.SecurityElement ToXml ();" />
    <Member Sig="public override void FromXml (System.Security.SecurityElement esd);" />
    <Member Sig="public System.Security.SecurityZone SecurityZone { get; set; }" />
    <Member Sig="public ZoneIdentityPermission (System.Security.Permissions.PermissionState state);" />
    <Member Sig="public ZoneIdentityPermission (System.Security.SecurityZone zone);" />
  </Type>
  <Type Name="System.Security.Permissions.ZoneIdentityPermissionAttribute">
    <Member Sig="public override System.Security.IPermission CreatePermission ();" />
    <Member Sig="public System.Security.SecurityZone Zone { get; set; }" />
    <Member Sig="public ZoneIdentityPermissionAttribute (System.Security.Permissions.SecurityAction action);" />
  </Type>
  <Type Name="System.Security.PermissionSet">
    <Member Sig="public bool ContainsNonCodeAccessPermissions ();" />
    <Member Sig="public bool IsEmpty ();" />
    <Member Sig="public bool IsSubsetOf (System.Security.PermissionSet target);" />
    <Member Sig="public bool IsUnrestricted ();" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public PermissionSet (System.Security.Permissions.PermissionState state);" />
    <Member Sig="public PermissionSet (System.Security.PermissionSet permSet);" />
    <Member Sig="public static byte[] ConvertPermissionSet (string inFormat, byte[] inData, string outFormat);" />
    <Member Sig="public static void RevertAssert ();" />
    <Member Sig="public System.Collections.IEnumerator GetEnumerator ();" />
    <Member Sig="public System.Security.IPermission AddPermission (System.Security.IPermission perm);" />
    <Member Sig="public System.Security.IPermission GetPermission (Type permClass);" />
    <Member Sig="public System.Security.IPermission RemovePermission (Type permClass);" />
    <Member Sig="public System.Security.IPermission SetPermission (System.Security.IPermission perm);" />
    <Member Sig="public System.Security.PermissionSet Intersect (System.Security.PermissionSet other);" />
    <Member Sig="public System.Security.PermissionSet Union (System.Security.PermissionSet other);" />
    <Member Sig="public virtual bool IsReadOnly { get; }" />
    <Member Sig="public virtual bool IsSynchronized { get; }" />
    <Member Sig="public virtual int Count { get; }" />
    <Member Sig="public virtual object SyncRoot { get; }" />
    <Member Sig="public virtual System.Security.PermissionSet Copy ();" />
    <Member Sig="public virtual System.Security.SecurityElement ToXml ();" />
    <Member Sig="public virtual void CopyTo (Array array, int index);" />
    <Member Sig="public virtual void FromXml (System.Security.SecurityElement et);" />
    <Member Sig="public void Assert ();" />
    <Member Sig="public void Demand ();" />
    <Member Sig="public void Deny ();" />
    <Member Sig="public void PermitOnly ();" />
    <Member Sig="void IDeserializationCallback.OnDeserialization (object sender);" />
  </Type>
  <Type Name="System.Security.Policy.AllMembershipCondition">
    <Member Sig="public AllMembershipCondition ();" />
    <Member Sig="public bool Check (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public System.Security.Policy.IMembershipCondition Copy ();" />
    <Member Sig="public System.Security.SecurityElement ToXml ();" />
    <Member Sig="public System.Security.SecurityElement ToXml (System.Security.Policy.PolicyLevel level);" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e);" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e, System.Security.Policy.PolicyLevel level);" />
  </Type>
  <Type Name="System.Security.Policy.ApplicationDirectory">
    <Member Sig="public ApplicationDirectory (string name);" />
    <Member Sig="public object Copy ();" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public string Directory { get; }" />
  </Type>
  <Type Name="System.Security.Policy.ApplicationDirectoryMembershipCondition">
    <Member Sig="public ApplicationDirectoryMembershipCondition ();" />
    <Member Sig="public bool Check (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public System.Security.Policy.IMembershipCondition Copy ();" />
    <Member Sig="public System.Security.SecurityElement ToXml ();" />
    <Member Sig="public System.Security.SecurityElement ToXml (System.Security.Policy.PolicyLevel level);" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e);" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e, System.Security.Policy.PolicyLevel level);" />
  </Type>
  <Type Name="System.Security.Policy.ApplicationSecurityInfo">
    <Member Sig="public ApplicationId ApplicationId { get; set; }" />
    <Member Sig="public ApplicationId DeploymentId { get; set; }" />
    <Member Sig="public ApplicationSecurityInfo (ActivationContext activationContext);" />
    <Member Sig="public System.Security.PermissionSet DefaultRequestSet { get; set; }" />
    <Member Sig="public System.Security.Policy.Evidence ApplicationEvidence { get; set; }" />
  </Type>
  <Type Name="System.Security.Policy.ApplicationSecurityManager">
    <Member Sig="public static bool DetermineApplicationTrust (ActivationContext activationContext, System.Security.Policy.TrustManagerContext context);" />
    <Member Sig="public static System.Security.Policy.ApplicationTrustCollection UserApplicationTrusts { get; }" />
    <Member Sig="public static System.Security.Policy.IApplicationTrustManager ApplicationTrustManager { get; }" />
  </Type>
  <Type Name="System.Security.Policy.ApplicationTrust">
    <Member Sig="public ApplicationIdentity ApplicationIdentity { get; set; }" />
    <Member Sig="public ApplicationTrust ();" />
    <Member Sig="public ApplicationTrust (ApplicationIdentity applicationIdentity);" />
    <Member Sig="public bool IsApplicationTrustedToRun { get; set; }" />
    <Member Sig="public bool Persist { get; set; }" />
    <Member Sig="public object ExtraInfo { get; set; }" />
    <Member Sig="public System.Security.Policy.PolicyStatement DefaultGrantSet { get; set; }" />
    <Member Sig="public System.Security.SecurityElement ToXml ();" />
    <Member Sig="public void FromXml (System.Security.SecurityElement element);" />
  </Type>
  <Type Name="System.Security.Policy.ApplicationTrustCollection">
    <Member Sig="public bool IsSynchronized { get; }" />
    <Member Sig="public int Add (System.Security.Policy.ApplicationTrust trust);" />
    <Member Sig="public int Count { get; }" />
    <Member Sig="public object SyncRoot { get; }" />
    <Member Sig="public System.Security.Policy.ApplicationTrust this[int index] { get; }" />
    <Member Sig="public System.Security.Policy.ApplicationTrust this[string appFullName] { get; }" />
    <Member Sig="public System.Security.Policy.ApplicationTrustCollection Find (ApplicationIdentity applicationIdentity, System.Security.Policy.ApplicationVersionMatch versionMatch);" />
    <Member Sig="public System.Security.Policy.ApplicationTrustEnumerator GetEnumerator ();" />
    <Member Sig="public void AddRange (System.Security.Policy.ApplicationTrust[] trusts);" />
    <Member Sig="public void AddRange (System.Security.Policy.ApplicationTrustCollection trusts);" />
    <Member Sig="public void Clear ();" />
    <Member Sig="public void CopyTo (System.Security.Policy.ApplicationTrust[] array, int index);" />
    <Member Sig="public void Remove (ApplicationIdentity applicationIdentity, System.Security.Policy.ApplicationVersionMatch versionMatch);" />
    <Member Sig="public void Remove (System.Security.Policy.ApplicationTrust trust);" />
    <Member Sig="public void RemoveRange (System.Security.Policy.ApplicationTrust[] trusts);" />
    <Member Sig="public void RemoveRange (System.Security.Policy.ApplicationTrustCollection trusts);" />
    <Member Sig="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
    <Member Sig="void ICollection.CopyTo (Array array, int index);" />
  </Type>
  <Type Name="System.Security.Policy.ApplicationTrustEnumerator">
    <Member Sig="object System.Collections.IEnumerator.Current { get; }" />
    <Member Sig="public bool MoveNext ();" />
    <Member Sig="public System.Security.Policy.ApplicationTrust Current { get; }" />
    <Member Sig="public void Reset ();" />
  </Type>
  <Type Name="System.Security.Policy.ApplicationVersionMatch">
    <Member Sig="MatchAllVersions" />
    <Member Sig="MatchExactVersion" />
  </Type>
  <Type Name="System.Security.Policy.CodeConnectAccess">
    <Member Sig="public CodeConnectAccess (string allowScheme, int allowPort);" />
    <Member Sig="public int Port { get; }" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static readonly int DefaultPort;" />
    <Member Sig="public static readonly int OriginPort;" />
    <Member Sig="public static readonly string AnyScheme;" />
    <Member Sig="public static readonly string OriginScheme;" />
    <Member Sig="public static System.Security.Policy.CodeConnectAccess CreateAnySchemeAccess (int allowPort);" />
    <Member Sig="public static System.Security.Policy.CodeConnectAccess CreateOriginSchemeAccess (int allowPort);" />
    <Member Sig="public string Scheme { get; }" />
  </Type>
  <Type Name="System.Security.Policy.CodeGroup">
    <Member Sig="protected CodeGroup (System.Security.Policy.IMembershipCondition membershipCondition, System.Security.Policy.PolicyStatement policy);" />
    <Member Sig="protected virtual void CreateXml (System.Security.SecurityElement element, System.Security.Policy.PolicyLevel level);" />
    <Member Sig="protected virtual void ParseXml (System.Security.SecurityElement e, System.Security.Policy.PolicyLevel level);" />
    <Member Sig="public abstract string MergeLogic { get; }" />
    <Member Sig="public abstract System.Security.Policy.CodeGroup Copy ();" />
    <Member Sig="public abstract System.Security.Policy.CodeGroup ResolveMatchingCodeGroups (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public abstract System.Security.Policy.PolicyStatement Resolve (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public bool Equals (System.Security.Policy.CodeGroup cg, bool compareChildren);" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public string Description { get; set; }" />
    <Member Sig="public string Name { get; set; }" />
    <Member Sig="public System.Collections.IList Children { get; set; }" />
    <Member Sig="public System.Security.Policy.IMembershipCondition MembershipCondition { get; set; }" />
    <Member Sig="public System.Security.Policy.PolicyStatement PolicyStatement { get; set; }" />
    <Member Sig="public System.Security.SecurityElement ToXml ();" />
    <Member Sig="public System.Security.SecurityElement ToXml (System.Security.Policy.PolicyLevel level);" />
    <Member Sig="public virtual string AttributeString { get; }" />
    <Member Sig="public virtual string PermissionSetName { get; }" />
    <Member Sig="public void AddChild (System.Security.Policy.CodeGroup group);" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e);" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e, System.Security.Policy.PolicyLevel level);" />
    <Member Sig="public void RemoveChild (System.Security.Policy.CodeGroup group);" />
  </Type>
  <Type Name="System.Security.Policy.Evidence">
    <Member Sig="public bool IsReadOnly { get; }" />
    <Member Sig="public bool IsSynchronized { get; }" />
    <Member Sig="public bool Locked { get; set; }" />
    <Member Sig="public Evidence ();" />
    <Member Sig="public Evidence (object[] hostEvidence, object[] assemblyEvidence);" />
    <Member Sig="public Evidence (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public int Count { get; }" />
    <Member Sig="public object SyncRoot { get; }" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public System.Collections.IEnumerator GetAssemblyEnumerator ();" />
    <Member Sig="public System.Collections.IEnumerator GetEnumerator ();" />
    <Member Sig="public System.Collections.IEnumerator GetHostEnumerator ();" />
    <Member Sig="public void AddAssembly (object id);" />
    <Member Sig="public void AddHost (object id);" />
    <Member Sig="public void Clear ();" />
    <Member Sig="public void CopyTo (Array array, int index);" />
    <Member Sig="public void Merge (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public void RemoveType (Type t);" />
  </Type>
  <Type Name="System.Security.Policy.FileCodeGroup">
    <Member Sig="protected override void CreateXml (System.Security.SecurityElement element, System.Security.Policy.PolicyLevel level);" />
    <Member Sig="protected override void ParseXml (System.Security.SecurityElement e, System.Security.Policy.PolicyLevel level);" />
    <Member Sig="public FileCodeGroup (System.Security.Policy.IMembershipCondition membershipCondition, System.Security.Permissions.FileIOPermissionAccess access);" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string AttributeString { get; }" />
    <Member Sig="public override string MergeLogic { get; }" />
    <Member Sig="public override string PermissionSetName { get; }" />
    <Member Sig="public override System.Security.Policy.CodeGroup Copy ();" />
    <Member Sig="public override System.Security.Policy.CodeGroup ResolveMatchingCodeGroups (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public override System.Security.Policy.PolicyStatement Resolve (System.Security.Policy.Evidence evidence);" />
  </Type>
  <Type Name="System.Security.Policy.FirstMatchCodeGroup">
    <Member Sig="public FirstMatchCodeGroup (System.Security.Policy.IMembershipCondition membershipCondition, System.Security.Policy.PolicyStatement policy);" />
    <Member Sig="public override string MergeLogic { get; }" />
    <Member Sig="public override System.Security.Policy.CodeGroup Copy ();" />
    <Member Sig="public override System.Security.Policy.CodeGroup ResolveMatchingCodeGroups (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public override System.Security.Policy.PolicyStatement Resolve (System.Security.Policy.Evidence evidence);" />
  </Type>
  <Type Name="System.Security.Policy.GacInstalled">
    <Member Sig="public GacInstalled ();" />
    <Member Sig="public object Copy ();" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public System.Security.IPermission CreateIdentityPermission (System.Security.Policy.Evidence evidence);" />
  </Type>
  <Type Name="System.Security.Policy.GacMembershipCondition">
    <Member Sig="public bool Check (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public GacMembershipCondition ();" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public System.Security.Policy.IMembershipCondition Copy ();" />
    <Member Sig="public System.Security.SecurityElement ToXml ();" />
    <Member Sig="public System.Security.SecurityElement ToXml (System.Security.Policy.PolicyLevel level);" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e);" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e, System.Security.Policy.PolicyLevel level);" />
  </Type>
  <Type Name="System.Security.Policy.Hash">
    <Member Sig="public byte[] GenerateHash (System.Security.Cryptography.HashAlgorithm hashAlg);" />
    <Member Sig="public byte[] MD5 { get; }" />
    <Member Sig="public byte[] SHA1 { get; }" />
    <Member Sig="public Hash (System.Reflection.Assembly assembly);" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static System.Security.Policy.Hash CreateMD5 (byte[] md5);" />
    <Member Sig="public static System.Security.Policy.Hash CreateSHA1 (byte[] sha1);" />
    <Member Sig="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.Security.Policy.HashMembershipCondition">
    <Member Sig="public bool Check (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public byte[] HashValue { get; set; }" />
    <Member Sig="public HashMembershipCondition (System.Security.Cryptography.HashAlgorithm hashAlg, byte[] value);" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public System.Security.Cryptography.HashAlgorithm HashAlgorithm { get; set; }" />
    <Member Sig="public System.Security.Policy.IMembershipCondition Copy ();" />
    <Member Sig="public System.Security.SecurityElement ToXml ();" />
    <Member Sig="public System.Security.SecurityElement ToXml (System.Security.Policy.PolicyLevel level);" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e);" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e, System.Security.Policy.PolicyLevel level);" />
    <Member Sig="void IDeserializationCallback.OnDeserialization (object sender);" />
    <Member Sig="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.Security.Policy.IApplicationTrustManager">
    <Member Sig="public System.Security.Policy.ApplicationTrust DetermineApplicationTrust (ActivationContext activationContext, System.Security.Policy.TrustManagerContext context);" />
  </Type>
  <Type Name="System.Security.Policy.IIdentityPermissionFactory">
    <Member Sig="public System.Security.IPermission CreateIdentityPermission (System.Security.Policy.Evidence evidence);" />
  </Type>
  <Type Name="System.Security.Policy.IMembershipCondition">
    <Member Sig="public bool Check (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public bool Equals (object obj);" />
    <Member Sig="public string ToString ();" />
    <Member Sig="public System.Security.Policy.IMembershipCondition Copy ();" />
  </Type>
  <Type Name="System.Security.Policy.NetCodeGroup">
    <Member Sig="protected override void CreateXml (System.Security.SecurityElement element, System.Security.Policy.PolicyLevel level);" />
    <Member Sig="protected override void ParseXml (System.Security.SecurityElement e, System.Security.Policy.PolicyLevel level);" />
    <Member Sig="public NetCodeGroup (System.Security.Policy.IMembershipCondition membershipCondition);" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string AttributeString { get; }" />
    <Member Sig="public override string MergeLogic { get; }" />
    <Member Sig="public override string PermissionSetName { get; }" />
    <Member Sig="public override System.Security.Policy.CodeGroup Copy ();" />
    <Member Sig="public override System.Security.Policy.CodeGroup ResolveMatchingCodeGroups (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public override System.Security.Policy.PolicyStatement Resolve (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public static readonly string AbsentOriginScheme;" />
    <Member Sig="public static readonly string AnyOtherOriginScheme;" />
    <Member Sig="public System.Collections.DictionaryEntry[] GetConnectAccessRules ();" />
    <Member Sig="public void AddConnectAccess (string originScheme, System.Security.Policy.CodeConnectAccess connectAccess);" />
    <Member Sig="public void ResetConnectAccess ();" />
  </Type>
  <Type Name="System.Security.Policy.PermissionRequestEvidence">
    <Member Sig="public override string ToString ();" />
    <Member Sig="public PermissionRequestEvidence (System.Security.PermissionSet request, System.Security.PermissionSet optional, System.Security.PermissionSet denied);" />
    <Member Sig="public System.Security.PermissionSet DeniedPermissions { get; }" />
    <Member Sig="public System.Security.PermissionSet OptionalPermissions { get; }" />
    <Member Sig="public System.Security.PermissionSet RequestedPermissions { get; }" />
    <Member Sig="public System.Security.Policy.PermissionRequestEvidence Copy ();" />
  </Type>
  <Type Name="System.Security.Policy.PolicyException">
    <Member Sig="protected PolicyException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public PolicyException ();" />
    <Member Sig="public PolicyException (string message);" />
    <Member Sig="public PolicyException (string message, Exception exception);" />
  </Type>
  <Type Name="System.Security.Policy.PolicyLevel">
    <Member Sig="public static System.Security.Policy.PolicyLevel CreateAppDomainLevel ();" />
    <Member Sig="public string Label { get; }" />
    <Member Sig="public string StoreLocation { get; }" />
    <Member Sig="public System.Collections.IList FullTrustAssemblies { get; }" />
    <Member Sig="public System.Collections.IList NamedPermissionSets { get; }" />
    <Member Sig="public System.Security.NamedPermissionSet ChangeNamedPermissionSet (string name, System.Security.PermissionSet pSet);" />
    <Member Sig="public System.Security.NamedPermissionSet GetNamedPermissionSet (string name);" />
    <Member Sig="public System.Security.NamedPermissionSet RemoveNamedPermissionSet (string name);" />
    <Member Sig="public System.Security.NamedPermissionSet RemoveNamedPermissionSet (System.Security.NamedPermissionSet permSet);" />
    <Member Sig="public System.Security.Policy.CodeGroup ResolveMatchingCodeGroups (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public System.Security.Policy.CodeGroup RootCodeGroup { get; set; }" />
    <Member Sig="public System.Security.Policy.PolicyStatement Resolve (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public System.Security.PolicyLevelType Type { get; }" />
    <Member Sig="public System.Security.SecurityElement ToXml ();" />
    <Member Sig="public void AddFullTrustAssembly (System.Security.Policy.StrongName sn);" />
    <Member Sig="public void AddFullTrustAssembly (System.Security.Policy.StrongNameMembershipCondition snMC);" />
    <Member Sig="public void AddNamedPermissionSet (System.Security.NamedPermissionSet permSet);" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e);" />
    <Member Sig="public void Recover ();" />
    <Member Sig="public void RemoveFullTrustAssembly (System.Security.Policy.StrongName sn);" />
    <Member Sig="public void RemoveFullTrustAssembly (System.Security.Policy.StrongNameMembershipCondition snMC);" />
    <Member Sig="public void Reset ();" />
  </Type>
  <Type Name="System.Security.Policy.PolicyStatement">
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public PolicyStatement (System.Security.PermissionSet permSet);" />
    <Member Sig="public PolicyStatement (System.Security.PermissionSet permSet, System.Security.Policy.PolicyStatementAttribute attributes);" />
    <Member Sig="public string AttributeString { get; }" />
    <Member Sig="public System.Security.PermissionSet PermissionSet { get; set; }" />
    <Member Sig="public System.Security.Policy.PolicyStatement Copy ();" />
    <Member Sig="public System.Security.Policy.PolicyStatementAttribute Attributes { get; set; }" />
    <Member Sig="public System.Security.SecurityElement ToXml ();" />
    <Member Sig="public System.Security.SecurityElement ToXml (System.Security.Policy.PolicyLevel level);" />
    <Member Sig="public void FromXml (System.Security.SecurityElement et);" />
    <Member Sig="public void FromXml (System.Security.SecurityElement et, System.Security.Policy.PolicyLevel level);" />
  </Type>
  <Type Name="System.Security.Policy.PolicyStatementAttribute">
    <Member Sig="All" />
    <Member Sig="Exclusive" />
    <Member Sig="LevelFinal" />
    <Member Sig="Nothing" />
  </Type>
  <Type Name="System.Security.Policy.Publisher">
    <Member Sig="public object Copy ();" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public Publisher (System.Security.Cryptography.X509Certificates.X509Certificate cert);" />
    <Member Sig="public System.Security.Cryptography.X509Certificates.X509Certificate Certificate { get; }" />
    <Member Sig="public System.Security.IPermission CreateIdentityPermission (System.Security.Policy.Evidence evidence);" />
  </Type>
  <Type Name="System.Security.Policy.PublisherMembershipCondition">
    <Member Sig="public bool Check (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public PublisherMembershipCondition (System.Security.Cryptography.X509Certificates.X509Certificate certificate);" />
    <Member Sig="public System.Security.Cryptography.X509Certificates.X509Certificate Certificate { get; set; }" />
    <Member Sig="public System.Security.Policy.IMembershipCondition Copy ();" />
    <Member Sig="public System.Security.SecurityElement ToXml ();" />
    <Member Sig="public System.Security.SecurityElement ToXml (System.Security.Policy.PolicyLevel level);" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e);" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e, System.Security.Policy.PolicyLevel level);" />
  </Type>
  <Type Name="System.Security.Policy.Site">
    <Member Sig="public object Copy ();" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public Site (string name);" />
    <Member Sig="public static System.Security.Policy.Site CreateFromUrl (string url);" />
    <Member Sig="public string Name { get; }" />
    <Member Sig="public System.Security.IPermission CreateIdentityPermission (System.Security.Policy.Evidence evidence);" />
  </Type>
  <Type Name="System.Security.Policy.SiteMembershipCondition">
    <Member Sig="public bool Check (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SiteMembershipCondition (string site);" />
    <Member Sig="public string Site { get; set; }" />
    <Member Sig="public System.Security.Policy.IMembershipCondition Copy ();" />
    <Member Sig="public System.Security.SecurityElement ToXml ();" />
    <Member Sig="public System.Security.SecurityElement ToXml (System.Security.Policy.PolicyLevel level);" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e);" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e, System.Security.Policy.PolicyLevel level);" />
  </Type>
  <Type Name="System.Security.Policy.StrongName">
    <Member Sig="public object Copy ();" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public string Name { get; }" />
    <Member Sig="public StrongName (System.Security.Permissions.StrongNamePublicKeyBlob blob, string name, Version version);" />
    <Member Sig="public System.Security.IPermission CreateIdentityPermission (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public System.Security.Permissions.StrongNamePublicKeyBlob PublicKey { get; }" />
    <Member Sig="public Version Version { get; }" />
  </Type>
  <Type Name="System.Security.Policy.StrongNameMembershipCondition">
    <Member Sig="public bool Check (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public string Name { get; set; }" />
    <Member Sig="public StrongNameMembershipCondition (System.Security.Permissions.StrongNamePublicKeyBlob blob, string name, Version version);" />
    <Member Sig="public System.Security.Permissions.StrongNamePublicKeyBlob PublicKey { get; set; }" />
    <Member Sig="public System.Security.Policy.IMembershipCondition Copy ();" />
    <Member Sig="public System.Security.SecurityElement ToXml ();" />
    <Member Sig="public System.Security.SecurityElement ToXml (System.Security.Policy.PolicyLevel level);" />
    <Member Sig="public Version Version { get; set; }" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e);" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e, System.Security.Policy.PolicyLevel level);" />
  </Type>
  <Type Name="System.Security.Policy.TrustManagerContext">
    <Member Sig="public TrustManagerContext ();" />
    <Member Sig="public TrustManagerContext (System.Security.Policy.TrustManagerUIContext uiContext);" />
    <Member Sig="public virtual ApplicationIdentity PreviousApplicationIdentity { get; set; }" />
    <Member Sig="public virtual bool IgnorePersistedDecision { get; set; }" />
    <Member Sig="public virtual bool KeepAlive { get; set; }" />
    <Member Sig="public virtual bool NoPrompt { get; set; }" />
    <Member Sig="public virtual bool Persist { get; set; }" />
    <Member Sig="public virtual System.Security.Policy.TrustManagerUIContext UIContext { get; set; }" />
  </Type>
  <Type Name="System.Security.Policy.TrustManagerUIContext">
    <Member Sig="Install" />
    <Member Sig="Run" />
    <Member Sig="Upgrade" />
  </Type>
  <Type Name="System.Security.Policy.UnionCodeGroup">
    <Member Sig="public override string MergeLogic { get; }" />
    <Member Sig="public override System.Security.Policy.CodeGroup Copy ();" />
    <Member Sig="public override System.Security.Policy.CodeGroup ResolveMatchingCodeGroups (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public override System.Security.Policy.PolicyStatement Resolve (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public UnionCodeGroup (System.Security.Policy.IMembershipCondition membershipCondition, System.Security.Policy.PolicyStatement policy);" />
  </Type>
  <Type Name="System.Security.Policy.Url">
    <Member Sig="public object Copy ();" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public string Value { get; }" />
    <Member Sig="public System.Security.IPermission CreateIdentityPermission (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public Url (string name);" />
  </Type>
  <Type Name="System.Security.Policy.UrlMembershipCondition">
    <Member Sig="public bool Check (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public string Url { get; set; }" />
    <Member Sig="public System.Security.Policy.IMembershipCondition Copy ();" />
    <Member Sig="public System.Security.SecurityElement ToXml ();" />
    <Member Sig="public System.Security.SecurityElement ToXml (System.Security.Policy.PolicyLevel level);" />
    <Member Sig="public UrlMembershipCondition (string url);" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e);" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e, System.Security.Policy.PolicyLevel level);" />
  </Type>
  <Type Name="System.Security.Policy.Zone">
    <Member Sig="public object Copy ();" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static System.Security.Policy.Zone CreateFromUrl (string url);" />
    <Member Sig="public System.Security.IPermission CreateIdentityPermission (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public System.Security.SecurityZone SecurityZone { get; }" />
    <Member Sig="public Zone (System.Security.SecurityZone zone);" />
  </Type>
  <Type Name="System.Security.Policy.ZoneMembershipCondition">
    <Member Sig="public bool Check (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public System.Security.Policy.IMembershipCondition Copy ();" />
    <Member Sig="public System.Security.SecurityElement ToXml ();" />
    <Member Sig="public System.Security.SecurityElement ToXml (System.Security.Policy.PolicyLevel level);" />
    <Member Sig="public System.Security.SecurityZone SecurityZone { get; set; }" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e);" />
    <Member Sig="public void FromXml (System.Security.SecurityElement e, System.Security.Policy.PolicyLevel level);" />
    <Member Sig="public ZoneMembershipCondition (System.Security.SecurityZone zone);" />
  </Type>
  <Type Name="System.Security.PolicyLevelType">
    <Member Sig="AppDomain" />
    <Member Sig="Enterprise" />
    <Member Sig="Machine" />
    <Member Sig="User" />
  </Type>
  <Type Name="System.Security.Principal.GenericIdentity">
    <Member Sig="public GenericIdentity (string name);" />
    <Member Sig="public GenericIdentity (string name, string type);" />
    <Member Sig="public virtual bool IsAuthenticated { get; }" />
    <Member Sig="public virtual string AuthenticationType { get; }" />
    <Member Sig="public virtual string Name { get; }" />
  </Type>
  <Type Name="System.Security.Principal.GenericPrincipal">
    <Member Sig="public GenericPrincipal (System.Security.Principal.IIdentity identity, string[] roles);" />
    <Member Sig="public virtual bool IsInRole (string role);" />
    <Member Sig="public virtual System.Security.Principal.IIdentity Identity { get; }" />
  </Type>
  <Type Name="System.Security.Principal.IdentityNotMappedException">
    <Member Sig="public IdentityNotMappedException ();" />
    <Member Sig="public IdentityNotMappedException (string message);" />
    <Member Sig="public IdentityNotMappedException (string message, Exception inner);" />
    <Member Sig="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext);" />
    <Member Sig="public System.Security.Principal.IdentityReferenceCollection UnmappedIdentities { get; }" />
  </Type>
  <Type Name="System.Security.Principal.IdentityReference">
    <Member Sig="public abstract bool Equals (object o);" />
    <Member Sig="public abstract bool IsValidTargetType (Type targetType);" />
    <Member Sig="public abstract int GetHashCode ();" />
    <Member Sig="public abstract string ToString ();" />
    <Member Sig="public abstract string Value { get; }" />
    <Member Sig="public abstract System.Security.Principal.IdentityReference Translate (Type targetType);" />
    <Member Sig="public static bool op_Equality (System.Security.Principal.IdentityReference left, System.Security.Principal.IdentityReference right);" />
    <Member Sig="public static bool op_Inequality (System.Security.Principal.IdentityReference left, System.Security.Principal.IdentityReference right);" />
  </Type>
  <Type Name="System.Security.Principal.IdentityReferenceCollection">
    <Member Sig="public bool Contains (System.Security.Principal.IdentityReference identity);" />
    <Member Sig="public bool IsReadOnly { get; }" />
    <Member Sig="public bool Remove (System.Security.Principal.IdentityReference identity);" />
    <Member Sig="public IdentityReferenceCollection ();" />
    <Member Sig="public IdentityReferenceCollection (int capacity);" />
    <Member Sig="public int Count { get; }" />
    <Member Sig="public System.Collections.Generic.IEnumerator&lt;System.Security.Principal.IdentityReference&gt; GetEnumerator ();" />
    <Member Sig="public System.Security.Principal.IdentityReference this[int index] { get; set; }" />
    <Member Sig="public System.Security.Principal.IdentityReferenceCollection Translate (Type targetType);" />
    <Member Sig="public System.Security.Principal.IdentityReferenceCollection Translate (Type targetType, bool forceSuccess);" />
    <Member Sig="public void Add (System.Security.Principal.IdentityReference identity);" />
    <Member Sig="public void Clear ();" />
    <Member Sig="public void CopyTo (System.Security.Principal.IdentityReference[] array, int offset);" />
    <Member Sig="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
  </Type>
  <Type Name="System.Security.Principal.IIdentity">
    <Member Sig="public bool IsAuthenticated { get; }" />
    <Member Sig="public string AuthenticationType { get; }" />
    <Member Sig="public string Name { get; }" />
  </Type>
  <Type Name="System.Security.Principal.IPrincipal">
    <Member Sig="public bool IsInRole (string role);" />
    <Member Sig="public System.Security.Principal.IIdentity Identity { get; }" />
  </Type>
  <Type Name="System.Security.Principal.NTAccount">
    <Member Sig="public NTAccount (string domainName, string accountName);" />
    <Member Sig="public NTAccount (string name);" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override bool IsValidTargetType (Type targetType);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public override string Value { get; }" />
    <Member Sig="public override System.Security.Principal.IdentityReference Translate (Type targetType);" />
    <Member Sig="public static bool op_Equality (System.Security.Principal.NTAccount left, System.Security.Principal.NTAccount right);" />
    <Member Sig="public static bool op_Inequality (System.Security.Principal.NTAccount left, System.Security.Principal.NTAccount right);" />
  </Type>
  <Type Name="System.Security.Principal.PrincipalPolicy">
    <Member Sig="NoPrincipal" />
    <Member Sig="UnauthenticatedPrincipal" />
    <Member Sig="WindowsPrincipal" />
  </Type>
  <Type Name="System.Security.Principal.SecurityIdentifier">
    <Member Sig="public bool Equals (System.Security.Principal.SecurityIdentifier sid);" />
    <Member Sig="public bool IsAccountSid ();" />
    <Member Sig="public bool IsEqualDomainSid (System.Security.Principal.SecurityIdentifier sid);" />
    <Member Sig="public bool IsWellKnown (System.Security.Principal.WellKnownSidType type);" />
    <Member Sig="public int BinaryLength { get; }" />
    <Member Sig="public int CompareTo (System.Security.Principal.SecurityIdentifier sid);" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override bool IsValidTargetType (Type targetType);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public override string Value { get; }" />
    <Member Sig="public override System.Security.Principal.IdentityReference Translate (Type targetType);" />
    <Member Sig="public SecurityIdentifier (byte[] binaryForm, int offset);" />
    <Member Sig="public SecurityIdentifier (IntPtr binaryForm);" />
    <Member Sig="public SecurityIdentifier (string sddlForm);" />
    <Member Sig="public SecurityIdentifier (System.Security.Principal.WellKnownSidType sidType, System.Security.Principal.SecurityIdentifier domainSid);" />
    <Member Sig="public static bool op_Equality (System.Security.Principal.SecurityIdentifier left, System.Security.Principal.SecurityIdentifier right);" />
    <Member Sig="public static bool op_Inequality (System.Security.Principal.SecurityIdentifier left, System.Security.Principal.SecurityIdentifier right);" />
    <Member Sig="public static readonly int MaxBinaryLength;" />
    <Member Sig="public static readonly int MinBinaryLength;" />
    <Member Sig="public System.Security.Principal.SecurityIdentifier AccountDomainSid { get; }" />
    <Member Sig="public void GetBinaryForm (byte[] binaryForm, int offset);" />
  </Type>
  <Type Name="System.Security.Principal.TokenAccessLevels">
    <Member Sig="AdjustDefault" />
    <Member Sig="AdjustGroups" />
    <Member Sig="AdjustPrivileges" />
    <Member Sig="AdjustSessionId" />
    <Member Sig="AllAccess" />
    <Member Sig="AssignPrimary" />
    <Member Sig="Duplicate" />
    <Member Sig="Impersonate" />
    <Member Sig="MaximumAllowed" />
    <Member Sig="Query" />
    <Member Sig="QuerySource" />
    <Member Sig="Read" />
    <Member Sig="Write" />
  </Type>
  <Type Name="System.Security.Principal.TokenImpersonationLevel">
    <Member Sig="Anonymous" />
    <Member Sig="Delegation" />
    <Member Sig="Identification" />
    <Member Sig="Impersonation" />
    <Member Sig="None" />
  </Type>
  <Type Name="System.Security.Principal.WellKnownSidType">
    <Member Sig="AccountAdministratorSid" />
    <Member Sig="AccountCertAdminsSid" />
    <Member Sig="AccountComputersSid" />
    <Member Sig="AccountControllersSid" />
    <Member Sig="AccountDomainAdminsSid" />
    <Member Sig="AccountDomainGuestsSid" />
    <Member Sig="AccountDomainUsersSid" />
    <Member Sig="AccountEnterpriseAdminsSid" />
    <Member Sig="AccountGuestSid" />
    <Member Sig="AccountKrbtgtSid" />
    <Member Sig="AccountPolicyAdminsSid" />
    <Member Sig="AccountRasAndIasServersSid" />
    <Member Sig="AccountSchemaAdminsSid" />
    <Member Sig="AnonymousSid" />
    <Member Sig="AuthenticatedUserSid" />
    <Member Sig="BatchSid" />
    <Member Sig="BuiltinAccountOperatorsSid" />
    <Member Sig="BuiltinAdministratorsSid" />
    <Member Sig="BuiltinAuthorizationAccessSid" />
    <Member Sig="BuiltinBackupOperatorsSid" />
    <Member Sig="BuiltinDomainSid" />
    <Member Sig="BuiltinGuestsSid" />
    <Member Sig="BuiltinIncomingForestTrustBuildersSid" />
    <Member Sig="BuiltinNetworkConfigurationOperatorsSid" />
    <Member Sig="BuiltinPerformanceLoggingUsersSid" />
    <Member Sig="BuiltinPerformanceMonitoringUsersSid" />
    <Member Sig="BuiltinPowerUsersSid" />
    <Member Sig="BuiltinPreWindows2000CompatibleAccessSid" />
    <Member Sig="BuiltinPrintOperatorsSid" />
    <Member Sig="BuiltinRemoteDesktopUsersSid" />
    <Member Sig="BuiltinReplicatorSid" />
    <Member Sig="BuiltinSystemOperatorsSid" />
    <Member Sig="BuiltinUsersSid" />
    <Member Sig="CreatorGroupServerSid" />
    <Member Sig="CreatorGroupSid" />
    <Member Sig="CreatorOwnerServerSid" />
    <Member Sig="CreatorOwnerSid" />
    <Member Sig="DialupSid" />
    <Member Sig="DigestAuthenticationSid" />
    <Member Sig="EnterpriseControllersSid" />
    <Member Sig="InteractiveSid" />
    <Member Sig="LocalServiceSid" />
    <Member Sig="LocalSid" />
    <Member Sig="LocalSystemSid" />
    <Member Sig="LogonIdsSid" />
    <Member Sig="MaxDefined" />
    <Member Sig="NetworkServiceSid" />
    <Member Sig="NetworkSid" />
    <Member Sig="NTAuthoritySid" />
    <Member Sig="NtlmAuthenticationSid" />
    <Member Sig="NullSid" />
    <Member Sig="OtherOrganizationSid" />
    <Member Sig="ProxySid" />
    <Member Sig="RemoteLogonIdSid" />
    <Member Sig="RestrictedCodeSid" />
    <Member Sig="SChannelAuthenticationSid" />
    <Member Sig="SelfSid" />
    <Member Sig="ServiceSid" />
    <Member Sig="TerminalServerSid" />
    <Member Sig="ThisOrganizationSid" />
    <Member Sig="WinBuiltinTerminalServerLicenseServersSid" />
    <Member Sig="WorldSid" />
  </Type>
  <Type Name="System.Security.Principal.WindowsAccountType">
    <Member Sig="Anonymous" />
    <Member Sig="Guest" />
    <Member Sig="Normal" />
    <Member Sig="System" />
  </Type>
  <Type Name="System.Security.Principal.WindowsBuiltInRole">
    <Member Sig="AccountOperator" />
    <Member Sig="Administrator" />
    <Member Sig="BackupOperator" />
    <Member Sig="Guest" />
    <Member Sig="PowerUser" />
    <Member Sig="PrintOperator" />
    <Member Sig="Replicator" />
    <Member Sig="SystemOperator" />
    <Member Sig="User" />
  </Type>
  <Type Name="System.Security.Principal.WindowsIdentity">
    <Member Sig="protected virtual void Dispose (bool disposing);" />
    <Member Sig="public static System.Security.Principal.WindowsIdentity GetAnonymous ();" />
    <Member Sig="public static System.Security.Principal.WindowsIdentity GetCurrent ();" />
    <Member Sig="public static System.Security.Principal.WindowsIdentity GetCurrent (bool ifImpersonating);" />
    <Member Sig="public static System.Security.Principal.WindowsIdentity GetCurrent (System.Security.Principal.TokenAccessLevels desiredAccess);" />
    <Member Sig="public static System.Security.Principal.WindowsImpersonationContext Impersonate (IntPtr userToken);" />
    <Member Sig="public string AuthenticationType { get; }" />
    <Member Sig="public System.Security.Principal.IdentityReferenceCollection Groups { get; }" />
    <Member Sig="public System.Security.Principal.SecurityIdentifier Owner { get; }" />
    <Member Sig="public System.Security.Principal.SecurityIdentifier User { get; }" />
    <Member Sig="public System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }" />
    <Member Sig="public virtual bool IsAnonymous { get; }" />
    <Member Sig="public virtual bool IsAuthenticated { get; }" />
    <Member Sig="public virtual bool IsGuest { get; }" />
    <Member Sig="public virtual bool IsSystem { get; }" />
    <Member Sig="public virtual IntPtr Token { get; }" />
    <Member Sig="public virtual string Name { get; }" />
    <Member Sig="public virtual System.Security.Principal.WindowsImpersonationContext Impersonate ();" />
    <Member Sig="public void Dispose ();" />
    <Member Sig="public WindowsIdentity (IntPtr userToken);" />
    <Member Sig="public WindowsIdentity (IntPtr userToken, string type);" />
    <Member Sig="public WindowsIdentity (IntPtr userToken, string type, System.Security.Principal.WindowsAccountType acctType);" />
    <Member Sig="public WindowsIdentity (IntPtr userToken, string type, System.Security.Principal.WindowsAccountType acctType, bool isAuthenticated);" />
    <Member Sig="public WindowsIdentity (string sUserPrincipalName);" />
    <Member Sig="public WindowsIdentity (string sUserPrincipalName, string type);" />
    <Member Sig="public WindowsIdentity (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="void IDeserializationCallback.OnDeserialization (object sender);" />
    <Member Sig="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.Security.Principal.WindowsImpersonationContext">
    <Member Sig="protected virtual void Dispose (bool disposing);" />
    <Member Sig="public void Dispose ();" />
    <Member Sig="public void Undo ();" />
  </Type>
  <Type Name="System.Security.Principal.WindowsPrincipal">
    <Member Sig="public virtual bool IsInRole (int rid);" />
    <Member Sig="public virtual bool IsInRole (string role);" />
    <Member Sig="public virtual bool IsInRole (System.Security.Principal.SecurityIdentifier sid);" />
    <Member Sig="public virtual bool IsInRole (System.Security.Principal.WindowsBuiltInRole role);" />
    <Member Sig="public virtual System.Security.Principal.IIdentity Identity { get; }" />
    <Member Sig="public WindowsPrincipal (System.Security.Principal.WindowsIdentity ntIdentity);" />
  </Type>
  <Type Name="System.Security.SecureString">
    <Member Sig="public bool IsReadOnly ();" />
    <Member Sig="public int Length { get; }" />
    <Member Sig="public SecureString ();" />
    <Member Sig="public SecureString (char* value, int length);" />
    <Member Sig="public System.Security.SecureString Copy ();" />
    <Member Sig="public void AppendChar (char c);" />
    <Member Sig="public void Clear ();" />
    <Member Sig="public void Dispose ();" />
    <Member Sig="public void InsertAt (int index, char c);" />
    <Member Sig="public void MakeReadOnly ();" />
    <Member Sig="public void RemoveAt (int index);" />
    <Member Sig="public void SetAt (int index, char c);" />
  </Type>
  <Type Name="System.Security.SecurityContext">
    <Member Sig="public static bool IsFlowSuppressed ();" />
    <Member Sig="public static bool IsWindowsIdentityFlowSuppressed ();" />
    <Member Sig="public static System.Security.SecurityContext Capture ();" />
    <Member Sig="public static System.Threading.AsyncFlowControl SuppressFlow ();" />
    <Member Sig="public static System.Threading.AsyncFlowControl SuppressFlowWindowsIdentity ();" />
    <Member Sig="public static void RestoreFlow ();" />
    <Member Sig="public static void Run (System.Security.SecurityContext securityContext, System.Threading.ContextCallback callback, object state);" />
    <Member Sig="public System.Security.SecurityContext CreateCopy ();" />
  </Type>
  <Type Name="System.Security.SecurityCriticalAttribute">
    <Member Sig="public SecurityCriticalAttribute ();" />
    <Member Sig="public SecurityCriticalAttribute (System.Security.SecurityCriticalScope scope);" />
    <Member Sig="public System.Security.SecurityCriticalScope Scope { get; }" />
  </Type>
  <Type Name="System.Security.SecurityCriticalScope">
    <Member Sig="Everything" />
    <Member Sig="Explicit" />
  </Type>
  <Type Name="System.Security.SecurityElement">
    <Member Sig="public bool Equal (System.Security.SecurityElement other);" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public SecurityElement (string tag);" />
    <Member Sig="public SecurityElement (string tag, string text);" />
    <Member Sig="public static bool IsValidAttributeName (string name);" />
    <Member Sig="public static bool IsValidAttributeValue (string value);" />
    <Member Sig="public static bool IsValidTag (string tag);" />
    <Member Sig="public static bool IsValidText (string text);" />
    <Member Sig="public static string Escape (string str);" />
    <Member Sig="public static System.Security.SecurityElement FromString (string xml);" />
    <Member Sig="public string Attribute (string name);" />
    <Member Sig="public string SearchForTextOfTag (string tag);" />
    <Member Sig="public string Tag { get; set; }" />
    <Member Sig="public string Text { get; set; }" />
    <Member Sig="public System.Collections.ArrayList Children { get; set; }" />
    <Member Sig="public System.Collections.Hashtable Attributes { get; set; }" />
    <Member Sig="public System.Security.SecurityElement Copy ();" />
    <Member Sig="public System.Security.SecurityElement SearchForChildByTag (string tag);" />
    <Member Sig="public void AddAttribute (string name, string value);" />
    <Member Sig="public void AddChild (System.Security.SecurityElement child);" />
  </Type>
  <Type Name="System.Security.SecurityException">
    <Member Sig="protected SecurityException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public object Demanded { get; set; }" />
    <Member Sig="public object DenySetInstance { get; set; }" />
    <Member Sig="public object PermitOnlySetInstance { get; set; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public SecurityException ();" />
    <Member Sig="public SecurityException (string message);" />
    <Member Sig="public SecurityException (string message, Exception inner);" />
    <Member Sig="public SecurityException (string message, object deny, object permitOnly, System.Reflection.MethodInfo method, object demanded, System.Security.IPermission permThatFailed);" />
    <Member Sig="public SecurityException (string message, System.Reflection.AssemblyName assemblyName, System.Security.PermissionSet grant, System.Security.PermissionSet refused, System.Reflection.MethodInfo method, System.Security.Permissions.SecurityAction action, object demanded, System.Security.IPermission permThatFailed, System.Security.Policy.Evidence evidence);" />
    <Member Sig="public SecurityException (string message, Type type);" />
    <Member Sig="public SecurityException (string message, Type type, string state);" />
    <Member Sig="public string GrantedSet { get; set; }" />
    <Member Sig="public string PermissionState { get; set; }" />
    <Member Sig="public string RefusedSet { get; set; }" />
    <Member Sig="public string Url { get; set; }" />
    <Member Sig="public System.Reflection.AssemblyName FailedAssemblyInfo { get; set; }" />
    <Member Sig="public System.Reflection.MethodInfo Method { get; set; }" />
    <Member Sig="public System.Security.IPermission FirstPermissionThatFailed { get; set; }" />
    <Member Sig="public System.Security.Permissions.SecurityAction Action { get; set; }" />
    <Member Sig="public System.Security.SecurityZone Zone { get; set; }" />
    <Member Sig="public Type PermissionType { get; set; }" />
  </Type>
  <Type Name="System.Security.SecurityManager">
    <Member Sig="public static bool CheckExecutionRights { get; set; }" />
    <Member Sig="public static bool IsGranted (System.Security.IPermission perm);" />
    <Member Sig="public static bool SecurityEnabled { get; set; }" />
    <Member Sig="public static System.Collections.IEnumerator PolicyHierarchy ();" />
    <Member Sig="public static System.Collections.IEnumerator ResolvePolicyGroups (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public static System.Security.PermissionSet ResolvePolicy (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public static System.Security.PermissionSet ResolvePolicy (System.Security.Policy.Evidence evidence, System.Security.PermissionSet reqdPset, System.Security.PermissionSet optPset, System.Security.PermissionSet denyPset, out System.Security.PermissionSet denied);" />
    <Member Sig="public static System.Security.PermissionSet ResolvePolicy (System.Security.Policy.Evidence[] evidences);" />
    <Member Sig="public static System.Security.PermissionSet ResolveSystemPolicy (System.Security.Policy.Evidence evidence);" />
    <Member Sig="public static System.Security.Policy.PolicyLevel LoadPolicyLevelFromFile (string path, System.Security.PolicyLevelType type);" />
    <Member Sig="public static System.Security.Policy.PolicyLevel LoadPolicyLevelFromString (string str, System.Security.PolicyLevelType type);" />
    <Member Sig="public static void GetZoneAndOrigin (out System.Collections.ArrayList zone, out System.Collections.ArrayList origin);" />
    <Member Sig="public static void SavePolicy ();" />
    <Member Sig="public static void SavePolicyLevel (System.Security.Policy.PolicyLevel level);" />
  </Type>
  <Type Name="System.Security.SecuritySafeCriticalAttribute">
    <Member Sig="public SecuritySafeCriticalAttribute ();" />
  </Type>
  <Type Name="System.Security.SecurityState">
    <Member Sig="protected SecurityState ();" />
    <Member Sig="public abstract void EnsureState ();" />
    <Member Sig="public bool IsStateAvailable ();" />
  </Type>
  <Type Name="System.Security.SecurityTransparentAttribute">
    <Member Sig="public SecurityTransparentAttribute ();" />
  </Type>
  <Type Name="System.Security.SecurityTreatAsSafeAttribute">
    <Member Sig="public SecurityTreatAsSafeAttribute ();" />
  </Type>
  <Type Name="System.Security.SecurityZone">
    <Member Sig="Internet" />
    <Member Sig="Intranet" />
    <Member Sig="MyComputer" />
    <Member Sig="NoZone" />
    <Member Sig="Trusted" />
    <Member Sig="Untrusted" />
  </Type>
  <Type Name="System.Security.SuppressUnmanagedCodeSecurityAttribute">
    <Member Sig="public SuppressUnmanagedCodeSecurityAttribute ();" />
  </Type>
  <Type Name="System.Security.UnverifiableCodeAttribute">
    <Member Sig="public UnverifiableCodeAttribute ();" />
  </Type>
  <Type Name="System.Security.VerificationException">
    <Member Sig="protected VerificationException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public VerificationException ();" />
    <Member Sig="public VerificationException (string message);" />
    <Member Sig="public VerificationException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.Security.XmlSyntaxException">
    <Member Sig="public XmlSyntaxException ();" />
    <Member Sig="public XmlSyntaxException (int lineNumber);" />
    <Member Sig="public XmlSyntaxException (int lineNumber, string message);" />
    <Member Sig="public XmlSyntaxException (string message);" />
    <Member Sig="public XmlSyntaxException (string message, Exception inner);" />
  </Type>
  <Type Name="System.SerializableAttribute">
    <Member Sig="public SerializableAttribute ();" />
  </Type>
  <Type Name="System.Single">
    <Member Sig="bool IConvertible.ToBoolean (IFormatProvider provider);" />
    <Member Sig="byte IConvertible.ToByte (IFormatProvider provider);" />
    <Member Sig="char IConvertible.ToChar (IFormatProvider provider);" />
    <Member Sig="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
    <Member Sig="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
    <Member Sig="double IConvertible.ToDouble (IFormatProvider provider);" />
    <Member Sig="float IConvertible.ToSingle (IFormatProvider provider);" />
    <Member Sig="int IConvertible.ToInt32 (IFormatProvider provider);" />
    <Member Sig="long IConvertible.ToInt64 (IFormatProvider provider);" />
    <Member Sig="object IConvertible.ToType (Type type, IFormatProvider provider);" />
    <Member Sig="public bool Equals (float obj);" />
    <Member Sig="public const float Epsilon = 1.401298E-45;" />
    <Member Sig="public const float MaxValue = 3.402823E+38;" />
    <Member Sig="public const float MinValue = -3.402823E+38;" />
    <Member Sig="public const float NaN = NaN;" />
    <Member Sig="public const float NegativeInfinity = -Infinity;" />
    <Member Sig="public const float PositiveInfinity = Infinity;" />
    <Member Sig="public int CompareTo (float value);" />
    <Member Sig="public int CompareTo (object value);" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool IsInfinity (float f);" />
    <Member Sig="public static bool IsNaN (float f);" />
    <Member Sig="public static bool IsNegativeInfinity (float f);" />
    <Member Sig="public static bool IsPositiveInfinity (float f);" />
    <Member Sig="public static bool TryParse (string s, out float result);" />
    <Member Sig="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out float result);" />
    <Member Sig="public static float Parse (string s);" />
    <Member Sig="public static float Parse (string s, IFormatProvider provider);" />
    <Member Sig="public static float Parse (string s, System.Globalization.NumberStyles style);" />
    <Member Sig="public static float Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
    <Member Sig="public string ToString (IFormatProvider provider);" />
    <Member Sig="public string ToString (string format);" />
    <Member Sig="public string ToString (string format, IFormatProvider provider);" />
    <Member Sig="public TypeCode GetTypeCode ();" />
    <Member Sig="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
    <Member Sig="short IConvertible.ToInt16 (IFormatProvider provider);" />
    <Member Sig="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
    <Member Sig="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
    <Member Sig="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
  </Type>
  <Type Name="System.StackOverflowException">
    <Member Sig="public StackOverflowException ();" />
    <Member Sig="public StackOverflowException (string message);" />
    <Member Sig="public StackOverflowException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.STAThreadAttribute">
    <Member Sig="public STAThreadAttribute ();" />
  </Type>
  <Type Name="System.String">
    <Member Sig="bool IConvertible.ToBoolean (IFormatProvider provider);" />
    <Member Sig="byte IConvertible.ToByte (IFormatProvider provider);" />
    <Member Sig="char IConvertible.ToChar (IFormatProvider provider);" />
    <Member Sig="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
    <Member Sig="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
    <Member Sig="double IConvertible.ToDouble (IFormatProvider provider);" />
    <Member Sig="float IConvertible.ToSingle (IFormatProvider provider);" />
    <Member Sig="int IConvertible.ToInt32 (IFormatProvider provider);" />
    <Member Sig="long IConvertible.ToInt64 (IFormatProvider provider);" />
    <Member Sig="object IConvertible.ToType (Type type, IFormatProvider provider);" />
    <Member Sig="public bool Contains (string value);" />
    <Member Sig="public bool EndsWith (string value);" />
    <Member Sig="public bool EndsWith (string value, bool ignoreCase, System.Globalization.CultureInfo culture);" />
    <Member Sig="public bool EndsWith (string value, StringComparison comparisonType);" />
    <Member Sig="public bool Equals (string value);" />
    <Member Sig="public bool Equals (string value, StringComparison comparisonType);" />
    <Member Sig="public bool IsNormalized ();" />
    <Member Sig="public bool IsNormalized (System.Text.NormalizationForm normalizationForm);" />
    <Member Sig="public bool StartsWith (string value);" />
    <Member Sig="public bool StartsWith (string value, bool ignoreCase, System.Globalization.CultureInfo culture);" />
    <Member Sig="public bool StartsWith (string value, StringComparison comparisonType);" />
    <Member Sig="public char this[int index] { get; }" />
    <Member Sig="public char[] ToCharArray ();" />
    <Member Sig="public char[] ToCharArray (int startIndex, int length);" />
    <Member Sig="public CharEnumerator GetEnumerator ();" />
    <Member Sig="public int CompareTo (object value);" />
    <Member Sig="public int CompareTo (string strB);" />
    <Member Sig="public int IndexOf (char value);" />
    <Member Sig="public int IndexOf (char value, int startIndex);" />
    <Member Sig="public int IndexOf (char value, int startIndex, int count);" />
    <Member Sig="public int IndexOf (string value);" />
    <Member Sig="public int IndexOf (string value, int startIndex);" />
    <Member Sig="public int IndexOf (string value, int startIndex, int count);" />
    <Member Sig="public int IndexOf (string value, int startIndex, int count, StringComparison comparisonType);" />
    <Member Sig="public int IndexOf (string value, int startIndex, StringComparison comparisonType);" />
    <Member Sig="public int IndexOf (string value, StringComparison comparisonType);" />
    <Member Sig="public int IndexOfAny (char[] anyOf);" />
    <Member Sig="public int IndexOfAny (char[] anyOf, int startIndex);" />
    <Member Sig="public int IndexOfAny (char[] anyOf, int startIndex, int count);" />
    <Member Sig="public int LastIndexOf (char value);" />
    <Member Sig="public int LastIndexOf (char value, int startIndex);" />
    <Member Sig="public int LastIndexOf (char value, int startIndex, int count);" />
    <Member Sig="public int LastIndexOf (string value);" />
    <Member Sig="public int LastIndexOf (string value, int startIndex);" />
    <Member Sig="public int LastIndexOf (string value, int startIndex, int count);" />
    <Member Sig="public int LastIndexOf (string value, int startIndex, int count, StringComparison comparisonType);" />
    <Member Sig="public int LastIndexOf (string value, int startIndex, StringComparison comparisonType);" />
    <Member Sig="public int LastIndexOf (string value, StringComparison comparisonType);" />
    <Member Sig="public int LastIndexOfAny (char[] anyOf);" />
    <Member Sig="public int LastIndexOfAny (char[] anyOf, int startIndex);" />
    <Member Sig="public int LastIndexOfAny (char[] anyOf, int startIndex, int count);" />
    <Member Sig="public int Length { get; }" />
    <Member Sig="public object Clone ();" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool Equals (string a, string b);" />
    <Member Sig="public static bool Equals (string a, string b, StringComparison comparisonType);" />
    <Member Sig="public static bool IsNullOrEmpty (string value);" />
    <Member Sig="public static bool op_Equality (string a, string b);" />
    <Member Sig="public static bool op_Inequality (string a, string b);" />
    <Member Sig="public static int Compare (string strA, int indexA, string strB, int indexB, int length);" />
    <Member Sig="public static int Compare (string strA, int indexA, string strB, int indexB, int length, bool ignoreCase);" />
    <Member Sig="public static int Compare (string strA, int indexA, string strB, int indexB, int length, bool ignoreCase, System.Globalization.CultureInfo culture);" />
    <Member Sig="public static int Compare (string strA, int indexA, string strB, int indexB, int length, StringComparison comparisonType);" />
    <Member Sig="public static int Compare (string strA, int indexA, string strB, int indexB, int length, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);" />
    <Member Sig="public static int Compare (string strA, string strB);" />
    <Member Sig="public static int Compare (string strA, string strB, bool ignoreCase);" />
    <Member Sig="public static int Compare (string strA, string strB, bool ignoreCase, System.Globalization.CultureInfo culture);" />
    <Member Sig="public static int Compare (string strA, string strB, StringComparison comparisonType);" />
    <Member Sig="public static int Compare (string strA, string strB, System.Globalization.CultureInfo culture, System.Globalization.CompareOptions options);" />
    <Member Sig="public static int CompareOrdinal (string strA, int indexA, string strB, int indexB, int length);" />
    <Member Sig="public static int CompareOrdinal (string strA, string strB);" />
    <Member Sig="public static readonly string Empty;" />
    <Member Sig="public static string Concat (object arg0);" />
    <Member Sig="public static string Concat (object arg0, object arg1);" />
    <Member Sig="public static string Concat (object arg0, object arg1, object arg2);" />
    <Member Sig="public static string Concat (object arg0, object arg1, object arg2, object arg3);" />
    <Member Sig="public static string Concat (object[] args);" />
    <Member Sig="public static string Concat (string str0, string str1);" />
    <Member Sig="public static string Concat (string str0, string str1, string str2);" />
    <Member Sig="public static string Concat (string str0, string str1, string str2, string str3);" />
    <Member Sig="public static string Concat (string[] values);" />
    <Member Sig="public static string Copy (string str);" />
    <Member Sig="public static string Format (IFormatProvider provider, string format, object[] args);" />
    <Member Sig="public static string Format (string format, object arg0);" />
    <Member Sig="public static string Format (string format, object arg0, object arg1);" />
    <Member Sig="public static string Format (string format, object arg0, object arg1, object arg2);" />
    <Member Sig="public static string Format (string format, object[] args);" />
    <Member Sig="public static string Intern (string str);" />
    <Member Sig="public static string IsInterned (string str);" />
    <Member Sig="public static string Join (string separator, string[] value);" />
    <Member Sig="public static string Join (string separator, string[] value, int startIndex, int count);" />
    <Member Sig="public String (char c, int count);" />
    <Member Sig="public String (char* value);" />
    <Member Sig="public String (char* value, int startIndex, int length);" />
    <Member Sig="public String (char[] value);" />
    <Member Sig="public String (char[] value, int startIndex, int length);" />
    <Member Sig="public String (sbyte* value);" />
    <Member Sig="public String (sbyte* value, int startIndex, int length);" />
    <Member Sig="public String (sbyte* value, int startIndex, int length, System.Text.Encoding enc);" />
    <Member Sig="public string Insert (int startIndex, string value);" />
    <Member Sig="public string Normalize ();" />
    <Member Sig="public string Normalize (System.Text.NormalizationForm normalizationForm);" />
    <Member Sig="public string PadLeft (int totalWidth);" />
    <Member Sig="public string PadLeft (int totalWidth, char paddingChar);" />
    <Member Sig="public string PadRight (int totalWidth);" />
    <Member Sig="public string PadRight (int totalWidth, char paddingChar);" />
    <Member Sig="public string Remove (int startIndex);" />
    <Member Sig="public string Remove (int startIndex, int count);" />
    <Member Sig="public string Replace (char oldChar, char newChar);" />
    <Member Sig="public string Replace (string oldValue, string newValue);" />
    <Member Sig="public string Substring (int startIndex);" />
    <Member Sig="public string Substring (int startIndex, int length);" />
    <Member Sig="public string ToLower ();" />
    <Member Sig="public string ToLower (System.Globalization.CultureInfo culture);" />
    <Member Sig="public string ToLowerInvariant ();" />
    <Member Sig="public string ToString (IFormatProvider provider);" />
    <Member Sig="public string ToUpper ();" />
    <Member Sig="public string ToUpper (System.Globalization.CultureInfo culture);" />
    <Member Sig="public string ToUpperInvariant ();" />
    <Member Sig="public string Trim ();" />
    <Member Sig="public string Trim (char[] trimChars);" />
    <Member Sig="public string TrimEnd (char[] trimChars);" />
    <Member Sig="public string TrimStart (char[] trimChars);" />
    <Member Sig="public string[] Split (char[] separator);" />
    <Member Sig="public string[] Split (char[] separator, int count);" />
    <Member Sig="public string[] Split (char[] separator, int count, StringSplitOptions options);" />
    <Member Sig="public string[] Split (char[] separator, StringSplitOptions options);" />
    <Member Sig="public string[] Split (string[] separator, int count, StringSplitOptions options);" />
    <Member Sig="public string[] Split (string[] separator, StringSplitOptions options);" />
    <Member Sig="public TypeCode GetTypeCode ();" />
    <Member Sig="public void CopyTo (int sourceIndex, char[] destination, int destinationIndex, int count);" />
    <Member Sig="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
    <Member Sig="short IConvertible.ToInt16 (IFormatProvider provider);" />
    <Member Sig="System.Collections.Generic.IEnumerator&lt;char&gt; IEnumerable&lt;char&gt;.GetEnumerator ();" />
    <Member Sig="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
    <Member Sig="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
    <Member Sig="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
    <Member Sig="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
  </Type>
  <Type Name="System.StringComparer">
    <Member Sig="protected StringComparer ();" />
    <Member Sig="public abstract bool Equals (string x, string y);" />
    <Member Sig="public abstract int Compare (string x, string y);" />
    <Member Sig="public abstract int GetHashCode (string obj);" />
    <Member Sig="public bool Equals (object x, object y);" />
    <Member Sig="public int Compare (object x, object y);" />
    <Member Sig="public int GetHashCode (object obj);" />
    <Member Sig="public static StringComparer Create (System.Globalization.CultureInfo culture, bool ignoreCase);" />
    <Member Sig="public static StringComparer CurrentCulture { get; }" />
    <Member Sig="public static StringComparer CurrentCultureIgnoreCase { get; }" />
    <Member Sig="public static StringComparer InvariantCulture { get; }" />
    <Member Sig="public static StringComparer InvariantCultureIgnoreCase { get; }" />
    <Member Sig="public static StringComparer Ordinal { get; }" />
    <Member Sig="public static StringComparer OrdinalIgnoreCase { get; }" />
  </Type>
  <Type Name="System.StringComparison">
    <Member Sig="CurrentCulture" />
    <Member Sig="CurrentCultureIgnoreCase" />
    <Member Sig="InvariantCulture" />
    <Member Sig="InvariantCultureIgnoreCase" />
    <Member Sig="Ordinal" />
    <Member Sig="OrdinalIgnoreCase" />
  </Type>
  <Type Name="System.StringSplitOptions">
    <Member Sig="None" />
    <Member Sig="RemoveEmptyEntries" />
  </Type>
  <Type Name="System.SystemException">
    <Member Sig="protected SystemException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public SystemException ();" />
    <Member Sig="public SystemException (string message);" />
    <Member Sig="public SystemException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.Text.ASCIIEncoding">
    <Member Sig="public ASCIIEncoding ();" />
    <Member Sig="public override bool IsSingleByte { get; }" />
    <Member Sig="public override int GetByteCount (char* chars, int count);" />
    <Member Sig="public override int GetByteCount (char[] chars, int index, int count);" />
    <Member Sig="public override int GetByteCount (string chars);" />
    <Member Sig="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
    <Member Sig="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
    <Member Sig="public override int GetBytes (string chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
    <Member Sig="public override int GetCharCount (byte* bytes, int count);" />
    <Member Sig="public override int GetCharCount (byte[] bytes, int index, int count);" />
    <Member Sig="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
    <Member Sig="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
    <Member Sig="public override int GetMaxByteCount (int charCount);" />
    <Member Sig="public override int GetMaxCharCount (int byteCount);" />
    <Member Sig="public override string GetString (byte[] bytes, int byteIndex, int byteCount);" />
    <Member Sig="public override System.Text.Decoder GetDecoder ();" />
    <Member Sig="public override System.Text.Encoder GetEncoder ();" />
  </Type>
  <Type Name="System.Text.Decoder">
    <Member Sig="protected Decoder ();" />
    <Member Sig="public abstract int GetCharCount (byte[] bytes, int index, int count);" />
    <Member Sig="public abstract int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
    <Member Sig="public System.Text.DecoderFallback Fallback { get; set; }" />
    <Member Sig="public System.Text.DecoderFallbackBuffer FallbackBuffer { get; }" />
    <Member Sig="public virtual int GetCharCount (byte* bytes, int count, bool flush);" />
    <Member Sig="public virtual int GetCharCount (byte[] bytes, int index, int count, bool flush);" />
    <Member Sig="public virtual int GetChars (byte* bytes, int byteCount, char* chars, int charCount, bool flush);" />
    <Member Sig="public virtual int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush);" />
    <Member Sig="public virtual void Convert (byte* bytes, int byteCount, char* chars, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed);" />
    <Member Sig="public virtual void Convert (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed);" />
    <Member Sig="public virtual void Reset ();" />
  </Type>
  <Type Name="System.Text.DecoderExceptionFallback">
    <Member Sig="public DecoderExceptionFallback ();" />
    <Member Sig="public override bool Equals (object value);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override int MaxCharCount { get; }" />
    <Member Sig="public override System.Text.DecoderFallbackBuffer CreateFallbackBuffer ();" />
  </Type>
  <Type Name="System.Text.DecoderExceptionFallbackBuffer">
    <Member Sig="public DecoderExceptionFallbackBuffer ();" />
    <Member Sig="public override bool Fallback (byte[] bytesUnknown, int index);" />
    <Member Sig="public override bool MovePrevious ();" />
    <Member Sig="public override char GetNextChar ();" />
    <Member Sig="public override int Remaining { get; }" />
  </Type>
  <Type Name="System.Text.DecoderFallback">
    <Member Sig="protected DecoderFallback ();" />
    <Member Sig="public abstract int MaxCharCount { get; }" />
    <Member Sig="public abstract System.Text.DecoderFallbackBuffer CreateFallbackBuffer ();" />
    <Member Sig="public static System.Text.DecoderFallback ExceptionFallback { get; }" />
    <Member Sig="public static System.Text.DecoderFallback ReplacementFallback { get; }" />
  </Type>
  <Type Name="System.Text.DecoderFallbackBuffer">
    <Member Sig="protected DecoderFallbackBuffer ();" />
    <Member Sig="public abstract bool Fallback (byte[] bytesUnknown, int index);" />
    <Member Sig="public abstract bool MovePrevious ();" />
    <Member Sig="public abstract char GetNextChar ();" />
    <Member Sig="public abstract int Remaining { get; }" />
    <Member Sig="public virtual void Reset ();" />
  </Type>
  <Type Name="System.Text.DecoderFallbackException">
    <Member Sig="public byte[] BytesUnknown { get; }" />
    <Member Sig="public DecoderFallbackException ();" />
    <Member Sig="public DecoderFallbackException (string message);" />
    <Member Sig="public DecoderFallbackException (string message, byte[] bytesUnknown, int index);" />
    <Member Sig="public DecoderFallbackException (string message, Exception innerException);" />
    <Member Sig="public int Index { get; }" />
  </Type>
  <Type Name="System.Text.DecoderReplacementFallback">
    <Member Sig="public DecoderReplacementFallback ();" />
    <Member Sig="public DecoderReplacementFallback (string replacement);" />
    <Member Sig="public override bool Equals (object value);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override int MaxCharCount { get; }" />
    <Member Sig="public override System.Text.DecoderFallbackBuffer CreateFallbackBuffer ();" />
    <Member Sig="public string DefaultString { get; }" />
  </Type>
  <Type Name="System.Text.DecoderReplacementFallbackBuffer">
    <Member Sig="public DecoderReplacementFallbackBuffer (System.Text.DecoderReplacementFallback fallback);" />
    <Member Sig="public override bool Fallback (byte[] bytesUnknown, int index);" />
    <Member Sig="public override bool MovePrevious ();" />
    <Member Sig="public override char GetNextChar ();" />
    <Member Sig="public override int Remaining { get; }" />
    <Member Sig="public override void Reset ();" />
  </Type>
  <Type Name="System.Text.Encoder">
    <Member Sig="protected Encoder ();" />
    <Member Sig="public abstract int GetByteCount (char[] chars, int index, int count, bool flush);" />
    <Member Sig="public abstract int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, bool flush);" />
    <Member Sig="public System.Text.EncoderFallback Fallback { get; set; }" />
    <Member Sig="public System.Text.EncoderFallbackBuffer FallbackBuffer { get; }" />
    <Member Sig="public virtual int GetByteCount (char* chars, int count, bool flush);" />
    <Member Sig="public virtual int GetBytes (char* chars, int charCount, byte* bytes, int byteCount, bool flush);" />
    <Member Sig="public virtual void Convert (char* chars, int charCount, byte* bytes, int byteCount, bool flush, out int charsUsed, out int bytesUsed, out bool completed);" />
    <Member Sig="public virtual void Convert (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex, int byteCount, bool flush, out int charsUsed, out int bytesUsed, out bool completed);" />
    <Member Sig="public virtual void Reset ();" />
  </Type>
  <Type Name="System.Text.EncoderExceptionFallback">
    <Member Sig="public EncoderExceptionFallback ();" />
    <Member Sig="public override bool Equals (object value);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override int MaxCharCount { get; }" />
    <Member Sig="public override System.Text.EncoderFallbackBuffer CreateFallbackBuffer ();" />
  </Type>
  <Type Name="System.Text.EncoderExceptionFallbackBuffer">
    <Member Sig="public EncoderExceptionFallbackBuffer ();" />
    <Member Sig="public override bool Fallback (char charUnknown, int index);" />
    <Member Sig="public override bool Fallback (char charUnknownHigh, char charUnknownLow, int index);" />
    <Member Sig="public override bool MovePrevious ();" />
    <Member Sig="public override char GetNextChar ();" />
    <Member Sig="public override int Remaining { get; }" />
  </Type>
  <Type Name="System.Text.EncoderFallback">
    <Member Sig="protected EncoderFallback ();" />
    <Member Sig="public abstract int MaxCharCount { get; }" />
    <Member Sig="public abstract System.Text.EncoderFallbackBuffer CreateFallbackBuffer ();" />
    <Member Sig="public static System.Text.EncoderFallback ExceptionFallback { get; }" />
    <Member Sig="public static System.Text.EncoderFallback ReplacementFallback { get; }" />
  </Type>
  <Type Name="System.Text.EncoderFallbackBuffer">
    <Member Sig="protected EncoderFallbackBuffer ();" />
    <Member Sig="public abstract bool Fallback (char charUnknown, int index);" />
    <Member Sig="public abstract bool Fallback (char charUnknownHigh, char charUnknownLow, int index);" />
    <Member Sig="public abstract bool MovePrevious ();" />
    <Member Sig="public abstract char GetNextChar ();" />
    <Member Sig="public abstract int Remaining { get; }" />
    <Member Sig="public virtual void Reset ();" />
  </Type>
  <Type Name="System.Text.EncoderFallbackException">
    <Member Sig="public bool IsUnknownSurrogate ();" />
    <Member Sig="public char CharUnknown { get; }" />
    <Member Sig="public char CharUnknownHigh { get; }" />
    <Member Sig="public char CharUnknownLow { get; }" />
    <Member Sig="public EncoderFallbackException ();" />
    <Member Sig="public EncoderFallbackException (string message);" />
    <Member Sig="public EncoderFallbackException (string message, Exception innerException);" />
    <Member Sig="public int Index { get; }" />
  </Type>
  <Type Name="System.Text.EncoderReplacementFallback">
    <Member Sig="public EncoderReplacementFallback ();" />
    <Member Sig="public EncoderReplacementFallback (string replacement);" />
    <Member Sig="public override bool Equals (object value);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override int MaxCharCount { get; }" />
    <Member Sig="public override System.Text.EncoderFallbackBuffer CreateFallbackBuffer ();" />
    <Member Sig="public string DefaultString { get; }" />
  </Type>
  <Type Name="System.Text.EncoderReplacementFallbackBuffer">
    <Member Sig="public EncoderReplacementFallbackBuffer (System.Text.EncoderReplacementFallback fallback);" />
    <Member Sig="public override bool Fallback (char charUnknown, int index);" />
    <Member Sig="public override bool Fallback (char charUnknownHigh, char charUnknownLow, int index);" />
    <Member Sig="public override bool MovePrevious ();" />
    <Member Sig="public override char GetNextChar ();" />
    <Member Sig="public override int Remaining { get; }" />
    <Member Sig="public override void Reset ();" />
  </Type>
  <Type Name="System.Text.Encoding">
    <Member Sig="protected Encoding ();" />
    <Member Sig="protected Encoding (int codePage);" />
    <Member Sig="public abstract int GetByteCount (char[] chars, int index, int count);" />
    <Member Sig="public abstract int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
    <Member Sig="public abstract int GetCharCount (byte[] bytes, int index, int count);" />
    <Member Sig="public abstract int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
    <Member Sig="public abstract int GetMaxByteCount (int charCount);" />
    <Member Sig="public abstract int GetMaxCharCount (int byteCount);" />
    <Member Sig="public bool IsAlwaysNormalized ();" />
    <Member Sig="public bool IsReadOnly { get; }" />
    <Member Sig="public override bool Equals (object value);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static byte[] Convert (System.Text.Encoding srcEncoding, System.Text.Encoding dstEncoding, byte[] bytes);" />
    <Member Sig="public static byte[] Convert (System.Text.Encoding srcEncoding, System.Text.Encoding dstEncoding, byte[] bytes, int index, int count);" />
    <Member Sig="public static System.Text.Encoding ASCII { get; }" />
    <Member Sig="public static System.Text.Encoding BigEndianUnicode { get; }" />
    <Member Sig="public static System.Text.Encoding Default { get; }" />
    <Member Sig="public static System.Text.Encoding GetEncoding (int codepage);" />
    <Member Sig="public static System.Text.Encoding GetEncoding (int codepage, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
    <Member Sig="public static System.Text.Encoding GetEncoding (string name);" />
    <Member Sig="public static System.Text.Encoding GetEncoding (string name, System.Text.EncoderFallback encoderFallback, System.Text.DecoderFallback decoderFallback);" />
    <Member Sig="public static System.Text.Encoding Unicode { get; }" />
    <Member Sig="public static System.Text.Encoding UTF32 { get; }" />
    <Member Sig="public static System.Text.Encoding UTF7 { get; }" />
    <Member Sig="public static System.Text.Encoding UTF8 { get; }" />
    <Member Sig="public static System.Text.EncodingInfo[] GetEncodings ();" />
    <Member Sig="public System.Text.DecoderFallback DecoderFallback { get; set; }" />
    <Member Sig="public System.Text.EncoderFallback EncoderFallback { get; set; }" />
    <Member Sig="public virtual bool IsAlwaysNormalized (System.Text.NormalizationForm form);" />
    <Member Sig="public virtual bool IsBrowserDisplay { get; }" />
    <Member Sig="public virtual bool IsBrowserSave { get; }" />
    <Member Sig="public virtual bool IsMailNewsDisplay { get; }" />
    <Member Sig="public virtual bool IsMailNewsSave { get; }" />
    <Member Sig="public virtual bool IsSingleByte { get; }" />
    <Member Sig="public virtual byte[] GetBytes (char[] chars);" />
    <Member Sig="public virtual byte[] GetBytes (char[] chars, int index, int count);" />
    <Member Sig="public virtual byte[] GetBytes (string s);" />
    <Member Sig="public virtual byte[] GetPreamble ();" />
    <Member Sig="public virtual char[] GetChars (byte[] bytes);" />
    <Member Sig="public virtual char[] GetChars (byte[] bytes, int index, int count);" />
    <Member Sig="public virtual int CodePage { get; }" />
    <Member Sig="public virtual int GetByteCount (char* chars, int count);" />
    <Member Sig="public virtual int GetByteCount (char[] chars);" />
    <Member Sig="public virtual int GetByteCount (string s);" />
    <Member Sig="public virtual int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
    <Member Sig="public virtual int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
    <Member Sig="public virtual int GetCharCount (byte* bytes, int count);" />
    <Member Sig="public virtual int GetCharCount (byte[] bytes);" />
    <Member Sig="public virtual int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
    <Member Sig="public virtual int WindowsCodePage { get; }" />
    <Member Sig="public virtual object Clone ();" />
    <Member Sig="public virtual string BodyName { get; }" />
    <Member Sig="public virtual string EncodingName { get; }" />
    <Member Sig="public virtual string GetString (byte[] bytes);" />
    <Member Sig="public virtual string GetString (byte[] bytes, int index, int count);" />
    <Member Sig="public virtual string HeaderName { get; }" />
    <Member Sig="public virtual string WebName { get; }" />
    <Member Sig="public virtual System.Text.Decoder GetDecoder ();" />
    <Member Sig="public virtual System.Text.Encoder GetEncoder ();" />
  </Type>
  <Type Name="System.Text.EncodingInfo">
    <Member Sig="public int CodePage { get; }" />
    <Member Sig="public override bool Equals (object value);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public string DisplayName { get; }" />
    <Member Sig="public string Name { get; }" />
    <Member Sig="public System.Text.Encoding GetEncoding ();" />
  </Type>
  <Type Name="System.Text.NormalizationForm">
    <Member Sig="FormC" />
    <Member Sig="FormD" />
    <Member Sig="FormKC" />
    <Member Sig="FormKD" />
  </Type>
  <Type Name="System.Text.StringBuilder">
    <Member Sig="public bool Equals (System.Text.StringBuilder sb);" />
    <Member Sig="public char this[int index] { get; set; }" />
    <Member Sig="public int Capacity { get; set; }" />
    <Member Sig="public int EnsureCapacity (int capacity);" />
    <Member Sig="public int Length { get; set; }" />
    <Member Sig="public int MaxCapacity { get; }" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public string ToString (int startIndex, int length);" />
    <Member Sig="public StringBuilder ();" />
    <Member Sig="public StringBuilder (int capacity);" />
    <Member Sig="public StringBuilder (int capacity, int maxCapacity);" />
    <Member Sig="public StringBuilder (string value);" />
    <Member Sig="public StringBuilder (string value, int capacity);" />
    <Member Sig="public StringBuilder (string value, int startIndex, int length, int capacity);" />
    <Member Sig="public System.Text.StringBuilder Append (bool value);" />
    <Member Sig="public System.Text.StringBuilder Append (byte value);" />
    <Member Sig="public System.Text.StringBuilder Append (char value);" />
    <Member Sig="public System.Text.StringBuilder Append (char value, int repeatCount);" />
    <Member Sig="public System.Text.StringBuilder Append (char[] value);" />
    <Member Sig="public System.Text.StringBuilder Append (char[] value, int startIndex, int charCount);" />
    <Member Sig="public System.Text.StringBuilder Append (decimal value);" />
    <Member Sig="public System.Text.StringBuilder Append (double value);" />
    <Member Sig="public System.Text.StringBuilder Append (float value);" />
    <Member Sig="public System.Text.StringBuilder Append (int value);" />
    <Member Sig="public System.Text.StringBuilder Append (long value);" />
    <Member Sig="public System.Text.StringBuilder Append (object value);" />
    <Member Sig="public System.Text.StringBuilder Append (sbyte value);" />
    <Member Sig="public System.Text.StringBuilder Append (short value);" />
    <Member Sig="public System.Text.StringBuilder Append (string value);" />
    <Member Sig="public System.Text.StringBuilder Append (string value, int startIndex, int count);" />
    <Member Sig="public System.Text.StringBuilder Append (uint value);" />
    <Member Sig="public System.Text.StringBuilder Append (ulong value);" />
    <Member Sig="public System.Text.StringBuilder Append (ushort value);" />
    <Member Sig="public System.Text.StringBuilder AppendFormat (IFormatProvider provider, string format, object[] args);" />
    <Member Sig="public System.Text.StringBuilder AppendFormat (string format, object arg0);" />
    <Member Sig="public System.Text.StringBuilder AppendFormat (string format, object arg0, object arg1);" />
    <Member Sig="public System.Text.StringBuilder AppendFormat (string format, object arg0, object arg1, object arg2);" />
    <Member Sig="public System.Text.StringBuilder AppendFormat (string format, object[] args);" />
    <Member Sig="public System.Text.StringBuilder AppendLine ();" />
    <Member Sig="public System.Text.StringBuilder AppendLine (string value);" />
    <Member Sig="public System.Text.StringBuilder Insert (int index, bool value);" />
    <Member Sig="public System.Text.StringBuilder Insert (int index, byte value);" />
    <Member Sig="public System.Text.StringBuilder Insert (int index, char value);" />
    <Member Sig="public System.Text.StringBuilder Insert (int index, char[] value);" />
    <Member Sig="public System.Text.StringBuilder Insert (int index, char[] value, int startIndex, int charCount);" />
    <Member Sig="public System.Text.StringBuilder Insert (int index, decimal value);" />
    <Member Sig="public System.Text.StringBuilder Insert (int index, double value);" />
    <Member Sig="public System.Text.StringBuilder Insert (int index, float value);" />
    <Member Sig="public System.Text.StringBuilder Insert (int index, int value);" />
    <Member Sig="public System.Text.StringBuilder Insert (int index, long value);" />
    <Member Sig="public System.Text.StringBuilder Insert (int index, object value);" />
    <Member Sig="public System.Text.StringBuilder Insert (int index, sbyte value);" />
    <Member Sig="public System.Text.StringBuilder Insert (int index, short value);" />
    <Member Sig="public System.Text.StringBuilder Insert (int index, string value);" />
    <Member Sig="public System.Text.StringBuilder Insert (int index, string value, int count);" />
    <Member Sig="public System.Text.StringBuilder Insert (int index, uint value);" />
    <Member Sig="public System.Text.StringBuilder Insert (int index, ulong value);" />
    <Member Sig="public System.Text.StringBuilder Insert (int index, ushort value);" />
    <Member Sig="public System.Text.StringBuilder Remove (int startIndex, int length);" />
    <Member Sig="public System.Text.StringBuilder Replace (char oldChar, char newChar);" />
    <Member Sig="public System.Text.StringBuilder Replace (char oldChar, char newChar, int startIndex, int count);" />
    <Member Sig="public System.Text.StringBuilder Replace (string oldValue, string newValue);" />
    <Member Sig="public System.Text.StringBuilder Replace (string oldValue, string newValue, int startIndex, int count);" />
    <Member Sig="public void CopyTo (int sourceIndex, char[] destination, int destinationIndex, int count);" />
    <Member Sig="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.Text.UnicodeEncoding">
    <Member Sig="public const int CharSize = 2;" />
    <Member Sig="public override bool Equals (object value);" />
    <Member Sig="public override byte[] GetPreamble ();" />
    <Member Sig="public override int GetByteCount (char* chars, int count);" />
    <Member Sig="public override int GetByteCount (char[] chars, int index, int count);" />
    <Member Sig="public override int GetByteCount (string s);" />
    <Member Sig="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
    <Member Sig="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
    <Member Sig="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
    <Member Sig="public override int GetCharCount (byte* bytes, int count);" />
    <Member Sig="public override int GetCharCount (byte[] bytes, int index, int count);" />
    <Member Sig="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
    <Member Sig="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override int GetMaxByteCount (int charCount);" />
    <Member Sig="public override int GetMaxCharCount (int byteCount);" />
    <Member Sig="public override string GetString (byte[] bytes, int index, int count);" />
    <Member Sig="public override System.Text.Decoder GetDecoder ();" />
    <Member Sig="public override System.Text.Encoder GetEncoder ();" />
    <Member Sig="public UnicodeEncoding ();" />
    <Member Sig="public UnicodeEncoding (bool bigEndian, bool byteOrderMark);" />
    <Member Sig="public UnicodeEncoding (bool bigEndian, bool byteOrderMark, bool throwOnInvalidBytes);" />
  </Type>
  <Type Name="System.Text.UTF32Encoding">
    <Member Sig="public override bool Equals (object value);" />
    <Member Sig="public override byte[] GetPreamble ();" />
    <Member Sig="public override int GetByteCount (char* chars, int count);" />
    <Member Sig="public override int GetByteCount (char[] chars, int index, int count);" />
    <Member Sig="public override int GetByteCount (string s);" />
    <Member Sig="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
    <Member Sig="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
    <Member Sig="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
    <Member Sig="public override int GetCharCount (byte* bytes, int count);" />
    <Member Sig="public override int GetCharCount (byte[] bytes, int index, int count);" />
    <Member Sig="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
    <Member Sig="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override int GetMaxByteCount (int charCount);" />
    <Member Sig="public override int GetMaxCharCount (int byteCount);" />
    <Member Sig="public override string GetString (byte[] bytes, int index, int count);" />
    <Member Sig="public override System.Text.Decoder GetDecoder ();" />
    <Member Sig="public override System.Text.Encoder GetEncoder ();" />
    <Member Sig="public UTF32Encoding ();" />
    <Member Sig="public UTF32Encoding (bool bigEndian, bool byteOrderMark);" />
    <Member Sig="public UTF32Encoding (bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters);" />
  </Type>
  <Type Name="System.Text.UTF7Encoding">
    <Member Sig="public override bool Equals (object value);" />
    <Member Sig="public override int GetByteCount (char* chars, int count);" />
    <Member Sig="public override int GetByteCount (char[] chars, int index, int count);" />
    <Member Sig="public override int GetByteCount (string s);" />
    <Member Sig="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
    <Member Sig="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
    <Member Sig="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
    <Member Sig="public override int GetCharCount (byte* bytes, int count);" />
    <Member Sig="public override int GetCharCount (byte[] bytes, int index, int count);" />
    <Member Sig="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
    <Member Sig="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override int GetMaxByteCount (int charCount);" />
    <Member Sig="public override int GetMaxCharCount (int byteCount);" />
    <Member Sig="public override string GetString (byte[] bytes, int index, int count);" />
    <Member Sig="public override System.Text.Decoder GetDecoder ();" />
    <Member Sig="public override System.Text.Encoder GetEncoder ();" />
    <Member Sig="public UTF7Encoding ();" />
    <Member Sig="public UTF7Encoding (bool allowOptionals);" />
  </Type>
  <Type Name="System.Text.UTF8Encoding">
    <Member Sig="public override bool Equals (object value);" />
    <Member Sig="public override byte[] GetPreamble ();" />
    <Member Sig="public override int GetByteCount (char* chars, int count);" />
    <Member Sig="public override int GetByteCount (char[] chars, int index, int count);" />
    <Member Sig="public override int GetByteCount (string chars);" />
    <Member Sig="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
    <Member Sig="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
    <Member Sig="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
    <Member Sig="public override int GetCharCount (byte* bytes, int count);" />
    <Member Sig="public override int GetCharCount (byte[] bytes, int index, int count);" />
    <Member Sig="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
    <Member Sig="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override int GetMaxByteCount (int charCount);" />
    <Member Sig="public override int GetMaxCharCount (int byteCount);" />
    <Member Sig="public override string GetString (byte[] bytes, int index, int count);" />
    <Member Sig="public override System.Text.Decoder GetDecoder ();" />
    <Member Sig="public override System.Text.Encoder GetEncoder ();" />
    <Member Sig="public UTF8Encoding ();" />
    <Member Sig="public UTF8Encoding (bool encoderShouldEmitUTF8Identifier);" />
    <Member Sig="public UTF8Encoding (bool encoderShouldEmitUTF8Identifier, bool throwOnInvalidBytes);" />
  </Type>
  <Type Name="System.Threading.AbandonedMutexException">
    <Member Sig="protected AbandonedMutexException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public AbandonedMutexException ();" />
    <Member Sig="public AbandonedMutexException (int location, System.Threading.WaitHandle handle);" />
    <Member Sig="public AbandonedMutexException (string message);" />
    <Member Sig="public AbandonedMutexException (string message, Exception inner);" />
    <Member Sig="public AbandonedMutexException (string message, Exception inner, int location, System.Threading.WaitHandle handle);" />
    <Member Sig="public AbandonedMutexException (string message, int location, System.Threading.WaitHandle handle);" />
    <Member Sig="public int MutexIndex { get; }" />
    <Member Sig="public System.Threading.Mutex Mutex { get; }" />
  </Type>
  <Type Name="System.Threading.ApartmentState">
    <Member Sig="MTA" />
    <Member Sig="STA" />
    <Member Sig="Unknown" />
  </Type>
  <Type Name="System.Threading.AsyncFlowControl">
    <Member Sig="public bool Equals (System.Threading.AsyncFlowControl obj);" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static bool op_Equality (System.Threading.AsyncFlowControl a, System.Threading.AsyncFlowControl b);" />
    <Member Sig="public static bool op_Inequality (System.Threading.AsyncFlowControl a, System.Threading.AsyncFlowControl b);" />
    <Member Sig="public void Undo ();" />
    <Member Sig="void IDisposable.Dispose ();" />
  </Type>
  <Type Name="System.Threading.AutoResetEvent">
    <Member Sig="public AutoResetEvent (bool initialState);" />
  </Type>
  <Type Name="System.Threading.CompressedStack">
    <Member Sig="public static System.Threading.CompressedStack Capture ();" />
    <Member Sig="public static System.Threading.CompressedStack GetCompressedStack ();" />
    <Member Sig="public static void Run (System.Threading.CompressedStack compressedStack, System.Threading.ContextCallback callback, object state);" />
    <Member Sig="public System.Threading.CompressedStack CreateCopy ();" />
    <Member Sig="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.Threading.ContextCallback" />
  <Type Name="System.Threading.EventResetMode">
    <Member Sig="AutoReset" />
    <Member Sig="ManualReset" />
  </Type>
  <Type Name="System.Threading.EventWaitHandle">
    <Member Sig="public bool Reset ();" />
    <Member Sig="public bool Set ();" />
    <Member Sig="public EventWaitHandle (bool initialState, System.Threading.EventResetMode mode);" />
    <Member Sig="public EventWaitHandle (bool initialState, System.Threading.EventResetMode mode, string name);" />
    <Member Sig="public EventWaitHandle (bool initialState, System.Threading.EventResetMode mode, string name, out bool createdNew);" />
    <Member Sig="public EventWaitHandle (bool initialState, System.Threading.EventResetMode mode, string name, out bool createdNew, System.Security.AccessControl.EventWaitHandleSecurity eventSecurity);" />
    <Member Sig="public static System.Threading.EventWaitHandle OpenExisting (string name);" />
    <Member Sig="public static System.Threading.EventWaitHandle OpenExisting (string name, System.Security.AccessControl.EventWaitHandleRights rights);" />
    <Member Sig="public System.Security.AccessControl.EventWaitHandleSecurity GetAccessControl ();" />
    <Member Sig="public void SetAccessControl (System.Security.AccessControl.EventWaitHandleSecurity eventSecurity);" />
  </Type>
  <Type Name="System.Threading.ExecutionContext">
    <Member Sig="public static bool IsFlowSuppressed ();" />
    <Member Sig="public static System.Threading.AsyncFlowControl SuppressFlow ();" />
    <Member Sig="public static System.Threading.ExecutionContext Capture ();" />
    <Member Sig="public static void RestoreFlow ();" />
    <Member Sig="public static void Run (System.Threading.ExecutionContext executionContext, System.Threading.ContextCallback callback, object state);" />
    <Member Sig="public System.Threading.ExecutionContext CreateCopy ();" />
    <Member Sig="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.Threading.HostExecutionContext">
    <Member Sig="protected object State { get; set; }" />
    <Member Sig="public HostExecutionContext ();" />
    <Member Sig="public HostExecutionContext (object state);" />
    <Member Sig="public virtual System.Threading.HostExecutionContext CreateCopy ();" />
  </Type>
  <Type Name="System.Threading.HostExecutionContextManager">
    <Member Sig="public HostExecutionContextManager ();" />
    <Member Sig="public virtual object SetHostExecutionContext (System.Threading.HostExecutionContext hostExecutionContext);" />
    <Member Sig="public virtual System.Threading.HostExecutionContext Capture ();" />
    <Member Sig="public virtual void Revert (object previousState);" />
  </Type>
  <Type Name="System.Threading.Interlocked">
    <Member Sig="public static double CompareExchange (ref double location1, double value, double comparand);" />
    <Member Sig="public static double Exchange (ref double location1, double value);" />
    <Member Sig="public static float CompareExchange (ref float location1, float value, float comparand);" />
    <Member Sig="public static float Exchange (ref float location1, float value);" />
    <Member Sig="public static int Add (ref int location1, int value);" />
    <Member Sig="public static int CompareExchange (ref int location1, int value, int comparand);" />
    <Member Sig="public static int Decrement (ref int location);" />
    <Member Sig="public static int Exchange (ref int location1, int value);" />
    <Member Sig="public static int Increment (ref int location);" />
    <Member Sig="public static IntPtr CompareExchange (ref IntPtr location1, IntPtr value, IntPtr comparand);" />
    <Member Sig="public static IntPtr Exchange (ref IntPtr location1, IntPtr value);" />
    <Member Sig="public static long Add (ref long location1, long value);" />
    <Member Sig="public static long CompareExchange (ref long location1, long value, long comparand);" />
    <Member Sig="public static long Decrement (ref long location);" />
    <Member Sig="public static long Exchange (ref long location1, long value);" />
    <Member Sig="public static long Increment (ref long location);" />
    <Member Sig="public static long Read (ref long location);" />
    <Member Sig="public static object CompareExchange (ref object location1, object value, object comparand);" />
    <Member Sig="public static object Exchange (ref object location1, object value);" />
    <Member Sig="public static T CompareExchange&lt;T&gt; (ref T location1, T value, T comparand) where T : class;" />
    <Member Sig="public static T Exchange&lt;T&gt; (ref T location1, T value) where T : class;" />
  </Type>
  <Type Name="System.Threading.IOCompletionCallback" />
  <Type Name="System.Threading.LockCookie">
    <Member Sig="public bool Equals (System.Threading.LockCookie obj);" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static bool op_Equality (System.Threading.LockCookie a, System.Threading.LockCookie b);" />
    <Member Sig="public static bool op_Inequality (System.Threading.LockCookie a, System.Threading.LockCookie b);" />
  </Type>
  <Type Name="System.Threading.ManualResetEvent">
    <Member Sig="public ManualResetEvent (bool initialState);" />
  </Type>
  <Type Name="System.Threading.Monitor">
    <Member Sig="public static bool TryEnter (object obj);" />
    <Member Sig="public static bool TryEnter (object obj, int millisecondsTimeout);" />
    <Member Sig="public static bool TryEnter (object obj, TimeSpan timeout);" />
    <Member Sig="public static bool Wait (object obj);" />
    <Member Sig="public static bool Wait (object obj, int millisecondsTimeout);" />
    <Member Sig="public static bool Wait (object obj, int millisecondsTimeout, bool exitContext);" />
    <Member Sig="public static bool Wait (object obj, TimeSpan timeout);" />
    <Member Sig="public static bool Wait (object obj, TimeSpan timeout, bool exitContext);" />
    <Member Sig="public static void Enter (object obj);" />
    <Member Sig="public static void Exit (object obj);" />
    <Member Sig="public static void Pulse (object obj);" />
    <Member Sig="public static void PulseAll (object obj);" />
  </Type>
  <Type Name="System.Threading.Mutex">
    <Member Sig="public Mutex ();" />
    <Member Sig="public Mutex (bool initiallyOwned);" />
    <Member Sig="public Mutex (bool initiallyOwned, string name);" />
    <Member Sig="public Mutex (bool initiallyOwned, string name, out bool createdNew);" />
    <Member Sig="public Mutex (bool initiallyOwned, string name, out bool createdNew, System.Security.AccessControl.MutexSecurity mutexSecurity);" />
    <Member Sig="public static System.Threading.Mutex OpenExisting (string name);" />
    <Member Sig="public static System.Threading.Mutex OpenExisting (string name, System.Security.AccessControl.MutexRights rights);" />
    <Member Sig="public System.Security.AccessControl.MutexSecurity GetAccessControl ();" />
    <Member Sig="public void ReleaseMutex ();" />
    <Member Sig="public void SetAccessControl (System.Security.AccessControl.MutexSecurity mutexSecurity);" />
  </Type>
  <Type Name="System.Threading.NativeOverlapped">
    <Member Sig="public int OffsetHigh;" />
    <Member Sig="public int OffsetLow;" />
    <Member Sig="public IntPtr EventHandle;" />
    <Member Sig="public IntPtr InternalHigh;" />
    <Member Sig="public IntPtr InternalLow;" />
  </Type>
  <Type Name="System.Threading.Overlapped">
    <Member Sig="public IAsyncResult AsyncResult { get; set; }" />
    <Member Sig="public int EventHandle { get; set; }" />
    <Member Sig="public int OffsetHigh { get; set; }" />
    <Member Sig="public int OffsetLow { get; set; }" />
    <Member Sig="public IntPtr EventHandleIntPtr { get; set; }" />
    <Member Sig="public Overlapped ();" />
    <Member Sig="public Overlapped (int offsetLo, int offsetHi, int hEvent, IAsyncResult ar);" />
    <Member Sig="public Overlapped (int offsetLo, int offsetHi, IntPtr hEvent, IAsyncResult ar);" />
    <Member Sig="public static System.Threading.Overlapped Unpack (System.Threading.NativeOverlapped* nativeOverlappedPtr);" />
    <Member Sig="public static void Free (System.Threading.NativeOverlapped* nativeOverlappedPtr);" />
    <Member Sig="public System.Threading.NativeOverlapped* Pack (System.Threading.IOCompletionCallback iocb);" />
    <Member Sig="public System.Threading.NativeOverlapped* Pack (System.Threading.IOCompletionCallback iocb, object userData);" />
    <Member Sig="public System.Threading.NativeOverlapped* UnsafePack (System.Threading.IOCompletionCallback iocb);" />
    <Member Sig="public System.Threading.NativeOverlapped* UnsafePack (System.Threading.IOCompletionCallback iocb, object userData);" />
  </Type>
  <Type Name="System.Threading.ParameterizedThreadStart" />
  <Type Name="System.Threading.ReaderWriterLock">
    <Member Sig="~ReaderWriterLock ();" />
    <Member Sig="public bool AnyWritersSince (int seqNum);" />
    <Member Sig="public bool IsReaderLockHeld { get; }" />
    <Member Sig="public bool IsWriterLockHeld { get; }" />
    <Member Sig="public int WriterSeqNum { get; }" />
    <Member Sig="public ReaderWriterLock ();" />
    <Member Sig="public System.Threading.LockCookie ReleaseLock ();" />
    <Member Sig="public System.Threading.LockCookie UpgradeToWriterLock (int millisecondsTimeout);" />
    <Member Sig="public System.Threading.LockCookie UpgradeToWriterLock (TimeSpan timeout);" />
    <Member Sig="public void AcquireReaderLock (int millisecondsTimeout);" />
    <Member Sig="public void AcquireReaderLock (TimeSpan timeout);" />
    <Member Sig="public void AcquireWriterLock (int millisecondsTimeout);" />
    <Member Sig="public void AcquireWriterLock (TimeSpan timeout);" />
    <Member Sig="public void DowngradeFromWriterLock (ref System.Threading.LockCookie lockCookie);" />
    <Member Sig="public void ReleaseReaderLock ();" />
    <Member Sig="public void ReleaseWriterLock ();" />
    <Member Sig="public void RestoreLock (ref System.Threading.LockCookie lockCookie);" />
  </Type>
  <Type Name="System.Threading.RegisteredWaitHandle">
    <Member Sig="public bool Unregister (System.Threading.WaitHandle waitObject);" />
  </Type>
  <Type Name="System.Threading.SendOrPostCallback" />
  <Type Name="System.Threading.SynchronizationContext">
    <Member Sig="protected static int WaitHelper (IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout);" />
    <Member Sig="protected void SetWaitNotificationRequired ();" />
    <Member Sig="public bool IsWaitNotificationRequired ();" />
    <Member Sig="public static System.Threading.SynchronizationContext Current { get; }" />
    <Member Sig="public static void SetSynchronizationContext (System.Threading.SynchronizationContext syncContext);" />
    <Member Sig="public SynchronizationContext ();" />
    <Member Sig="public virtual int Wait (IntPtr[] waitHandles, bool waitAll, int millisecondsTimeout);" />
    <Member Sig="public virtual System.Threading.SynchronizationContext CreateCopy ();" />
    <Member Sig="public virtual void OperationCompleted ();" />
    <Member Sig="public virtual void OperationStarted ();" />
    <Member Sig="public virtual void Post (System.Threading.SendOrPostCallback d, object state);" />
    <Member Sig="public virtual void Send (System.Threading.SendOrPostCallback d, object state);" />
  </Type>
  <Type Name="System.Threading.SynchronizationLockException">
    <Member Sig="protected SynchronizationLockException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public SynchronizationLockException ();" />
    <Member Sig="public SynchronizationLockException (string message);" />
    <Member Sig="public SynchronizationLockException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.Threading.Thread">
    <Member Sig="~Thread ();" />
    <Member Sig="public bool IsAlive { get; }" />
    <Member Sig="public bool IsBackground { get; set; }" />
    <Member Sig="public bool IsThreadPoolThread { get; }" />
    <Member Sig="public bool Join (int millisecondsTimeout);" />
    <Member Sig="public bool Join (TimeSpan timeout);" />
    <Member Sig="public bool TrySetApartmentState (System.Threading.ApartmentState state);" />
    <Member Sig="public int ManagedThreadId { get; }" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static AppDomain GetDomain ();" />
    <Member Sig="public static byte VolatileRead (ref byte address);" />
    <Member Sig="public static double VolatileRead (ref double address);" />
    <Member Sig="public static float VolatileRead (ref float address);" />
    <Member Sig="public static int GetDomainID ();" />
    <Member Sig="public static int VolatileRead (ref int address);" />
    <Member Sig="public static IntPtr VolatileRead (ref IntPtr address);" />
    <Member Sig="public static LocalDataStoreSlot AllocateDataSlot ();" />
    <Member Sig="public static LocalDataStoreSlot AllocateNamedDataSlot (string name);" />
    <Member Sig="public static LocalDataStoreSlot GetNamedDataSlot (string name);" />
    <Member Sig="public static long VolatileRead (ref long address);" />
    <Member Sig="public static object GetData (LocalDataStoreSlot slot);" />
    <Member Sig="public static object VolatileRead (ref object address);" />
    <Member Sig="public static sbyte VolatileRead (ref sbyte address);" />
    <Member Sig="public static short VolatileRead (ref short address);" />
    <Member Sig="public static System.Runtime.Remoting.Contexts.Context CurrentContext { get; }" />
    <Member Sig="public static System.Security.Principal.IPrincipal CurrentPrincipal { get; set; }" />
    <Member Sig="public static System.Threading.Thread CurrentThread { get; }" />
    <Member Sig="public static uint VolatileRead (ref uint address);" />
    <Member Sig="public static UIntPtr VolatileRead (ref UIntPtr address);" />
    <Member Sig="public static ulong VolatileRead (ref ulong address);" />
    <Member Sig="public static ushort VolatileRead (ref ushort address);" />
    <Member Sig="public static void BeginCriticalRegion ();" />
    <Member Sig="public static void BeginThreadAffinity ();" />
    <Member Sig="public static void EndCriticalRegion ();" />
    <Member Sig="public static void EndThreadAffinity ();" />
    <Member Sig="public static void FreeNamedDataSlot (string name);" />
    <Member Sig="public static void MemoryBarrier ();" />
    <Member Sig="public static void ResetAbort ();" />
    <Member Sig="public static void SetData (LocalDataStoreSlot slot, object data);" />
    <Member Sig="public static void Sleep (int millisecondsTimeout);" />
    <Member Sig="public static void Sleep (TimeSpan timeout);" />
    <Member Sig="public static void SpinWait (int iterations);" />
    <Member Sig="public static void VolatileWrite (ref byte address, byte value);" />
    <Member Sig="public static void VolatileWrite (ref double address, double value);" />
    <Member Sig="public static void VolatileWrite (ref float address, float value);" />
    <Member Sig="public static void VolatileWrite (ref int address, int value);" />
    <Member Sig="public static void VolatileWrite (ref IntPtr address, IntPtr value);" />
    <Member Sig="public static void VolatileWrite (ref long address, long value);" />
    <Member Sig="public static void VolatileWrite (ref object address, object value);" />
    <Member Sig="public static void VolatileWrite (ref sbyte address, sbyte value);" />
    <Member Sig="public static void VolatileWrite (ref short address, short value);" />
    <Member Sig="public static void VolatileWrite (ref uint address, uint value);" />
    <Member Sig="public static void VolatileWrite (ref UIntPtr address, UIntPtr value);" />
    <Member Sig="public static void VolatileWrite (ref ulong address, ulong value);" />
    <Member Sig="public static void VolatileWrite (ref ushort address, ushort value);" />
    <Member Sig="public string Name { get; set; }" />
    <Member Sig="public System.Globalization.CultureInfo CurrentCulture { get; set; }" />
    <Member Sig="public System.Globalization.CultureInfo CurrentUICulture { get; set; }" />
    <Member Sig="public System.Threading.ApartmentState ApartmentState { get; set; }" />
    <Member Sig="public System.Threading.ApartmentState GetApartmentState ();" />
    <Member Sig="public System.Threading.CompressedStack GetCompressedStack ();" />
    <Member Sig="public System.Threading.ExecutionContext ExecutionContext { get; }" />
    <Member Sig="public System.Threading.ThreadPriority Priority { get; set; }" />
    <Member Sig="public System.Threading.ThreadState ThreadState { get; }" />
    <Member Sig="public Thread (System.Threading.ParameterizedThreadStart start);" />
    <Member Sig="public Thread (System.Threading.ParameterizedThreadStart start, int maxStackSize);" />
    <Member Sig="public Thread (System.Threading.ThreadStart start);" />
    <Member Sig="public Thread (System.Threading.ThreadStart start, int maxStackSize);" />
    <Member Sig="public void Abort ();" />
    <Member Sig="public void Abort (object stateInfo);" />
    <Member Sig="public void Interrupt ();" />
    <Member Sig="public void Join ();" />
    <Member Sig="public void Resume ();" />
    <Member Sig="public void SetApartmentState (System.Threading.ApartmentState state);" />
    <Member Sig="public void SetCompressedStack (System.Threading.CompressedStack stack);" />
    <Member Sig="public void Start ();" />
    <Member Sig="public void Start (object parameter);" />
    <Member Sig="public void Suspend ();" />
    <Member Sig="void _Thread.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _Thread.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _Thread.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _Thread.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.Threading.ThreadAbortException">
    <Member Sig="public object ExceptionState { get; }" />
  </Type>
  <Type Name="System.Threading.ThreadInterruptedException">
    <Member Sig="protected ThreadInterruptedException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public ThreadInterruptedException ();" />
    <Member Sig="public ThreadInterruptedException (string message);" />
    <Member Sig="public ThreadInterruptedException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.Threading.ThreadPool">
    <Member Sig="public static bool BindHandle (IntPtr osHandle);" />
    <Member Sig="public static bool BindHandle (System.Runtime.InteropServices.SafeHandle osHandle);" />
    <Member Sig="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack);" />
    <Member Sig="public static bool QueueUserWorkItem (System.Threading.WaitCallback callBack, object state);" />
    <Member Sig="public static bool SetMaxThreads (int workerThreads, int completionPortThreads);" />
    <Member Sig="public static bool SetMinThreads (int workerThreads, int completionPortThreads);" />
    <Member Sig="public static bool UnsafeQueueNativeOverlapped (System.Threading.NativeOverlapped* overlapped);" />
    <Member Sig="public static bool UnsafeQueueUserWorkItem (System.Threading.WaitCallback callBack, object state);" />
    <Member Sig="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
    <Member Sig="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
    <Member Sig="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);" />
    <Member Sig="public static System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce);" />
    <Member Sig="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, int millisecondsTimeOutInterval, bool executeOnlyOnce);" />
    <Member Sig="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, long millisecondsTimeOutInterval, bool executeOnlyOnce);" />
    <Member Sig="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, TimeSpan timeout, bool executeOnlyOnce);" />
    <Member Sig="public static System.Threading.RegisteredWaitHandle UnsafeRegisterWaitForSingleObject (System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, object state, uint millisecondsTimeOutInterval, bool executeOnlyOnce);" />
    <Member Sig="public static void GetAvailableThreads (out int workerThreads, out int completionPortThreads);" />
    <Member Sig="public static void GetMaxThreads (out int workerThreads, out int completionPortThreads);" />
    <Member Sig="public static void GetMinThreads (out int workerThreads, out int completionPortThreads);" />
  </Type>
  <Type Name="System.Threading.ThreadPriority">
    <Member Sig="AboveNormal" />
    <Member Sig="BelowNormal" />
    <Member Sig="Highest" />
    <Member Sig="Lowest" />
    <Member Sig="Normal" />
  </Type>
  <Type Name="System.Threading.ThreadStart" />
  <Type Name="System.Threading.ThreadStartException" />
  <Type Name="System.Threading.ThreadState">
    <Member Sig="Aborted" />
    <Member Sig="AbortRequested" />
    <Member Sig="Background" />
    <Member Sig="Running" />
    <Member Sig="Stopped" />
    <Member Sig="StopRequested" />
    <Member Sig="Suspended" />
    <Member Sig="SuspendRequested" />
    <Member Sig="Unstarted" />
    <Member Sig="WaitSleepJoin" />
  </Type>
  <Type Name="System.Threading.ThreadStateException">
    <Member Sig="protected ThreadStateException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public ThreadStateException ();" />
    <Member Sig="public ThreadStateException (string message);" />
    <Member Sig="public ThreadStateException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.Threading.Timeout">
    <Member Sig="public const int Infinite = -1;" />
  </Type>
  <Type Name="System.Threading.Timer">
    <Member Sig="public bool Change (int dueTime, int period);" />
    <Member Sig="public bool Change (long dueTime, long period);" />
    <Member Sig="public bool Change (TimeSpan dueTime, TimeSpan period);" />
    <Member Sig="public bool Change (uint dueTime, uint period);" />
    <Member Sig="public bool Dispose (System.Threading.WaitHandle notifyObject);" />
    <Member Sig="public Timer (System.Threading.TimerCallback callback);" />
    <Member Sig="public Timer (System.Threading.TimerCallback callback, object state, int dueTime, int period);" />
    <Member Sig="public Timer (System.Threading.TimerCallback callback, object state, long dueTime, long period);" />
    <Member Sig="public Timer (System.Threading.TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period);" />
    <Member Sig="public Timer (System.Threading.TimerCallback callback, object state, uint dueTime, uint period);" />
    <Member Sig="public void Dispose ();" />
  </Type>
  <Type Name="System.Threading.TimerCallback" />
  <Type Name="System.Threading.WaitCallback" />
  <Type Name="System.Threading.WaitHandle">
    <Member Sig="protected static readonly IntPtr InvalidHandle;" />
    <Member Sig="protected virtual void Dispose (bool explicitDisposing);" />
    <Member Sig="protected WaitHandle ();" />
    <Member Sig="public const int WaitTimeout = 258;" />
    <Member Sig="public Microsoft.Win32.SafeHandles.SafeWaitHandle SafeWaitHandle { get; set; }" />
    <Member Sig="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn);" />
    <Member Sig="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, int millisecondsTimeout, bool exitContext);" />
    <Member Sig="public static bool SignalAndWait (System.Threading.WaitHandle toSignal, System.Threading.WaitHandle toWaitOn, TimeSpan timeout, bool exitContext);" />
    <Member Sig="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles);" />
    <Member Sig="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
    <Member Sig="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
    <Member Sig="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
    <Member Sig="public static bool WaitAll (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
    <Member Sig="public static int WaitAny (System.Threading.WaitHandle[] waitHandles);" />
    <Member Sig="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout);" />
    <Member Sig="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, int millisecondsTimeout, bool exitContext);" />
    <Member Sig="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout);" />
    <Member Sig="public static int WaitAny (System.Threading.WaitHandle[] waitHandles, TimeSpan timeout, bool exitContext);" />
    <Member Sig="public virtual bool WaitOne ();" />
    <Member Sig="public virtual bool WaitOne (int millisecondsTimeout);" />
    <Member Sig="public virtual bool WaitOne (int millisecondsTimeout, bool exitContext);" />
    <Member Sig="public virtual bool WaitOne (TimeSpan timeout);" />
    <Member Sig="public virtual bool WaitOne (TimeSpan timeout, bool exitContext);" />
    <Member Sig="public virtual IntPtr Handle { get; set; }" />
    <Member Sig="public virtual void Close ();" />
    <Member Sig="void IDisposable.Dispose ();" />
  </Type>
  <Type Name="System.Threading.WaitHandleCannotBeOpenedException">
    <Member Sig="protected WaitHandleCannotBeOpenedException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public WaitHandleCannotBeOpenedException ();" />
    <Member Sig="public WaitHandleCannotBeOpenedException (string message);" />
    <Member Sig="public WaitHandleCannotBeOpenedException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.Threading.WaitOrTimerCallback" />
  <Type Name="System.ThreadStaticAttribute">
    <Member Sig="public ThreadStaticAttribute ();" />
  </Type>
  <Type Name="System.TimeoutException">
    <Member Sig="protected TimeoutException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public TimeoutException ();" />
    <Member Sig="public TimeoutException (string message);" />
    <Member Sig="public TimeoutException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.TimeSpan">
    <Member Sig="public bool Equals (TimeSpan obj);" />
    <Member Sig="public const long TicksPerDay = 864000000000;" />
    <Member Sig="public const long TicksPerHour = 36000000000;" />
    <Member Sig="public const long TicksPerMillisecond = 10000;" />
    <Member Sig="public const long TicksPerMinute = 600000000;" />
    <Member Sig="public const long TicksPerSecond = 10000000;" />
    <Member Sig="public double TotalDays { get; }" />
    <Member Sig="public double TotalHours { get; }" />
    <Member Sig="public double TotalMilliseconds { get; }" />
    <Member Sig="public double TotalMinutes { get; }" />
    <Member Sig="public double TotalSeconds { get; }" />
    <Member Sig="public int CompareTo (object value);" />
    <Member Sig="public int CompareTo (TimeSpan value);" />
    <Member Sig="public int Days { get; }" />
    <Member Sig="public int Hours { get; }" />
    <Member Sig="public int Milliseconds { get; }" />
    <Member Sig="public int Minutes { get; }" />
    <Member Sig="public int Seconds { get; }" />
    <Member Sig="public long Ticks { get; }" />
    <Member Sig="public override bool Equals (object value);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool Equals (TimeSpan t1, TimeSpan t2);" />
    <Member Sig="public static bool op_Equality (TimeSpan t1, TimeSpan t2);" />
    <Member Sig="public static bool op_GreaterThan (TimeSpan t1, TimeSpan t2);" />
    <Member Sig="public static bool op_GreaterThanOrEqual (TimeSpan t1, TimeSpan t2);" />
    <Member Sig="public static bool op_Inequality (TimeSpan t1, TimeSpan t2);" />
    <Member Sig="public static bool op_LessThan (TimeSpan t1, TimeSpan t2);" />
    <Member Sig="public static bool op_LessThanOrEqual (TimeSpan t1, TimeSpan t2);" />
    <Member Sig="public static bool TryParse (string s, out TimeSpan result);" />
    <Member Sig="public static int Compare (TimeSpan t1, TimeSpan t2);" />
    <Member Sig="public static readonly TimeSpan MaxValue;" />
    <Member Sig="public static readonly TimeSpan MinValue;" />
    <Member Sig="public static readonly TimeSpan Zero;" />
    <Member Sig="public static TimeSpan FromDays (double value);" />
    <Member Sig="public static TimeSpan FromHours (double value);" />
    <Member Sig="public static TimeSpan FromMilliseconds (double value);" />
    <Member Sig="public static TimeSpan FromMinutes (double value);" />
    <Member Sig="public static TimeSpan FromSeconds (double value);" />
    <Member Sig="public static TimeSpan FromTicks (long value);" />
    <Member Sig="public static TimeSpan op_Addition (TimeSpan t1, TimeSpan t2);" />
    <Member Sig="public static TimeSpan op_Subtraction (TimeSpan t1, TimeSpan t2);" />
    <Member Sig="public static TimeSpan op_UnaryNegation (TimeSpan t);" />
    <Member Sig="public static TimeSpan op_UnaryPlus (TimeSpan t);" />
    <Member Sig="public static TimeSpan Parse (string s);" />
    <Member Sig="public TimeSpan (int days, int hours, int minutes, int seconds);" />
    <Member Sig="public TimeSpan (int days, int hours, int minutes, int seconds, int milliseconds);" />
    <Member Sig="public TimeSpan (int hours, int minutes, int seconds);" />
    <Member Sig="public TimeSpan (long ticks);" />
    <Member Sig="public TimeSpan Add (TimeSpan ts);" />
    <Member Sig="public TimeSpan Duration ();" />
    <Member Sig="public TimeSpan Negate ();" />
    <Member Sig="public TimeSpan Subtract (TimeSpan ts);" />
  </Type>
  <Type Name="System.TimeZone">
    <Member Sig="protected TimeZone ();" />
    <Member Sig="public abstract string DaylightName { get; }" />
    <Member Sig="public abstract string StandardName { get; }" />
    <Member Sig="public abstract System.Globalization.DaylightTime GetDaylightChanges (int year);" />
    <Member Sig="public abstract TimeSpan GetUtcOffset (DateTime time);" />
    <Member Sig="public static bool IsDaylightSavingTime (DateTime time, System.Globalization.DaylightTime daylightTimes);" />
    <Member Sig="public static TimeZone CurrentTimeZone { get; }" />
    <Member Sig="public virtual bool IsDaylightSavingTime (DateTime time);" />
    <Member Sig="public virtual DateTime ToLocalTime (DateTime time);" />
    <Member Sig="public virtual DateTime ToUniversalTime (DateTime time);" />
  </Type>
  <Type Name="System.Type">
    <Member Sig="protected abstract bool HasElementTypeImpl ();" />
    <Member Sig="protected abstract bool IsArrayImpl ();" />
    <Member Sig="protected abstract bool IsByRefImpl ();" />
    <Member Sig="protected abstract bool IsCOMObjectImpl ();" />
    <Member Sig="protected abstract bool IsPointerImpl ();" />
    <Member Sig="protected abstract bool IsPrimitiveImpl ();" />
    <Member Sig="protected abstract System.Reflection.ConstructorInfo GetConstructorImpl (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="protected abstract System.Reflection.MethodInfo GetMethodImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="protected abstract System.Reflection.PropertyInfo GetPropertyImpl (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="protected abstract System.Reflection.TypeAttributes GetAttributeFlagsImpl ();" />
    <Member Sig="protected Type ();" />
    <Member Sig="protected virtual bool IsContextfulImpl ();" />
    <Member Sig="protected virtual bool IsMarshalByRefImpl ();" />
    <Member Sig="protected virtual bool IsValueTypeImpl ();" />
    <Member Sig="public abstract Guid GUID { get; }" />
    <Member Sig="public abstract object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
    <Member Sig="public abstract string AssemblyQualifiedName { get; }" />
    <Member Sig="public abstract string FullName { get; }" />
    <Member Sig="public abstract string Namespace { get; }" />
    <Member Sig="public abstract System.Reflection.Assembly Assembly { get; }" />
    <Member Sig="public abstract System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public abstract System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public abstract System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public abstract System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public abstract System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public abstract System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public abstract System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public abstract System.Reflection.Module Module { get; }" />
    <Member Sig="public abstract System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public abstract Type BaseType { get; }" />
    <Member Sig="public abstract Type GetElementType ();" />
    <Member Sig="public abstract Type GetInterface (string name, bool ignoreCase);" />
    <Member Sig="public abstract Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public abstract Type UnderlyingSystemType { get; }" />
    <Member Sig="public abstract Type[] GetInterfaces ();" />
    <Member Sig="public abstract Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public bool Equals (Type o);" />
    <Member Sig="public bool HasElementType { get; }" />
    <Member Sig="public bool IsAbstract { get; }" />
    <Member Sig="public bool IsAnsiClass { get; }" />
    <Member Sig="public bool IsArray { get; }" />
    <Member Sig="public bool IsAutoClass { get; }" />
    <Member Sig="public bool IsAutoLayout { get; }" />
    <Member Sig="public bool IsByRef { get; }" />
    <Member Sig="public bool IsClass { get; }" />
    <Member Sig="public bool IsCOMObject { get; }" />
    <Member Sig="public bool IsContextful { get; }" />
    <Member Sig="public bool IsEnum { get; }" />
    <Member Sig="public bool IsExplicitLayout { get; }" />
    <Member Sig="public bool IsImport { get; }" />
    <Member Sig="public bool IsInterface { get; }" />
    <Member Sig="public bool IsLayoutSequential { get; }" />
    <Member Sig="public bool IsMarshalByRef { get; }" />
    <Member Sig="public bool IsNested { get; }" />
    <Member Sig="public bool IsNestedAssembly { get; }" />
    <Member Sig="public bool IsNestedFamANDAssem { get; }" />
    <Member Sig="public bool IsNestedFamily { get; }" />
    <Member Sig="public bool IsNestedFamORAssem { get; }" />
    <Member Sig="public bool IsNestedPrivate { get; }" />
    <Member Sig="public bool IsNestedPublic { get; }" />
    <Member Sig="public bool IsNotPublic { get; }" />
    <Member Sig="public bool IsPointer { get; }" />
    <Member Sig="public bool IsPrimitive { get; }" />
    <Member Sig="public bool IsPublic { get; }" />
    <Member Sig="public bool IsSealed { get; }" />
    <Member Sig="public bool IsSerializable { get; }" />
    <Member Sig="public bool IsSpecialName { get; }" />
    <Member Sig="public bool IsUnicodeClass { get; }" />
    <Member Sig="public bool IsValueType { get; }" />
    <Member Sig="public bool IsVisible { get; }" />
    <Member Sig="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args);" />
    <Member Sig="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Globalization.CultureInfo culture);" />
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public override System.Reflection.MemberTypes MemberType { get; }" />
    <Member Sig="public override Type DeclaringType { get; }" />
    <Member Sig="public override Type ReflectedType { get; }" />
    <Member Sig="public static readonly char Delimiter;" />
    <Member Sig="public static readonly object Missing;" />
    <Member Sig="public static readonly System.Reflection.MemberFilter FilterAttribute;" />
    <Member Sig="public static readonly System.Reflection.MemberFilter FilterName;" />
    <Member Sig="public static readonly System.Reflection.MemberFilter FilterNameIgnoreCase;" />
    <Member Sig="public static readonly Type[] EmptyTypes;" />
    <Member Sig="public static RuntimeTypeHandle GetTypeHandle (object o);" />
    <Member Sig="public static System.Reflection.Binder DefaultBinder { get; }" />
    <Member Sig="public static Type GetType (string typeName);" />
    <Member Sig="public static Type GetType (string typeName, bool throwOnError);" />
    <Member Sig="public static Type GetType (string typeName, bool throwOnError, bool ignoreCase);" />
    <Member Sig="public static Type GetTypeFromCLSID (Guid clsid);" />
    <Member Sig="public static Type GetTypeFromCLSID (Guid clsid, bool throwOnError);" />
    <Member Sig="public static Type GetTypeFromCLSID (Guid clsid, string server);" />
    <Member Sig="public static Type GetTypeFromCLSID (Guid clsid, string server, bool throwOnError);" />
    <Member Sig="public static Type GetTypeFromHandle (RuntimeTypeHandle handle);" />
    <Member Sig="public static Type GetTypeFromProgID (string progID);" />
    <Member Sig="public static Type GetTypeFromProgID (string progID, bool throwOnError);" />
    <Member Sig="public static Type GetTypeFromProgID (string progID, string server);" />
    <Member Sig="public static Type GetTypeFromProgID (string progID, string server, bool throwOnError);" />
    <Member Sig="public static Type ReflectionOnlyGetType (string typeName, bool throwIfNotFound, bool ignoreCase);" />
    <Member Sig="public static Type[] GetTypeArray (object[] args);" />
    <Member Sig="public static TypeCode GetTypeCode (Type type);" />
    <Member Sig="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="public System.Reflection.ConstructorInfo GetConstructor (Type[] types);" />
    <Member Sig="public System.Reflection.ConstructorInfo TypeInitializer { get; }" />
    <Member Sig="public System.Reflection.ConstructorInfo[] GetConstructors ();" />
    <Member Sig="public System.Reflection.EventInfo GetEvent (string name);" />
    <Member Sig="public System.Reflection.FieldInfo GetField (string name);" />
    <Member Sig="public System.Reflection.FieldInfo[] GetFields ();" />
    <Member Sig="public System.Reflection.MemberInfo[] GetMember (string name);" />
    <Member Sig="public System.Reflection.MemberInfo[] GetMembers ();" />
    <Member Sig="public System.Reflection.MethodInfo GetMethod (string name);" />
    <Member Sig="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="public System.Reflection.MethodInfo GetMethod (string name, Type[] types);" />
    <Member Sig="public System.Reflection.MethodInfo GetMethod (string name, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="public System.Reflection.MethodInfo[] GetMethods ();" />
    <Member Sig="public System.Reflection.PropertyInfo GetProperty (string name);" />
    <Member Sig="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType);" />
    <Member Sig="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types);" />
    <Member Sig="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
    <Member Sig="public System.Reflection.PropertyInfo GetProperty (string name, Type[] types);" />
    <Member Sig="public System.Reflection.PropertyInfo[] GetProperties ();" />
    <Member Sig="public System.Reflection.TypeAttributes Attributes { get; }" />
    <Member Sig="public Type GetInterface (string name);" />
    <Member Sig="public Type GetNestedType (string name);" />
    <Member Sig="public Type GetType ();" />
    <Member Sig="public Type[] GetNestedTypes ();" />
    <Member Sig="public virtual bool ContainsGenericParameters { get; }" />
    <Member Sig="public virtual bool IsAssignableFrom (Type c);" />
    <Member Sig="public virtual bool IsGenericParameter { get; }" />
    <Member Sig="public virtual bool IsGenericType { get; }" />
    <Member Sig="public virtual bool IsGenericTypeDefinition { get; }" />
    <Member Sig="public virtual bool IsInstanceOfType (object o);" />
    <Member Sig="public virtual bool IsSubclassOf (Type c);" />
    <Member Sig="public virtual int GenericParameterPosition { get; }" />
    <Member Sig="public virtual int GetArrayRank ();" />
    <Member Sig="public virtual RuntimeTypeHandle TypeHandle { get; }" />
    <Member Sig="public virtual System.Reflection.EventInfo[] GetEvents ();" />
    <Member Sig="public virtual System.Reflection.GenericParameterAttributes GenericParameterAttributes { get; }" />
    <Member Sig="public virtual System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
    <Member Sig="public virtual System.Reflection.MemberInfo[] FindMembers (System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, object filterCriteria);" />
    <Member Sig="public virtual System.Reflection.MemberInfo[] GetDefaultMembers ();" />
    <Member Sig="public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public virtual System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
    <Member Sig="public virtual System.Reflection.MethodBase DeclaringMethod { get; }" />
    <Member Sig="public virtual System.Runtime.InteropServices.StructLayoutAttribute StructLayoutAttribute { get; }" />
    <Member Sig="public virtual Type GetGenericTypeDefinition ();" />
    <Member Sig="public virtual Type MakeArrayType ();" />
    <Member Sig="public virtual Type MakeArrayType (int rank);" />
    <Member Sig="public virtual Type MakeByRefType ();" />
    <Member Sig="public virtual Type MakeGenericType (Type[] typeArguments);" />
    <Member Sig="public virtual Type MakePointerType ();" />
    <Member Sig="public virtual Type[] FindInterfaces (System.Reflection.TypeFilter filter, object filterCriteria);" />
    <Member Sig="public virtual Type[] GetGenericArguments ();" />
    <Member Sig="public virtual Type[] GetGenericParameterConstraints ();" />
    <Member Sig="void _Type.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
    <Member Sig="void _Type.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
    <Member Sig="void _Type.GetTypeInfoCount (out uint pcTInfo);" />
    <Member Sig="void _Type.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
  </Type>
  <Type Name="System.TypeCode">
    <Member Sig="Boolean" />
    <Member Sig="Byte" />
    <Member Sig="Char" />
    <Member Sig="DateTime" />
    <Member Sig="DBNull" />
    <Member Sig="Decimal" />
    <Member Sig="Double" />
    <Member Sig="Empty" />
    <Member Sig="Int16" />
    <Member Sig="Int32" />
    <Member Sig="Int64" />
    <Member Sig="Object" />
    <Member Sig="SByte" />
    <Member Sig="Single" />
    <Member Sig="String" />
    <Member Sig="UInt16" />
    <Member Sig="UInt32" />
    <Member Sig="UInt64" />
  </Type>
  <Type Name="System.TypedReference">
    <Member Sig="public override bool Equals (object o);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public static object ToObject (TypedReference value);" />
    <Member Sig="public static RuntimeTypeHandle TargetTypeToken (TypedReference value);" />
    <Member Sig="public static Type GetTargetType (TypedReference value);" />
    <Member Sig="public static TypedReference MakeTypedReference (object target, System.Reflection.FieldInfo[] flds);" />
    <Member Sig="public static void SetTypedReference (TypedReference target, object value);" />
  </Type>
  <Type Name="System.TypeInitializationException">
    <Member Sig="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public string TypeName { get; }" />
    <Member Sig="public TypeInitializationException (string fullTypeName, Exception innerException);" />
  </Type>
  <Type Name="System.TypeLoadException">
    <Member Sig="protected TypeLoadException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public override string Message { get; }" />
    <Member Sig="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public string TypeName { get; }" />
    <Member Sig="public TypeLoadException ();" />
    <Member Sig="public TypeLoadException (string message);" />
    <Member Sig="public TypeLoadException (string message, Exception inner);" />
  </Type>
  <Type Name="System.TypeUnloadedException">
    <Member Sig="protected TypeUnloadedException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public TypeUnloadedException ();" />
    <Member Sig="public TypeUnloadedException (string message);" />
    <Member Sig="public TypeUnloadedException (string message, Exception innerException);" />
  </Type>
  <Type Name="System.UInt16">
    <Member Sig="bool IConvertible.ToBoolean (IFormatProvider provider);" />
    <Member Sig="byte IConvertible.ToByte (IFormatProvider provider);" />
    <Member Sig="char IConvertible.ToChar (IFormatProvider provider);" />
    <Member Sig="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
    <Member Sig="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
    <Member Sig="double IConvertible.ToDouble (IFormatProvider provider);" />
    <Member Sig="float IConvertible.ToSingle (IFormatProvider provider);" />
    <Member Sig="int IConvertible.ToInt32 (IFormatProvider provider);" />
    <Member Sig="long IConvertible.ToInt64 (IFormatProvider provider);" />
    <Member Sig="object IConvertible.ToType (Type type, IFormatProvider provider);" />
    <Member Sig="public bool Equals (ushort obj);" />
    <Member Sig="public const ushort MaxValue = 65535;" />
    <Member Sig="public const ushort MinValue = 0;" />
    <Member Sig="public int CompareTo (object value);" />
    <Member Sig="public int CompareTo (ushort value);" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool TryParse (string s, out ushort result);" />
    <Member Sig="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out ushort result);" />
    <Member Sig="public static ushort Parse (string s);" />
    <Member Sig="public static ushort Parse (string s, IFormatProvider provider);" />
    <Member Sig="public static ushort Parse (string s, System.Globalization.NumberStyles style);" />
    <Member Sig="public static ushort Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
    <Member Sig="public string ToString (IFormatProvider provider);" />
    <Member Sig="public string ToString (string format);" />
    <Member Sig="public string ToString (string format, IFormatProvider provider);" />
    <Member Sig="public TypeCode GetTypeCode ();" />
    <Member Sig="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
    <Member Sig="short IConvertible.ToInt16 (IFormatProvider provider);" />
    <Member Sig="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
    <Member Sig="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
    <Member Sig="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
  </Type>
  <Type Name="System.UInt32">
    <Member Sig="bool IConvertible.ToBoolean (IFormatProvider provider);" />
    <Member Sig="byte IConvertible.ToByte (IFormatProvider provider);" />
    <Member Sig="char IConvertible.ToChar (IFormatProvider provider);" />
    <Member Sig="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
    <Member Sig="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
    <Member Sig="double IConvertible.ToDouble (IFormatProvider provider);" />
    <Member Sig="float IConvertible.ToSingle (IFormatProvider provider);" />
    <Member Sig="int IConvertible.ToInt32 (IFormatProvider provider);" />
    <Member Sig="long IConvertible.ToInt64 (IFormatProvider provider);" />
    <Member Sig="object IConvertible.ToType (Type type, IFormatProvider provider);" />
    <Member Sig="public bool Equals (uint obj);" />
    <Member Sig="public const uint MaxValue = 4294967295;" />
    <Member Sig="public const uint MinValue = 0;" />
    <Member Sig="public int CompareTo (object value);" />
    <Member Sig="public int CompareTo (uint value);" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool TryParse (string s, out uint result);" />
    <Member Sig="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out uint result);" />
    <Member Sig="public static uint Parse (string s);" />
    <Member Sig="public static uint Parse (string s, IFormatProvider provider);" />
    <Member Sig="public static uint Parse (string s, System.Globalization.NumberStyles style);" />
    <Member Sig="public static uint Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
    <Member Sig="public string ToString (IFormatProvider provider);" />
    <Member Sig="public string ToString (string format);" />
    <Member Sig="public string ToString (string format, IFormatProvider provider);" />
    <Member Sig="public TypeCode GetTypeCode ();" />
    <Member Sig="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
    <Member Sig="short IConvertible.ToInt16 (IFormatProvider provider);" />
    <Member Sig="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
    <Member Sig="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
    <Member Sig="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
  </Type>
  <Type Name="System.UInt64">
    <Member Sig="bool IConvertible.ToBoolean (IFormatProvider provider);" />
    <Member Sig="byte IConvertible.ToByte (IFormatProvider provider);" />
    <Member Sig="char IConvertible.ToChar (IFormatProvider provider);" />
    <Member Sig="DateTime IConvertible.ToDateTime (IFormatProvider provider);" />
    <Member Sig="decimal IConvertible.ToDecimal (IFormatProvider provider);" />
    <Member Sig="double IConvertible.ToDouble (IFormatProvider provider);" />
    <Member Sig="float IConvertible.ToSingle (IFormatProvider provider);" />
    <Member Sig="int IConvertible.ToInt32 (IFormatProvider provider);" />
    <Member Sig="long IConvertible.ToInt64 (IFormatProvider provider);" />
    <Member Sig="object IConvertible.ToType (Type type, IFormatProvider provider);" />
    <Member Sig="public bool Equals (ulong obj);" />
    <Member Sig="public const ulong MaxValue = 18446744073709551615;" />
    <Member Sig="public const ulong MinValue = 0;" />
    <Member Sig="public int CompareTo (object value);" />
    <Member Sig="public int CompareTo (ulong value);" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool TryParse (string s, out ulong result);" />
    <Member Sig="public static bool TryParse (string s, System.Globalization.NumberStyles style, IFormatProvider provider, out ulong result);" />
    <Member Sig="public static ulong Parse (string s);" />
    <Member Sig="public static ulong Parse (string s, IFormatProvider provider);" />
    <Member Sig="public static ulong Parse (string s, System.Globalization.NumberStyles style);" />
    <Member Sig="public static ulong Parse (string s, System.Globalization.NumberStyles style, IFormatProvider provider);" />
    <Member Sig="public string ToString (IFormatProvider provider);" />
    <Member Sig="public string ToString (string format);" />
    <Member Sig="public string ToString (string format, IFormatProvider provider);" />
    <Member Sig="public TypeCode GetTypeCode ();" />
    <Member Sig="sbyte IConvertible.ToSByte (IFormatProvider provider);" />
    <Member Sig="short IConvertible.ToInt16 (IFormatProvider provider);" />
    <Member Sig="uint IConvertible.ToUInt32 (IFormatProvider provider);" />
    <Member Sig="ulong IConvertible.ToUInt64 (IFormatProvider provider);" />
    <Member Sig="ushort IConvertible.ToUInt16 (IFormatProvider provider);" />
  </Type>
  <Type Name="System.UIntPtr">
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public static bool op_Equality (UIntPtr value1, UIntPtr value2);" />
    <Member Sig="public static bool op_Inequality (UIntPtr value1, UIntPtr value2);" />
    <Member Sig="public static int Size { get; }" />
    <Member Sig="public static readonly UIntPtr Zero;" />
    <Member Sig="public static uint op_Explicit (UIntPtr value);" />
    <Member Sig="public static UIntPtr op_Explicit (uint value);" />
    <Member Sig="public static UIntPtr op_Explicit (ulong value);" />
    <Member Sig="public static UIntPtr op_Explicit (void* value);" />
    <Member Sig="public static ulong op_Explicit (UIntPtr value);" />
    <Member Sig="public static void* op_Explicit (UIntPtr value);" />
    <Member Sig="public uint ToUInt32 ();" />
    <Member Sig="public UIntPtr (uint value);" />
    <Member Sig="public UIntPtr (ulong value);" />
    <Member Sig="public UIntPtr (void* value);" />
    <Member Sig="public ulong ToUInt64 ();" />
    <Member Sig="public void* ToPointer ();" />
    <Member Sig="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
  </Type>
  <Type Name="System.UnauthorizedAccessException">
    <Member Sig="protected UnauthorizedAccessException (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public UnauthorizedAccessException ();" />
    <Member Sig="public UnauthorizedAccessException (string message);" />
    <Member Sig="public UnauthorizedAccessException (string message, Exception inner);" />
  </Type>
  <Type Name="System.UnhandledExceptionEventArgs">
    <Member Sig="public bool IsTerminating { get; }" />
    <Member Sig="public object ExceptionObject { get; }" />
    <Member Sig="public UnhandledExceptionEventArgs (object exception, bool isTerminating);" />
  </Type>
  <Type Name="System.UnhandledExceptionEventHandler" />
  <Type Name="System.ValueType">
    <Member Sig="protected ValueType ();" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
  </Type>
  <Type Name="System.Version">
    <Member Sig="public bool Equals (Version obj);" />
    <Member Sig="public int Build { get; }" />
    <Member Sig="public int CompareTo (object version);" />
    <Member Sig="public int CompareTo (Version value);" />
    <Member Sig="public int Major { get; }" />
    <Member Sig="public int Minor { get; }" />
    <Member Sig="public int Revision { get; }" />
    <Member Sig="public object Clone ();" />
    <Member Sig="public override bool Equals (object obj);" />
    <Member Sig="public override int GetHashCode ();" />
    <Member Sig="public override string ToString ();" />
    <Member Sig="public short MajorRevision { get; }" />
    <Member Sig="public short MinorRevision { get; }" />
    <Member Sig="public static bool op_Equality (Version v1, Version v2);" />
    <Member Sig="public static bool op_GreaterThan (Version v1, Version v2);" />
    <Member Sig="public static bool op_GreaterThanOrEqual (Version v1, Version v2);" />
    <Member Sig="public static bool op_Inequality (Version v1, Version v2);" />
    <Member Sig="public static bool op_LessThan (Version v1, Version v2);" />
    <Member Sig="public static bool op_LessThanOrEqual (Version v1, Version v2);" />
    <Member Sig="public string ToString (int fieldCount);" />
    <Member Sig="public Version ();" />
    <Member Sig="public Version (int major, int minor);" />
    <Member Sig="public Version (int major, int minor, int build);" />
    <Member Sig="public Version (int major, int minor, int build, int revision);" />
    <Member Sig="public Version (string version);" />
  </Type>
  <Type Name="System.Void" />
  <Type Name="System.WeakReference">
    <Member Sig="~WeakReference ();" />
    <Member Sig="protected WeakReference (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public virtual bool IsAlive { get; }" />
    <Member Sig="public virtual bool TrackResurrection { get; }" />
    <Member Sig="public virtual object Target { get; set; }" />
    <Member Sig="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
    <Member Sig="public WeakReference (object target);" />
    <Member Sig="public WeakReference (object target, bool trackResurrection);" />
  </Type>
</Framework>